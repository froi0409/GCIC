// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: EtiquetadoLexer.jflex

//Secci√≥n de Importaciones
package com.froi.gcic.gramaticas.etiquetado;
import java_cup.runtime.*;
import static com.froi.gcic.gramaticas.etiquetado.EtiquetadoParserSym.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class EtiquetadoLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\u10df\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\10\26\1\27\1\30\1\31\1\32\1\33\1\0"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\46\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\46\1\65\1\0\1\66\1\0\1\67"+
    "\1\0\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116"+
    "\1\117\1\120\1\121\1\122\1\123\1\124\103\0\1\125"+
    "\7\0\1\125\3\0\1\125\5\0\1\125\6\0\1\125"+
    "\6\0\1\125\7\0\1\125\3\0\1\125\5\0\1\125"+
    "\6\0\1\125\1\0\1\125\u011b\0\2\13\346\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\3\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\2\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\1\16\21\1\22\1\23\16\21\1\24"+
    "\1\25\1\26\1\21\1\2\1\27\34\0\1\30\2\0"+
    "\1\31\2\0\1\32\1\33\1\34\1\35\1\0\2\21"+
    "\1\36\1\21\1\36\5\21\1\37\24\21\1\40\12\21"+
    "\1\41\2\0\1\42\62\0\1\43\36\0\1\44\1\45"+
    "\2\0\1\21\1\46\1\21\7\36\1\47\2\36\2\21"+
    "\1\50\6\21\1\36\6\21\1\51\17\21\1\52\5\21"+
    "\1\53\1\54\76\0\1\55\1\56\1\57\42\0\2\21"+
    "\1\36\1\60\3\36\1\61\12\36\1\62\1\63\1\64"+
    "\1\21\1\65\3\21\2\36\4\21\1\66\3\21\1\67"+
    "\2\21\1\70\5\21\1\71\1\21\1\72\1\21\1\73"+
    "\2\21\1\74\1\75\1\21\100\0\1\76\26\0\1\77"+
    "\1\0\1\100\11\0\2\21\2\36\1\101\2\36\1\102"+
    "\10\36\4\21\2\36\5\21\1\103\2\21\1\104\1\105"+
    "\1\21\1\106\1\0\5\21\1\0\1\107\76\0\1\110"+
    "\1\0\1\111\4\0\1\112\2\0\1\113\1\114\1\0"+
    "\1\115\7\0\1\116\1\117\4\0\1\36\1\21\1\120"+
    "\1\36\1\121\1\122\1\36\1\123\3\36\1\124\2\36"+
    "\1\125\1\126\2\21\2\36\2\21\1\127\5\21\2\0"+
    "\1\21\1\130\2\21\1\131\53\0\1\132\3\0\1\133"+
    "\4\0\1\134\3\0\1\135\1\0\1\136\1\137\2\0"+
    "\1\140\2\0\1\141\1\36\1\21\1\36\1\142\4\36"+
    "\1\143\1\21\2\36\1\144\2\21\1\145\2\21\1\146"+
    "\1\147\2\0\1\21\1\150\1\151\36\0\1\152\1\0"+
    "\1\153\1\0\1\154\2\0\1\155\1\156\1\157\1\0"+
    "\1\160\1\161\1\36\1\21\1\162\1\163\1\36\1\164"+
    "\1\36\1\21\3\36\1\165\2\21\2\0\1\21\15\0"+
    "\1\166\1\167\1\0\1\170\1\171\1\0\7\36\1\172"+
    "\1\173\1\21\1\0\1\174\1\21\5\0\1\175\1\0"+
    "\1\176\2\36\1\177\1\36\1\200\1\36\1\201\1\0"+
    "\1\21\1\202\3\0\1\36\1\203\2\36\1\204\1\21"+
    "\2\0\1\205\1\36\1\206\1\36\1\21\1\36\1\207"+
    "\1\21\1\36\1\210\3\36\1\211";

  private static int [] zzUnpackAction() {
    int [] result = new int[926];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\126\0\126\0\254\0\u0102\0\u0158\0\u01ae\0\126"+
    "\0\126\0\126\0\126\0\126\0\126\0\126\0\u0204\0\u025a"+
    "\0\126\0\126\0\u02b0\0\u0306\0\u035c\0\u03b2\0\u0408\0\u045e"+
    "\0\u04b4\0\u050a\0\u0560\0\u05b6\0\u060c\0\u0662\0\u06b8\0\u070e"+
    "\0\u0764\0\u07ba\0\u0810\0\u0866\0\126\0\126\0\u08bc\0\u0912"+
    "\0\u0968\0\u09be\0\u0a14\0\u0a6a\0\u0ac0\0\u0b16\0\u0b6c\0\u0bc2"+
    "\0\u0c18\0\u0c6e\0\u0cc4\0\u0d1a\0\126\0\u0d70\0\126\0\u0dc6"+
    "\0\u0e1c\0\126\0\u0e72\0\u0ec8\0\u0f1e\0\u0f74\0\u0fca\0\u1020"+
    "\0\u1076\0\u10cc\0\u1122\0\u1178\0\u11ce\0\u1224\0\u127a\0\u12d0"+
    "\0\u1326\0\u137c\0\u13d2\0\u1428\0\u147e\0\u14d4\0\u152a\0\u1580"+
    "\0\u15d6\0\u162c\0\u1682\0\u16d8\0\u172e\0\u1784\0\126\0\u17da"+
    "\0\u1830\0\u1886\0\u18dc\0\u1932\0\126\0\126\0\126\0\126"+
    "\0\u1988\0\u19de\0\u1a34\0\u1a8a\0\u1ae0\0\u1b36\0\u1b8c\0\u1be2"+
    "\0\u1c38\0\u1c8e\0\u1ce4\0\u045e\0\u1d3a\0\u1d90\0\u1de6\0\u1e3c"+
    "\0\u1e92\0\u1ee8\0\u1f3e\0\u1f94\0\u1fea\0\u2040\0\u2096\0\u20ec"+
    "\0\u2142\0\u2198\0\u21ee\0\u2244\0\u229a\0\u22f0\0\u2346\0\u239c"+
    "\0\u045e\0\u23f2\0\u2448\0\u249e\0\u24f4\0\u254a\0\u25a0\0\u25f6"+
    "\0\u264c\0\u26a2\0\u26f8\0\126\0\u274e\0\u27a4\0\126\0\u27fa"+
    "\0\u2850\0\u28a6\0\u28fc\0\u2952\0\u29a8\0\u29fe\0\u2a54\0\u2aaa"+
    "\0\u2b00\0\u2b56\0\u2bac\0\u2c02\0\u2c58\0\u2cae\0\u2d04\0\u2d5a"+
    "\0\u2db0\0\u2e06\0\u2e5c\0\u2eb2\0\u2f08\0\u2f5e\0\u2fb4\0\u300a"+
    "\0\u3060\0\u30b6\0\u310c\0\u3162\0\u31b8\0\u320e\0\u3264\0\u32ba"+
    "\0\u3310\0\u3366\0\u33bc\0\u3412\0\u3468\0\u34be\0\u3514\0\u356a"+
    "\0\u35c0\0\u3616\0\u366c\0\u36c2\0\u3718\0\u376e\0\u37c4\0\u381a"+
    "\0\u3870\0\126\0\u38c6\0\u391c\0\u3972\0\u39c8\0\u3a1e\0\u3a74"+
    "\0\u3aca\0\u3b20\0\u3b76\0\u3bcc\0\u3c22\0\u3c78\0\u3cce\0\u3d24"+
    "\0\u3d7a\0\u3dd0\0\u3e26\0\u3e7c\0\u3ed2\0\u3f28\0\u3f7e\0\u3fd4"+
    "\0\u402a\0\u4080\0\u40d6\0\u412c\0\u4182\0\u41d8\0\u422e\0\u4284"+
    "\0\126\0\126\0\u42da\0\u4330\0\u4386\0\u045e\0\u43dc\0\u4432"+
    "\0\u4488\0\u44de\0\u4534\0\u458a\0\u45e0\0\u4636\0\u1a8a\0\u468c"+
    "\0\u46e2\0\u4738\0\u478e\0\u045e\0\u47e4\0\u483a\0\u4890\0\u48e6"+
    "\0\u493c\0\u4992\0\u49e8\0\u4a3e\0\u4a94\0\u4aea\0\u4b40\0\u4b96"+
    "\0\u4bec\0\u045e\0\u4c42\0\u4c98\0\u4cee\0\u4d44\0\u4d9a\0\u4df0"+
    "\0\u4e46\0\u4e9c\0\u4ef2\0\u4f48\0\u4f9e\0\u4ff4\0\u504a\0\u50a0"+
    "\0\u50f6\0\u045e\0\u514c\0\u51a2\0\u51f8\0\u524e\0\u52a4\0\126"+
    "\0\126\0\u52fa\0\u5350\0\u53a6\0\u53fc\0\u5452\0\u54a8\0\u54fe"+
    "\0\u5554\0\u55aa\0\u5600\0\u5656\0\u56ac\0\u5702\0\u5758\0\u57ae"+
    "\0\u5804\0\u585a\0\u58b0\0\u5906\0\u595c\0\u59b2\0\u5a08\0\u5a5e"+
    "\0\u5ab4\0\u5b0a\0\u5b60\0\u5bb6\0\u5c0c\0\u5c62\0\u5cb8\0\u5d0e"+
    "\0\u5d64\0\u5dba\0\u5e10\0\u5e66\0\u5ebc\0\u5f12\0\u5f68\0\u5fbe"+
    "\0\u6014\0\u606a\0\u60c0\0\u6116\0\u616c\0\u61c2\0\u6218\0\u626e"+
    "\0\u62c4\0\u631a\0\u6370\0\u63c6\0\u641c\0\u6472\0\u64c8\0\u651e"+
    "\0\u6574\0\u65ca\0\u6620\0\u6676\0\u66cc\0\u6722\0\u6778\0\126"+
    "\0\126\0\126\0\u67ce\0\u6824\0\u687a\0\u68d0\0\u6926\0\u697c"+
    "\0\u69d2\0\u6a28\0\u6a7e\0\u6ad4\0\u6b2a\0\u6b80\0\u6bd6\0\u6c2c"+
    "\0\u6c82\0\u6cd8\0\u6d2e\0\u6d84\0\u6dda\0\u6e30\0\u6e86\0\u6edc"+
    "\0\u6f32\0\u6f88\0\u6fde\0\u7034\0\u708a\0\u70e0\0\u7136\0\u718c"+
    "\0\u71e2\0\u7238\0\u728e\0\u72e4\0\u733a\0\u7390\0\u73e6\0\u1a8a"+
    "\0\u743c\0\u7492\0\u74e8\0\u1a8a\0\u753e\0\u7594\0\u75ea\0\u7640"+
    "\0\u7696\0\u76ec\0\u7742\0\u7798\0\u77ee\0\u7844\0\u045e\0\u045e"+
    "\0\u045e\0\u789a\0\u045e\0\u78f0\0\u7946\0\u799c\0\u79f2\0\u7a48"+
    "\0\u7a9e\0\u7af4\0\u7b4a\0\u7ba0\0\u7bf6\0\u7c4c\0\u7ca2\0\u7cf8"+
    "\0\u045e\0\u7d4e\0\u7da4\0\u045e\0\u7dfa\0\u7e50\0\u7ea6\0\u7efc"+
    "\0\u7f52\0\u045e\0\u7fa8\0\u045e\0\u7ffe\0\u045e\0\u8054\0\u80aa"+
    "\0\u045e\0\u045e\0\u8100\0\u8156\0\u81ac\0\u8202\0\u8258\0\u82ae"+
    "\0\u8304\0\u835a\0\u83b0\0\u8406\0\u845c\0\u84b2\0\u8508\0\u855e"+
    "\0\u85b4\0\u860a\0\u8660\0\u86b6\0\u870c\0\u8762\0\u87b8\0\u880e"+
    "\0\u8864\0\u88ba\0\u8910\0\u8966\0\u89bc\0\u8a12\0\u8a68\0\u8abe"+
    "\0\u8b14\0\u8b6a\0\u8bc0\0\u8c16\0\u8c6c\0\u8cc2\0\u8d18\0\u8d6e"+
    "\0\u8dc4\0\u8e1a\0\u8e70\0\u8ec6\0\u8f1c\0\u8f72\0\u8fc8\0\u901e"+
    "\0\u9074\0\u90ca\0\u9120\0\u9176\0\u91cc\0\u9222\0\u9278\0\u92ce"+
    "\0\u9324\0\u937a\0\u93d0\0\u9426\0\u947c\0\u94d2\0\u9528\0\u957e"+
    "\0\u95d4\0\u962a\0\u9680\0\126\0\u96d6\0\u972c\0\u9782\0\u97d8"+
    "\0\u982e\0\u9884\0\u98da\0\u9930\0\u9986\0\u99dc\0\u9a32\0\u9a88"+
    "\0\u9ade\0\u9b34\0\u9b8a\0\u9be0\0\u9c36\0\u9c8c\0\u9ce2\0\u9d38"+
    "\0\u9d8e\0\u9de4\0\126\0\u9e3a\0\126\0\u9e90\0\u9ee6\0\u9f3c"+
    "\0\u9f92\0\u9fe8\0\ua03e\0\ua094\0\ua0ea\0\ua140\0\ua196\0\ua1ec"+
    "\0\ua242\0\ua298\0\u1a8a\0\ua2ee\0\ua344\0\u1a8a\0\ua39a\0\ua3f0"+
    "\0\ua446\0\ua49c\0\ua4f2\0\ua548\0\ua59e\0\ua5f4\0\ua64a\0\ua6a0"+
    "\0\ua6f6\0\ua74c\0\ua7a2\0\ua7f8\0\ua84e\0\ua8a4\0\ua8fa\0\ua950"+
    "\0\ua9a6\0\u045e\0\ua9fc\0\uaa52\0\u045e\0\u045e\0\uaaa8\0\u045e"+
    "\0\uaafe\0\uab54\0\uabaa\0\uac00\0\uac56\0\uacac\0\uad02\0\u045e"+
    "\0\uad58\0\uadae\0\uae04\0\uae5a\0\uaeb0\0\uaf06\0\uaf5c\0\uafb2"+
    "\0\ub008\0\ub05e\0\ub0b4\0\ub10a\0\ub160\0\ub1b6\0\ub20c\0\ub262"+
    "\0\ub2b8\0\ub30e\0\ub364\0\ub3ba\0\ub410\0\ub466\0\ub4bc\0\ub512"+
    "\0\ub568\0\ub5be\0\ub614\0\ub66a\0\ub6c0\0\ub716\0\ub76c\0\ub7c2"+
    "\0\ub818\0\ub86e\0\ub8c4\0\ub91a\0\ub970\0\ub9c6\0\uba1c\0\uba72"+
    "\0\ubac8\0\ubb1e\0\ubb74\0\ubbca\0\ubc20\0\ubc76\0\ubccc\0\ubd22"+
    "\0\ubd78\0\ubdce\0\ube24\0\ube7a\0\ubed0\0\ubf26\0\ubf7c\0\ubfd2"+
    "\0\uc028\0\uc07e\0\uc0d4\0\uc12a\0\uc180\0\uc1d6\0\126\0\uc22c"+
    "\0\126\0\uc282\0\uc2d8\0\uc32e\0\uc384\0\126\0\uc3da\0\uc430"+
    "\0\126\0\126\0\uc486\0\126\0\uc4dc\0\uc532\0\uc588\0\uc5de"+
    "\0\uc634\0\uc68a\0\uc6e0\0\126\0\126\0\uc736\0\uc78c\0\uc7e2"+
    "\0\uc838\0\uc88e\0\uc8e4\0\u1a8a\0\uc93a\0\u1a8a\0\u1a8a\0\uc990"+
    "\0\u1a8a\0\uc9e6\0\uca3c\0\uca92\0\u1a8a\0\ucae8\0\ucb3e\0\u045e"+
    "\0\u045e\0\ucb94\0\ucbea\0\ucc40\0\ucc96\0\uccec\0\ucd42\0\u045e"+
    "\0\ucd98\0\ucdee\0\uce44\0\uce9a\0\ucef0\0\ucf46\0\ucf9c\0\ucff2"+
    "\0\u045e\0\ud048\0\ud09e\0\u045e\0\ud0f4\0\ud14a\0\ud1a0\0\ud1f6"+
    "\0\ud24c\0\ud2a2\0\ud2f8\0\ud34e\0\ud3a4\0\ud3fa\0\ud450\0\ud4a6"+
    "\0\ud4fc\0\ud552\0\ud5a8\0\ud5fe\0\ud654\0\ud6aa\0\ud700\0\ud756"+
    "\0\ud7ac\0\ud802\0\ud858\0\ud8ae\0\ud904\0\ud95a\0\ud9b0\0\uda06"+
    "\0\uda5c\0\udab2\0\udb08\0\udb5e\0\udbb4\0\udc0a\0\udc60\0\udcb6"+
    "\0\udd0c\0\udd62\0\uddb8\0\ude0e\0\ude64\0\udeba\0\udf10\0\126"+
    "\0\udf66\0\udfbc\0\ue012\0\126\0\ue068\0\ue0be\0\ue114\0\ue16a"+
    "\0\126\0\ue1c0\0\ue216\0\ue26c\0\126\0\ue2c2\0\126\0\126"+
    "\0\ue318\0\ue36e\0\126\0\ue3c4\0\ue41a\0\126\0\ue470\0\ue4c6"+
    "\0\ue51c\0\u1a8a\0\ue572\0\ue5c8\0\ue61e\0\ue674\0\u1a8a\0\ue6ca"+
    "\0\ue720\0\ue776\0\u1a8a\0\ue7cc\0\ue822\0\u045e\0\ue878\0\ue8ce"+
    "\0\u045e\0\u045e\0\ue924\0\ue97a\0\ue9d0\0\u045e\0\u045e\0\uea26"+
    "\0\uea7c\0\uead2\0\ueb28\0\ueb7e\0\uebd4\0\uec2a\0\uec80\0\uecd6"+
    "\0\ued2c\0\ued82\0\uedd8\0\uee2e\0\uee84\0\ueeda\0\uef30\0\uef86"+
    "\0\uefdc\0\uf032\0\uf088\0\uf0de\0\uf134\0\uf18a\0\uf1e0\0\uf236"+
    "\0\uf28c\0\uf2e2\0\uf338\0\uf38e\0\uf3e4\0\126\0\uf43a\0\126"+
    "\0\uf490\0\126\0\uf4e6\0\uf53c\0\126\0\126\0\126\0\uf592"+
    "\0\126\0\126\0\uf5e8\0\uf63e\0\u1a8a\0\u1a8a\0\uf694\0\u1a8a"+
    "\0\uf6ea\0\uf740\0\uf796\0\uf7ec\0\uf842\0\u045e\0\uf898\0\uf8ee"+
    "\0\uf944\0\uf99a\0\uf9f0\0\ufa46\0\ufa9c\0\ufaf2\0\ufb48\0\ufb9e"+
    "\0\ufbf4\0\ufc4a\0\ufca0\0\ufcf6\0\ufd4c\0\ufda2\0\ufdf8\0\ufe4e"+
    "\0\126\0\126\0\ufea4\0\126\0\126\0\ufefa\0\uff50\0\uffa6"+
    "\0\ufffc\1\122\1\250\1\376\1\u0154\0\uf842\0\u045e\1\u01aa"+
    "\1\u0200\0\126\1\u0256\1\u02ac\1\u0302\1\u0358\1\u03ae\1\u0404"+
    "\0\126\1\u045a\0\u1a8a\1\u04b0\1\u0506\0\u1a8a\1\u055c\0\u1a8a"+
    "\1\u05b2\0\u045e\1\u0608\1\u065e\0\126\1\u06b4\1\u070a\1\u0760"+
    "\1\u07b6\0\u1a8a\1\u080c\1\u0862\0\126\1\u08b8\1\u090e\1\u0964"+
    "\0\126\1\u09ba\0\u1a8a\1\u0a10\1\u0a66\1\u0abc\0\u1a8a\1\u0b12"+
    "\1\u0b68\0\u045e\1\u0bbe\1\u0c14\1\u0c6a\0\u1a8a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[926];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\4\3\1\4\1\5\3\2\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\2\1\16\1\17"+
    "\2\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\2\30\1\34\1\35\2\30"+
    "\1\36\1\30\1\37\1\40\1\41\1\42\1\30\1\43"+
    "\2\30\1\44\2\30\1\45\1\46\1\2\1\47\1\50"+
    "\1\51\1\52\1\30\1\53\1\54\1\55\1\56\4\30"+
    "\1\57\1\60\2\30\1\61\1\62\1\63\2\30\1\64"+
    "\3\30\1\65\1\66\1\67\1\70\133\0\1\71\24\0"+
    "\1\72\73\0\1\73\1\74\1\75\1\73\1\76\1\73"+
    "\1\0\1\77\1\100\10\73\1\100\2\73\1\101\2\102"+
    "\6\73\1\103\1\100\1\104\3\100\1\105\15\100\1\106"+
    "\3\100\2\73\1\100\1\107\1\110\1\111\2\100\1\112"+
    "\1\113\2\100\1\114\1\100\1\115\1\116\1\117\1\120"+
    "\1\121\1\100\1\122\1\123\1\124\2\100\1\125\1\100"+
    "\1\126\1\100\3\73\1\100\12\0\1\127\113\0\4\130"+
    "\1\131\6\130\1\0\112\130\22\0\1\132\1\0\3\70"+
    "\6\0\30\70\3\0\32\70\3\0\1\70\22\0\1\132"+
    "\1\0\3\20\6\0\30\70\3\0\32\70\3\0\1\70"+
    "\1\0\1\133\2\0\1\133\1\134\15\0\1\135\6\0"+
    "\1\136\125\0\1\137\125\0\1\140\171\0\1\141\53\0"+
    "\3\30\6\0\13\30\1\142\5\30\1\143\6\30\2\0"+
    "\1\144\32\30\3\0\1\30\24\0\3\30\6\0\30\30"+
    "\2\0\1\144\32\30\3\0\1\30\24\0\3\30\6\0"+
    "\1\145\27\30\2\0\1\146\32\30\3\0\1\30\24\0"+
    "\3\30\6\0\4\30\1\147\23\30\2\0\1\144\32\30"+
    "\3\0\1\30\24\0\3\30\6\0\13\30\1\150\1\30"+
    "\1\151\10\30\1\152\1\30\2\0\1\144\32\30\3\0"+
    "\1\30\24\0\3\30\6\0\23\30\1\153\4\30\2\0"+
    "\1\144\32\30\3\0\1\30\24\0\3\30\6\0\5\30"+
    "\1\154\7\30\1\155\12\30\2\0\1\144\32\30\3\0"+
    "\1\30\24\0\3\30\6\0\4\30\1\156\23\30\2\0"+
    "\1\144\32\30\3\0\1\30\24\0\3\30\6\0\23\30"+
    "\1\157\4\30\2\0\1\144\32\30\3\0\1\30\24\0"+
    "\3\30\6\0\15\30\1\160\12\30\2\0\1\144\32\30"+
    "\3\0\1\30\24\0\3\30\6\0\20\30\1\161\7\30"+
    "\2\0\1\144\32\30\3\0\1\30\24\0\3\30\6\0"+
    "\4\30\1\162\23\30\2\0\1\144\32\30\3\0\1\30"+
    "\24\0\3\30\6\0\7\30\1\163\20\30\2\0\1\144"+
    "\32\30\3\0\1\30\24\0\3\30\6\0\7\30\1\164"+
    "\20\30\2\0\1\144\32\30\3\0\1\30\24\0\3\30"+
    "\6\0\30\30\2\0\1\144\13\30\1\165\16\30\3\0"+
    "\1\30\24\0\3\30\6\0\30\30\2\0\1\144\1\166"+
    "\15\30\1\167\13\30\3\0\1\30\24\0\3\30\6\0"+
    "\30\30\2\0\1\146\7\30\1\170\3\30\1\171\2\30"+
    "\1\172\13\30\3\0\1\30\24\0\3\30\6\0\30\30"+
    "\2\0\1\144\4\30\1\173\25\30\3\0\1\30\24\0"+
    "\3\30\6\0\30\30\2\0\1\144\1\174\15\30\1\175"+
    "\13\30\3\0\1\30\24\0\3\30\6\0\30\30\2\0"+
    "\1\144\4\30\1\176\25\30\3\0\1\30\24\0\3\30"+
    "\6\0\30\30\2\0\1\144\4\30\1\177\14\30\1\200"+
    "\10\30\3\0\1\30\24\0\3\30\6\0\30\30\2\0"+
    "\1\144\3\30\1\201\11\30\1\202\14\30\3\0\1\30"+
    "\24\0\3\30\6\0\30\30\2\0\1\144\1\203\31\30"+
    "\3\0\1\30\24\0\3\30\6\0\30\30\2\0\1\144"+
    "\15\30\1\204\14\30\3\0\1\30\24\0\3\30\6\0"+
    "\30\30\2\0\1\144\16\30\1\205\13\30\3\0\1\30"+
    "\24\0\3\30\6\0\30\30\2\0\1\144\21\30\1\206"+
    "\1\30\1\207\6\30\3\0\1\30\24\0\3\30\6\0"+
    "\30\30\2\0\1\144\4\30\1\210\14\30\1\211\6\30"+
    "\1\212\1\30\3\0\1\30\24\0\3\30\6\0\30\30"+
    "\2\0\1\144\10\30\1\213\21\30\3\0\1\30\123\0"+
    "\1\214\26\0\3\70\6\0\30\70\3\0\32\70\3\0"+
    "\1\70\2\71\2\0\122\71\2\215\1\216\1\215\1\216"+
    "\1\215\1\217\120\215\1\220\1\216\1\215\1\221\1\215"+
    "\1\217\1\222\14\215\1\223\2\224\6\215\1\225\1\215"+
    "\1\226\3\215\1\227\15\215\1\230\6\215\1\231\1\232"+
    "\1\233\2\215\1\234\1\235\2\215\1\236\1\215\1\237"+
    "\1\240\1\241\1\242\1\243\1\215\1\244\1\245\1\246"+
    "\2\215\1\247\1\215\1\250\5\215\6\216\1\217\120\216"+
    "\1\221\2\216\1\221\1\216\1\217\1\251\14\216\1\252"+
    "\2\253\6\216\1\254\1\216\1\255\3\216\1\256\15\216"+
    "\1\257\6\216\1\260\1\261\1\262\2\216\1\263\1\264"+
    "\2\216\1\265\1\216\1\266\1\267\1\270\1\271\1\272"+
    "\1\216\1\273\1\274\1\275\2\216\1\276\1\216\1\277"+
    "\5\216\2\215\1\216\1\215\1\216\1\215\1\217\15\215"+
    "\3\300\6\215\6\300\25\215\6\300\32\215\1\216\1\215"+
    "\1\216\1\215\1\217\1\215\1\301\10\215\1\301\2\215"+
    "\3\301\6\215\30\301\2\215\33\301\3\215\1\301\1\215"+
    "\1\223\1\216\1\215\1\252\1\215\1\302\1\215\1\301"+
    "\1\303\7\215\1\301\2\215\3\301\6\215\17\301\1\304"+
    "\10\301\2\215\20\301\1\304\12\301\3\215\1\301\1\215"+
    "\1\223\1\216\1\215\1\252\1\215\1\302\1\215\1\301"+
    "\1\303\7\215\1\301\2\215\3\102\6\215\17\301\1\304"+
    "\10\301\2\215\20\301\1\304\12\301\3\215\1\301\2\215"+
    "\1\216\1\215\1\216\1\215\1\217\1\215\1\301\10\215"+
    "\1\301\2\215\3\301\6\215\30\301\2\215\22\301\1\305"+
    "\10\301\3\215\1\301\2\215\1\216\1\215\1\216\1\215"+
    "\1\217\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\17\301\1\306\13\301\3\215\1\301\2\215"+
    "\1\216\1\215\1\216\1\215\1\217\1\215\1\301\10\215"+
    "\1\301\2\215\3\301\6\215\30\301\2\215\5\301\1\307"+
    "\25\301\3\215\1\301\2\215\1\216\1\215\1\216\1\215"+
    "\1\217\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\5\301\1\310\25\301\3\215\1\301\2\215"+
    "\1\216\1\215\1\216\1\215\1\217\1\215\1\301\10\215"+
    "\1\301\2\215\3\301\6\215\30\301\2\215\21\301\1\311"+
    "\11\301\3\215\1\301\2\215\1\216\1\215\1\216\1\215"+
    "\1\217\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\14\301\1\312\16\301\3\215\1\301\2\215"+
    "\1\216\1\215\1\216\1\215\1\217\1\215\1\301\10\215"+
    "\1\301\2\215\3\301\6\215\30\301\2\215\5\301\1\313"+
    "\2\301\1\314\6\301\1\315\13\301\3\215\1\301\2\215"+
    "\1\216\1\215\1\216\1\215\1\217\1\215\1\301\10\215"+
    "\1\301\2\215\3\301\6\215\30\301\2\215\25\301\1\316"+
    "\5\301\3\215\1\301\2\215\1\216\1\215\1\216\1\215"+
    "\1\217\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\22\301\1\317\10\301\3\215\1\301\2\215"+
    "\1\216\1\215\1\216\1\215\1\217\1\215\1\301\10\215"+
    "\1\301\2\215\3\301\6\215\30\301\2\215\25\301\1\320"+
    "\5\301\3\215\1\301\2\215\1\216\1\215\1\216\1\215"+
    "\1\217\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\5\301\1\321\3\301\1\322\21\301\3\215"+
    "\1\301\2\215\1\216\1\215\1\216\1\215\1\217\1\215"+
    "\1\301\10\215\1\301\2\215\3\301\6\215\30\301\2\215"+
    "\1\301\1\323\31\301\3\215\1\301\2\215\1\216\1\215"+
    "\1\216\1\215\1\217\1\215\1\301\10\215\1\301\2\215"+
    "\3\301\6\215\30\301\2\215\1\301\1\324\23\301\1\325"+
    "\5\301\3\215\1\301\2\215\1\216\1\215\1\216\1\215"+
    "\1\217\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\14\301\1\326\16\301\3\215\1\301\2\215"+
    "\1\216\1\215\1\216\1\215\1\217\1\215\1\301\10\215"+
    "\1\301\2\215\3\301\6\215\30\301\2\215\25\301\1\327"+
    "\5\301\3\215\1\301\2\215\1\216\1\215\1\216\1\215"+
    "\1\217\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\1\301\1\330\3\301\1\331\3\301\1\332"+
    "\5\301\1\333\13\301\3\215\1\301\2\215\1\216\1\215"+
    "\1\216\1\215\1\217\1\215\1\301\10\215\1\301\2\215"+
    "\3\301\6\215\30\301\2\215\1\301\1\334\7\301\1\335"+
    "\21\301\3\215\1\301\2\215\1\216\1\215\1\216\1\215"+
    "\1\217\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\5\301\1\336\25\301\3\215\1\301\2\215"+
    "\1\216\1\215\1\216\1\215\1\217\1\215\1\301\10\215"+
    "\1\301\2\215\3\301\6\215\30\301\2\215\10\301\1\337"+
    "\22\301\3\215\1\301\2\215\1\216\1\215\1\216\1\215"+
    "\1\217\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\5\301\1\340\25\301\3\215\1\301\13\131"+
    "\1\341\125\131\1\342\112\131\24\0\3\132\100\0\1\133"+
    "\2\0\1\133\16\0\1\135\123\0\1\343\207\0\1\344"+
    "\46\0\3\30\6\0\4\30\1\345\23\30\2\0\1\144"+
    "\32\30\3\0\1\30\24\0\3\30\6\0\2\30\1\346"+
    "\25\30\2\0\1\144\32\30\3\0\1\30\24\0\3\144"+
    "\6\0\30\144\2\0\33\144\3\0\1\144\24\0\3\30"+
    "\6\0\20\30\1\347\7\30\2\0\1\144\32\30\3\0"+
    "\1\30\24\0\3\144\6\0\1\144\1\350\1\144\1\351"+
    "\2\144\1\352\1\353\1\354\2\144\1\355\2\144\1\356"+
    "\1\357\1\144\1\360\1\361\5\144\2\0\2\144\1\350"+
    "\1\144\1\351\2\144\1\352\1\353\1\354\2\144\1\355"+
    "\2\144\1\356\1\357\2\144\1\360\1\361\6\144\3\0"+
    "\1\144\24\0\3\30\6\0\21\30\1\362\6\30\2\0"+
    "\1\144\32\30\3\0\1\30\24\0\3\30\6\0\21\30"+
    "\1\363\6\30\2\0\1\144\32\30\3\0\1\30\24\0"+
    "\3\30\6\0\3\30\1\364\24\30\2\0\1\144\32\30"+
    "\3\0\1\30\24\0\3\30\6\0\10\30\1\365\17\30"+
    "\2\0\1\144\32\30\3\0\1\30\24\0\3\30\6\0"+
    "\15\30\1\366\12\30\2\0\1\144\32\30\3\0\1\30"+
    "\24\0\3\30\6\0\10\30\1\367\10\30\1\370\6\30"+
    "\2\0\1\144\32\30\3\0\1\30\24\0\3\30\6\0"+
    "\22\30\1\371\5\30\2\0\1\144\32\30\3\0\1\30"+
    "\24\0\3\30\6\0\14\30\1\372\13\30\2\0\1\144"+
    "\32\30\3\0\1\30\24\0\3\30\6\0\30\30\2\0"+
    "\1\373\32\30\3\0\1\30\24\0\3\30\6\0\16\30"+
    "\1\374\11\30\2\0\1\144\32\30\3\0\1\30\24\0"+
    "\3\30\6\0\3\30\1\375\13\30\1\376\4\30\1\377"+
    "\3\30\2\0\1\144\32\30\3\0\1\30\24\0\3\30"+
    "\6\0\4\30\1\u0100\23\30\2\0\1\144\32\30\3\0"+
    "\1\30\24\0\3\30\6\0\10\30\1\u0101\17\30\2\0"+
    "\1\144\32\30\3\0\1\30\24\0\3\30\6\0\30\30"+
    "\2\0\1\144\23\30\1\u0102\6\30\3\0\1\30\24\0"+
    "\3\30\6\0\30\30\2\0\1\144\2\30\1\u0103\27\30"+
    "\3\0\1\30\24\0\3\30\6\0\30\30\2\0\1\144"+
    "\16\30\1\u0104\13\30\3\0\1\30\24\0\3\30\6\0"+
    "\30\30\2\0\1\144\1\u0105\31\30\3\0\1\30\24\0"+
    "\3\30\6\0\30\30\2\0\1\144\1\u0106\31\30\3\0"+
    "\1\30\24\0\3\30\6\0\30\30\2\0\1\144\13\30"+
    "\1\u0107\16\30\3\0\1\30\24\0\3\30\6\0\30\30"+
    "\2\0\1\144\2\30\1\u0108\27\30\3\0\1\30\24\0"+
    "\3\30\6\0\30\30\2\0\1\144\13\30\1\u0109\16\30"+
    "\3\0\1\30\24\0\3\30\6\0\30\30\2\0\1\144"+
    "\15\30\1\u010a\14\30\3\0\1\30\24\0\3\30\6\0"+
    "\30\30\2\0\1\144\23\30\1\u010b\6\30\3\0\1\30"+
    "\24\0\3\30\6\0\30\30\2\0\1\144\10\30\1\u010c"+
    "\21\30\3\0\1\30\24\0\3\30\6\0\30\30\2\0"+
    "\1\144\4\30\1\u010d\25\30\3\0\1\30\24\0\3\30"+
    "\6\0\30\30\2\0\1\144\23\30\1\u010e\6\30\3\0"+
    "\1\30\24\0\3\30\6\0\30\30\2\0\1\144\14\30"+
    "\1\u010f\15\30\3\0\1\30\24\0\3\30\6\0\30\30"+
    "\2\0\1\144\2\30\1\u0110\27\30\3\0\1\30\24\0"+
    "\3\30\6\0\30\30\2\0\1\144\26\30\1\u0111\3\30"+
    "\3\0\1\30\24\0\3\30\6\0\30\30\2\0\1\144"+
    "\2\30\1\u0112\27\30\3\0\1\30\24\0\3\30\6\0"+
    "\30\30\2\0\1\144\21\30\1\u0113\10\30\3\0\1\30"+
    "\24\0\3\30\6\0\30\30\2\0\1\144\27\30\1\u0114"+
    "\2\30\3\0\1\30\24\0\3\30\6\0\30\30\2\0"+
    "\1\144\24\30\1\u0115\5\30\3\0\1\30\24\0\3\30"+
    "\6\0\30\30\2\0\1\144\17\30\1\u0116\12\30\3\0"+
    "\1\30\24\0\3\30\6\0\30\30\2\0\1\144\3\30"+
    "\1\u0117\26\30\3\0\1\30\2\215\1\216\1\215\1\216"+
    "\1\215\1\u0118\117\215\6\216\1\u0119\117\216\1\215\1\220"+
    "\1\216\1\215\1\221\1\215\1\u0118\1\222\14\215\1\223"+
    "\2\224\6\215\1\225\1\215\1\226\3\215\1\227\15\215"+
    "\1\230\6\215\1\231\1\232\1\233\2\215\1\234\1\235"+
    "\2\215\1\236\1\215\1\237\1\240\1\241\1\242\1\243"+
    "\1\215\1\244\1\245\1\246\2\215\1\247\1\215\1\250"+
    "\5\215\1\216\1\221\2\216\1\221\1\216\1\u0119\1\251"+
    "\14\216\1\252\2\253\6\216\1\254\1\216\1\255\3\216"+
    "\1\256\15\216\1\257\6\216\1\260\1\261\1\262\2\216"+
    "\1\263\1\264\2\216\1\265\1\216\1\266\1\267\1\270"+
    "\1\271\1\272\1\216\1\273\1\274\1\275\2\216\1\276"+
    "\1\216\1\277\5\216\2\215\1\216\1\215\1\216\1\215"+
    "\1\u0118\15\215\3\300\6\215\6\300\25\215\6\300\31\215"+
    "\1\223\1\216\1\215\1\252\1\215\1\302\2\215\1\303"+
    "\42\215\1\u011a\32\215\1\u011a\17\215\1\223\1\216\1\215"+
    "\1\252\1\215\1\302\2\215\1\303\12\215\3\224\25\215"+
    "\1\u011a\32\215\1\u011a\20\215\1\216\1\215\1\216\1\215"+
    "\1\u0118\102\215\1\u011b\16\215\1\216\1\215\1\216\1\215"+
    "\1\u0118\77\215\1\u011c\21\215\1\216\1\215\1\216\1\215"+
    "\1\u0118\65\215\1\u011d\33\215\1\216\1\215\1\216\1\215"+
    "\1\u0118\65\215\1\u011e\33\215\1\216\1\215\1\216\1\215"+
    "\1\u0118\101\215\1\u011f\17\215\1\216\1\215\1\216\1\215"+
    "\1\u0118\74\215\1\u0120\24\215\1\216\1\215\1\216\1\215"+
    "\1\u0118\65\215\1\u0121\2\215\1\u0122\6\215\1\u0123\21\215"+
    "\1\216\1\215\1\216\1\215\1\u0118\105\215\1\u0124\13\215"+
    "\1\216\1\215\1\216\1\215\1\u0118\102\215\1\u0125\16\215"+
    "\1\216\1\215\1\216\1\215\1\u0118\105\215\1\u0126\13\215"+
    "\1\216\1\215\1\216\1\215\1\u0118\65\215\1\u0127\3\215"+
    "\1\u0128\27\215\1\216\1\215\1\216\1\215\1\u0118\61\215"+
    "\1\u0129\37\215\1\216\1\215\1\216\1\215\1\u0118\61\215"+
    "\1\u012a\23\215\1\u012b\13\215\1\216\1\215\1\216\1\215"+
    "\1\u0118\74\215\1\u012c\24\215\1\216\1\215\1\216\1\215"+
    "\1\u0118\105\215\1\u012d\13\215\1\216\1\215\1\216\1\215"+
    "\1\u0118\61\215\1\u012e\3\215\1\u012f\3\215\1\u0130\5\215"+
    "\1\u0131\21\215\1\216\1\215\1\216\1\215\1\u0118\61\215"+
    "\1\u0132\7\215\1\u0133\27\215\1\216\1\215\1\216\1\215"+
    "\1\u0118\65\215\1\u0134\33\215\1\216\1\215\1\216\1\215"+
    "\1\u0118\70\215\1\u0135\30\215\1\216\1\215\1\216\1\215"+
    "\1\u0118\65\215\1\u0136\31\215\6\216\1\u0119\15\216\3\u0137"+
    "\6\216\6\u0137\25\216\6\u0137\31\216\1\252\2\216\1\252"+
    "\1\216\1\302\2\216\1\u0138\42\216\1\u0139\32\216\1\u0139"+
    "\17\216\1\252\2\216\1\252\1\216\1\302\2\216\1\u0138"+
    "\12\216\3\253\25\216\1\u0139\32\216\1\u0139\24\216\1\u0119"+
    "\102\216\1\u013a\22\216\1\u0119\77\216\1\u013b\25\216\1\u0119"+
    "\65\216\1\u013c\37\216\1\u0119\65\216\1\u013d\37\216\1\u0119"+
    "\101\216\1\u013e\23\216\1\u0119\74\216\1\u013f\30\216\1\u0119"+
    "\65\216\1\u0140\2\216\1\u0141\6\216\1\u0142\25\216\1\u0119"+
    "\105\216\1\u0143\17\216\1\u0119\102\216\1\u0144\22\216\1\u0119"+
    "\105\216\1\u0145\17\216\1\u0119\65\216\1\u0146\3\216\1\u0147"+
    "\33\216\1\u0119\61\216\1\u0148\43\216\1\u0119\61\216\1\u0149"+
    "\23\216\1\u014a\17\216\1\u0119\74\216\1\u014b\30\216\1\u0119"+
    "\105\216\1\u014c\17\216\1\u0119\61\216\1\u014d\3\216\1\u014e"+
    "\3\216\1\u014f\5\216\1\u0150\25\216\1\u0119\61\216\1\u0151"+
    "\7\216\1\u0152\33\216\1\u0119\65\216\1\u0153\37\216\1\u0119"+
    "\70\216\1\u0154\34\216\1\u0119\65\216\1\u0155\31\216\1\215"+
    "\1\u0156\1\216\1\215\1\u0157\1\215\1\u0158\15\215\3\300"+
    "\6\215\6\300\25\215\6\300\32\215\1\216\1\215\1\216"+
    "\1\215\1\u0159\1\215\1\301\10\215\1\301\2\215\3\301"+
    "\6\215\30\301\2\215\33\301\3\215\1\301\1\215\1\303"+
    "\1\216\1\215\1\u0138\1\215\1\u015a\121\215\1\216\1\215"+
    "\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301\2\215"+
    "\3\301\6\215\26\301\1\u015b\1\301\2\215\30\301\1\u015b"+
    "\2\301\3\215\1\301\2\215\1\216\1\215\1\216\1\215"+
    "\1\u0159\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\11\301\1\u015c\21\301\3\215\1\301\2\215"+
    "\1\216\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215"+
    "\1\301\2\215\3\301\6\215\30\301\2\215\25\301\1\u015d"+
    "\5\301\3\215\1\301\2\215\1\216\1\215\1\216\1\215"+
    "\1\u0159\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\16\301\1\u015e\14\301\3\215\1\301\2\215"+
    "\1\216\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215"+
    "\1\301\2\215\3\301\6\215\30\301\2\215\22\301\1\u015f"+
    "\10\301\3\215\1\301\2\215\1\216\1\215\1\216\1\215"+
    "\1\u0159\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\25\301\1\u0160\5\301\3\215\1\301\2\215"+
    "\1\216\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215"+
    "\1\301\2\215\3\301\6\215\30\301\2\215\1\301\1\u0161"+
    "\23\301\1\u0162\5\301\3\215\1\301\2\215\1\216\1\215"+
    "\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301\2\215"+
    "\3\301\6\215\30\301\2\215\16\301\1\u0163\14\301\3\215"+
    "\1\301\2\215\1\216\1\215\1\216\1\215\1\u0159\1\215"+
    "\1\301\10\215\1\301\2\215\3\301\6\215\30\301\2\215"+
    "\5\301\1\u0164\25\301\3\215\1\301\2\215\1\216\1\215"+
    "\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301\2\215"+
    "\3\301\6\215\30\301\2\215\14\301\1\u0165\16\301\3\215"+
    "\1\301\2\215\1\216\1\215\1\216\1\215\1\u0159\1\215"+
    "\1\301\10\215\1\301\2\215\3\301\6\215\30\301\2\215"+
    "\3\301\1\u0166\27\301\3\215\1\301\2\215\1\216\1\215"+
    "\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301\2\215"+
    "\3\301\6\215\30\301\2\215\1\301\1\u0167\3\301\1\u0168"+
    "\25\301\3\215\1\301\2\215\1\216\1\215\1\216\1\215"+
    "\1\u0159\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\23\301\1\u0169\7\301\3\215\1\301\2\215"+
    "\1\216\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215"+
    "\1\301\2\215\3\301\6\215\30\301\2\215\6\301\1\u016a"+
    "\24\301\3\215\1\301\2\215\1\216\1\215\1\216\1\215"+
    "\1\u0159\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\15\301\1\u016b\15\301\3\215\1\301\2\215"+
    "\1\216\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215"+
    "\1\301\2\215\3\301\6\215\30\301\2\215\22\301\1\u016c"+
    "\10\301\3\215\1\301\2\215\1\216\1\215\1\216\1\215"+
    "\1\u0159\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\26\301\1\u016d\4\301\3\215\1\301\2\215"+
    "\1\216\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215"+
    "\1\301\2\215\3\301\6\215\30\301\2\215\15\301\1\u016e"+
    "\15\301\3\215\1\301\2\215\1\216\1\215\1\216\1\215"+
    "\1\u0159\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\11\301\1\u016f\21\301\3\215\1\301\2\215"+
    "\1\216\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215"+
    "\1\301\2\215\3\301\6\215\30\301\2\215\22\301\1\u0170"+
    "\10\301\3\215\1\301\2\215\1\216\1\215\1\216\1\215"+
    "\1\u0159\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\4\301\1\u0171\26\301\3\215\1\301\2\215"+
    "\1\216\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215"+
    "\1\301\2\215\3\301\6\215\30\301\2\215\4\301\1\u0172"+
    "\26\301\3\215\1\301\2\215\1\216\1\215\1\216\1\215"+
    "\1\u0159\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\7\301\1\u0173\23\301\3\215\1\301\2\215"+
    "\1\216\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215"+
    "\1\301\2\215\3\301\6\215\30\301\2\215\27\301\1\u0174"+
    "\3\301\3\215\1\301\2\215\1\216\1\215\1\216\1\215"+
    "\1\u0159\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\16\301\1\u0175\14\301\3\215\1\301\2\215"+
    "\1\216\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215"+
    "\1\301\2\215\3\301\6\215\30\301\2\215\14\301\1\u0176"+
    "\16\301\3\215\1\301\2\215\1\216\1\215\1\216\1\215"+
    "\1\u0159\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\1\301\1\u0177\26\301\1\u0178\2\301\3\215"+
    "\1\301\2\215\1\216\1\215\1\216\1\215\1\u0159\1\215"+
    "\1\301\10\215\1\301\2\215\3\301\6\215\30\301\2\215"+
    "\11\301\1\u0179\21\301\3\215\1\301\2\215\1\216\1\215"+
    "\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301\2\215"+
    "\3\301\6\215\30\301\2\215\14\301\1\u017a\16\301\3\215"+
    "\1\301\21\0\1\u017b\212\0\1\u017c\43\0\3\30\6\0"+
    "\20\30\1\u017d\7\30\2\0\1\144\32\30\3\0\1\30"+
    "\24\0\3\30\6\0\1\u017e\27\30\2\0\1\144\32\30"+
    "\3\0\1\30\24\0\3\144\6\0\16\144\1\u017f\1\144"+
    "\1\u0180\2\144\1\u0181\4\144\2\0\17\144\1\u017f\2\144"+
    "\1\u0180\2\144\1\u0181\5\144\3\0\1\144\24\0\3\144"+
    "\6\0\10\144\1\u0182\17\144\2\0\11\144\1\u0182\21\144"+
    "\3\0\1\144\24\0\3\144\6\0\2\144\1\u0183\25\144"+
    "\2\0\3\144\1\u0183\27\144\3\0\1\144\24\0\1\144"+
    "\1\u0184\1\144\6\0\4\144\1\u0185\23\144\2\0\5\144"+
    "\1\u0185\25\144\3\0\1\144\24\0\3\144\6\0\14\144"+
    "\1\u0186\1\u0187\12\144\2\0\15\144\1\u0186\1\u0187\14\144"+
    "\3\0\1\144\24\0\3\144\6\0\10\144\1\u0188\17\144"+
    "\2\0\11\144\1\u0188\21\144\3\0\1\144\24\0\3\144"+
    "\6\0\17\144\1\u0189\10\144\2\0\20\144\1\u0189\12\144"+
    "\3\0\1\144\24\0\3\144\6\0\2\144\1\u018a\1\144"+
    "\1\u018b\12\144\1\u018c\10\144\2\0\3\144\1\u018a\1\144"+
    "\1\u018b\12\144\1\u018c\12\144\3\0\1\144\24\0\3\144"+
    "\6\0\4\144\1\u018d\3\144\1\u018e\17\144\2\0\5\144"+
    "\1\u018d\3\144\1\u018e\21\144\3\0\1\144\24\0\3\30"+
    "\6\0\2\30\1\u018f\25\30\2\0\1\144\32\30\3\0"+
    "\1\30\24\0\3\30\6\0\4\30\1\u0190\23\30\2\0"+
    "\1\144\32\30\3\0\1\30\24\0\3\30\6\0\22\30"+
    "\1\u0191\5\30\2\0\1\144\32\30\3\0\1\30\24\0"+
    "\3\30\6\0\22\30\1\u0192\5\30\2\0\1\144\32\30"+
    "\3\0\1\30\24\0\3\30\6\0\22\30\1\u0193\5\30"+
    "\2\0\1\144\32\30\3\0\1\30\24\0\3\30\6\0"+
    "\4\30\1\u0194\23\30\2\0\1\144\32\30\3\0\1\30"+
    "\24\0\3\30\6\0\10\30\1\u0195\6\30\1\u0196\10\30"+
    "\2\0\1\144\32\30\3\0\1\30\24\0\3\30\6\0"+
    "\30\30\2\0\1\u0197\32\30\3\0\1\30\24\0\3\144"+
    "\6\0\13\144\1\u0198\14\144\2\0\33\144\3\0\1\144"+
    "\24\0\3\30\6\0\2\30\1\u0199\25\30\2\0\1\144"+
    "\32\30\3\0\1\30\24\0\3\30\6\0\10\30\1\u019a"+
    "\17\30\2\0\1\144\32\30\3\0\1\30\24\0\3\30"+
    "\6\0\4\30\1\u019b\23\30\2\0\1\144\32\30\3\0"+
    "\1\30\24\0\3\30\6\0\4\30\1\u019c\23\30\2\0"+
    "\1\144\32\30\3\0\1\30\24\0\3\30\6\0\15\30"+
    "\1\u019d\12\30\2\0\1\144\32\30\3\0\1\30\24\0"+
    "\3\30\6\0\13\30\1\u019e\14\30\2\0\1\144\32\30"+
    "\3\0\1\30\24\0\3\30\6\0\30\30\2\0\1\144"+
    "\12\30\1\u019f\17\30\3\0\1\30\24\0\3\30\6\0"+
    "\30\30\2\0\1\144\13\30\1\u01a0\16\30\3\0\1\30"+
    "\24\0\3\30\6\0\30\30\2\0\1\144\21\30\1\u01a1"+
    "\10\30\3\0\1\30\24\0\3\30\6\0\30\30\2\0"+
    "\1\144\22\30\1\u01a2\7\30\3\0\1\30\24\0\3\30"+
    "\6\0\30\30\2\0\1\144\16\30\1\u01a3\3\30\1\u01a4"+
    "\7\30\3\0\1\30\24\0\3\30\6\0\30\30\2\0"+
    "\1\144\10\30\1\u01a5\21\30\3\0\1\30\24\0\3\30"+
    "\6\0\30\30\2\0\1\144\22\30\1\u01a6\7\30\3\0"+
    "\1\30\24\0\3\30\6\0\30\30\2\0\1\144\23\30"+
    "\1\u01a7\6\30\3\0\1\30\24\0\3\30\6\0\4\30"+
    "\1\u01a8\23\30\2\0\1\144\32\30\3\0\1\30\24\0"+
    "\3\30\6\0\30\30\2\0\1\144\6\30\1\u01a9\23\30"+
    "\3\0\1\30\24\0\3\30\6\0\30\30\2\0\1\144"+
    "\5\30\1\u01aa\24\30\3\0\1\30\24\0\3\30\6\0"+
    "\30\30\2\0\1\144\4\30\1\u01ab\25\30\3\0\1\30"+
    "\24\0\3\30\6\0\30\30\2\0\1\144\4\30\1\u01ac"+
    "\25\30\3\0\1\30\24\0\3\30\6\0\30\30\2\0"+
    "\1\144\13\30\1\u01ad\16\30\3\0\1\30\24\0\3\30"+
    "\6\0\30\30\2\0\1\144\22\30\1\u01ae\7\30\3\0"+
    "\1\30\24\0\3\30\6\0\30\30\2\0\1\144\10\30"+
    "\1\u01af\21\30\3\0\1\30\24\0\3\30\6\0\30\30"+
    "\2\0\1\144\23\30\1\u01b0\6\30\3\0\1\30\24\0"+
    "\3\30\6\0\30\30\2\0\1\144\4\30\1\u01b1\25\30"+
    "\3\0\1\30\24\0\3\30\6\0\30\30\2\0\1\144"+
    "\4\30\1\u01b2\25\30\3\0\1\30\24\0\3\30\6\0"+
    "\30\30\2\0\1\144\23\30\1\u01b3\6\30\3\0\1\30"+
    "\2\215\1\216\1\215\1\216\1\215\1\u0118\54\215\1\u01b4"+
    "\33\215\1\u01b4\10\215\1\216\1\215\1\216\1\215\1\u0118"+
    "\71\215\1\u01b5\27\215\1\216\1\215\1\216\1\215\1\u0118"+
    "\105\215\1\u01b6\13\215\1\216\1\215\1\216\1\215\1\u0118"+
    "\76\215\1\u01b7\22\215\1\216\1\215\1\216\1\215\1\u0118"+
    "\102\215\1\u01b8\16\215\1\216\1\215\1\216\1\215\1\u0118"+
    "\105\215\1\u01b9\13\215\1\216\1\215\1\216\1\215\1\u0118"+
    "\61\215\1\u01ba\23\215\1\u01bb\13\215\1\216\1\215\1\216"+
    "\1\215\1\u0118\76\215\1\u01bc\22\215\1\216\1\215\1\216"+
    "\1\215\1\u0118\65\215\1\u01bd\33\215\1\216\1\215\1\216"+
    "\1\215\1\u0118\74\215\1\u01be\24\215\1\216\1\215\1\216"+
    "\1\215\1\u0118\63\215\1\u01bf\35\215\1\216\1\215\1\216"+
    "\1\215\1\u0118\61\215\1\u01c0\3\215\1\u01c1\33\215\1\216"+
    "\1\215\1\216\1\215\1\u0118\103\215\1\u01c2\15\215\1\216"+
    "\1\215\1\216\1\215\1\u0118\66\215\1\u01c3\32\215\1\216"+
    "\1\215\1\216\1\215\1\u0118\75\215\1\u01c4\23\215\1\216"+
    "\1\215\1\216\1\215\1\u0118\102\215\1\u01c5\16\215\1\216"+
    "\1\215\1\216\1\215\1\u0118\106\215\1\u01c6\12\215\1\216"+
    "\1\215\1\216\1\215\1\u0118\75\215\1\u01c7\23\215\1\216"+
    "\1\215\1\216\1\215\1\u0118\71\215\1\u01c8\27\215\1\216"+
    "\1\215\1\216\1\215\1\u0118\102\215\1\u01c9\16\215\1\216"+
    "\1\215\1\216\1\215\1\u0118\64\215\1\u01ca\34\215\1\216"+
    "\1\215\1\216\1\215\1\u0118\64\215\1\u01cb\34\215\1\216"+
    "\1\215\1\216\1\215\1\u0118\67\215\1\u01cc\31\215\1\216"+
    "\1\215\1\216\1\215\1\u0118\107\215\1\u01cd\11\215\1\216"+
    "\1\215\1\216\1\215\1\u0118\76\215\1\u01ce\22\215\1\216"+
    "\1\215\1\216\1\215\1\u0118\74\215\1\u01cf\24\215\1\216"+
    "\1\215\1\216\1\215\1\u0118\61\215\1\u01d0\26\215\1\u01d1"+
    "\10\215\1\216\1\215\1\216\1\215\1\u0118\71\215\1\u01d2"+
    "\27\215\1\216\1\215\1\216\1\215\1\u0118\74\215\1\u01d3"+
    "\22\215\1\216\1\u0157\2\216\1\u0157\1\216\1\u0158\15\216"+
    "\3\u0137\6\216\6\u0137\25\216\6\u0137\31\216\1\u0138\2\216"+
    "\1\u0138\1\216\1\u015a\125\216\1\u0119\54\216\1\u01d4\33\216"+
    "\1\u01d4\14\216\1\u0119\71\216\1\u01d5\33\216\1\u0119\105\216"+
    "\1\u01d6\17\216\1\u0119\76\216\1\u01d7\26\216\1\u0119\102\216"+
    "\1\u01d8\22\216\1\u0119\105\216\1\u01d9\17\216\1\u0119\61\216"+
    "\1\u01da\23\216\1\u01db\17\216\1\u0119\76\216\1\u01dc\26\216"+
    "\1\u0119\65\216\1\u01dd\37\216\1\u0119\74\216\1\u01de\30\216"+
    "\1\u0119\63\216\1\u01df\41\216\1\u0119\61\216\1\u01e0\3\216"+
    "\1\u01e1\37\216\1\u0119\103\216\1\u01e2\21\216\1\u0119\66\216"+
    "\1\u01e3\36\216\1\u0119\75\216\1\u01e4\27\216\1\u0119\102\216"+
    "\1\u01e5\22\216\1\u0119\106\216\1\u01e6\16\216\1\u0119\75\216"+
    "\1\u01e7\27\216\1\u0119\71\216\1\u01e8\33\216\1\u0119\102\216"+
    "\1\u01e9\22\216\1\u0119\64\216\1\u01ea\40\216\1\u0119\64\216"+
    "\1\u01eb\40\216\1\u0119\67\216\1\u01ec\35\216\1\u0119\107\216"+
    "\1\u01ed\15\216\1\u0119\76\216\1\u01ee\26\216\1\u0119\74\216"+
    "\1\u01ef\30\216\1\u0119\61\216\1\u01f0\26\216\1\u01f1\14\216"+
    "\1\u0119\71\216\1\u01f2\33\216\1\u0119\74\216\1\u01f3\22\216"+
    "\1\215\1\u0156\1\216\1\215\1\u0157\1\215\1\u0158\117\215"+
    "\1\216\1\u0157\2\216\1\u0157\1\216\1\u0158\117\216\1\215"+
    "\1\u01b4\1\216\1\215\1\u01d4\1\215\1\u01f4\1\215\1\301"+
    "\10\215\1\301\2\215\3\301\6\215\30\301\2\215\33\301"+
    "\3\215\1\301\2\215\1\216\1\215\1\216\1\215\1\u0159"+
    "\1\215\1\301\10\215\1\301\2\215\3\301\6\215\30\301"+
    "\2\215\1\301\1\u01f5\31\301\3\215\1\301\2\215\1\216"+
    "\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301"+
    "\2\215\3\301\6\215\30\301\2\215\22\301\1\u01f6\10\301"+
    "\3\215\1\301\2\215\1\216\1\215\1\216\1\215\1\u0159"+
    "\1\215\1\301\10\215\1\301\2\215\3\301\6\215\30\301"+
    "\2\215\5\301\1\u01f7\25\301\3\215\1\301\2\215\1\216"+
    "\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301"+
    "\2\215\3\301\6\215\30\301\2\215\4\301\1\u01f8\26\301"+
    "\3\215\1\301\2\215\1\216\1\215\1\216\1\215\1\u0159"+
    "\1\215\1\301\10\215\1\301\2\215\3\301\6\215\30\301"+
    "\2\215\1\301\1\u01f9\31\301\3\215\1\301\2\215\1\216"+
    "\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301"+
    "\2\215\3\301\6\215\30\301\2\215\3\301\1\u01fa\27\301"+
    "\3\215\1\301\2\215\1\216\1\215\1\216\1\215\1\u0159"+
    "\1\215\1\301\10\215\1\301\2\215\3\301\6\215\30\301"+
    "\2\215\5\301\1\u01fb\25\301\3\215\1\301\2\215\1\216"+
    "\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301"+
    "\2\215\3\301\6\215\30\301\2\215\24\301\1\u01fc\6\301"+
    "\3\215\1\301\2\215\1\216\1\215\1\216\1\215\1\u0159"+
    "\1\215\1\301\10\215\1\301\2\215\3\301\6\215\30\301"+
    "\2\215\3\301\1\u01fd\27\301\3\215\1\301\2\215\1\216"+
    "\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301"+
    "\2\215\3\301\6\215\30\301\2\215\25\301\1\u01fe\5\301"+
    "\3\215\1\301\2\215\1\216\1\215\1\216\1\215\1\u0159"+
    "\1\215\1\301\10\215\1\301\2\215\3\301\6\215\30\301"+
    "\2\215\10\301\1\u01ff\22\301\3\215\1\301\2\215\1\216"+
    "\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301"+
    "\2\215\3\301\6\215\30\301\2\215\31\301\1\u0200\1\301"+
    "\3\215\1\301\2\215\1\216\1\215\1\216\1\215\1\u0159"+
    "\1\215\1\301\10\215\1\301\2\215\3\301\6\215\30\301"+
    "\2\215\5\301\1\u0201\25\301\3\215\1\301\2\215\1\216"+
    "\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301"+
    "\2\215\3\301\6\215\30\301\2\215\24\301\1\u0202\6\301"+
    "\3\215\1\301\2\215\1\216\1\215\1\216\1\215\1\u0159"+
    "\1\215\1\301\10\215\1\301\2\215\3\301\6\215\30\301"+
    "\2\215\24\301\1\u0203\6\301\3\215\1\301\2\215\1\216"+
    "\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301"+
    "\2\215\3\301\6\215\30\301\2\215\5\301\1\u0204\25\301"+
    "\3\215\1\301\2\215\1\216\1\215\1\216\1\215\1\u0159"+
    "\1\215\1\301\10\215\1\301\2\215\3\301\6\215\30\301"+
    "\2\215\17\301\1\u0205\13\301\3\215\1\301\2\215\1\216"+
    "\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301"+
    "\2\215\3\301\6\215\30\301\2\215\31\301\1\u0206\1\301"+
    "\3\215\1\301\2\215\1\216\1\215\1\216\1\215\1\u0159"+
    "\1\215\1\301\10\215\1\301\2\215\3\301\6\215\30\301"+
    "\2\215\2\301\1\u0207\30\301\3\215\1\301\2\215\1\216"+
    "\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301"+
    "\2\215\3\301\6\215\30\301\2\215\26\301\1\u0208\4\301"+
    "\3\215\1\301\2\215\1\216\1\215\1\216\1\215\1\u0159"+
    "\1\215\1\301\10\215\1\301\2\215\3\301\6\215\30\301"+
    "\2\215\20\301\1\u0209\12\301\3\215\1\301\2\215\1\216"+
    "\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301"+
    "\2\215\3\301\6\215\30\301\2\215\11\301\1\u020a\21\301"+
    "\3\215\1\301\1\215\1\u01cb\1\216\1\215\1\u01eb\1\215"+
    "\1\u020b\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\33\301\3\215\1\301\2\215\1\216\1\215"+
    "\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301\2\215"+
    "\3\301\6\215\30\301\2\215\10\301\1\u020c\22\301\3\215"+
    "\1\301\1\215\1\u01cd\1\216\1\215\1\u01ed\1\215\1\u020d"+
    "\1\215\1\301\10\215\1\301\2\215\3\301\6\215\30\301"+
    "\2\215\33\301\3\215\1\301\2\215\1\216\1\215\1\216"+
    "\1\215\1\u0159\1\215\1\301\10\215\1\301\2\215\3\301"+
    "\6\215\30\301\2\215\23\301\1\u020e\7\301\3\215\1\301"+
    "\2\215\1\216\1\215\1\216\1\215\1\u0159\1\215\1\301"+
    "\10\215\1\301\2\215\3\301\6\215\30\301\2\215\26\301"+
    "\1\u020f\4\301\3\215\1\301\2\215\1\216\1\215\1\216"+
    "\1\215\1\u0159\1\215\1\301\10\215\1\301\2\215\3\301"+
    "\6\215\30\301\2\215\14\301\1\u0210\16\301\3\215\1\301"+
    "\2\215\1\216\1\215\1\216\1\215\1\u0159\1\215\1\301"+
    "\10\215\1\301\2\215\3\301\6\215\30\301\2\215\24\301"+
    "\1\u0211\6\301\3\215\1\301\2\215\1\216\1\215\1\216"+
    "\1\215\1\u0159\1\215\1\301\10\215\1\301\2\215\3\301"+
    "\6\215\30\301\2\215\24\301\1\u0212\6\301\3\215\1\301"+
    "\2\215\1\216\1\215\1\216\1\215\1\u0159\1\215\1\301"+
    "\10\215\1\301\2\215\3\301\6\215\30\301\2\215\14\301"+
    "\1\u0213\16\301\3\215\1\301\21\u0214\1\u0215\104\u0214\71\0"+
    "\1\u0216\60\0\3\30\6\0\22\30\1\u0217\5\30\2\0"+
    "\1\144\32\30\3\0\1\30\24\0\3\30\6\0\2\30"+
    "\1\u0218\25\30\2\0\1\144\32\30\3\0\1\30\24\0"+
    "\3\144\6\0\3\144\1\u0219\24\144\2\0\4\144\1\u0219"+
    "\26\144\3\0\1\144\24\0\3\144\6\0\22\144\1\u021a"+
    "\5\144\2\0\24\144\1\u021a\6\144\3\0\1\144\24\0"+
    "\3\144\6\0\24\144\1\u021b\3\144\2\0\26\144\1\u021b"+
    "\4\144\3\0\1\144\24\0\3\144\6\0\10\144\1\u021c"+
    "\17\144\2\0\11\144\1\u021c\21\144\3\0\1\144\24\0"+
    "\3\144\6\0\1\u021d\27\144\2\0\1\144\1\u021d\31\144"+
    "\3\0\1\144\24\0\3\144\6\0\6\144\1\u021e\21\144"+
    "\2\0\7\144\1\u021e\23\144\3\0\1\144\24\0\3\144"+
    "\6\0\17\144\1\u021f\10\144\2\0\20\144\1\u021f\12\144"+
    "\3\0\1\144\24\0\3\144\6\0\15\144\1\u0220\12\144"+
    "\2\0\16\144\1\u0220\14\144\3\0\1\144\24\0\3\144"+
    "\6\0\22\144\1\u0221\5\144\2\0\24\144\1\u0221\6\144"+
    "\3\0\1\144\24\0\3\144\6\0\20\144\1\u0222\7\144"+
    "\2\0\22\144\1\u0222\10\144\3\0\1\144\24\0\3\144"+
    "\6\0\13\144\1\u0223\14\144\2\0\14\144\1\u0223\16\144"+
    "\3\0\1\144\24\0\3\144\6\0\1\u0224\27\144\2\0"+
    "\1\144\1\u0224\31\144\3\0\1\144\24\0\3\144\6\0"+
    "\26\144\1\u0225\1\144\2\0\30\144\1\u0225\2\144\3\0"+
    "\1\144\24\0\3\144\6\0\22\144\1\u0226\5\144\2\0"+
    "\24\144\1\u0226\6\144\3\0\1\144\24\0\3\30\6\0"+
    "\10\30\1\u0227\17\30\2\0\1\144\32\30\3\0\1\30"+
    "\24\0\3\30\6\0\20\30\1\u0228\7\30\2\0\1\144"+
    "\32\30\3\0\1\30\24\0\3\30\6\0\14\30\1\u0229"+
    "\13\30\2\0\1\144\32\30\3\0\1\30\24\0\3\30"+
    "\6\0\1\u022a\27\30\2\0\1\144\32\30\3\0\1\30"+
    "\24\0\3\144\6\0\1\u022b\27\144\2\0\33\144\3\0"+
    "\1\144\24\0\3\144\6\0\16\144\1\u022c\11\144\2\0"+
    "\33\144\3\0\1\144\24\0\3\30\6\0\4\30\1\u022d"+
    "\23\30\2\0\1\144\32\30\3\0\1\30\24\0\3\30"+
    "\6\0\20\30\1\u022e\7\30\2\0\1\144\32\30\3\0"+
    "\1\30\24\0\3\30\6\0\1\u022f\27\30\2\0\1\144"+
    "\32\30\3\0\1\30\24\0\3\30\6\0\20\30\1\u0230"+
    "\7\30\2\0\1\144\32\30\3\0\1\30\24\0\3\30"+
    "\6\0\25\30\1\u0231\2\30\2\0\1\144\32\30\3\0"+
    "\1\30\24\0\3\30\6\0\4\30\1\u0232\23\30\2\0"+
    "\1\144\32\30\3\0\1\30\24\0\3\30\6\0\30\30"+
    "\2\0\1\144\6\30\1\u0233\23\30\3\0\1\30\24\0"+
    "\3\30\6\0\30\30\2\0\1\144\4\30\1\u0234\25\30"+
    "\3\0\1\30\24\0\3\30\6\0\30\30\2\0\1\144"+
    "\22\30\1\u0235\7\30\3\0\1\30\24\0\3\30\6\0"+
    "\30\30\2\0\1\144\21\30\1\u0236\10\30\3\0\1\30"+
    "\24\0\3\30\6\0\30\30\2\0\1\144\14\30\1\u0237"+
    "\15\30\3\0\1\30\24\0\3\30\6\0\30\30\2\0"+
    "\1\144\4\30\1\u0238\25\30\3\0\1\30\21\0\1\u0239"+
    "\2\0\3\30\6\0\30\30\2\0\1\144\32\30\3\0"+
    "\1\30\24\0\3\30\6\0\30\30\2\0\1\144\13\30"+
    "\1\u023a\16\30\3\0\1\30\24\0\3\30\6\0\30\30"+
    "\2\0\1\144\23\30\1\u023b\6\30\3\0\1\30\24\0"+
    "\3\30\6\0\30\30\2\0\1\144\6\30\1\u023c\23\30"+
    "\3\0\1\30\24\0\3\30\6\0\30\30\2\0\1\144"+
    "\10\30\1\u023d\21\30\3\0\1\30\24\0\3\30\6\0"+
    "\30\30\2\0\1\144\15\30\1\u023e\14\30\3\0\1\30"+
    "\21\0\1\u023f\2\0\3\30\6\0\30\30\2\0\1\144"+
    "\32\30\3\0\1\30\24\0\3\30\6\0\30\30\2\0"+
    "\1\144\7\30\1\u0240\22\30\3\0\1\30\1\215\1\u01b4"+
    "\1\216\1\215\1\u01d4\1\215\1\u01f4\121\215\1\216\1\215"+
    "\1\216\1\215\1\u0118\61\215\1\u0241\37\215\1\216\1\215"+
    "\1\216\1\215\1\u0118\102\215\1\u0242\16\215\1\216\1\215"+
    "\1\216\1\215\1\u0118\65\215\1\u0243\33\215\1\216\1\215"+
    "\1\216\1\215\1\u0118\64\215\1\u0244\34\215\1\216\1\215"+
    "\1\216\1\215\1\u0118\61\215\1\u0245\37\215\1\216\1\215"+
    "\1\216\1\215\1\u0118\63\215\1\u0246\35\215\1\216\1\215"+
    "\1\216\1\215\1\u0118\65\215\1\u0247\33\215\1\216\1\215"+
    "\1\216\1\215\1\u0118\104\215\1\u0248\14\215\1\216\1\215"+
    "\1\216\1\215\1\u0118\63\215\1\u0249\35\215\1\216\1\215"+
    "\1\216\1\215\1\u0118\105\215\1\u024a\13\215\1\216\1\215"+
    "\1\216\1\215\1\u0118\70\215\1\u024b\30\215\1\216\1\215"+
    "\1\216\1\215\1\u0118\111\215\1\u024c\7\215\1\216\1\215"+
    "\1\216\1\215\1\u0118\65\215\1\u024d\33\215\1\216\1\215"+
    "\1\216\1\215\1\u0118\104\215\1\u024e\14\215\1\216\1\215"+
    "\1\216\1\215\1\u0118\104\215\1\u024f\14\215\1\216\1\215"+
    "\1\216\1\215\1\u0118\65\215\1\u0250\33\215\1\216\1\215"+
    "\1\216\1\215\1\u0118\77\215\1\u0251\21\215\1\216\1\215"+
    "\1\216\1\215\1\u0118\111\215\1\u0252\7\215\1\216\1\215"+
    "\1\216\1\215\1\u0118\62\215\1\u0253\36\215\1\216\1\215"+
    "\1\216\1\215\1\u0118\106\215\1\u0254\12\215\1\216\1\215"+
    "\1\216\1\215\1\u0118\100\215\1\u0255\20\215\1\216\1\215"+
    "\1\216\1\215\1\u0118\71\215\1\u0256\26\215\1\u01cb\1\216"+
    "\1\215\1\u01eb\1\215\1\u020b\121\215\1\216\1\215\1\216"+
    "\1\215\1\u0118\70\215\1\u0257\27\215\1\u01cd\1\216\1\215"+
    "\1\u01ed\1\215\1\u020d\121\215\1\216\1\215\1\216\1\215"+
    "\1\u0118\103\215\1\u0258\15\215\1\216\1\215\1\216\1\215"+
    "\1\u0118\106\215\1\u0259\12\215\1\216\1\215\1\216\1\215"+
    "\1\u0118\74\215\1\u025a\24\215\1\216\1\215\1\216\1\215"+
    "\1\u0118\104\215\1\u025b\14\215\1\216\1\215\1\216\1\215"+
    "\1\u0118\104\215\1\u025c\14\215\1\216\1\215\1\216\1\215"+
    "\1\u0118\74\215\1\u025d\22\215\1\216\1\u01d4\2\216\1\u01d4"+
    "\1\216\1\u01f4\125\216\1\u0119\61\216\1\u025e\43\216\1\u0119"+
    "\102\216\1\u025f\22\216\1\u0119\65\216\1\u0260\37\216\1\u0119"+
    "\64\216\1\u0261\40\216\1\u0119\61\216\1\u0262\43\216\1\u0119"+
    "\63\216\1\u0263\41\216\1\u0119\65\216\1\u0264\37\216\1\u0119"+
    "\104\216\1\u0265\20\216\1\u0119\63\216\1\u0266\41\216\1\u0119"+
    "\105\216\1\u0267\17\216\1\u0119\70\216\1\u0268\34\216\1\u0119"+
    "\111\216\1\u0269\13\216\1\u0119\65\216\1\u026a\37\216\1\u0119"+
    "\104\216\1\u026b\20\216\1\u0119\104\216\1\u026c\20\216\1\u0119"+
    "\65\216\1\u026d\37\216\1\u0119\77\216\1\u026e\25\216\1\u0119"+
    "\111\216\1\u026f\13\216\1\u0119\62\216\1\u0270\42\216\1\u0119"+
    "\106\216\1\u0271\16\216\1\u0119\100\216\1\u0272\24\216\1\u0119"+
    "\71\216\1\u0273\26\216\1\u01eb\2\216\1\u01eb\1\216\1\u020b"+
    "\125\216\1\u0119\70\216\1\u0274\27\216\1\u01ed\2\216\1\u01ed"+
    "\1\216\1\u020d\125\216\1\u0119\103\216\1\u0275\21\216\1\u0119"+
    "\106\216\1\u0276\16\216\1\u0119\74\216\1\u0277\30\216\1\u0119"+
    "\104\216\1\u0278\20\216\1\u0119\104\216\1\u0279\20\216\1\u0119"+
    "\74\216\1\u027a\22\216\2\215\1\216\1\215\1\216\1\215"+
    "\1\u0159\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\14\301\1\u027b\16\301\3\215\1\301\2\215"+
    "\1\216\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215"+
    "\1\301\2\215\3\301\6\215\30\301\2\215\11\301\1\u027c"+
    "\21\301\3\215\1\301\2\215\1\216\1\215\1\216\1\215"+
    "\1\u0159\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\26\301\1\u027d\4\301\3\215\1\301\2\215"+
    "\1\216\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215"+
    "\1\301\2\215\3\301\6\215\30\301\2\215\1\301\1\u027e"+
    "\31\301\3\215\1\301\1\215\1\u0245\1\216\1\215\1\u0262"+
    "\1\215\1\u027f\1\215\1\301\10\215\1\301\2\215\3\301"+
    "\6\215\30\301\2\215\33\301\3\215\1\301\2\215\1\216"+
    "\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301"+
    "\2\215\3\301\6\215\30\301\2\215\13\301\1\u0280\17\301"+
    "\3\215\1\301\1\215\1\u0247\1\216\1\215\1\u0264\1\215"+
    "\1\u0281\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\33\301\3\215\1\301\2\215\1\216\1\215"+
    "\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301\2\215"+
    "\3\301\6\215\30\301\2\215\5\301\1\u0282\25\301\3\215"+
    "\1\301\2\215\1\216\1\215\1\216\1\215\1\u0159\1\215"+
    "\1\301\10\215\1\301\2\215\3\301\6\215\30\301\2\215"+
    "\13\301\1\u0283\17\301\3\215\1\301\2\215\1\216\1\215"+
    "\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301\2\215"+
    "\3\301\6\215\30\301\2\215\15\301\1\u0284\15\301\3\215"+
    "\1\301\2\215\1\216\1\215\1\216\1\215\1\u0159\1\215"+
    "\1\301\10\215\1\301\2\215\3\301\6\215\30\301\2\215"+
    "\23\301\1\u0285\7\301\3\215\1\301\1\215\1\u024c\1\216"+
    "\1\215\1\u0269\1\215\1\u0286\1\215\1\301\10\215\1\301"+
    "\2\215\3\301\6\215\30\301\2\215\33\301\3\215\1\301"+
    "\2\215\1\216\1\215\1\216\1\215\1\u0159\1\215\1\301"+
    "\10\215\1\301\2\215\3\301\6\215\30\301\2\215\16\301"+
    "\1\u0287\14\301\3\215\1\301\2\215\1\216\1\215\1\216"+
    "\1\215\1\u0159\1\215\1\301\10\215\1\301\2\215\3\301"+
    "\6\215\30\301\2\215\11\301\1\u0288\21\301\3\215\1\301"+
    "\1\215\1\u024f\1\216\1\215\1\u026c\1\215\1\u0289\1\215"+
    "\1\301\10\215\1\301\2\215\3\301\6\215\30\301\2\215"+
    "\33\301\3\215\1\301\1\215\1\u0250\1\216\1\215\1\u026d"+
    "\1\215\1\u028a\1\215\1\301\10\215\1\301\2\215\3\301"+
    "\6\215\30\301\2\215\33\301\3\215\1\301\2\215\1\216"+
    "\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301"+
    "\2\215\3\301\6\215\30\301\2\215\17\301\1\u028b\13\301"+
    "\3\215\1\301\1\215\1\u0252\1\216\1\215\1\u026f\1\215"+
    "\1\u028c\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\33\301\3\215\1\301\2\215\1\216\1\215"+
    "\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301\2\215"+
    "\3\301\6\215\30\301\2\215\5\301\1\u028d\25\301\3\215"+
    "\1\301\2\215\1\216\1\215\1\216\1\215\1\u0159\1\215"+
    "\1\301\10\215\1\301\2\215\3\301\6\215\30\301\2\215"+
    "\5\301\1\u028e\25\301\3\215\1\301\2\215\1\216\1\215"+
    "\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301\2\215"+
    "\3\301\6\215\30\301\2\215\14\301\1\u028f\16\301\3\215"+
    "\1\301\2\215\1\216\1\215\1\216\1\215\1\u0159\1\215"+
    "\1\301\10\215\1\301\2\215\3\301\6\215\30\301\2\215"+
    "\17\301\1\u0290\13\301\3\215\1\301\2\215\1\216\1\215"+
    "\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301\2\215"+
    "\3\301\6\215\30\301\2\215\24\301\1\u0291\6\301\3\215"+
    "\1\301\2\215\1\216\1\215\1\216\1\215\1\u0159\1\215"+
    "\1\301\10\215\1\u0292\2\215\3\301\6\215\30\301\2\215"+
    "\33\301\3\215\1\301\2\215\1\216\1\215\1\216\1\215"+
    "\1\u0159\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\5\301\1\u0293\25\301\3\215\1\301\1\215"+
    "\1\u025a\1\216\1\215\1\u0277\1\215\1\u0294\1\215\1\301"+
    "\10\215\1\301\2\215\3\301\6\215\30\301\2\215\33\301"+
    "\3\215\1\301\1\215\1\u025b\1\216\1\215\1\u0278\1\215"+
    "\1\u0295\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\33\301\3\215\1\301\2\215\1\216\1\215"+
    "\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301\2\215"+
    "\3\301\6\215\30\301\2\215\5\301\1\u0296\25\301\3\215"+
    "\1\301\2\215\1\216\1\215\1\216\1\215\1\u0159\1\215"+
    "\1\301\10\215\1\301\2\215\3\301\6\215\30\301\2\215"+
    "\17\301\1\u0297\13\301\3\215\1\301\21\u0214\1\u0298\104\u0214"+
    "\21\0\1\u0215\11\0\1\3\162\0\1\u0299\61\0\3\30"+
    "\6\0\30\30\2\0\1\u029a\32\30\3\0\1\30\24\0"+
    "\3\30\6\0\22\30\1\u029b\5\30\2\0\1\144\32\30"+
    "\3\0\1\30\24\0\3\144\6\0\27\144\1\u029c\2\0"+
    "\31\144\1\u029c\1\144\3\0\1\144\24\0\3\144\6\0"+
    "\22\144\1\u029d\5\144\2\0\24\144\1\u029d\6\144\3\0"+
    "\1\144\24\0\3\144\6\0\2\144\1\u029e\25\144\2\0"+
    "\3\144\1\u029e\27\144\3\0\1\144\24\0\3\144\6\0"+
    "\3\144\1\u029f\24\144\2\0\4\144\1\u029f\26\144\3\0"+
    "\1\144\24\0\3\144\6\0\23\144\1\u02a0\4\144\2\0"+
    "\25\144\1\u02a0\5\144\3\0\1\144\24\0\3\144\6\0"+
    "\12\144\1\u02a1\15\144\2\0\13\144\1\u02a1\17\144\3\0"+
    "\1\144\24\0\3\144\6\0\10\144\1\u02a2\17\144\2\0"+
    "\11\144\1\u02a2\21\144\3\0\1\144\24\0\3\144\6\0"+
    "\10\144\1\u02a3\17\144\2\0\11\144\1\u02a3\21\144\3\0"+
    "\1\144\24\0\3\144\6\0\4\144\1\u02a4\23\144\2\0"+
    "\5\144\1\u02a4\25\144\3\0\1\144\24\0\3\144\6\0"+
    "\14\144\1\u02a5\13\144\2\0\15\144\1\u02a5\15\144\3\0"+
    "\1\144\24\0\3\144\6\0\22\144\1\u02a6\5\144\2\0"+
    "\24\144\1\u02a6\6\144\3\0\1\144\24\0\3\144\6\0"+
    "\13\144\1\u02a7\14\144\2\0\14\144\1\u02a7\16\144\3\0"+
    "\1\144\24\0\3\30\6\0\13\30\1\u02a8\14\30\2\0"+
    "\1\144\32\30\3\0\1\30\24\0\3\30\6\0\22\30"+
    "\1\u02a9\5\30\2\0\1\144\32\30\3\0\1\30\24\0"+
    "\3\30\6\0\17\30\1\u02aa\10\30\2\0\1\144\32\30"+
    "\3\0\1\30\24\0\3\30\6\0\20\30\1\u02ab\7\30"+
    "\2\0\1\144\32\30\3\0\1\30\24\0\3\144\6\0"+
    "\13\144\1\u02ac\14\144\2\0\33\144\3\0\1\144\24\0"+
    "\3\144\6\0\1\u02ad\27\144\2\0\33\144\3\0\1\144"+
    "\24\0\3\30\6\0\21\30\1\u02ae\6\30\2\0\1\144"+
    "\32\30\3\0\1\30\24\0\3\30\6\0\4\30\1\u02af"+
    "\23\30\2\0\1\144\32\30\3\0\1\30\24\0\3\30"+
    "\6\0\22\30\1\u02b0\5\30\2\0\1\144\32\30\3\0"+
    "\1\30\24\0\3\30\6\0\21\30\1\u02b1\6\30\2\0"+
    "\1\144\32\30\3\0\1\30\24\0\3\30\6\0\7\30"+
    "\1\u02b2\20\30\2\0\1\144\32\30\3\0\1\30\24\0"+
    "\3\30\6\0\30\30\2\0\1\144\21\30\1\u02b3\10\30"+
    "\3\0\1\30\24\0\3\30\6\0\30\30\2\0\1\144"+
    "\1\u02b4\31\30\3\0\1\30\24\0\3\30\6\0\30\30"+
    "\2\0\1\144\1\u02b5\31\30\3\0\1\30\75\0\1\u02b6"+
    "\14\0\1\u02b7\37\0\3\30\6\0\30\30\2\0\1\144"+
    "\4\30\1\u02b8\25\30\3\0\1\30\24\0\3\30\6\0"+
    "\30\30\2\0\1\144\7\30\1\u02b9\22\30\3\0\1\30"+
    "\24\0\3\30\6\0\30\30\2\0\1\144\4\30\1\u02ba"+
    "\25\30\3\0\1\30\24\0\3\30\6\0\30\30\2\0"+
    "\1\144\2\30\1\u02bb\27\30\3\0\1\30\24\0\3\30"+
    "\6\0\30\30\2\0\1\144\6\30\1\u02bc\23\30\3\0"+
    "\1\30\70\0\1\u02bd\35\0\2\215\1\216\1\215\1\216"+
    "\1\215\1\u0118\74\215\1\u02be\24\215\1\216\1\215\1\216"+
    "\1\215\1\u0118\71\215\1\u02bf\27\215\1\216\1\215\1\216"+
    "\1\215\1\u0118\106\215\1\u02c0\12\215\1\216\1\215\1\216"+
    "\1\215\1\u0118\61\215\1\u02c1\36\215\1\u0245\1\216\1\215"+
    "\1\u0262\1\215\1\u027f\121\215\1\216\1\215\1\216\1\215"+
    "\1\u0118\73\215\1\u02c2\24\215\1\u0247\1\216\1\215\1\u0264"+
    "\1\215\1\u0281\121\215\1\216\1\215\1\216\1\215\1\u0118"+
    "\65\215\1\u02c3\33\215\1\216\1\215\1\216\1\215\1\u0118"+
    "\73\215\1\u02c4\25\215\1\216\1\215\1\216\1\215\1\u0118"+
    "\75\215\1\u02c5\23\215\1\216\1\215\1\216\1\215\1\u0118"+
    "\103\215\1\u02c6\14\215\1\u024c\1\216\1\215\1\u0269\1\215"+
    "\1\u0286\121\215\1\216\1\215\1\216\1\215\1\u0118\76\215"+
    "\1\u02c7\22\215\1\216\1\215\1\216\1\215\1\u0118\71\215"+
    "\1\u02c8\26\215\1\u024f\1\216\1\215\1\u026c\1\215\1\u0289"+
    "\120\215\1\u0250\1\216\1\215\1\u026d\1\215\1\u028a\121\215"+
    "\1\216\1\215\1\216\1\215\1\u0118\77\215\1\u02c9\20\215"+
    "\1\u0252\1\216\1\215\1\u026f\1\215\1\u028c\121\215\1\216"+
    "\1\215\1\216\1\215\1\u0118\65\215\1\u02ca\33\215\1\216"+
    "\1\215\1\216\1\215\1\u0118\65\215\1\u02cb\33\215\1\216"+
    "\1\215\1\216\1\215\1\u0118\74\215\1\u02cc\24\215\1\216"+
    "\1\215\1\216\1\215\1\u0118\77\215\1\u02cd\21\215\1\216"+
    "\1\215\1\216\1\215\1\u0118\104\215\1\u02ce\14\215\1\216"+
    "\1\215\1\216\1\215\1\u0118\12\215\1\u02cf\106\215\1\216"+
    "\1\215\1\216\1\215\1\u0118\65\215\1\u02d0\32\215\1\u025a"+
    "\1\216\1\215\1\u0277\1\215\1\u0294\120\215\1\u025b\1\216"+
    "\1\215\1\u0278\1\215\1\u0295\121\215\1\216\1\215\1\216"+
    "\1\215\1\u0118\65\215\1\u02d1\33\215\1\216\1\215\1\216"+
    "\1\215\1\u0118\77\215\1\u02d2\17\215\6\216\1\u0119\74\216"+
    "\1\u02d3\30\216\1\u0119\71\216\1\u02d4\33\216\1\u0119\106\216"+
    "\1\u02d5\16\216\1\u0119\61\216\1\u02d6\36\216\1\u0262\2\216"+
    "\1\u0262\1\216\1\u027f\125\216\1\u0119\73\216\1\u02d7\24\216"+
    "\1\u0264\2\216\1\u0264\1\216\1\u0281\125\216\1\u0119\65\216"+
    "\1\u02d8\37\216\1\u0119\73\216\1\u02d9\31\216\1\u0119\75\216"+
    "\1\u02da\27\216\1\u0119\103\216\1\u02db\14\216\1\u0269\2\216"+
    "\1\u0269\1\216\1\u0286\125\216\1\u0119\76\216\1\u02dc\26\216"+
    "\1\u0119\71\216\1\u02dd\26\216\1\u026c\2\216\1\u026c\1\216"+
    "\1\u0289\120\216\1\u026d\2\216\1\u026d\1\216\1\u028a\125\216"+
    "\1\u0119\77\216\1\u02de\20\216\1\u026f\2\216\1\u026f\1\216"+
    "\1\u028c\125\216\1\u0119\65\216\1\u02df\37\216\1\u0119\65\216"+
    "\1\u02e0\37\216\1\u0119\74\216\1\u02e1\30\216\1\u0119\77\216"+
    "\1\u02e2\25\216\1\u0119\104\216\1\u02e3\20\216\1\u0119\12\216"+
    "\1\u02e4\112\216\1\u0119\65\216\1\u02e5\32\216\1\u0277\2\216"+
    "\1\u0277\1\216\1\u0294\120\216\1\u0278\2\216\1\u0278\1\216"+
    "\1\u0295\125\216\1\u0119\65\216\1\u02e6\37\216\1\u0119\77\216"+
    "\1\u02e7\17\216\1\215\1\u02be\1\216\1\215\1\u02d3\1\215"+
    "\1\u02e8\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\33\301\3\215\1\301\2\215\1\216\1\215"+
    "\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301\2\215"+
    "\3\301\6\215\30\301\2\215\5\301\1\u02e9\25\301\3\215"+
    "\1\301\2\215\1\216\1\215\1\216\1\215\1\u0159\1\215"+
    "\1\301\10\215\1\301\2\215\3\301\6\215\30\301\2\215"+
    "\1\301\1\u02ea\31\301\3\215\1\301\2\215\1\216\1\215"+
    "\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301\2\215"+
    "\3\301\6\215\30\301\2\215\16\301\1\u02eb\14\301\3\215"+
    "\1\301\1\215\1\u02c2\1\216\1\215\1\u02d7\1\215\1\u02ec"+
    "\1\215\1\301\10\215\1\301\2\215\3\301\6\215\30\301"+
    "\2\215\33\301\3\215\1\301\2\215\1\216\1\215\1\216"+
    "\1\215\1\u0159\1\215\1\301\10\215\1\301\2\215\3\301"+
    "\6\215\30\301\2\215\22\301\1\u02ed\10\301\3\215\1\301"+
    "\2\215\1\216\1\215\1\216\1\215\1\u0159\1\215\1\301"+
    "\10\215\1\301\2\215\3\301\6\215\30\301\2\215\2\301"+
    "\1\u02ee\30\301\3\215\1\301\2\215\1\216\1\215\1\216"+
    "\1\215\1\u0159\1\215\1\301\10\215\1\301\2\215\3\301"+
    "\6\215\30\301\2\215\16\301\1\u02ef\14\301\3\215\1\301"+
    "\2\215\1\216\1\215\1\216\1\215\1\u0159\1\215\1\301"+
    "\10\215\1\301\2\215\3\301\6\215\30\301\2\215\11\301"+
    "\1\u02f0\21\301\3\215\1\301\1\215\1\u02c7\1\216\1\215"+
    "\1\u02dc\1\215\1\u02f1\1\215\1\301\10\215\1\301\2\215"+
    "\3\301\6\215\30\301\2\215\33\301\3\215\1\301\2\215"+
    "\1\216\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215"+
    "\1\301\2\215\3\301\6\215\30\301\2\215\6\301\1\u02f2"+
    "\24\301\3\215\1\301\2\215\1\216\1\215\1\216\1\215"+
    "\1\u0159\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\16\301\1\u02f3\14\301\3\215\1\301\2\215"+
    "\1\216\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215"+
    "\1\301\2\215\3\301\6\215\30\301\2\215\22\301\1\u02f4"+
    "\10\301\3\215\1\301\1\215\1\u02cb\1\216\1\215\1\u02e0"+
    "\1\215\1\u02f5\1\215\1\301\10\215\1\301\2\215\3\301"+
    "\6\215\30\301\2\215\33\301\3\215\1\301\2\215\1\216"+
    "\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301"+
    "\2\215\3\301\6\215\30\301\2\215\5\301\1\u02f6\25\301"+
    "\3\215\1\301\1\215\1\u02cd\1\216\1\215\1\u02e2\1\215"+
    "\1\u02f7\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\33\301\3\215\1\301\1\215\1\u02ce\1\216"+
    "\1\215\1\u02e3\1\215\1\u02f8\1\215\1\301\10\215\1\301"+
    "\2\215\3\301\6\215\30\301\2\215\33\301\3\215\1\301"+
    "\2\215\1\216\1\215\1\216\1\215\1\u0159\1\215\1\301"+
    "\10\215\1\301\2\215\3\301\6\215\30\301\2\215\23\301"+
    "\1\u02f9\7\301\3\215\1\301\2\215\1\216\1\215\1\216"+
    "\1\215\1\u0159\1\215\1\301\10\215\1\301\2\215\3\301"+
    "\6\215\30\301\2\215\22\301\1\u02fa\10\301\3\215\1\301"+
    "\1\215\1\u02d1\1\216\1\215\1\u02e6\1\215\1\u02fb\1\215"+
    "\1\301\10\215\1\301\2\215\3\301\6\215\30\301\2\215"+
    "\33\301\3\215\1\301\2\215\1\216\1\215\1\216\1\215"+
    "\1\u0159\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\27\301\1\u02fc\3\301\3\215\1\301\21\u0214"+
    "\1\u02fd\104\u0214\103\0\1\u02fe\46\0\3\144\6\0\10\144"+
    "\1\u02ff\17\144\2\0\33\144\3\0\1\144\24\0\3\30"+
    "\6\0\4\30\1\u0300\23\30\2\0\1\144\32\30\3\0"+
    "\1\30\24\0\3\144\6\0\16\144\1\u0301\11\144\2\0"+
    "\17\144\1\u0301\13\144\3\0\1\144\24\0\3\144\6\0"+
    "\22\144\1\u0302\5\144\2\0\24\144\1\u0302\6\144\3\0"+
    "\1\144\24\0\3\144\6\0\16\144\1\u0303\11\144\2\0"+
    "\17\144\1\u0303\13\144\3\0\1\144\24\0\3\144\6\0"+
    "\17\144\1\u0304\10\144\2\0\20\144\1\u0304\12\144\3\0"+
    "\1\144\24\0\3\144\6\0\2\144\1\u0305\25\144\2\0"+
    "\3\144\1\u0305\27\144\3\0\1\144\24\0\3\144\6\0"+
    "\1\u0306\27\144\2\0\1\144\1\u0306\31\144\3\0\1\144"+
    "\24\0\3\144\6\0\4\144\1\u0307\23\144\2\0\5\144"+
    "\1\u0307\25\144\3\0\1\144\24\0\3\30\6\0\1\u0308"+
    "\27\30\2\0\1\144\32\30\3\0\1\30\24\0\3\30"+
    "\6\0\30\30\2\0\1\u0309\32\30\3\0\1\30\24\0"+
    "\3\144\6\0\4\144\1\u030a\23\144\2\0\33\144\3\0"+
    "\1\144\24\0\3\144\6\0\3\144\1\u030b\24\144\2\0"+
    "\33\144\3\0\1\144\24\0\3\30\6\0\21\30\1\u030c"+
    "\6\30\2\0\1\144\32\30\3\0\1\30\24\0\3\30"+
    "\6\0\2\30\1\u030d\25\30\2\0\1\144\32\30\3\0"+
    "\1\30\24\0\3\30\6\0\4\30\1\u030e\23\30\2\0"+
    "\1\144\32\30\3\0\1\30\24\0\3\30\6\0\10\30"+
    "\1\u030f\17\30\2\0\1\144\32\30\3\0\1\30\24\0"+
    "\3\30\6\0\30\30\2\0\1\144\16\30\1\u0310\13\30"+
    "\3\0\1\30\24\0\3\30\6\0\30\30\2\0\1\144"+
    "\15\30\1\u0311\14\30\3\0\1\30\24\0\3\30\6\0"+
    "\30\30\2\0\1\144\13\30\1\u0312\16\30\3\0\1\30"+
    "\70\0\1\u0313\135\0\1\u0314\51\0\3\30\6\0\30\30"+
    "\2\0\1\144\14\30\1\u0315\15\30\3\0\1\30\24\0"+
    "\3\30\6\0\30\30\2\0\1\144\21\30\1\u0316\10\30"+
    "\3\0\1\30\24\0\3\30\6\0\30\30\2\0\1\144"+
    "\12\30\1\u0317\17\30\3\0\1\30\103\0\1\u0318\22\0"+
    "\1\215\1\u02be\1\216\1\215\1\u02d3\1\215\1\u02e8\121\215"+
    "\1\216\1\215\1\216\1\215\1\u0118\65\215\1\u0319\33\215"+
    "\1\216\1\215\1\216\1\215\1\u0118\61\215\1\u031a\37\215"+
    "\1\216\1\215\1\216\1\215\1\u0118\76\215\1\u031b\21\215"+
    "\1\u02c2\1\216\1\215\1\u02d7\1\215\1\u02ec\121\215\1\216"+
    "\1\215\1\216\1\215\1\u0118\102\215\1\u031c\16\215\1\216"+
    "\1\215\1\216\1\215\1\u0118\62\215\1\u031d\36\215\1\216"+
    "\1\215\1\216\1\215\1\u0118\76\215\1\u031e\22\215\1\216"+
    "\1\215\1\216\1\215\1\u0118\71\215\1\u031f\26\215\1\u02c7"+
    "\1\216\1\215\1\u02dc\1\215\1\u02f1\121\215\1\216\1\215"+
    "\1\216\1\215\1\u0118\66\215\1\u0320\32\215\1\216\1\215"+
    "\1\216\1\215\1\u0118\76\215\1\u0321\22\215\1\216\1\215"+
    "\1\216\1\215\1\u0118\102\215\1\u0322\15\215\1\u02cb\1\216"+
    "\1\215\1\u02e0\1\215\1\u02f5\121\215\1\216\1\215\1\216"+
    "\1\215\1\u0118\65\215\1\u0323\32\215\1\u02cd\1\216\1\215"+
    "\1\u02e2\1\215\1\u02f7\120\215\1\u02ce\1\216\1\215\1\u02e3"+
    "\1\215\1\u02f8\121\215\1\216\1\215\1\216\1\215\1\u0118"+
    "\103\215\1\u0324\15\215\1\216\1\215\1\216\1\215\1\u0118"+
    "\102\215\1\u0325\15\215\1\u02d1\1\216\1\215\1\u02e6\1\215"+
    "\1\u02fb\121\215\1\216\1\215\1\216\1\215\1\u0118\107\215"+
    "\1\u0326\7\215\1\216\1\u02d3\2\216\1\u02d3\1\216\1\u02e8"+
    "\125\216\1\u0119\65\216\1\u0327\37\216\1\u0119\61\216\1\u0328"+
    "\43\216\1\u0119\76\216\1\u0329\21\216\1\u02d7\2\216\1\u02d7"+
    "\1\216\1\u02ec\125\216\1\u0119\102\216\1\u032a\22\216\1\u0119"+
    "\62\216\1\u032b\42\216\1\u0119\76\216\1\u032c\26\216\1\u0119"+
    "\71\216\1\u032d\26\216\1\u02dc\2\216\1\u02dc\1\216\1\u02f1"+
    "\125\216\1\u0119\66\216\1\u032e\36\216\1\u0119\76\216\1\u032f"+
    "\26\216\1\u0119\102\216\1\u0330\15\216\1\u02e0\2\216\1\u02e0"+
    "\1\216\1\u02f5\125\216\1\u0119\65\216\1\u0331\32\216\1\u02e2"+
    "\2\216\1\u02e2\1\216\1\u02f7\120\216\1\u02e3\2\216\1\u02e3"+
    "\1\216\1\u02f8\125\216\1\u0119\103\216\1\u0332\21\216\1\u0119"+
    "\102\216\1\u0333\15\216\1\u02e6\2\216\1\u02e6\1\216\1\u02fb"+
    "\125\216\1\u0119\107\216\1\u0334\7\216\2\215\1\216\1\215"+
    "\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301\2\215"+
    "\3\301\6\215\30\301\2\215\22\301\1\u0335\10\301\3\215"+
    "\1\301\1\215\1\u031a\1\216\1\215\1\u0328\1\215\1\u0336"+
    "\1\215\1\301\10\215\1\301\2\215\3\301\6\215\30\301"+
    "\2\215\33\301\3\215\1\301\2\215\1\216\1\215\1\216"+
    "\1\215\1\u0159\1\215\1\301\10\215\1\301\2\215\3\301"+
    "\6\215\30\301\2\215\1\301\1\u0337\31\301\3\215\1\301"+
    "\1\215\1\u031c\1\216\1\215\1\u032a\1\215\1\u0338\1\215"+
    "\1\301\10\215\1\301\2\215\3\301\6\215\30\301\2\215"+
    "\33\301\3\215\1\301\2\215\1\216\1\215\1\216\1\215"+
    "\1\u0159\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\17\301\1\u0339\13\301\3\215\1\301\1\215"+
    "\1\u031e\1\216\1\215\1\u032c\1\215\1\u033a\1\215\1\301"+
    "\10\215\1\301\2\215\3\301\6\215\30\301\2\215\33\301"+
    "\3\215\1\301\2\215\1\216\1\215\1\216\1\215\1\u0159"+
    "\1\215\1\301\10\215\1\301\2\215\3\301\6\215\30\301"+
    "\2\215\1\301\1\u033b\31\301\3\215\1\301\2\215\1\216"+
    "\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301"+
    "\2\215\3\301\6\215\30\301\2\215\31\301\1\u033c\1\301"+
    "\3\215\1\301\1\215\1\u0321\1\216\1\215\1\u032f\1\215"+
    "\1\u033d\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\33\301\3\215\1\301\1\215\1\u0322\1\216"+
    "\1\215\1\u0330\1\215\1\u033e\1\215\1\301\10\215\1\301"+
    "\2\215\3\301\6\215\30\301\2\215\33\301\3\215\1\301"+
    "\1\215\1\u0323\1\216\1\215\1\u0331\1\215\1\u033f\1\215"+
    "\1\301\10\215\1\301\2\215\3\301\6\215\30\301\2\215"+
    "\33\301\3\215\1\301\2\215\1\216\1\215\1\216\1\215"+
    "\1\u0159\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\5\301\1\u0340\25\301\3\215\1\301\1\215"+
    "\1\u0325\1\216\1\215\1\u0333\1\215\1\u0341\1\215\1\301"+
    "\10\215\1\301\2\215\3\301\6\215\30\301\2\215\33\301"+
    "\3\215\1\301\1\215\1\u0326\1\216\1\215\1\u0334\1\215"+
    "\1\u0342\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\33\301\3\215\1\301\21\u0214\1\u02fd\11\u0214"+
    "\1\3\72\u0214\24\0\3\144\6\0\15\144\1\u0343\12\144"+
    "\2\0\33\144\3\0\1\144\24\0\3\30\6\0\20\30"+
    "\1\u0344\7\30\2\0\1\144\32\30\3\0\1\30\24\0"+
    "\3\144\6\0\15\144\1\u0345\12\144\2\0\16\144\1\u0345"+
    "\14\144\3\0\1\144\24\0\3\144\6\0\15\144\1\u0346"+
    "\12\144\2\0\16\144\1\u0346\14\144\3\0\1\144\24\0"+
    "\3\144\6\0\22\144\1\u0347\5\144\2\0\24\144\1\u0347"+
    "\6\144\3\0\1\144\24\0\3\144\6\0\22\144\1\u0348"+
    "\5\144\2\0\24\144\1\u0348\6\144\3\0\1\144\24\0"+
    "\3\144\6\0\20\144\1\u0349\7\144\2\0\22\144\1\u0349"+
    "\10\144\3\0\1\144\24\0\3\30\6\0\20\30\1\u034a"+
    "\7\30\2\0\1\144\32\30\3\0\1\30\24\0\3\144"+
    "\6\0\15\144\1\u034b\12\144\2\0\33\144\3\0\1\144"+
    "\24\0\3\144\6\0\1\u034c\27\144\2\0\33\144\3\0"+
    "\1\144\24\0\3\30\6\0\30\30\2\0\1\u034d\32\30"+
    "\3\0\1\30\24\0\3\30\6\0\22\30\1\u034e\5\30"+
    "\2\0\1\144\32\30\3\0\1\30\24\0\3\30\6\0"+
    "\13\30\1\u034f\14\30\2\0\1\144\32\30\3\0\1\30"+
    "\24\0\3\30\6\0\30\30\2\0\1\144\24\30\1\u0350"+
    "\5\30\3\0\1\30\104\0\1\u0351\142\0\1\u0352\30\0"+
    "\3\30\6\0\30\30\2\0\1\144\4\30\1\u0353\25\30"+
    "\3\0\1\30\100\0\1\u0354\25\0\2\215\1\216\1\215"+
    "\1\216\1\215\1\u0118\102\215\1\u0355\15\215\1\u031a\1\216"+
    "\1\215\1\u0328\1\215\1\u0336\121\215\1\216\1\215\1\216"+
    "\1\215\1\u0118\61\215\1\u0356\36\215\1\u031c\1\216\1\215"+
    "\1\u032a\1\215\1\u0338\121\215\1\216\1\215\1\216\1\215"+
    "\1\u0118\77\215\1\u0357\20\215\1\u031e\1\216\1\215\1\u032c"+
    "\1\215\1\u033a\121\215\1\216\1\215\1\216\1\215\1\u0118"+
    "\61\215\1\u0358\37\215\1\216\1\215\1\216\1\215\1\u0118"+
    "\111\215\1\u0359\6\215\1\u0321\1\216\1\215\1\u032f\1\215"+
    "\1\u033d\120\215\1\u0322\1\216\1\215\1\u0330\1\215\1\u033e"+
    "\120\215\1\u0323\1\216\1\215\1\u0331\1\215\1\u033f\121\215"+
    "\1\216\1\215\1\216\1\215\1\u0118\65\215\1\u035a\32\215"+
    "\1\u0325\1\216\1\215\1\u0333\1\215\1\u0341\120\215\1\u0326"+
    "\1\216\1\215\1\u0334\1\215\1\u0342\117\215\6\216\1\u0119"+
    "\102\216\1\u035b\15\216\1\u0328\2\216\1\u0328\1\216\1\u0336"+
    "\125\216\1\u0119\61\216\1\u035c\36\216\1\u032a\2\216\1\u032a"+
    "\1\216\1\u0338\125\216\1\u0119\77\216\1\u035d\20\216\1\u032c"+
    "\2\216\1\u032c\1\216\1\u033a\125\216\1\u0119\61\216\1\u035e"+
    "\43\216\1\u0119\111\216\1\u035f\6\216\1\u032f\2\216\1\u032f"+
    "\1\216\1\u033d\120\216\1\u0330\2\216\1\u0330\1\216\1\u033e"+
    "\120\216\1\u0331\2\216\1\u0331\1\216\1\u033f\125\216\1\u0119"+
    "\65\216\1\u0360\32\216\1\u0333\2\216\1\u0333\1\216\1\u0341"+
    "\120\216\1\u0334\2\216\1\u0334\1\216\1\u0342\117\216\1\215"+
    "\1\u0355\1\216\1\215\1\u035b\1\215\1\u0361\1\215\1\301"+
    "\10\215\1\301\2\215\3\301\6\215\30\301\2\215\33\301"+
    "\3\215\1\301\1\215\1\u0356\1\216\1\215\1\u035c\1\215"+
    "\1\u0362\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\33\301\3\215\1\301\2\215\1\216\1\215"+
    "\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301\2\215"+
    "\3\301\6\215\30\301\2\215\30\301\1\u0363\2\301\3\215"+
    "\1\301\1\215\1\u0358\1\216\1\215\1\u035e\1\215\1\u0364"+
    "\1\215\1\301\10\215\1\301\2\215\3\301\6\215\30\301"+
    "\2\215\33\301\3\215\1\301\1\215\1\u0359\1\216\1\215"+
    "\1\u035f\1\215\1\u0365\1\215\1\301\10\215\1\301\2\215"+
    "\3\301\6\215\30\301\2\215\33\301\3\215\1\301\2\215"+
    "\1\216\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215"+
    "\1\301\2\215\3\301\6\215\30\301\2\215\22\301\1\u0366"+
    "\10\301\3\215\1\301\24\0\3\144\6\0\5\144\1\u0367"+
    "\22\144\2\0\33\144\3\0\1\144\24\0\3\30\6\0"+
    "\30\30\2\0\1\u0368\32\30\3\0\1\30\24\0\3\144"+
    "\6\0\10\144\1\u0369\17\144\2\0\11\144\1\u0369\21\144"+
    "\3\0\1\144\24\0\3\144\6\0\4\144\1\u036a\23\144"+
    "\2\0\5\144\1\u036a\25\144\3\0\1\144\24\0\3\30"+
    "\6\0\30\30\2\0\1\u036b\32\30\3\0\1\30\24\0"+
    "\3\144\6\0\23\144\1\u036c\4\144\2\0\33\144\3\0"+
    "\1\144\24\0\3\144\6\0\22\144\1\u036d\5\144\2\0"+
    "\33\144\3\0\1\144\24\0\3\u036e\6\0\30\u036e\2\0"+
    "\1\144\32\u036e\3\0\1\u036e\24\0\3\30\6\0\4\30"+
    "\1\u036f\23\30\2\0\1\144\32\30\3\0\1\30\24\0"+
    "\3\30\6\0\30\30\2\0\1\144\15\30\1\u0370\14\30"+
    "\3\0\1\30\100\0\1\u0371\121\0\1\u0372\55\0\3\30"+
    "\6\0\30\30\2\0\1\144\15\30\1\u0373\14\30\3\0"+
    "\1\30\76\0\1\u0374\27\0\1\215\1\u0355\1\216\1\215"+
    "\1\u035b\1\215\1\u0361\120\215\1\u0356\1\216\1\215\1\u035c"+
    "\1\215\1\u0362\121\215\1\216\1\215\1\216\1\215\1\u0118"+
    "\110\215\1\u0375\7\215\1\u0358\1\216\1\215\1\u035e\1\215"+
    "\1\u0364\120\215\1\u0359\1\216\1\215\1\u035f\1\215\1\u0365"+
    "\121\215\1\216\1\215\1\216\1\215\1\u0118\102\215\1\u0376"+
    "\14\215\1\216\1\u035b\2\216\1\u035b\1\216\1\u0361\120\216"+
    "\1\u035c\2\216\1\u035c\1\216\1\u0362\125\216\1\u0119\110\216"+
    "\1\u0377\7\216\1\u035e\2\216\1\u035e\1\216\1\u0364\120\216"+
    "\1\u035f\2\216\1\u035f\1\216\1\u0365\125\216\1\u0119\102\216"+
    "\1\u0378\14\216\1\215\1\u0375\1\216\1\215\1\u0377\1\215"+
    "\1\u0379\1\215\1\301\10\215\1\301\2\215\3\301\6\215"+
    "\30\301\2\215\33\301\3\215\1\301\2\215\1\216\1\215"+
    "\1\216\1\215\1\u0159\1\215\1\301\10\215\1\301\2\215"+
    "\3\301\6\215\30\301\2\215\11\301\1\u037a\21\301\3\215"+
    "\1\301\24\0\3\144\6\0\16\144\1\u037b\11\144\2\0"+
    "\33\144\3\0\1\144\24\0\3\144\6\0\1\u037c\27\144"+
    "\2\0\33\144\3\0\1\144\24\0\3\144\6\0\15\144"+
    "\1\u037d\12\144\2\0\16\144\1\u037d\14\144\3\0\1\144"+
    "\24\0\3\144\6\0\1\u037e\27\144\2\0\1\144\1\u037e"+
    "\31\144\3\0\1\144\24\0\3\144\6\0\15\144\1\u037f"+
    "\12\144\2\0\33\144\3\0\1\144\24\0\3\144\6\0"+
    "\14\144\1\u0380\13\144\2\0\33\144\3\0\1\144\24\0"+
    "\3\144\6\0\16\144\1\u0381\11\144\2\0\33\144\3\0"+
    "\1\144\24\0\3\30\6\0\30\30\2\0\1\144\3\30"+
    "\1\u0382\26\30\3\0\1\30\103\0\1\u0383\46\0\3\30"+
    "\6\0\30\30\2\0\1\144\23\30\1\u0384\6\30\3\0"+
    "\1\30\105\0\1\u0385\20\0\1\215\1\u0375\1\216\1\215"+
    "\1\u0377\1\215\1\u0379\121\215\1\216\1\215\1\216\1\215"+
    "\1\u0118\71\215\1\u0386\25\215\1\216\1\u0377\2\216\1\u0377"+
    "\1\216\1\u0379\125\216\1\u0119\71\216\1\u0387\25\216\2\215"+
    "\1\216\1\215\1\216\1\215\1\u0159\1\215\1\301\10\215"+
    "\1\301\2\215\3\301\6\215\30\301\2\215\6\301\1\u0388"+
    "\24\301\3\215\1\301\24\0\3\144\6\0\13\144\1\u0389"+
    "\14\144\2\0\33\144\3\0\1\144\24\0\3\144\6\0"+
    "\6\144\1\u038a\21\144\2\0\7\144\1\u038a\23\144\3\0"+
    "\1\144\24\0\3\144\6\0\23\144\1\u038b\4\144\2\0"+
    "\33\144\3\0\1\144\24\0\3\144\6\0\20\144\1\u038c"+
    "\7\144\2\0\33\144\3\0\1\144\120\0\1\u038d\31\0"+
    "\3\30\6\0\1\30\1\u038e\26\30\2\0\1\144\32\30"+
    "\3\0\1\30\2\215\1\216\1\215\1\216\1\215\1\u0118"+
    "\66\215\1\u038f\30\215\6\216\1\u0119\66\216\1\u0390\30\216"+
    "\1\215\1\u038f\1\216\1\215\1\u0390\1\215\1\u0391\1\215"+
    "\1\301\10\215\1\301\2\215\3\301\6\215\30\301\2\215"+
    "\33\301\3\215\1\301\24\0\3\144\6\0\4\144\1\u0392"+
    "\23\144\2\0\33\144\3\0\1\144\24\0\3\144\6\0"+
    "\14\144\1\u0393\13\144\2\0\33\144\3\0\1\144\24\0"+
    "\3\144\6\0\10\144\1\u0394\17\144\2\0\33\144\3\0"+
    "\1\144\24\0\3\30\6\0\30\30\2\0\1\144\30\30"+
    "\1\u0395\1\30\3\0\1\30\1\215\1\u038f\1\216\1\215"+
    "\1\u0390\1\215\1\u0391\117\215\1\216\1\u0390\2\216\1\u0390"+
    "\1\216\1\u0391\117\216\24\0\3\144\6\0\1\u0396\27\144"+
    "\2\0\33\144\3\0\1\144\24\0\3\144\6\0\16\144"+
    "\1\u0397\11\144\2\0\33\144\3\0\1\144\24\0\3\30"+
    "\6\0\10\30\1\u0398\17\30\2\0\1\144\32\30\3\0"+
    "\1\30\24\0\3\144\6\0\22\144\1\u0399\5\144\2\0"+
    "\33\144\3\0\1\144\24\0\3\30\6\0\30\30\2\0"+
    "\1\144\3\30\1\u039a\26\30\3\0\1\30\24\0\3\144"+
    "\6\0\16\144\1\u039b\11\144\2\0\33\144\3\0\1\144"+
    "\24\0\3\144\6\0\20\144\1\u039c\7\144\2\0\33\144"+
    "\3\0\1\144\24\0\3\144\6\0\10\144\1\u039d\17\144"+
    "\2\0\33\144\3\0\1\144\24\0\3\144\6\0\16\144"+
    "\1\u039e\11\144\2\0\33\144\3\0\1\144";

  private static int [] zzUnpackTrans() {
    int [] result = new int[68800];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\7\11\2\1\2\11\22\1\2\11"+
    "\16\1\1\11\1\1\1\11\2\1\1\11\34\0\1\11"+
    "\2\0\1\1\2\0\4\11\1\0\52\1\1\11\2\0"+
    "\1\11\62\0\1\11\36\0\2\11\2\0\63\1\2\11"+
    "\76\0\3\11\42\0\67\1\100\0\1\11\26\0\1\11"+
    "\1\0\1\11\11\0\42\1\1\0\5\1\1\0\1\1"+
    "\76\0\1\11\1\0\1\11\4\0\1\11\2\0\2\11"+
    "\1\0\1\11\7\0\2\11\4\0\34\1\2\0\5\1"+
    "\53\0\1\11\3\0\1\11\4\0\1\11\3\0\1\11"+
    "\1\0\2\11\2\0\1\11\2\0\1\11\24\1\2\0"+
    "\3\1\36\0\1\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\1\0\2\11\16\1\2\0\1\1\15\0\2\11"+
    "\1\0\2\11\1\0\12\1\1\0\1\11\1\1\5\0"+
    "\1\11\1\0\10\1\1\0\1\1\1\11\3\0\4\1"+
    "\1\11\1\1\2\0\1\11\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[926];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    /* CODIGO A√ëADIDO */    


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public EtiquetadoLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    /* CODIGO EJECUTADO AL FINAL DEL ANALISIS */
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(EtiquetadoParserSym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Simbolo no reconocido: " + yytext());
            }
            // fall through
          case 138: break;
          case 2:
            { /* IGNORAR */
            }
            // fall through
          case 139: break;
          case 3:
            { return new Symbol(NOT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 140: break;
          case 4:
            { return new Symbol(PARA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 141: break;
          case 5:
            { return new Symbol(PARC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 142: break;
          case 6:
            { return new Symbol(MULTIPLICACION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 143: break;
          case 7:
            { return new Symbol(SUMA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 144: break;
          case 8:
            { return new Symbol(COMA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 145: break;
          case 9:
            { return new Symbol(RESTA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 146: break;
          case 10:
            { return new Symbol(DIVISION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 147: break;
          case 11:
            { return new Symbol(D_INTEGER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 148: break;
          case 12:
            { return new Symbol(PUNTOS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 149: break;
          case 13:
            { return new Symbol(PUNTO_COMA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 150: break;
          case 14:
            { return new Symbol(MENOR_QUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 151: break;
          case 15:
            { return new Symbol(IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 152: break;
          case 16:
            { return new Symbol(MAYOR_QUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 153: break;
          case 17:
            { return new Symbol(ALFANUMERICO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 154: break;
          case 18:
            { return new Symbol(CORA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 155: break;
          case 19:
            { return new Symbol(CORC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 156: break;
          case 20:
            { return new Symbol(LLAA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 157: break;
          case 21:
            { return new Symbol(BARRA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 158: break;
          case 22:
            { return new Symbol(LLAC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 159: break;
          case 23:
            { return new Symbol(DIFERENTE_IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 160: break;
          case 24:
            { return new Symbol(AND, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 161: break;
          case 25:
            { return new Symbol(D_DECIMAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 162: break;
          case 26:
            { return new Symbol(MENOR_CIERRE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 163: break;
          case 27:
            { return new Symbol(MENOR_IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 164: break;
          case 28:
            { return new Symbol(IGUAL_IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 165: break;
          case 29:
            { return new Symbol(MAYOR_IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 166: break;
          case 30:
            { return new Symbol(IDENTIFICADOR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 167: break;
          case 31:
            { return new Symbol(IF, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 168: break;
          case 32:
            { return new Symbol(ID, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 169: break;
          case 33:
            { return new Symbol(OR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 170: break;
          case 34:
            { return new Symbol(D_STRING, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 171: break;
          case 35:
            { return new Symbol(DIGITO_COM, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 172: break;
          case 36:
            { return new Symbol(D_CHAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 173: break;
          case 37:
            { return new Symbol(ALLCHAR_COMSIMP, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 174: break;
          case 38:
            { return new Symbol(ASC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 175: break;
          case 39:
            { return new Symbol(P, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 176: break;
          case 40:
            { return new Symbol(END, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 177: break;
          case 41:
            { return new Symbol(ALT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 178: break;
          case 42:
            { return new Symbol(SRC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 179: break;
          case 43:
            { return new Symbol(ALLCHARNOSPACE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 180: break;
          case 44:
            { return new Symbol(ALLCHAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 181: break;
          case 45:
            { return new Symbol(HEXADECIMAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 182: break;
          case 46:
            { return new Symbol(ID_ETIQUETA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 183: break;
          case 47:
            { return new Symbol(PORCENTAJE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 184: break;
          case 48:
            { return new Symbol(BR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 185: break;
          case 49:
            { return new Symbol(H1, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 186: break;
          case 50:
            { return new Symbol(DESC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 187: break;
          case 51:
            { return new Symbol(ELSE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 188: break;
          case 52:
            { return new Symbol(EXIT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 189: break;
          case 53:
            { return new Symbol(INIT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 190: break;
          case 54:
            { return new Symbol(THEN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 191: break;
          case 55:
            { return new Symbol(CHAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 192: break;
          case 56:
            { return new Symbol(COLS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 193: break;
          case 57:
            { return new Symbol(HREF, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 194: break;
          case 58:
            { return new Symbol(NAME, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 195: break;
          case 59:
            { return new Symbol(ROWS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 196: break;
          case 60:
            { return new Symbol(TRUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 197: break;
          case 61:
            { return new Symbol(TYPE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 198: break;
          case 62:
            { return new Symbol(PIXELES, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 199: break;
          case 63:
            { return new Symbol(RED, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 200: break;
          case 64:
            { return new Symbol(ROW, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 201: break;
          case 65:
            { return new Symbol(DIV, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 202: break;
          case 66:
            { return new Symbol(IMG, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 203: break;
          case 67:
            { return new Symbol(WHILE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 204: break;
          case 68:
            { return new Symbol(CLASS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 205: break;
          case 69:
            { return new Symbol(COLOR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 206: break;
          case 70:
            { return new Symbol(FALSE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 207: break;
          case 71:
            { return new Symbol(WIDTH, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 208: break;
          case 72:
            { return new Symbol(AQUA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 209: break;
          case 73:
            { return new Symbol(BLUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 210: break;
          case 74:
            { return new Symbol(GRAY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 211: break;
          case 75:
            { return new Symbol(LEFT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 212: break;
          case 76:
            { return new Symbol(LIME, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 213: break;
          case 77:
            { return new Symbol(NAVY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 214: break;
          case 78:
            { return new Symbol(TEAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 215: break;
          case 79:
            { return new Symbol(TEXT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 216: break;
          case 80:
            { return new Symbol(BODY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 217: break;
          case 81:
            { return new Symbol(GCIC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 218: break;
          case 82:
            { return new Symbol(HEAD, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 219: break;
          case 83:
            { return new Symbol(LINK, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 220: break;
          case 84:
            { return new Symbol(SPAM, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 221: break;
          case 85:
            { return new Symbol(HUNTIL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 222: break;
          case 86:
            { return new Symbol(INSERT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 223: break;
          case 87:
            { return new Symbol(REPEAT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 224: break;
          case 88:
            { return new Symbol(HEIGHT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 225: break;
          case 89:
            { return new Symbol(STRING, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 226: break;
          case 90:
            { return new Symbol(ARIAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 227: break;
          case 91:
            { return new Symbol(BLACK, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 228: break;
          case 92:
            { return new Symbol(GREEN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 229: break;
          case 93:
            { return new Symbol(OLIVE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 230: break;
          case 94:
            { return new Symbol(RADIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 231: break;
          case 95:
            { return new Symbol(RIGHT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 232: break;
          case 96:
            { return new Symbol(WHITE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 233: break;
          case 97:
            { return new Symbol(GLOBAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 234: break;
          case 98:
            { return new Symbol(INPUT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 235: break;
          case 99:
            { return new Symbol(TITLE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 236: break;
          case 100:
            { return new Symbol(ON_LOAD, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 237: break;
          case 101:
            { return new Symbol(REVERSE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 238: break;
          case 102:
            { return new Symbol(BOOLEAN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 239: break;
          case 103:
            { return new Symbol(DECIMAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 240: break;
          case 104:
            { return new Symbol(INTEGER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 241: break;
          case 105:
            { return new Symbol(ONCLICK, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 242: break;
          case 106:
            { return new Symbol(GENEVA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 243: break;
          case 107:
            { return new Symbol(CENTER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 244: break;
          case 108:
            { return new Symbol(COLUMN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 245: break;
          case 109:
            { return new Symbol(MAROON, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 246: break;
          case 110:
            { return new Symbol(NUMBER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 247: break;
          case 111:
            { return new Symbol(PURPLE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 248: break;
          case 112:
            { return new Symbol(SILVER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 249: break;
          case 113:
            { return new Symbol(YELLOW, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 250: break;
          case 114:
            { return new Symbol(BUTTON, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 251: break;
          case 115:
            { return new Symbol(OPTION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 252: break;
          case 116:
            { return new Symbol(SELECT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 253: break;
          case 117:
            { return new Symbol(REDIRECT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 254: break;
          case 118:
            { return new Symbol(COURIER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 255: break;
          case 119:
            { return new Symbol(VERDANA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 256: break;
          case 120:
            { return new Symbol(FUCHSIA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 257: break;
          case 121:
            { return new Symbol(JUSTIFY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 258: break;
          case 122:
            { return new Symbol(PROCESS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 259: break;
          case 123:
            { return new Symbol(THENWHILE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 260: break;
          case 124:
            { return new Symbol(FONTSIZE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 261: break;
          case 125:
            { return new Symbol(CHECKBOX, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 262: break;
          case 126:
            { return new Symbol(ALERT_INFO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 263: break;
          case 127:
            { return new Symbol(TEXTAREA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 264: break;
          case 128:
            { return new Symbol(LETPAR_NUM, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 265: break;
          case 129:
            { return new Symbol(BACKGROUND, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 266: break;
          case 130:
            { return new Symbol(TEXTALIGN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 267: break;
          case 131:
            { return new Symbol(SCRIPTING, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 268: break;
          case 132:
            { return new Symbol(FONTFAMILY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 269: break;
          case 133:
            { return new Symbol(SANS_SERIF, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 270: break;
          case 134:
            { return new Symbol(LETIMPAR_NUM, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 271: break;
          case 135:
            { return new Symbol(NUM_ALEATORIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 272: break;
          case 136:
            { return new Symbol(GETBYID, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 273: break;
          case 137:
            { return new Symbol(CARACTER_ALEATORIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 274: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}