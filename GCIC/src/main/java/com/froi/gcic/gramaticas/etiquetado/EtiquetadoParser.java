
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.froi.gcic.gramaticas.etiquetado;

import com.froi.gcic.entidades.Advertencia;
import com.froi.gcic.entidades.Captcha;
import com.froi.gcic.entidades.Identificador;
import com.froi.gcic.entidades.Parametro;
import com.froi.gcic.manejodesimbolos.Dato;
import com.froi.gcic.manejodesimbolos.OperacionesBooleanas;
import com.froi.gcic.manejodesimbolos.Simbolo;
import com.froi.gcic.manejodesimbolos.TablaDeSimbolos;
import com.froi.gcic.manejodesimbolos.TablasDeOperaciones;
import com.froi.gcic.manejodesimbolos.TipoDeDato;
import com.froi.gcic.etiquetas.*;
import com.froi.gcic.herramientas.FuncionesEspeciales;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class EtiquetadoParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return EtiquetadoParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public EtiquetadoParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public EtiquetadoParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public EtiquetadoParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u018c\000\002\002\004\000\002\002\004\000\002\146" +
    "\006\000\002\146\003\000\002\014\005\000\002\014\006" +
    "\000\002\014\006\000\002\014\006\000\002\014\007\000" +
    "\002\014\007\000\002\014\007\000\002\014\010\000\002" +
    "\046\005\000\002\003\005\000\002\147\005\000\002\204" +
    "\005\000\002\004\005\000\002\150\006\000\002\150\003" +
    "\000\002\205\005\000\002\015\004\000\002\015\002\000" +
    "\002\015\004\000\002\020\004\000\002\020\005\000\002" +
    "\020\005\000\002\152\006\000\002\153\005\000\002\154" +
    "\005\000\002\206\005\000\002\206\003\000\002\207\005" +
    "\000\002\207\003\000\002\210\005\000\002\210\003\000" +
    "\002\017\004\000\002\017\002\000\002\100\004\000\002" +
    "\100\003\000\002\023\003\000\002\023\003\000\002\016" +
    "\004\000\002\016\002\000\002\016\004\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\004\000\002\021\003\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\003\000\002\155\006\000\002\156\006" +
    "\000\002\157\006\000\002\160\006\000\002\161\006\000" +
    "\002\162\006\000\002\163\005\000\002\164\006\000\002" +
    "\165\006\000\002\166\006\000\002\167\005\000\002\170" +
    "\005\000\002\171\005\000\002\172\005\000\002\173\005" +
    "\000\002\174\005\000\002\176\005\000\002\177\005\000" +
    "\002\200\005\000\002\035\004\000\002\035\002\000\002" +
    "\022\011\000\002\042\004\000\002\042\002\000\002\044" +
    "\004\000\002\044\002\000\002\045\005\000\002\045\005" +
    "\000\002\045\005\000\002\045\005\000\002\045\005\000" +
    "\002\045\004\000\002\045\003\000\002\045\005\000\002" +
    "\045\005\000\002\045\005\000\002\045\005\000\002\045" +
    "\003\000\002\113\004\000\002\113\002\000\002\114\003" +
    "\000\002\114\003\000\002\114\005\000\002\114\005\000" +
    "\002\114\005\000\002\050\004\000\002\050\002\000\002" +
    "\050\004\000\002\051\007\000\002\051\007\000\002\052" +
    "\004\000\002\052\002\000\002\052\004\000\002\053\007" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\054\004\000\002\054\002\000\002\054\004\000\002" +
    "\055\007\000\002\056\004\000\002\056\002\000\002\056" +
    "\004\000\002\057\003\000\002\060\004\000\002\060\002" +
    "\000\002\060\004\000\002\061\007\000\002\061\003\000" +
    "\002\062\004\000\002\062\002\000\002\062\004\000\002" +
    "\063\007\000\002\063\007\000\002\063\007\000\002\063" +
    "\007\000\002\063\007\000\002\063\007\000\002\064\004" +
    "\000\002\064\002\000\002\064\004\000\002\065\003\000" +
    "\002\066\004\000\002\066\002\000\002\066\004\000\002" +
    "\067\003\000\002\067\007\000\002\067\007\000\002\070" +
    "\004\000\002\070\002\000\002\070\004\000\002\071\007" +
    "\000\002\071\007\000\002\071\007\000\002\071\007\000" +
    "\002\071\007\000\002\072\004\000\002\072\002\000\002" +
    "\072\004\000\002\073\003\000\002\073\007\000\002\073" +
    "\007\000\002\074\004\000\002\074\002\000\002\074\004" +
    "\000\002\075\003\000\002\076\004\000\002\076\002\000" +
    "\002\076\004\000\002\077\003\000\002\047\007\000\002" +
    "\047\007\000\002\047\007\000\002\047\007\000\002\047" +
    "\007\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\031\003\000\002\031\003\000\002\032\003" +
    "\000\002\032\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\005\007\000\002" +
    "\043\004\000\002\043\002\000\002\104\006\000\002\104" +
    "\010\000\002\104\010\000\002\104\010\000\002\104\010" +
    "\000\002\203\005\000\002\203\005\000\002\101\004\000" +
    "\002\101\002\000\002\101\004\000\002\102\003\000\002" +
    "\102\003\000\002\102\003\000\002\102\003\000\002\102" +
    "\004\000\002\103\004\000\002\103\004\000\002\103\004" +
    "\000\002\115\003\000\002\115\005\000\002\115\005\000" +
    "\002\115\006\000\002\115\005\000\002\115\005\000\002" +
    "\115\006\000\002\111\005\000\002\111\003\000\002\112" +
    "\003\000\002\112\003\000\002\112\003\000\002\116\006" +
    "\000\002\116\006\000\002\116\006\000\002\116\006\000" +
    "\002\116\006\000\002\013\006\000\002\134\003\000\002" +
    "\134\003\000\002\134\003\000\002\134\003\000\002\134" +
    "\003\000\002\135\004\000\002\135\002\000\002\145\005" +
    "\000\002\145\003\000\002\145\004\000\002\145\005\000" +
    "\002\034\003\000\002\034\003\000\002\007\003\000\002" +
    "\007\002\000\002\011\005\000\002\011\003\000\002\011" +
    "\004\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\130\005\000\002\117\011\000\002\117" +
    "\006\000\002\202\012\000\002\202\012\000\002\202\012" +
    "\000\002\202\012\000\002\202\012\000\002\202\012\000" +
    "\002\202\012\000\002\202\012\000\002\202\012\000\002" +
    "\201\007\000\002\125\004\000\002\125\002\000\002\126" +
    "\017\000\002\126\011\000\002\126\017\000\002\126\017" +
    "\000\002\126\017\000\002\126\017\000\002\126\017\000" +
    "\002\126\017\000\002\126\017\000\002\126\017\000\002" +
    "\126\017\000\002\126\017\000\002\126\017\000\002\126" +
    "\011\000\002\126\011\000\002\126\011\000\002\126\011" +
    "\000\002\126\011\000\002\127\012\000\002\127\004\000" +
    "\002\127\002\000\002\127\012\000\002\127\012\000\002" +
    "\127\012\000\002\127\012\000\002\127\012\000\002\127" +
    "\012\000\002\120\021\000\002\120\013\000\002\120\021" +
    "\000\002\120\021\000\002\120\021\000\002\120\021\000" +
    "\002\120\021\000\002\120\021\000\002\120\021\000\002" +
    "\120\021\000\002\120\021\000\002\120\021\000\002\120" +
    "\021\000\002\120\021\000\002\120\021\000\002\120\021" +
    "\000\002\120\013\000\002\120\013\000\002\120\013\000" +
    "\002\120\013\000\002\120\013\000\002\120\013\000\002" +
    "\120\013\000\002\121\006\000\002\121\005\000\002\122" +
    "\003\000\002\122\003\000\002\123\003\000\002\124\016" +
    "\000\002\124\010\000\002\124\016\000\002\124\016\000" +
    "\002\124\016\000\002\124\016\000\002\124\016\000\002" +
    "\124\016\000\002\124\016\000\002\124\016\000\002\124" +
    "\016\000\002\124\016\000\002\124\016\000\002\124\010" +
    "\000\002\124\010\000\002\124\010\000\002\124\010\000" +
    "\002\131\005\000\002\131\005\000\002\131\005\000\002" +
    "\131\005\000\002\131\005\000\002\131\005\000\002\131" +
    "\004\000\002\131\005\000\002\131\005\000\002\131\004" +
    "\000\002\131\005\000\002\131\005\000\002\131\005\000" +
    "\002\131\005\000\002\131\003\000\002\131\005\000\002" +
    "\132\003\000\002\144\003\000\002\144\003\000\002\144" +
    "\003\000\002\144\003\000\002\144\003\000\002\144\003" +
    "\000\002\144\003\000\002\144\003\000\002\144\003\000" +
    "\002\144\003\000\002\144\003\000\002\144\006\000\002" +
    "\144\006\000\002\144\006\000\002\144\006\000\002\144" +
    "\006\000\002\144\006\000\002\144\005\000\002\144\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u03f7\000\006\003\004\155\005\001\002\000\004\155" +
    "\ufffe\001\002\000\004\004\u03ec\001\002\000\004\155\014" +
    "\001\002\000\004\002\010\001\002\000\004\002\001\001" +
    "\002\000\004\002\000\001\002\000\010\003\uffec\155\uffec" +
    "\164\uffec\001\002\000\004\155\u03bc\001\002\000\006\005" +
    "\u03ba\024\u02ed\001\002\000\012\003\uff31\135\uff31\136\uff31" +
    "\164\uff31\001\002\000\006\003\020\155\022\001\002\000" +
    "\006\155\u03ab\164\u03ae\001\002\000\014\003\uffef\155\uffef" +
    "\164\uffef\206\uffef\211\uffef\001\002\000\006\003\020\155" +
    "\u03aa\001\002\000\006\010\u039f\024\u02ed\001\002\000\014" +
    "\003\uffd7\155\uffd7\164\uffd7\206\uffd7\211\uffd7\001\002\000" +
    "\014\003\043\155\035\164\033\206\046\211\042\001\002" +
    "\000\014\003\uffca\155\uffca\164\uffca\206\uffca\211\uffca\001" +
    "\002\000\012\155\uffa2\164\uffa2\206\uffa2\211\uffa2\001\002" +
    "\000\006\155\uffb5\164\uffb5\001\002\000\010\164\uffb2\206" +
    "\uffb2\211\uffb2\001\002\000\014\003\uffcf\155\uffcf\164\uffcf" +
    "\206\uffcf\211\uffcf\001\002\000\012\155\uffb0\164\uffb0\206" +
    "\uffb0\211\uffb0\001\002\000\004\010\u0364\001\002\000\010" +
    "\164\uffb2\206\uffb2\211\uffb2\001\002\000\030\011\u029e\012" +
    "\u02ec\013\u02f0\014\u02ef\016\u02ee\017\u02f1\020\u029f\021\u02eb" +
    "\022\u02a0\023\u02a1\024\u02ed\001\002\000\010\164\uffb2\206" +
    "\uffb2\211\uffb2\001\002\000\012\155\uffa2\164\uffa2\206\uffa2" +
    "\211\uffa2\001\002\000\006\155\ufff1\164\ufff1\001\002\000" +
    "\012\155\uffa2\164\uffa2\206\uffa2\211\uffa2\001\002\000\014" +
    "\003\uffda\155\uffda\164\uffda\206\uffda\211\uffda\001\002\000" +
    "\014\003\uffd6\155\uffd6\164\uffd6\206\uffd6\211\uffd6\001\002" +
    "\000\004\164\u0285\001\002\000\012\003\uff31\135\uff31\136" +
    "\uff31\164\uff31\001\002\000\014\003\uffd9\155\uffd9\164\uffd9" +
    "\206\uffd9\211\uffd9\001\002\000\014\003\uffd8\155\uffd8\164" +
    "\uffd8\206\uffd8\211\uffd8\001\002\000\012\003\053\135\052" +
    "\136\055\164\057\001\002\000\004\177\u0281\001\002\000" +
    "\004\175\u027f\001\002\000\016\003\uffdf\155\uffdf\164\uffdf" +
    "\175\u027a\206\uffdf\211\uffdf\001\002\000\014\003\uffcb\155" +
    "\uffcb\164\uffcb\206\uffcb\211\uffcb\001\002\000\006\003\062" +
    "\175\063\001\002\000\012\003\uff32\135\uff32\136\uff32\164" +
    "\uff32\001\002\000\004\024\060\001\002\000\004\157\061" +
    "\001\002\000\014\003\uffe0\155\uffe0\164\uffe0\206\uffe0\211" +
    "\uffe0\001\002\000\004\176\u0276\001\002\000\006\003\064" +
    "\176\065\001\002\000\004\177\u0273\001\002\000\006\003" +
    "\066\177\uff2b\001\002\000\060\003\uff28\110\uff28\111\uff28" +
    "\112\uff28\113\uff28\114\uff28\115\uff28\116\uff28\117\uff28\120" +
    "\uff28\121\uff28\125\uff28\130\uff28\132\uff28\134\uff28\137\uff28" +
    "\140\uff28\141\uff28\142\uff28\143\uff28\200\uff28\206\uff28\211" +
    "\uff28\001\002\000\060\003\122\110\126\111\075\112\116" +
    "\113\110\114\103\115\102\116\114\117\072\120\111\121" +
    "\123\125\112\130\101\132\130\134\131\137\100\140\120" +
    "\141\117\142\071\143\133\200\134\206\105\211\073\001" +
    "\002\000\062\003\uff26\110\uff26\111\uff26\112\uff26\113\uff26" +
    "\114\uff26\115\uff26\116\uff26\117\uff26\120\uff26\121\uff26\125" +
    "\uff26\130\uff26\132\uff26\134\uff26\137\uff26\140\uff26\141\uff26" +
    "\142\uff26\143\uff26\200\uff26\204\uff26\206\uff26\211\uff26\001" +
    "\002\000\010\144\uff08\206\uff08\211\uff08\001\002\000\004" +
    "\175\u0270\001\002\000\014\003\uff00\172\uff00\176\uff00\203" +
    "\uff00\207\uff00\001\002\000\004\203\u026f\001\002\000\004" +
    "\175\u026c\001\002\000\010\144\u0266\206\ufefe\211\ufefe\001" +
    "\002\000\060\003\uff28\110\uff28\111\uff28\112\uff28\113\uff28" +
    "\114\uff28\115\uff28\116\uff28\117\uff28\120\uff28\121\uff28\125" +
    "\uff28\130\uff28\132\uff28\134\uff28\137\uff28\140\uff28\141\uff28" +
    "\142\uff28\143\uff28\204\uff28\206\uff28\211\uff28\001\002\000" +
    "\010\144\uff0c\206\uff0c\211\uff0c\001\002\000\006\003\u01e5" +
    "\175\u01e6\001\002\000\004\175\u01e3\001\002\000\004\175" +
    "\u01e0\001\002\000\062\003\uff24\110\uff24\111\uff24\112\uff24" +
    "\113\uff24\114\uff24\115\uff24\116\uff24\117\uff24\120\uff24\121" +
    "\uff24\125\uff24\130\uff24\132\uff24\134\uff24\137\uff24\140\uff24" +
    "\141\uff24\142\uff24\143\uff24\200\uff24\204\uff24\206\uff24\211" +
    "\uff24\001\002\000\014\003\uff01\172\uff01\176\uff01\203\uff01" +
    "\207\uff01\001\002\000\004\203\u01df\001\002\000\062\003" +
    "\uff25\110\uff25\111\uff25\112\uff25\113\uff25\114\uff25\115\uff25" +
    "\116\uff25\117\uff25\120\uff25\121\uff25\125\uff25\130\uff25\132" +
    "\uff25\134\uff25\137\uff25\140\uff25\141\uff25\142\uff25\143\uff25" +
    "\200\uff25\204\uff25\206\uff25\211\uff25\001\002\000\004\175" +
    "\u01dc\001\002\000\004\175\u01da\001\002\000\006\003\u01b7" +
    "\175\u01b8\001\002\000\062\003\uff29\110\uff29\111\uff29\112" +
    "\uff29\113\uff29\114\uff29\115\uff29\116\uff29\117\uff29\120\uff29" +
    "\121\uff29\125\uff29\130\uff29\132\uff29\134\uff29\137\uff29\140" +
    "\uff29\141\uff29\142\uff29\143\uff29\200\uff29\204\uff29\206\uff29" +
    "\211\uff29\001\002\000\004\175\u01b5\001\002\000\012\003" +
    "\uff04\172\uff04\203\uff04\207\uff04\001\002\000\004\175\u01b2" +
    "\001\002\000\010\144\uff09\206\uff09\211\uff09\001\002\000" +
    "\010\144\uff0b\206\uff0b\211\uff0b\001\002\000\046\110\126" +
    "\111\075\112\116\113\110\114\103\115\102\116\114\117" +
    "\072\120\111\121\123\134\131\137\100\140\120\141\117" +
    "\142\071\143\133\206\105\211\073\001\002\000\066\003" +
    "\uff27\110\uff27\111\uff27\112\uff27\113\uff27\114\uff27\115\uff27" +
    "\116\uff27\117\uff27\120\uff27\121\uff27\125\uff27\130\uff27\132" +
    "\uff27\134\uff27\137\uff27\140\uff27\141\uff27\142\uff27\143\uff27" +
    "\175\330\200\uff27\203\327\204\uff27\206\uff27\211\uff27\001" +
    "\002\000\004\175\u0130\001\002\000\062\003\uff23\110\uff23" +
    "\111\uff23\112\uff23\113\uff23\114\uff23\115\uff23\116\uff23\117" +
    "\uff23\120\uff23\121\uff23\125\uff23\130\uff23\132\uff23\134\uff23" +
    "\137\uff23\140\uff23\141\uff23\142\uff23\143\uff23\200\uff23\204" +
    "\uff23\206\uff23\211\uff23\001\002\000\004\203\uff1e\001\002" +
    "\000\004\175\u012d\001\002\000\010\003\u0128\172\u0129\207" +
    "\u0127\001\002\000\006\003\147\175\150\001\002\000\004" +
    "\175\136\001\002\000\004\203\135\001\002\000\010\144" +
    "\uff0a\206\uff0a\211\uff0a\001\002\000\012\003\uff2c\135\uff2c" +
    "\136\uff2c\164\uff2c\001\002\000\064\003\uff20\110\uff20\111" +
    "\uff20\112\uff20\113\uff20\114\uff20\115\uff20\116\uff20\117\uff20" +
    "\120\uff20\121\uff20\125\uff20\127\uff20\130\uff20\132\uff20\134" +
    "\uff20\137\uff20\140\uff20\141\uff20\142\uff20\143\uff20\200\uff20" +
    "\204\uff20\206\uff20\211\uff20\001\002\000\010\206\142\211" +
    "\141\213\137\001\002\000\006\176\uff15\207\uff15\001\002" +
    "\000\006\176\uff16\207\uff16\001\002\000\006\176\uff14\207" +
    "\uff14\001\002\000\006\176\uff13\207\uff13\001\002\000\006" +
    "\176\145\207\144\001\002\000\010\206\142\211\141\213" +
    "\137\001\002\000\004\203\uff18\001\002\000\006\176\uff17" +
    "\207\uff17\001\002\000\056\110\177\111\153\112\166\113" +
    "\151\114\201\115\200\116\171\122\164\145\163\146\161" +
    "\147\157\150\172\151\165\152\160\163\156\166\202\175" +
    "\162\206\176\210\173\211\174\214\152\215\170\001\002" +
    "\000\060\003\175\110\177\111\153\112\166\113\151\114" +
    "\201\115\200\116\171\122\164\145\163\146\161\147\157" +
    "\150\172\151\165\152\160\163\156\166\202\175\162\206" +
    "\176\210\173\211\174\214\152\215\170\001\002\000\004" +
    "\175\u0119\001\002\000\040\003\ufe83\153\ufe83\154\ufe83\155" +
    "\ufe83\156\ufe83\157\ufe83\160\ufe83\161\ufe83\162\ufe83\165\ufe83" +
    "\166\ufe83\167\ufe83\170\ufe83\176\ufe83\203\ufe83\001\002\000" +
    "\004\175\u0116\001\002\000\040\003\ufe8b\153\ufe8b\154\ufe8b" +
    "\155\ufe8b\156\ufe8b\157\ufe8b\160\ufe8b\161\ufe8b\162\ufe8b\165" +
    "\ufe8b\166\ufe8b\167\ufe8b\170\ufe8b\176\ufe8b\203\ufe8b\001\002" +
    "\000\036\003\271\153\207\154\214\155\212\156\217\157" +
    "\205\160\210\161\216\162\204\165\206\166\215\167\211" +
    "\170\213\176\272\001\002\000\056\110\177\111\153\112" +
    "\166\113\151\114\201\115\200\116\171\122\164\145\163" +
    "\146\161\147\157\150\172\151\165\152\160\163\156\166" +
    "\202\175\162\206\176\210\173\211\174\214\152\215\170" +
    "\001\002\000\040\003\ufe7f\153\ufe7f\154\ufe7f\155\ufe7f\156" +
    "\ufe7f\157\ufe7f\160\ufe7f\161\ufe7f\162\ufe7f\165\ufe7f\166\ufe7f" +
    "\167\ufe7f\170\ufe7f\176\ufe7f\203\ufe7f\001\002\000\040\003" +
    "\ufe81\153\ufe81\154\ufe81\155\ufe81\156\ufe81\157\ufe81\160\ufe81" +
    "\161\ufe81\162\ufe81\165\ufe81\166\ufe81\167\ufe81\170\ufe81\176" +
    "\ufe81\203\ufe81\001\002\000\040\003\ufe87\153\ufe87\154\ufe87" +
    "\155\ufe87\156\ufe87\157\ufe87\160\ufe87\161\ufe87\162\ufe87\165" +
    "\ufe87\166\ufe87\167\ufe87\170\ufe87\176\ufe87\203\ufe87\001\002" +
    "\000\056\110\177\111\153\112\166\113\151\114\201\115" +
    "\200\116\171\122\164\145\163\146\161\147\157\150\172" +
    "\151\165\152\160\163\156\166\202\175\162\206\176\210" +
    "\173\211\174\214\152\215\170\001\002\000\040\003\ufe88" +
    "\153\ufe88\154\ufe88\155\ufe88\156\ufe88\157\ufe88\160\ufe88\161" +
    "\ufe88\162\ufe88\165\ufe88\166\ufe88\167\ufe88\170\ufe88\176\ufe88" +
    "\203\ufe88\001\002\000\004\175\263\001\002\000\040\003" +
    "\ufe84\153\ufe84\154\ufe84\155\ufe84\156\ufe84\157\ufe84\160\ufe84" +
    "\161\ufe84\162\ufe84\165\ufe84\166\ufe84\167\ufe84\170\ufe84\176" +
    "\ufe84\203\ufe84\001\002\000\004\175\260\001\002\000\040" +
    "\003\ufe89\153\ufe89\154\ufe89\155\ufe89\156\ufe89\157\ufe89\160" +
    "\ufe89\161\ufe89\162\ufe89\165\ufe89\166\ufe89\167\ufe89\170\ufe89" +
    "\176\ufe89\203\ufe89\001\002\000\040\003\ufe82\153\ufe82\154" +
    "\ufe82\155\ufe82\156\ufe82\157\ufe82\160\ufe82\161\ufe82\162\ufe82" +
    "\165\ufe82\166\ufe82\167\ufe82\170\ufe82\176\ufe82\203\ufe82\001" +
    "\002\000\004\175\256\001\002\000\040\003\ufe7e\153\ufe7e" +
    "\154\ufe7e\155\ufe7e\156\ufe7e\157\ufe7e\160\ufe7e\161\ufe7e\162" +
    "\ufe7e\165\ufe7e\166\ufe7e\167\ufe7e\170\ufe7e\176\ufe7e\203\ufe7e" +
    "\001\002\000\040\003\ufe80\153\ufe80\154\ufe80\155\ufe80\156" +
    "\ufe80\157\ufe80\160\ufe80\161\ufe80\162\ufe80\165\ufe80\166\ufe80" +
    "\167\ufe80\170\ufe80\176\ufe80\203\ufe80\001\002\000\040\003" +
    "\ufe85\153\ufe85\154\ufe85\155\ufe85\156\ufe85\157\ufe85\160\ufe85" +
    "\161\ufe85\162\ufe85\165\ufe85\166\ufe85\167\ufe85\170\ufe85\176" +
    "\ufe85\203\ufe85\001\002\000\004\176\244\001\002\000\040" +
    "\003\ufe86\153\ufe86\154\ufe86\155\ufe86\156\ufe86\157\ufe86\160" +
    "\ufe86\161\ufe86\162\ufe86\165\ufe86\166\ufe86\167\ufe86\170\ufe86" +
    "\176\ufe86\203\ufe86\001\002\000\004\175\241\001\002\000" +
    "\004\175\237\001\002\000\004\175\234\001\002\000\056" +
    "\110\177\111\153\112\166\113\151\114\201\115\200\116" +
    "\171\122\164\145\163\146\161\147\157\150\172\151\165" +
    "\152\160\163\156\166\202\175\162\206\176\210\173\211" +
    "\174\214\152\215\170\001\002\000\040\003\ufe90\153\207" +
    "\154\214\155\212\156\217\157\205\160\210\161\216\162" +
    "\204\165\ufe90\166\ufe90\167\ufe90\170\ufe90\176\ufe90\203\ufe90" +
    "\001\002\000\056\110\177\111\153\112\166\113\151\114" +
    "\201\115\200\116\171\122\164\145\163\146\161\147\157" +
    "\150\172\151\165\152\160\163\156\166\202\175\162\206" +
    "\176\210\173\211\174\214\152\215\170\001\002\000\056" +
    "\110\177\111\153\112\166\113\151\114\201\115\200\116" +
    "\171\122\164\145\163\146\161\147\157\150\172\151\165" +
    "\152\160\163\156\166\202\175\162\206\176\210\173\211" +
    "\174\214\152\215\170\001\002\000\056\110\177\111\153" +
    "\112\166\113\151\114\201\115\200\116\171\122\164\145" +
    "\163\146\161\147\157\150\172\151\165\152\160\163\156" +
    "\166\202\175\162\206\176\210\173\211\174\214\152\215" +
    "\170\001\002\000\056\110\177\111\153\112\166\113\151" +
    "\114\201\115\200\116\171\122\164\145\163\146\161\147" +
    "\157\150\172\151\165\152\160\163\156\166\202\175\162" +
    "\206\176\210\173\211\174\214\152\215\170\001\002\000" +
    "\056\110\177\111\153\112\166\113\151\114\201\115\200" +
    "\116\171\122\164\145\163\146\161\147\157\150\172\151" +
    "\165\152\160\163\156\166\202\175\162\206\176\210\173" +
    "\211\174\214\152\215\170\001\002\000\056\110\177\111" +
    "\153\112\166\113\151\114\201\115\200\116\171\122\164" +
    "\145\163\146\161\147\157\150\172\151\165\152\160\163" +
    "\156\166\202\175\162\206\176\210\173\211\174\214\152" +
    "\215\170\001\002\000\056\110\177\111\153\112\166\113" +
    "\151\114\201\115\200\116\171\122\164\145\163\146\161" +
    "\147\157\150\172\151\165\152\160\163\156\166\202\175" +
    "\162\206\176\210\173\211\174\214\152\215\170\001\002" +
    "\000\056\110\177\111\153\112\166\113\151\114\201\115" +
    "\200\116\171\122\164\145\163\146\161\147\157\150\172" +
    "\151\165\152\160\163\156\166\202\175\162\206\176\210" +
    "\173\211\174\214\152\215\170\001\002\000\056\110\177" +
    "\111\153\112\166\113\151\114\201\115\200\116\171\122" +
    "\164\145\163\146\161\147\157\150\172\151\165\152\160" +
    "\163\156\166\202\175\162\206\176\210\173\211\174\214" +
    "\152\215\170\001\002\000\056\110\177\111\153\112\166" +
    "\113\151\114\201\115\200\116\171\122\164\145\163\146" +
    "\161\147\157\150\172\151\165\152\160\163\156\166\202" +
    "\175\162\206\176\210\173\211\174\214\152\215\170\001" +
    "\002\000\056\110\177\111\153\112\166\113\151\114\201" +
    "\115\200\116\171\122\164\145\163\146\161\147\157\150" +
    "\172\151\165\152\160\163\156\166\202\175\162\206\176" +
    "\210\173\211\174\214\152\215\170\001\002\000\056\110" +
    "\177\111\153\112\166\113\151\114\201\115\200\116\171" +
    "\122\164\145\163\146\161\147\157\150\172\151\165\152" +
    "\160\163\156\166\202\175\162\206\176\210\173\211\174" +
    "\214\152\215\170\001\002\000\040\003\ufe96\153\ufe96\154" +
    "\ufe96\155\ufe96\156\ufe96\157\ufe96\160\ufe96\161\216\162\204" +
    "\165\ufe96\166\ufe96\167\ufe96\170\ufe96\176\ufe96\203\ufe96\001" +
    "\002\000\040\003\ufe91\153\ufe91\154\ufe91\155\ufe91\156\ufe91" +
    "\157\ufe91\160\ufe91\161\ufe91\162\204\165\ufe91\166\ufe91\167" +
    "\ufe91\170\ufe91\176\ufe91\203\ufe91\001\002\000\040\003\ufe8e" +
    "\153\207\154\214\155\212\156\217\157\205\160\210\161" +
    "\216\162\204\165\ufe8e\166\ufe8e\167\211\170\213\176\ufe8e" +
    "\203\ufe8e\001\002\000\040\003\ufe98\153\ufe98\154\ufe98\155" +
    "\ufe98\156\ufe98\157\ufe98\160\ufe98\161\216\162\204\165\ufe98" +
    "\166\ufe98\167\ufe98\170\ufe98\176\ufe98\203\ufe98\001\002\000" +
    "\040\003\ufe8c\153\207\154\214\155\212\156\217\157\205" +
    "\160\210\161\216\162\204\165\ufe8c\166\ufe8c\167\ufe8c\170" +
    "\ufe8c\176\ufe8c\203\ufe8c\001\002\000\040\003\ufe97\153\ufe97" +
    "\154\ufe97\155\ufe97\156\ufe97\157\ufe97\160\ufe97\161\216\162" +
    "\204\165\ufe97\166\ufe97\167\ufe97\170\ufe97\176\ufe97\203\ufe97" +
    "\001\002\000\040\003\ufe8d\153\207\154\214\155\212\156" +
    "\217\157\205\160\210\161\216\162\204\165\ufe8d\166\ufe8d" +
    "\167\ufe8d\170\ufe8d\176\ufe8d\203\ufe8d\001\002\000\040\003" +
    "\ufe94\153\ufe94\154\ufe94\155\ufe94\156\ufe94\157\ufe94\160\ufe94" +
    "\161\216\162\204\165\ufe94\166\ufe94\167\ufe94\170\ufe94\176" +
    "\ufe94\203\ufe94\001\002\000\040\003\ufe99\153\ufe99\154\ufe99" +
    "\155\ufe99\156\ufe99\157\ufe99\160\ufe99\161\216\162\204\165" +
    "\ufe99\166\ufe99\167\ufe99\170\ufe99\176\ufe99\203\ufe99\001\002" +
    "\000\040\003\ufe8f\153\207\154\214\155\212\156\217\157" +
    "\205\160\210\161\216\162\204\165\ufe8f\166\ufe8f\167\211" +
    "\170\213\176\ufe8f\203\ufe8f\001\002\000\040\003\ufe95\153" +
    "\ufe95\154\ufe95\155\ufe95\156\ufe95\157\ufe95\160\ufe95\161\216" +
    "\162\204\165\ufe95\166\ufe95\167\ufe95\170\ufe95\176\ufe95\203" +
    "\ufe95\001\002\000\040\003\ufe92\153\ufe92\154\ufe92\155\ufe92" +
    "\156\ufe92\157\ufe92\160\ufe92\161\ufe92\162\ufe92\165\ufe92\166" +
    "\ufe92\167\ufe92\170\ufe92\176\ufe92\203\ufe92\001\002\000\056" +
    "\110\177\111\153\112\166\113\151\114\201\115\200\116" +
    "\171\122\164\145\163\146\161\147\157\150\172\151\165" +
    "\152\160\163\156\166\202\175\162\206\176\210\173\211" +
    "\174\214\152\215\170\001\002\000\034\153\207\154\214" +
    "\155\212\156\217\157\205\160\210\161\216\162\204\165" +
    "\206\166\215\167\211\170\213\176\236\001\002\000\040" +
    "\003\ufe78\153\ufe78\154\ufe78\155\ufe78\156\ufe78\157\ufe78\160" +
    "\ufe78\161\ufe78\162\ufe78\165\ufe78\166\ufe78\167\ufe78\170\ufe78" +
    "\176\ufe78\203\ufe78\001\002\000\004\176\240\001\002\000" +
    "\040\003\ufe77\153\ufe77\154\ufe77\155\ufe77\156\ufe77\157\ufe77" +
    "\160\ufe77\161\ufe77\162\ufe77\165\ufe77\166\ufe77\167\ufe77\170" +
    "\ufe77\176\ufe77\203\ufe77\001\002\000\056\110\177\111\153" +
    "\112\166\113\151\114\201\115\200\116\171\122\164\145" +
    "\163\146\161\147\157\150\172\151\165\152\160\163\156" +
    "\166\202\175\162\206\176\210\173\211\174\214\152\215" +
    "\170\001\002\000\034\153\207\154\214\155\212\156\217" +
    "\157\205\160\210\161\216\162\204\165\206\166\215\167" +
    "\211\170\213\176\243\001\002\000\040\003\ufe7c\153\ufe7c" +
    "\154\ufe7c\155\ufe7c\156\ufe7c\157\ufe7c\160\ufe7c\161\ufe7c\162" +
    "\ufe7c\165\ufe7c\166\ufe7c\167\ufe7c\170\ufe7c\176\ufe7c\203\ufe7c" +
    "\001\002\000\004\133\245\001\002\000\050\110\126\111" +
    "\075\112\116\113\110\114\103\115\102\116\114\117\072" +
    "\120\111\121\123\123\246\134\131\137\100\140\120\141" +
    "\117\142\071\143\133\206\105\211\073\001\002\000\004" +
    "\201\250\001\002\000\062\003\ufe9c\110\ufe9c\111\ufe9c\112" +
    "\ufe9c\113\ufe9c\114\ufe9c\115\ufe9c\116\ufe9c\117\ufe9c\120\ufe9c" +
    "\121\ufe9c\125\ufe9c\130\ufe9c\132\ufe9c\134\ufe9c\137\ufe9c\140" +
    "\ufe9c\141\ufe9c\142\ufe9c\143\ufe9c\200\ufe9c\204\ufe9c\206\ufe9c" +
    "\211\ufe9c\001\002\000\004\204\251\001\002\000\060\003" +
    "\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114\uff28\115\uff28" +
    "\116\uff28\117\uff28\120\uff28\121\uff28\125\uff28\130\uff28\132" +
    "\uff28\134\uff28\137\uff28\140\uff28\141\uff28\142\uff28\143\uff28" +
    "\204\uff28\206\uff28\211\uff28\001\002\000\060\003\122\110" +
    "\126\111\075\112\116\113\110\114\103\115\102\116\114" +
    "\117\072\120\111\121\123\125\112\130\101\132\130\134" +
    "\131\137\100\140\120\141\117\142\071\143\133\204\253" +
    "\206\105\211\073\001\002\000\004\202\254\001\002\000" +
    "\004\124\255\001\002\000\062\003\ufea6\110\ufea6\111\ufea6" +
    "\112\ufea6\113\ufea6\114\ufea6\115\ufea6\116\ufea6\117\ufea6\120" +
    "\ufea6\121\ufea6\125\ufea6\130\ufea6\132\ufea6\134\ufea6\137\ufea6" +
    "\140\ufea6\141\ufea6\142\ufea6\143\ufea6\200\ufea6\204\ufea6\206" +
    "\ufea6\211\ufea6\001\002\000\004\176\257\001\002\000\040" +
    "\003\ufe76\153\ufe76\154\ufe76\155\ufe76\156\ufe76\157\ufe76\160" +
    "\ufe76\161\ufe76\162\ufe76\165\ufe76\166\ufe76\167\ufe76\170\ufe76" +
    "\176\ufe76\203\ufe76\001\002\000\056\110\177\111\153\112" +
    "\166\113\151\114\201\115\200\116\171\122\164\145\163" +
    "\146\161\147\157\150\172\151\165\152\160\163\156\166" +
    "\202\175\162\206\176\210\173\211\174\214\152\215\170" +
    "\001\002\000\034\153\207\154\214\155\212\156\217\157" +
    "\205\160\210\161\216\162\204\165\206\166\215\167\211" +
    "\170\213\176\262\001\002\000\040\003\ufe7a\153\ufe7a\154" +
    "\ufe7a\155\ufe7a\156\ufe7a\157\ufe7a\160\ufe7a\161\ufe7a\162\ufe7a" +
    "\165\ufe7a\166\ufe7a\167\ufe7a\170\ufe7a\176\ufe7a\203\ufe7a\001" +
    "\002\000\004\210\264\001\002\000\004\176\265\001\002" +
    "\000\040\003\ufe7d\153\ufe7d\154\ufe7d\155\ufe7d\156\ufe7d\157" +
    "\ufe7d\160\ufe7d\161\ufe7d\162\ufe7d\165\ufe7d\166\ufe7d\167\ufe7d" +
    "\170\ufe7d\176\ufe7d\203\ufe7d\001\002\000\034\153\207\154" +
    "\214\155\212\156\217\157\205\160\210\161\216\162\204" +
    "\165\206\166\215\167\211\170\213\176\267\001\002\000" +
    "\040\003\ufe8a\153\ufe8a\154\ufe8a\155\ufe8a\156\ufe8a\157\ufe8a" +
    "\160\ufe8a\161\ufe8a\162\ufe8a\165\ufe8a\166\ufe8a\167\ufe8a\170" +
    "\ufe8a\176\ufe8a\203\ufe8a\001\002\000\040\003\ufe93\153\ufe93" +
    "\154\ufe93\155\ufe93\156\ufe93\157\ufe93\160\ufe93\161\ufe93\162" +
    "\ufe93\165\ufe93\166\ufe93\167\ufe93\170\ufe93\176\ufe93\203\ufe93" +
    "\001\002\000\004\133\u010d\001\002\000\006\003\273\133" +
    "\274\001\002\000\050\110\126\111\075\112\116\113\110" +
    "\114\103\115\102\116\114\117\072\120\111\121\123\123" +
    "\u0105\134\131\137\100\140\120\141\117\142\071\143\133" +
    "\206\105\211\073\001\002\000\052\003\277\110\126\111" +
    "\075\112\116\113\110\114\103\115\102\116\114\117\072" +
    "\120\111\121\123\123\275\134\131\137\100\140\120\141" +
    "\117\142\071\143\133\206\105\211\073\001\002\000\006" +
    "\003\306\201\307\001\002\000\062\003\ufea9\110\ufea9\111" +
    "\ufea9\112\ufea9\113\ufea9\114\ufea9\115\ufea9\116\ufea9\117\ufea9" +
    "\120\ufea9\121\ufea9\125\ufea9\130\ufea9\132\ufea9\134\ufea9\137" +
    "\ufea9\140\ufea9\141\ufea9\142\ufea9\143\ufea9\200\ufea9\204\ufea9" +
    "\206\ufea9\211\ufea9\001\002\000\004\201\300\001\002\000" +
    "\004\204\301\001\002\000\060\003\uff28\110\uff28\111\uff28" +
    "\112\uff28\113\uff28\114\uff28\115\uff28\116\uff28\117\uff28\120" +
    "\uff28\121\uff28\125\uff28\130\uff28\132\uff28\134\uff28\137\uff28" +
    "\140\uff28\141\uff28\142\uff28\143\uff28\204\uff28\206\uff28\211" +
    "\uff28\001\002\000\060\003\122\110\126\111\075\112\116" +
    "\113\110\114\103\115\102\116\114\117\072\120\111\121" +
    "\123\125\112\130\101\132\130\134\131\137\100\140\120" +
    "\141\117\142\071\143\133\204\303\206\105\211\073\001" +
    "\002\000\004\202\304\001\002\000\004\124\305\001\002" +
    "\000\062\003\ufea3\110\ufea3\111\ufea3\112\ufea3\113\ufea3\114" +
    "\ufea3\115\ufea3\116\ufea3\117\ufea3\120\ufea3\121\ufea3\125\ufea3" +
    "\130\ufea3\132\ufea3\134\ufea3\137\ufea3\140\ufea3\141\ufea3\142" +
    "\ufea3\143\ufea3\200\ufea3\204\ufea3\206\ufea3\211\ufea3\001\002" +
    "\000\004\204\u0100\001\002\000\006\003\311\204\310\001" +
    "\002\000\060\003\uff28\110\uff28\111\uff28\112\uff28\113\uff28" +
    "\114\uff28\115\uff28\116\uff28\117\uff28\120\uff28\121\uff28\125" +
    "\uff28\130\uff28\132\uff28\134\uff28\137\uff28\140\uff28\141\uff28" +
    "\142\uff28\143\uff28\204\uff28\206\uff28\211\uff28\001\002\000" +
    "\060\003\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114\uff28" +
    "\115\uff28\116\uff28\117\uff28\120\uff28\121\uff28\125\uff28\130" +
    "\uff28\132\uff28\134\uff28\137\uff28\140\uff28\141\uff28\142\uff28" +
    "\143\uff28\204\uff28\206\uff28\211\uff28\001\002\000\060\003" +
    "\122\110\126\111\075\112\116\113\110\114\103\115\102" +
    "\116\114\117\072\120\111\121\123\125\112\130\101\132" +
    "\130\134\131\137\100\140\120\141\117\142\071\143\133" +
    "\204\313\206\105\211\073\001\002\000\004\202\314\001" +
    "\002\000\004\124\315\001\002\000\062\003\ufea1\110\ufea1" +
    "\111\ufea1\112\ufea1\113\ufea1\114\ufea1\115\ufea1\116\ufea1\117" +
    "\ufea1\120\ufea1\121\ufea1\125\ufea1\130\ufea1\132\ufea1\134\ufea1" +
    "\137\ufea1\140\ufea1\141\ufea1\142\ufea1\143\ufea1\200\ufea1\204" +
    "\ufea1\206\ufea1\211\ufea1\001\002\000\060\003\317\110\126" +
    "\111\075\112\116\113\110\114\103\115\102\116\114\117" +
    "\072\120\111\121\123\125\112\130\101\132\130\134\131" +
    "\137\100\140\120\141\117\142\071\143\133\204\320\206" +
    "\105\211\073\001\002\000\066\003\uff27\110\uff27\111\uff27" +
    "\112\uff27\113\uff27\114\uff27\115\uff27\116\uff27\117\uff27\120" +
    "\uff27\121\uff27\125\uff27\130\uff27\132\uff27\134\uff27\137\uff27" +
    "\140\uff27\141\uff27\142\uff27\143\uff27\175\330\202\326\203" +
    "\327\204\uff27\206\uff27\211\uff27\001\002\000\006\003\322" +
    "\202\321\001\002\000\006\003\324\124\325\001\002\000" +
    "\004\124\323\001\002\000\062\003\ufe9f\110\ufe9f\111\ufe9f" +
    "\112\ufe9f\113\ufe9f\114\ufe9f\115\ufe9f\116\ufe9f\117\ufe9f\120" +
    "\ufe9f\121\ufe9f\125\ufe9f\130\ufe9f\132\ufe9f\134\ufe9f\137\ufe9f" +
    "\140\ufe9f\141\ufe9f\142\ufe9f\143\ufe9f\200\ufe9f\204\ufe9f\206" +
    "\ufe9f\211\ufe9f\001\002\000\062\003\ufe9e\110\ufe9e\111\ufe9e" +
    "\112\ufe9e\113\ufe9e\114\ufe9e\115\ufe9e\116\ufe9e\117\ufe9e\120" +
    "\ufe9e\121\ufe9e\125\ufe9e\130\ufe9e\132\ufe9e\134\ufe9e\137\ufe9e" +
    "\140\ufe9e\141\ufe9e\142\ufe9e\143\ufe9e\200\ufe9e\204\ufe9e\206" +
    "\ufe9e\211\ufe9e\001\002\000\062\003\ufeaa\110\ufeaa\111\ufeaa" +
    "\112\ufeaa\113\ufeaa\114\ufeaa\115\ufeaa\116\ufeaa\117\ufeaa\120" +
    "\ufeaa\121\ufeaa\125\ufeaa\130\ufeaa\132\ufeaa\134\ufeaa\137\ufeaa" +
    "\140\ufeaa\141\ufeaa\142\ufeaa\143\ufeaa\200\ufeaa\204\ufeaa\206" +
    "\ufeaa\211\ufeaa\001\002\000\004\124\377\001\002\000\062" +
    "\003\uff22\110\uff22\111\uff22\112\uff22\113\uff22\114\uff22\115" +
    "\uff22\116\uff22\117\uff22\120\uff22\121\uff22\125\uff22\130\uff22" +
    "\132\uff22\134\uff22\137\uff22\140\uff22\141\uff22\142\uff22\143" +
    "\uff22\200\uff22\204\uff22\206\uff22\211\uff22\001\002\000\060" +
    "\110\177\111\153\112\166\113\151\114\201\115\200\116" +
    "\171\122\164\137\334\145\163\146\161\147\157\150\172" +
    "\151\165\152\160\163\156\166\202\175\162\206\333\210" +
    "\173\211\332\214\152\215\170\001\002\000\034\153\207" +
    "\154\214\155\212\156\217\157\205\160\210\161\216\162" +
    "\204\165\206\166\215\167\211\170\213\176\362\001\002" +
    "\000\036\153\ufe85\154\ufe85\155\ufe85\156\ufe85\157\ufe85\160" +
    "\ufe85\161\ufe85\162\ufe85\165\ufe85\166\ufe85\167\ufe85\170\ufe85" +
    "\172\uff00\176\ufe85\001\002\000\036\153\ufe86\154\ufe86\155" +
    "\ufe86\156\ufe86\157\ufe86\160\ufe86\161\ufe86\162\ufe86\165\ufe86" +
    "\166\ufe86\167\ufe86\170\ufe86\172\uff01\176\ufe86\001\002\000" +
    "\006\206\105\211\073\001\002\000\004\172\355\001\002" +
    "\000\004\176\337\001\002\000\004\131\340\001\002\000" +
    "\004\175\341\001\002\000\010\145\343\206\105\211\073" +
    "\001\002\000\004\176\345\001\002\000\006\003\ufead\176" +
    "\ufead\001\002\000\006\003\ufeac\176\ufeac\001\002\000\004" +
    "\123\346\001\002\000\004\201\347\001\002\000\004\204" +
    "\350\001\002\000\060\003\uff28\110\uff28\111\uff28\112\uff28" +
    "\113\uff28\114\uff28\115\uff28\116\uff28\117\uff28\120\uff28\121" +
    "\uff28\125\uff28\130\uff28\132\uff28\134\uff28\137\uff28\140\uff28" +
    "\141\uff28\142\uff28\143\uff28\204\uff28\206\uff28\211\uff28\001" +
    "\002\000\060\003\122\110\126\111\075\112\116\113\110" +
    "\114\103\115\102\116\114\117\072\120\111\121\123\125" +
    "\112\130\101\132\130\134\131\137\100\140\120\141\117" +
    "\142\071\143\133\204\352\206\105\211\073\001\002\000" +
    "\004\202\353\001\002\000\004\124\354\001\002\000\062" +
    "\003\ufec4\110\ufec4\111\ufec4\112\ufec4\113\ufec4\114\ufec4\115" +
    "\ufec4\116\ufec4\117\ufec4\120\ufec4\121\ufec4\125\ufec4\130\ufec4" +
    "\132\ufec4\134\ufec4\137\ufec4\140\ufec4\141\ufec4\142\ufec4\143" +
    "\ufec4\200\ufec4\204\ufec4\206\ufec4\211\ufec4\001\002\000\056" +
    "\110\177\111\153\112\166\113\151\114\201\115\200\116" +
    "\171\122\164\145\163\146\161\147\157\150\172\151\165" +
    "\152\160\163\156\166\202\175\162\206\176\210\173\211" +
    "\174\214\152\215\170\001\002\000\036\003\ufeae\153\207" +
    "\154\214\155\212\156\217\157\205\160\210\161\216\162" +
    "\204\165\206\166\215\167\211\170\213\176\ufeae\001\002" +
    "\000\004\172\360\001\002\000\056\110\177\111\153\112" +
    "\166\113\151\114\201\115\200\116\171\122\164\145\163" +
    "\146\161\147\157\150\172\151\165\152\160\163\156\166" +
    "\202\175\162\206\176\210\173\211\174\214\152\215\170" +
    "\001\002\000\036\003\ufeaf\153\207\154\214\155\212\156" +
    "\217\157\205\160\210\161\216\162\204\165\206\166\215" +
    "\167\211\170\213\176\ufeaf\001\002\000\006\126\363\133" +
    "\364\001\002\000\004\123\374\001\002\000\004\123\365" +
    "\001\002\000\004\201\366\001\002\000\004\204\367\001" +
    "\002\000\060\003\uff28\110\uff28\111\uff28\112\uff28\113\uff28" +
    "\114\uff28\115\uff28\116\uff28\117\uff28\120\uff28\121\uff28\125" +
    "\uff28\130\uff28\132\uff28\134\uff28\137\uff28\140\uff28\141\uff28" +
    "\142\uff28\143\uff28\204\uff28\206\uff28\211\uff28\001\002\000" +
    "\060\003\122\110\126\111\075\112\116\113\110\114\103" +
    "\115\102\116\114\117\072\120\111\121\123\125\112\130" +
    "\101\132\130\134\131\137\100\140\120\141\117\142\071" +
    "\143\133\204\371\206\105\211\073\001\002\000\004\202" +
    "\372\001\002\000\004\124\373\001\002\000\062\003\ufea8" +
    "\110\ufea8\111\ufea8\112\ufea8\113\ufea8\114\ufea8\115\ufea8\116" +
    "\ufea8\117\ufea8\120\ufea8\121\ufea8\125\ufea8\130\ufea8\132\ufea8" +
    "\134\ufea8\137\ufea8\140\ufea8\141\ufea8\142\ufea8\143\ufea8\200" +
    "\ufea8\204\ufea8\206\ufea8\211\ufea8\001\002\000\004\201\375" +
    "\001\002\000\004\204\376\001\002\000\060\003\ufeeb\110" +
    "\ufeeb\111\ufeeb\112\ufeeb\113\ufeeb\114\ufeeb\115\ufeeb\116\ufeeb" +
    "\117\ufeeb\120\ufeeb\121\ufeeb\125\ufeeb\130\ufeeb\132\ufeeb\134" +
    "\ufeeb\137\ufeeb\140\ufeeb\141\ufeeb\142\ufeeb\143\ufeeb\204\ufeeb" +
    "\206\ufeeb\211\ufeeb\001\002\000\062\003\ufea0\110\ufea0\111" +
    "\ufea0\112\ufea0\113\ufea0\114\ufea0\115\ufea0\116\ufea0\117\ufea0" +
    "\120\ufea0\121\ufea0\125\ufea0\130\ufea0\132\ufea0\134\ufea0\137" +
    "\ufea0\140\ufea0\141\ufea0\142\ufea0\143\ufea0\200\ufea0\204\ufea0" +
    "\206\ufea0\211\ufea0\001\002\000\060\003\uff28\110\uff28\111" +
    "\uff28\112\uff28\113\uff28\114\uff28\115\uff28\116\uff28\117\uff28" +
    "\120\uff28\121\uff28\125\uff28\130\uff28\132\uff28\134\uff28\137" +
    "\uff28\140\uff28\141\uff28\142\uff28\143\uff28\204\uff28\206\uff28" +
    "\211\uff28\001\002\000\060\003\122\110\126\111\075\112" +
    "\116\113\110\114\103\115\102\116\114\117\072\120\111" +
    "\121\123\125\112\130\101\132\130\134\131\137\100\140" +
    "\120\141\117\142\071\143\133\204\u0102\206\105\211\073" +
    "\001\002\000\004\202\u0103\001\002\000\004\124\u0104\001" +
    "\002\000\062\003\ufea2\110\ufea2\111\ufea2\112\ufea2\113\ufea2" +
    "\114\ufea2\115\ufea2\116\ufea2\117\ufea2\120\ufea2\121\ufea2\125" +
    "\ufea2\130\ufea2\132\ufea2\134\ufea2\137\ufea2\140\ufea2\141\ufea2" +
    "\142\ufea2\143\ufea2\200\ufea2\204\ufea2\206\ufea2\211\ufea2\001" +
    "\002\000\004\201\u0107\001\002\000\062\003\ufe9a\110\ufe9a" +
    "\111\ufe9a\112\ufe9a\113\ufe9a\114\ufe9a\115\ufe9a\116\ufe9a\117" +
    "\ufe9a\120\ufe9a\121\ufe9a\125\ufe9a\130\ufe9a\132\ufe9a\134\ufe9a" +
    "\137\ufe9a\140\ufe9a\141\ufe9a\142\ufe9a\143\ufe9a\200\ufe9a\204" +
    "\ufe9a\206\ufe9a\211\ufe9a\001\002\000\004\204\u0108\001\002" +
    "\000\060\003\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114" +
    "\uff28\115\uff28\116\uff28\117\uff28\120\uff28\121\uff28\125\uff28" +
    "\130\uff28\132\uff28\134\uff28\137\uff28\140\uff28\141\uff28\142" +
    "\uff28\143\uff28\204\uff28\206\uff28\211\uff28\001\002\000\060" +
    "\003\122\110\126\111\075\112\116\113\110\114\103\115" +
    "\102\116\114\117\072\120\111\121\123\125\112\130\101" +
    "\132\130\134\131\137\100\140\120\141\117\142\071\143" +
    "\133\204\u010a\206\105\211\073\001\002\000\004\202\u010b" +
    "\001\002\000\004\124\u010c\001\002\000\062\003\ufea4\110" +
    "\ufea4\111\ufea4\112\ufea4\113\ufea4\114\ufea4\115\ufea4\116\ufea4" +
    "\117\ufea4\120\ufea4\121\ufea4\125\ufea4\130\ufea4\132\ufea4\134" +
    "\ufea4\137\ufea4\140\ufea4\141\ufea4\142\ufea4\143\ufea4\200\ufea4" +
    "\204\ufea4\206\ufea4\211\ufea4\001\002\000\050\110\126\111" +
    "\075\112\116\113\110\114\103\115\102\116\114\117\072" +
    "\120\111\121\123\123\u010e\134\131\137\100\140\120\141" +
    "\117\142\071\143\133\206\105\211\073\001\002\000\004" +
    "\201\u0110\001\002\000\062\003\ufe9b\110\ufe9b\111\ufe9b\112" +
    "\ufe9b\113\ufe9b\114\ufe9b\115\ufe9b\116\ufe9b\117\ufe9b\120\ufe9b" +
    "\121\ufe9b\125\ufe9b\130\ufe9b\132\ufe9b\134\ufe9b\137\ufe9b\140" +
    "\ufe9b\141\ufe9b\142\ufe9b\143\ufe9b\200\ufe9b\204\ufe9b\206\ufe9b" +
    "\211\ufe9b\001\002\000\004\204\u0111\001\002\000\060\003" +
    "\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114\uff28\115\uff28" +
    "\116\uff28\117\uff28\120\uff28\121\uff28\125\uff28\130\uff28\132" +
    "\uff28\134\uff28\137\uff28\140\uff28\141\uff28\142\uff28\143\uff28" +
    "\204\uff28\206\uff28\211\uff28\001\002\000\060\003\122\110" +
    "\126\111\075\112\116\113\110\114\103\115\102\116\114" +
    "\117\072\120\111\121\123\125\112\130\101\132\130\134" +
    "\131\137\100\140\120\141\117\142\071\143\133\204\u0113" +
    "\206\105\211\073\001\002\000\004\202\u0114\001\002\000" +
    "\004\124\u0115\001\002\000\062\003\ufea5\110\ufea5\111\ufea5" +
    "\112\ufea5\113\ufea5\114\ufea5\115\ufea5\116\ufea5\117\ufea5\120" +
    "\ufea5\121\ufea5\125\ufea5\130\ufea5\132\ufea5\134\ufea5\137\ufea5" +
    "\140\ufea5\141\ufea5\142\ufea5\143\ufea5\200\ufea5\204\ufea5\206" +
    "\ufea5\211\ufea5\001\002\000\056\110\177\111\153\112\166" +
    "\113\151\114\201\115\200\116\171\122\164\145\163\146" +
    "\161\147\157\150\172\151\165\152\160\163\156\166\202" +
    "\175\162\206\176\210\173\211\174\214\152\215\170\001" +
    "\002\000\034\153\207\154\214\155\212\156\217\157\205" +
    "\160\210\161\216\162\204\165\206\166\215\167\211\170" +
    "\213\176\u0118\001\002\000\040\003\ufe7b\153\ufe7b\154\ufe7b" +
    "\155\ufe7b\156\ufe7b\157\ufe7b\160\ufe7b\161\ufe7b\162\ufe7b\165" +
    "\ufe7b\166\ufe7b\167\ufe7b\170\ufe7b\176\ufe7b\203\ufe7b\001\002" +
    "\000\056\110\177\111\153\112\166\113\151\114\201\115" +
    "\200\116\171\122\164\145\163\146\161\147\157\150\172" +
    "\151\165\152\160\163\156\166\202\175\162\206\176\210" +
    "\173\211\174\214\152\215\170\001\002\000\034\153\207" +
    "\154\214\155\212\156\217\157\205\160\210\161\216\162" +
    "\204\165\206\166\215\167\211\170\213\176\u011b\001\002" +
    "\000\040\003\ufe79\153\ufe79\154\ufe79\155\ufe79\156\ufe79\157" +
    "\ufe79\160\ufe79\161\ufe79\162\ufe79\165\ufe79\166\ufe79\167\ufe79" +
    "\170\ufe79\176\ufe79\203\ufe79\001\002\000\034\153\207\154" +
    "\214\155\212\156\217\157\205\160\210\161\216\162\204" +
    "\165\206\166\215\167\211\170\213\176\u011d\001\002\000" +
    "\004\133\u011e\001\002\000\050\110\126\111\075\112\116" +
    "\113\110\114\103\115\102\116\114\117\072\120\111\121" +
    "\123\123\u011f\134\131\137\100\140\120\141\117\142\071" +
    "\143\133\206\105\211\073\001\002\000\004\201\u0121\001" +
    "\002\000\062\003\ufe9d\110\ufe9d\111\ufe9d\112\ufe9d\113\ufe9d" +
    "\114\ufe9d\115\ufe9d\116\ufe9d\117\ufe9d\120\ufe9d\121\ufe9d\125" +
    "\ufe9d\130\ufe9d\132\ufe9d\134\ufe9d\137\ufe9d\140\ufe9d\141\ufe9d" +
    "\142\ufe9d\143\ufe9d\200\ufe9d\204\ufe9d\206\ufe9d\211\ufe9d\001" +
    "\002\000\004\204\u0122\001\002\000\060\003\uff28\110\uff28" +
    "\111\uff28\112\uff28\113\uff28\114\uff28\115\uff28\116\uff28\117" +
    "\uff28\120\uff28\121\uff28\125\uff28\130\uff28\132\uff28\134\uff28" +
    "\137\uff28\140\uff28\141\uff28\142\uff28\143\uff28\204\uff28\206" +
    "\uff28\211\uff28\001\002\000\060\003\122\110\126\111\075" +
    "\112\116\113\110\114\103\115\102\116\114\117\072\120" +
    "\111\121\123\125\112\130\101\132\130\134\131\137\100" +
    "\140\120\141\117\142\071\143\133\204\u0124\206\105\211" +
    "\073\001\002\000\004\202\u0125\001\002\000\004\124\u0126" +
    "\001\002\000\062\003\ufea7\110\ufea7\111\ufea7\112\ufea7\113" +
    "\ufea7\114\ufea7\115\ufea7\116\ufea7\117\ufea7\120\ufea7\121\ufea7" +
    "\125\ufea7\130\ufea7\132\ufea7\134\ufea7\137\ufea7\140\ufea7\141" +
    "\ufea7\142\ufea7\143\ufea7\200\ufea7\204\ufea7\206\ufea7\211\ufea7" +
    "\001\002\000\010\003\u012b\206\105\211\073\001\002\000" +
    "\012\003\uff03\172\uff03\203\uff03\207\uff03\001\002\000\056" +
    "\110\177\111\153\112\166\113\151\114\201\115\200\116" +
    "\171\122\164\145\163\146\161\147\157\150\172\151\165" +
    "\152\160\163\156\166\202\175\162\206\176\210\173\211" +
    "\174\214\152\215\170\001\002\000\034\153\207\154\214" +
    "\155\212\156\217\157\205\160\210\161\216\162\204\165" +
    "\206\166\215\167\211\170\213\203\ufef0\001\002\000\012" +
    "\003\uff02\172\uff02\203\uff02\207\uff02\001\002\000\012\003" +
    "\uff05\172\uff05\203\uff05\207\uff05\001\002\000\056\110\177" +
    "\111\153\112\166\113\151\114\201\115\200\116\171\122" +
    "\164\145\163\146\161\147\157\150\172\151\165\152\160" +
    "\163\156\166\202\175\162\206\176\210\173\211\174\214" +
    "\152\215\170\001\002\000\034\153\207\154\214\155\212" +
    "\156\217\157\205\160\210\161\216\162\204\165\206\166" +
    "\215\167\211\170\213\176\u012f\001\002\000\004\203\uff12" +
    "\001\002\000\004\176\u0131\001\002\000\004\203\uff19\001" +
    "\002\000\064\003\ufee2\110\ufee2\111\ufee2\112\ufee2\113\ufee2" +
    "\114\ufee2\115\ufee2\116\ufee2\117\ufee2\120\ufee2\121\ufee2\125" +
    "\ufee2\127\ufee2\130\ufee2\132\ufee2\134\ufee2\137\ufee2\140\ufee2" +
    "\141\ufee2\142\ufee2\143\ufee2\200\ufee2\204\ufee2\206\ufee2\211" +
    "\ufee2\001\002\000\064\003\ufecd\110\ufecd\111\ufecd\112\ufecd" +
    "\113\ufecd\114\ufecd\115\ufecd\116\ufecd\117\ufecd\120\ufecd\121" +
    "\ufecd\125\ufecd\127\u0135\130\ufecd\132\ufecd\134\ufecd\137\ufecd" +
    "\140\ufecd\141\ufecd\142\ufecd\143\ufecd\200\ufecd\204\ufecd\206" +
    "\ufecd\211\ufecd\001\002\000\064\003\ufee3\110\ufee3\111\ufee3" +
    "\112\ufee3\113\ufee3\114\ufee3\115\ufee3\116\ufee3\117\ufee3\120" +
    "\ufee3\121\ufee3\125\ufee3\127\ufee3\130\ufee3\132\ufee3\134\ufee3" +
    "\137\ufee3\140\ufee3\141\ufee3\142\ufee3\143\ufee3\200\ufee3\204" +
    "\ufee3\206\ufee3\211\ufee3\001\002\000\054\003\u013a\110\126" +
    "\111\075\112\116\113\110\114\103\115\102\116\114\117" +
    "\072\120\111\121\123\123\u0137\125\u0139\134\131\137\100" +
    "\140\120\141\117\142\071\143\133\206\105\211\073\001" +
    "\002\000\062\003\ufeee\110\ufeee\111\ufeee\112\ufeee\113\ufeee" +
    "\114\ufeee\115\ufeee\116\ufeee\117\ufeee\120\ufeee\121\ufeee\125" +
    "\ufeee\130\ufeee\132\ufeee\134\ufeee\137\ufeee\140\ufeee\141\ufeee" +
    "\142\ufeee\143\ufeee\200\ufeee\204\ufeee\206\ufeee\211\ufeee\001" +
    "\002\000\006\003\u019b\201\u019c\001\002\000\062\003\ufece" +
    "\110\ufece\111\ufece\112\ufece\113\ufece\114\ufece\115\ufece\116" +
    "\ufece\117\ufece\120\ufece\121\ufece\125\ufece\130\ufece\132\ufece" +
    "\134\ufece\137\ufece\140\ufece\141\ufece\142\ufece\143\ufece\200" +
    "\ufece\204\ufece\206\ufece\211\ufece\001\002\000\006\003\u014d" +
    "\175\u014e\001\002\000\006\175\u013c\201\u013b\001\002\000" +
    "\004\204\u0148\001\002\000\056\110\177\111\153\112\166" +
    "\113\151\114\201\115\200\116\171\122\164\145\163\146" +
    "\161\147\157\150\172\151\165\152\160\163\156\166\202" +
    "\175\162\206\176\210\173\211\174\214\152\215\170\001" +
    "\002\000\034\153\207\154\214\155\212\156\217\157\205" +
    "\160\210\161\216\162\204\165\206\166\215\167\211\170" +
    "\213\176\u013e\001\002\000\004\126\u013f\001\002\000\050" +
    "\110\126\111\075\112\116\113\110\114\103\115\102\116" +
    "\114\117\072\120\111\121\123\123\u0140\134\131\137\100" +
    "\140\120\141\117\142\071\143\133\206\105\211\073\001" +
    "\002\000\004\201\u0142\001\002\000\064\003\ufed4\110\ufed4" +
    "\111\ufed4\112\ufed4\113\ufed4\114\ufed4\115\ufed4\116\ufed4\117" +
    "\ufed4\120\ufed4\121\ufed4\125\ufed4\127\ufed4\130\ufed4\132\ufed4" +
    "\134\ufed4\137\ufed4\140\ufed4\141\ufed4\142\ufed4\143\ufed4\200" +
    "\ufed4\204\ufed4\206\ufed4\211\ufed4\001\002\000\004\204\u0143" +
    "\001\002\000\060\003\uff28\110\uff28\111\uff28\112\uff28\113" +
    "\uff28\114\uff28\115\uff28\116\uff28\117\uff28\120\uff28\121\uff28" +
    "\125\uff28\130\uff28\132\uff28\134\uff28\137\uff28\140\uff28\141" +
    "\uff28\142\uff28\143\uff28\204\uff28\206\uff28\211\uff28\001\002" +
    "\000\060\003\122\110\126\111\075\112\116\113\110\114" +
    "\103\115\102\116\114\117\072\120\111\121\123\125\112" +
    "\130\101\132\130\134\131\137\100\140\120\141\117\142" +
    "\071\143\133\204\u0145\206\105\211\073\001\002\000\004" +
    "\202\u0146\001\002\000\004\124\u0147\001\002\000\064\003" +
    "\ufedf\110\ufedf\111\ufedf\112\ufedf\113\ufedf\114\ufedf\115\ufedf" +
    "\116\ufedf\117\ufedf\120\ufedf\121\ufedf\125\ufedf\127\ufedf\130" +
    "\ufedf\132\ufedf\134\ufedf\137\ufedf\140\ufedf\141\ufedf\142\ufedf" +
    "\143\ufedf\200\ufedf\204\ufedf\206\ufedf\211\ufedf\001\002\000" +
    "\060\003\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114\uff28" +
    "\115\uff28\116\uff28\117\uff28\120\uff28\121\uff28\125\uff28\130" +
    "\uff28\132\uff28\134\uff28\137\uff28\140\uff28\141\uff28\142\uff28" +
    "\143\uff28\204\uff28\206\uff28\211\uff28\001\002\000\060\003" +
    "\122\110\126\111\075\112\116\113\110\114\103\115\102" +
    "\116\114\117\072\120\111\121\123\125\112\130\101\132" +
    "\130\134\131\137\100\140\120\141\117\142\071\143\133" +
    "\204\u014a\206\105\211\073\001\002\000\004\202\u014b\001" +
    "\002\000\004\124\u014c\001\002\000\062\003\ufecc\110\ufecc" +
    "\111\ufecc\112\ufecc\113\ufecc\114\ufecc\115\ufecc\116\ufecc\117" +
    "\ufecc\120\ufecc\121\ufecc\125\ufecc\130\ufecc\132\ufecc\134\ufecc" +
    "\137\ufecc\140\ufecc\141\ufecc\142\ufecc\143\ufecc\200\ufecc\204" +
    "\ufecc\206\ufecc\211\ufecc\001\002\000\056\110\177\111\153" +
    "\112\166\113\151\114\201\115\200\116\171\122\164\145" +
    "\163\146\161\147\157\150\172\151\165\152\160\163\156" +
    "\166\202\175\162\206\176\210\173\211\174\214\152\215" +
    "\170\001\002\000\060\003\u0150\110\177\111\153\112\166" +
    "\113\151\114\201\115\200\116\171\122\164\145\163\146" +
    "\161\147\157\150\172\151\165\152\160\163\156\166\202" +
    "\175\162\206\176\210\173\211\174\214\152\215\170\001" +
    "\002\000\036\003\u015b\153\207\154\214\155\212\156\217" +
    "\157\205\160\210\161\216\162\204\165\206\166\215\167" +
    "\211\170\213\176\u015c\001\002\000\004\176\u0151\001\002" +
    "\000\004\126\u0152\001\002\000\050\110\126\111\075\112" +
    "\116\113\110\114\103\115\102\116\114\117\072\120\111" +
    "\121\123\123\u0153\134\131\137\100\140\120\141\117\142" +
    "\071\143\133\206\105\211\073\001\002\000\004\201\u0155" +
    "\001\002\000\064\003\ufed2\110\ufed2\111\ufed2\112\ufed2\113" +
    "\ufed2\114\ufed2\115\ufed2\116\ufed2\117\ufed2\120\ufed2\121\ufed2" +
    "\125\ufed2\127\ufed2\130\ufed2\132\ufed2\134\ufed2\137\ufed2\140" +
    "\ufed2\141\ufed2\142\ufed2\143\ufed2\200\ufed2\204\ufed2\206\ufed2" +
    "\211\ufed2\001\002\000\004\204\u0156\001\002\000\060\003" +
    "\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114\uff28\115\uff28" +
    "\116\uff28\117\uff28\120\uff28\121\uff28\125\uff28\130\uff28\132" +
    "\uff28\134\uff28\137\uff28\140\uff28\141\uff28\142\uff28\143\uff28" +
    "\204\uff28\206\uff28\211\uff28\001\002\000\060\003\122\110" +
    "\126\111\075\112\116\113\110\114\103\115\102\116\114" +
    "\117\072\120\111\121\123\125\112\130\101\132\130\134" +
    "\131\137\100\140\120\141\117\142\071\143\133\204\u0158" +
    "\206\105\211\073\001\002\000\004\202\u0159\001\002\000" +
    "\004\124\u015a\001\002\000\064\003\ufedd\110\ufedd\111\ufedd" +
    "\112\ufedd\113\ufedd\114\ufedd\115\ufedd\116\ufedd\117\ufedd\120" +
    "\ufedd\121\ufedd\125\ufedd\127\ufedd\130\ufedd\132\ufedd\134\ufedd" +
    "\137\ufedd\140\ufedd\141\ufedd\142\ufedd\143\ufedd\200\ufedd\204" +
    "\ufedd\206\ufedd\211\ufedd\001\002\000\004\126\u0187\001\002" +
    "\000\006\003\u015d\126\u015e\001\002\000\050\110\126\111" +
    "\075\112\116\113\110\114\103\115\102\116\114\117\072" +
    "\120\111\121\123\123\u017f\134\131\137\100\140\120\141" +
    "\117\142\071\143\133\206\105\211\073\001\002\000\052" +
    "\003\u0161\110\126\111\075\112\116\113\110\114\103\115" +
    "\102\116\114\117\072\120\111\121\123\123\u015f\134\131" +
    "\137\100\140\120\141\117\142\071\143\133\206\105\211" +
    "\073\001\002\000\006\003\u0168\201\u0169\001\002\000\064" +
    "\003\ufee0\110\ufee0\111\ufee0\112\ufee0\113\ufee0\114\ufee0\115" +
    "\ufee0\116\ufee0\117\ufee0\120\ufee0\121\ufee0\125\ufee0\127\ufee0" +
    "\130\ufee0\132\ufee0\134\ufee0\137\ufee0\140\ufee0\141\ufee0\142" +
    "\ufee0\143\ufee0\200\ufee0\204\ufee0\206\ufee0\211\ufee0\001\002" +
    "\000\004\201\u0162\001\002\000\004\204\u0163\001\002\000" +
    "\060\003\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114\uff28" +
    "\115\uff28\116\uff28\117\uff28\120\uff28\121\uff28\125\uff28\130" +
    "\uff28\132\uff28\134\uff28\137\uff28\140\uff28\141\uff28\142\uff28" +
    "\143\uff28\204\uff28\206\uff28\211\uff28\001\002\000\060\003" +
    "\122\110\126\111\075\112\116\113\110\114\103\115\102" +
    "\116\114\117\072\120\111\121\123\125\112\130\101\132" +
    "\130\134\131\137\100\140\120\141\117\142\071\143\133" +
    "\204\u0165\206\105\211\073\001\002\000\004\202\u0166\001" +
    "\002\000\004\124\u0167\001\002\000\064\003\ufeda\110\ufeda" +
    "\111\ufeda\112\ufeda\113\ufeda\114\ufeda\115\ufeda\116\ufeda\117" +
    "\ufeda\120\ufeda\121\ufeda\125\ufeda\127\ufeda\130\ufeda\132\ufeda" +
    "\134\ufeda\137\ufeda\140\ufeda\141\ufeda\142\ufeda\143\ufeda\200" +
    "\ufeda\204\ufeda\206\ufeda\211\ufeda\001\002\000\004\204\u017a" +
    "\001\002\000\006\003\u016b\204\u016a\001\002\000\060\003" +
    "\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114\uff28\115\uff28" +
    "\116\uff28\117\uff28\120\uff28\121\uff28\125\uff28\130\uff28\132" +
    "\uff28\134\uff28\137\uff28\140\uff28\141\uff28\142\uff28\143\uff28" +
    "\204\uff28\206\uff28\211\uff28\001\002\000\060\003\uff28\110" +
    "\uff28\111\uff28\112\uff28\113\uff28\114\uff28\115\uff28\116\uff28" +
    "\117\uff28\120\uff28\121\uff28\125\uff28\130\uff28\132\uff28\134" +
    "\uff28\137\uff28\140\uff28\141\uff28\142\uff28\143\uff28\204\uff28" +
    "\206\uff28\211\uff28\001\002\000\060\003\122\110\126\111" +
    "\075\112\116\113\110\114\103\115\102\116\114\117\072" +
    "\120\111\121\123\125\112\130\101\132\130\134\131\137" +
    "\100\140\120\141\117\142\071\143\133\204\u016d\206\105" +
    "\211\073\001\002\000\004\202\u016e\001\002\000\004\124" +
    "\u016f\001\002\000\064\003\ufed8\110\ufed8\111\ufed8\112\ufed8" +
    "\113\ufed8\114\ufed8\115\ufed8\116\ufed8\117\ufed8\120\ufed8\121" +
    "\ufed8\125\ufed8\127\ufed8\130\ufed8\132\ufed8\134\ufed8\137\ufed8" +
    "\140\ufed8\141\ufed8\142\ufed8\143\ufed8\200\ufed8\204\ufed8\206" +
    "\ufed8\211\ufed8\001\002\000\060\003\u0171\110\126\111\075" +
    "\112\116\113\110\114\103\115\102\116\114\117\072\120" +
    "\111\121\123\125\112\130\101\132\130\134\131\137\100" +
    "\140\120\141\117\142\071\143\133\204\u0172\206\105\211" +
    "\073\001\002\000\066\003\uff27\110\uff27\111\uff27\112\uff27" +
    "\113\uff27\114\uff27\115\uff27\116\uff27\117\uff27\120\uff27\121" +
    "\uff27\125\uff27\130\uff27\132\uff27\134\uff27\137\uff27\140\uff27" +
    "\141\uff27\142\uff27\143\uff27\175\330\202\u0178\203\327\204" +
    "\uff27\206\uff27\211\uff27\001\002\000\006\003\u0174\202\u0173" +
    "\001\002\000\006\003\u0176\124\u0177\001\002\000\004\124" +
    "\u0175\001\002\000\064\003\ufed6\110\ufed6\111\ufed6\112\ufed6" +
    "\113\ufed6\114\ufed6\115\ufed6\116\ufed6\117\ufed6\120\ufed6\121" +
    "\ufed6\125\ufed6\127\ufed6\130\ufed6\132\ufed6\134\ufed6\137\ufed6" +
    "\140\ufed6\141\ufed6\142\ufed6\143\ufed6\200\ufed6\204\ufed6\206" +
    "\ufed6\211\ufed6\001\002\000\064\003\ufed5\110\ufed5\111\ufed5" +
    "\112\ufed5\113\ufed5\114\ufed5\115\ufed5\116\ufed5\117\ufed5\120" +
    "\ufed5\121\ufed5\125\ufed5\127\ufed5\130\ufed5\132\ufed5\134\ufed5" +
    "\137\ufed5\140\ufed5\141\ufed5\142\ufed5\143\ufed5\200\ufed5\204" +
    "\ufed5\206\ufed5\211\ufed5\001\002\000\064\003\ufee1\110\ufee1" +
    "\111\ufee1\112\ufee1\113\ufee1\114\ufee1\115\ufee1\116\ufee1\117" +
    "\ufee1\120\ufee1\121\ufee1\125\ufee1\127\ufee1\130\ufee1\132\ufee1" +
    "\134\ufee1\137\ufee1\140\ufee1\141\ufee1\142\ufee1\143\ufee1\200" +
    "\ufee1\204\ufee1\206\ufee1\211\ufee1\001\002\000\004\124\u0179" +
    "\001\002\000\064\003\ufed7\110\ufed7\111\ufed7\112\ufed7\113" +
    "\ufed7\114\ufed7\115\ufed7\116\ufed7\117\ufed7\120\ufed7\121\ufed7" +
    "\125\ufed7\127\ufed7\130\ufed7\132\ufed7\134\ufed7\137\ufed7\140" +
    "\ufed7\141\ufed7\142\ufed7\143\ufed7\200\ufed7\204\ufed7\206\ufed7" +
    "\211\ufed7\001\002\000\060\003\uff28\110\uff28\111\uff28\112" +
    "\uff28\113\uff28\114\uff28\115\uff28\116\uff28\117\uff28\120\uff28" +
    "\121\uff28\125\uff28\130\uff28\132\uff28\134\uff28\137\uff28\140" +
    "\uff28\141\uff28\142\uff28\143\uff28\204\uff28\206\uff28\211\uff28" +
    "\001\002\000\060\003\122\110\126\111\075\112\116\113" +
    "\110\114\103\115\102\116\114\117\072\120\111\121\123" +
    "\125\112\130\101\132\130\134\131\137\100\140\120\141" +
    "\117\142\071\143\133\204\u017c\206\105\211\073\001\002" +
    "\000\004\202\u017d\001\002\000\004\124\u017e\001\002\000" +
    "\064\003\ufed9\110\ufed9\111\ufed9\112\ufed9\113\ufed9\114\ufed9" +
    "\115\ufed9\116\ufed9\117\ufed9\120\ufed9\121\ufed9\125\ufed9\127" +
    "\ufed9\130\ufed9\132\ufed9\134\ufed9\137\ufed9\140\ufed9\141\ufed9" +
    "\142\ufed9\143\ufed9\200\ufed9\204\ufed9\206\ufed9\211\ufed9\001" +
    "\002\000\004\201\u0181\001\002\000\064\003\ufed0\110\ufed0" +
    "\111\ufed0\112\ufed0\113\ufed0\114\ufed0\115\ufed0\116\ufed0\117" +
    "\ufed0\120\ufed0\121\ufed0\125\ufed0\127\ufed0\130\ufed0\132\ufed0" +
    "\134\ufed0\137\ufed0\140\ufed0\141\ufed0\142\ufed0\143\ufed0\200" +
    "\ufed0\204\ufed0\206\ufed0\211\ufed0\001\002\000\004\204\u0182" +
    "\001\002\000\060\003\uff28\110\uff28\111\uff28\112\uff28\113" +
    "\uff28\114\uff28\115\uff28\116\uff28\117\uff28\120\uff28\121\uff28" +
    "\125\uff28\130\uff28\132\uff28\134\uff28\137\uff28\140\uff28\141" +
    "\uff28\142\uff28\143\uff28\204\uff28\206\uff28\211\uff28\001\002" +
    "\000\060\003\122\110\126\111\075\112\116\113\110\114" +
    "\103\115\102\116\114\117\072\120\111\121\123\125\112" +
    "\130\101\132\130\134\131\137\100\140\120\141\117\142" +
    "\071\143\133\204\u0184\206\105\211\073\001\002\000\004" +
    "\202\u0185\001\002\000\004\124\u0186\001\002\000\064\003" +
    "\ufedb\110\ufedb\111\ufedb\112\ufedb\113\ufedb\114\ufedb\115\ufedb" +
    "\116\ufedb\117\ufedb\120\ufedb\121\ufedb\125\ufedb\127\ufedb\130" +
    "\ufedb\132\ufedb\134\ufedb\137\ufedb\140\ufedb\141\ufedb\142\ufedb" +
    "\143\ufedb\200\ufedb\204\ufedb\206\ufedb\211\ufedb\001\002\000" +
    "\050\110\126\111\075\112\116\113\110\114\103\115\102" +
    "\116\114\117\072\120\111\121\123\123\u0188\134\131\137" +
    "\100\140\120\141\117\142\071\143\133\206\105\211\073" +
    "\001\002\000\004\201\u018a\001\002\000\064\003\ufed1\110" +
    "\ufed1\111\ufed1\112\ufed1\113\ufed1\114\ufed1\115\ufed1\116\ufed1" +
    "\117\ufed1\120\ufed1\121\ufed1\125\ufed1\127\ufed1\130\ufed1\132" +
    "\ufed1\134\ufed1\137\ufed1\140\ufed1\141\ufed1\142\ufed1\143\ufed1" +
    "\200\ufed1\204\ufed1\206\ufed1\211\ufed1\001\002\000\004\204" +
    "\u018b\001\002\000\060\003\uff28\110\uff28\111\uff28\112\uff28" +
    "\113\uff28\114\uff28\115\uff28\116\uff28\117\uff28\120\uff28\121" +
    "\uff28\125\uff28\130\uff28\132\uff28\134\uff28\137\uff28\140\uff28" +
    "\141\uff28\142\uff28\143\uff28\204\uff28\206\uff28\211\uff28\001" +
    "\002\000\060\003\122\110\126\111\075\112\116\113\110" +
    "\114\103\115\102\116\114\117\072\120\111\121\123\125" +
    "\112\130\101\132\130\134\131\137\100\140\120\141\117" +
    "\142\071\143\133\204\u018d\206\105\211\073\001\002\000" +
    "\004\202\u018e\001\002\000\004\124\u018f\001\002\000\064" +
    "\003\ufedc\110\ufedc\111\ufedc\112\ufedc\113\ufedc\114\ufedc\115" +
    "\ufedc\116\ufedc\117\ufedc\120\ufedc\121\ufedc\125\ufedc\127\ufedc" +
    "\130\ufedc\132\ufedc\134\ufedc\137\ufedc\140\ufedc\141\ufedc\142" +
    "\ufedc\143\ufedc\200\ufedc\204\ufedc\206\ufedc\211\ufedc\001\002" +
    "\000\034\153\207\154\214\155\212\156\217\157\205\160" +
    "\210\161\216\162\204\165\206\166\215\167\211\170\213" +
    "\176\u0191\001\002\000\004\126\u0192\001\002\000\050\110" +
    "\126\111\075\112\116\113\110\114\103\115\102\116\114" +
    "\117\072\120\111\121\123\123\u0193\134\131\137\100\140" +
    "\120\141\117\142\071\143\133\206\105\211\073\001\002" +
    "\000\004\201\u0195\001\002\000\064\003\ufed3\110\ufed3\111" +
    "\ufed3\112\ufed3\113\ufed3\114\ufed3\115\ufed3\116\ufed3\117\ufed3" +
    "\120\ufed3\121\ufed3\125\ufed3\127\ufed3\130\ufed3\132\ufed3\134" +
    "\ufed3\137\ufed3\140\ufed3\141\ufed3\142\ufed3\143\ufed3\200\ufed3" +
    "\204\ufed3\206\ufed3\211\ufed3\001\002\000\004\204\u0196\001" +
    "\002\000\060\003\uff28\110\uff28\111\uff28\112\uff28\113\uff28" +
    "\114\uff28\115\uff28\116\uff28\117\uff28\120\uff28\121\uff28\125" +
    "\uff28\130\uff28\132\uff28\134\uff28\137\uff28\140\uff28\141\uff28" +
    "\142\uff28\143\uff28\204\uff28\206\uff28\211\uff28\001\002\000" +
    "\060\003\122\110\126\111\075\112\116\113\110\114\103" +
    "\115\102\116\114\117\072\120\111\121\123\125\112\130" +
    "\101\132\130\134\131\137\100\140\120\141\117\142\071" +
    "\143\133\204\u0198\206\105\211\073\001\002\000\004\202" +
    "\u0199\001\002\000\004\124\u019a\001\002\000\064\003\ufede" +
    "\110\ufede\111\ufede\112\ufede\113\ufede\114\ufede\115\ufede\116" +
    "\ufede\117\ufede\120\ufede\121\ufede\125\ufede\127\ufede\130\ufede" +
    "\132\ufede\134\ufede\137\ufede\140\ufede\141\ufede\142\ufede\143" +
    "\ufede\200\ufede\204\ufede\206\ufede\211\ufede\001\002\000\004" +
    "\204\u01ad\001\002\000\006\003\u019e\204\u019d\001\002\000" +
    "\060\003\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114\uff28" +
    "\115\uff28\116\uff28\117\uff28\120\uff28\121\uff28\125\uff28\130" +
    "\uff28\132\uff28\134\uff28\137\uff28\140\uff28\141\uff28\142\uff28" +
    "\143\uff28\204\uff28\206\uff28\211\uff28\001\002\000\060\003" +
    "\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114\uff28\115\uff28" +
    "\116\uff28\117\uff28\120\uff28\121\uff28\125\uff28\130\uff28\132" +
    "\uff28\134\uff28\137\uff28\140\uff28\141\uff28\142\uff28\143\uff28" +
    "\204\uff28\206\uff28\211\uff28\001\002\000\060\003\122\110" +
    "\126\111\075\112\116\113\110\114\103\115\102\116\114" +
    "\117\072\120\111\121\123\125\112\130\101\132\130\134" +
    "\131\137\100\140\120\141\117\142\071\143\133\204\u01a0" +
    "\206\105\211\073\001\002\000\004\202\u01a1\001\002\000" +
    "\004\124\u01a2\001\002\000\062\003\ufeca\110\ufeca\111\ufeca" +
    "\112\ufeca\113\ufeca\114\ufeca\115\ufeca\116\ufeca\117\ufeca\120" +
    "\ufeca\121\ufeca\125\ufeca\130\ufeca\132\ufeca\134\ufeca\137\ufeca" +
    "\140\ufeca\141\ufeca\142\ufeca\143\ufeca\200\ufeca\204\ufeca\206" +
    "\ufeca\211\ufeca\001\002\000\060\003\u01a4\110\126\111\075" +
    "\112\116\113\110\114\103\115\102\116\114\117\072\120" +
    "\111\121\123\125\112\130\101\132\130\134\131\137\100" +
    "\140\120\141\117\142\071\143\133\204\u01a5\206\105\211" +
    "\073\001\002\000\066\003\uff27\110\uff27\111\uff27\112\uff27" +
    "\113\uff27\114\uff27\115\uff27\116\uff27\117\uff27\120\uff27\121" +
    "\uff27\125\uff27\130\uff27\132\uff27\134\uff27\137\uff27\140\uff27" +
    "\141\uff27\142\uff27\143\uff27\175\330\202\u01ab\203\327\204" +
    "\uff27\206\uff27\211\uff27\001\002\000\006\003\u01a6\202\u01a7" +
    "\001\002\000\004\124\u01aa\001\002\000\006\003\u01a8\124" +
    "\u01a9\001\002\000\062\003\ufec7\110\ufec7\111\ufec7\112\ufec7" +
    "\113\ufec7\114\ufec7\115\ufec7\116\ufec7\117\ufec7\120\ufec7\121" +
    "\ufec7\125\ufec7\130\ufec7\132\ufec7\134\ufec7\137\ufec7\140\ufec7" +
    "\141\ufec7\142\ufec7\143\ufec7\200\ufec7\204\ufec7\206\ufec7\211" +
    "\ufec7\001\002\000\062\003\ufecf\110\ufecf\111\ufecf\112\ufecf" +
    "\113\ufecf\114\ufecf\115\ufecf\116\ufecf\117\ufecf\120\ufecf\121" +
    "\ufecf\125\ufecf\130\ufecf\132\ufecf\134\ufecf\137\ufecf\140\ufecf" +
    "\141\ufecf\142\ufecf\143\ufecf\200\ufecf\204\ufecf\206\ufecf\211" +
    "\ufecf\001\002\000\062\003\ufec8\110\ufec8\111\ufec8\112\ufec8" +
    "\113\ufec8\114\ufec8\115\ufec8\116\ufec8\117\ufec8\120\ufec8\121" +
    "\ufec8\125\ufec8\130\ufec8\132\ufec8\134\ufec8\137\ufec8\140\ufec8" +
    "\141\ufec8\142\ufec8\143\ufec8\200\ufec8\204\ufec8\206\ufec8\211" +
    "\ufec8\001\002\000\004\124\u01ac\001\002\000\062\003\ufec9" +
    "\110\ufec9\111\ufec9\112\ufec9\113\ufec9\114\ufec9\115\ufec9\116" +
    "\ufec9\117\ufec9\120\ufec9\121\ufec9\125\ufec9\130\ufec9\132\ufec9" +
    "\134\ufec9\137\ufec9\140\ufec9\141\ufec9\142\ufec9\143\ufec9\200" +
    "\ufec9\204\ufec9\206\ufec9\211\ufec9\001\002\000\060\003\uff28" +
    "\110\uff28\111\uff28\112\uff28\113\uff28\114\uff28\115\uff28\116" +
    "\uff28\117\uff28\120\uff28\121\uff28\125\uff28\130\uff28\132\uff28" +
    "\134\uff28\137\uff28\140\uff28\141\uff28\142\uff28\143\uff28\204" +
    "\uff28\206\uff28\211\uff28\001\002\000\060\003\122\110\126" +
    "\111\075\112\116\113\110\114\103\115\102\116\114\117" +
    "\072\120\111\121\123\125\112\130\101\132\130\134\131" +
    "\137\100\140\120\141\117\142\071\143\133\204\u01af\206" +
    "\105\211\073\001\002\000\004\202\u01b0\001\002\000\004" +
    "\124\u01b1\001\002\000\062\003\ufecb\110\ufecb\111\ufecb\112" +
    "\ufecb\113\ufecb\114\ufecb\115\ufecb\116\ufecb\117\ufecb\120\ufecb" +
    "\121\ufecb\125\ufecb\130\ufecb\132\ufecb\134\ufecb\137\ufecb\140" +
    "\ufecb\141\ufecb\142\ufecb\143\ufecb\200\ufecb\204\ufecb\206\ufecb" +
    "\211\ufecb\001\002\000\056\110\177\111\153\112\166\113" +
    "\151\114\201\115\200\116\171\122\164\145\163\146\161" +
    "\147\157\150\172\151\165\152\160\163\156\166\202\175" +
    "\162\206\176\210\173\211\174\214\152\215\170\001\002" +
    "\000\034\153\207\154\214\155\212\156\217\157\205\160" +
    "\210\161\216\162\204\165\206\166\215\167\211\170\213" +
    "\176\u01b4\001\002\000\004\203\uff10\001\002\000\004\176" +
    "\u01b6\001\002\000\004\203\uff1c\001\002\000\056\110\177" +
    "\111\153\112\166\113\151\114\201\115\200\116\171\122" +
    "\164\145\163\146\161\147\157\150\172\151\165\152\160" +
    "\163\156\166\202\175\162\206\176\210\173\211\174\214" +
    "\152\215\170\001\002\000\060\003\u01ba\110\177\111\153" +
    "\112\166\113\151\114\201\115\200\116\171\122\164\145" +
    "\163\146\161\147\157\150\172\151\165\152\160\163\156" +
    "\166\202\175\162\206\176\210\173\211\174\214\152\215" +
    "\170\001\002\000\036\003\u01c0\153\207\154\214\155\212" +
    "\156\217\157\205\160\210\161\216\162\204\165\206\166" +
    "\215\167\211\170\213\176\u01c1\001\002\000\004\176\u01bb" +
    "\001\002\000\004\126\u01bc\001\002\000\004\123\u01bd\001" +
    "\002\000\004\201\u01be\001\002\000\004\204\u01bf\001\002" +
    "\000\060\003\ufeec\110\ufeec\111\ufeec\112\ufeec\113\ufeec\114" +
    "\ufeec\115\ufeec\116\ufeec\117\ufeec\120\ufeec\121\ufeec\125\ufeec" +
    "\130\ufeec\132\ufeec\134\ufeec\137\ufeec\140\ufeec\141\ufeec\142" +
    "\ufeec\143\ufeec\204\ufeec\206\ufeec\211\ufeec\001\002\000\004" +
    "\126\u01d0\001\002\000\006\003\u01c2\126\u01c3\001\002\000" +
    "\004\123\u01cd\001\002\000\052\003\u01c4\110\ufee4\111\ufee4" +
    "\112\ufee4\113\ufee4\114\ufee4\115\ufee4\116\ufee4\117\ufee4\120" +
    "\ufee4\121\ufee4\123\u01c5\134\ufee4\137\ufee4\140\ufee4\141\ufee4" +
    "\142\ufee4\143\ufee4\206\ufee4\211\ufee4\001\002\000\004\201" +
    "\u01cb\001\002\000\006\003\u01c6\201\u01c7\001\002\000\004" +
    "\204\u01ca\001\002\000\006\003\u01c9\204\u01c8\001\002\000" +
    "\060\003\ufeed\110\ufeed\111\ufeed\112\ufeed\113\ufeed\114\ufeed" +
    "\115\ufeed\116\ufeed\117\ufeed\120\ufeed\121\ufeed\125\ufeed\130" +
    "\ufeed\132\ufeed\134\ufeed\137\ufeed\140\ufeed\141\ufeed\142\ufeed" +
    "\143\ufeed\204\ufeed\206\ufeed\211\ufeed\001\002\000\060\003" +
    "\ufee5\110\ufee5\111\ufee5\112\ufee5\113\ufee5\114\ufee5\115\ufee5" +
    "\116\ufee5\117\ufee5\120\ufee5\121\ufee5\125\ufee5\130\ufee5\132" +
    "\ufee5\134\ufee5\137\ufee5\140\ufee5\141\ufee5\142\ufee5\143\ufee5" +
    "\204\ufee5\206\ufee5\211\ufee5\001\002\000\060\003\ufee6\110" +
    "\ufee6\111\ufee6\112\ufee6\113\ufee6\114\ufee6\115\ufee6\116\ufee6" +
    "\117\ufee6\120\ufee6\121\ufee6\125\ufee6\130\ufee6\132\ufee6\134" +
    "\ufee6\137\ufee6\140\ufee6\141\ufee6\142\ufee6\143\ufee6\204\ufee6" +
    "\206\ufee6\211\ufee6\001\002\000\004\204\u01cc\001\002\000" +
    "\060\003\ufee7\110\ufee7\111\ufee7\112\ufee7\113\ufee7\114\ufee7" +
    "\115\ufee7\116\ufee7\117\ufee7\120\ufee7\121\ufee7\125\ufee7\130" +
    "\ufee7\132\ufee7\134\ufee7\137\ufee7\140\ufee7\141\ufee7\142\ufee7" +
    "\143\ufee7\204\ufee7\206\ufee7\211\ufee7\001\002\000\004\201" +
    "\u01ce\001\002\000\004\204\u01cf\001\002\000\060\003\ufee8" +
    "\110\ufee8\111\ufee8\112\ufee8\113\ufee8\114\ufee8\115\ufee8\116" +
    "\ufee8\117\ufee8\120\ufee8\121\ufee8\125\ufee8\130\ufee8\132\ufee8" +
    "\134\ufee8\137\ufee8\140\ufee8\141\ufee8\142\ufee8\143\ufee8\204" +
    "\ufee8\206\ufee8\211\ufee8\001\002\000\004\123\u01d1\001\002" +
    "\000\004\201\u01d2\001\002\000\004\204\u01d3\001\002\000" +
    "\060\003\ufee9\110\ufee9\111\ufee9\112\ufee9\113\ufee9\114\ufee9" +
    "\115\ufee9\116\ufee9\117\ufee9\120\ufee9\121\ufee9\125\ufee9\130" +
    "\ufee9\132\ufee9\134\ufee9\137\ufee9\140\ufee9\141\ufee9\142\ufee9" +
    "\143\ufee9\204\ufee9\206\ufee9\211\ufee9\001\002\000\034\153" +
    "\207\154\214\155\212\156\217\157\205\160\210\161\216" +
    "\162\204\165\206\166\215\167\211\170\213\176\u01d5\001" +
    "\002\000\004\126\u01d6\001\002\000\004\123\u01d7\001\002" +
    "\000\004\201\u01d8\001\002\000\004\204\u01d9\001\002\000" +
    "\060\003\ufeea\110\ufeea\111\ufeea\112\ufeea\113\ufeea\114\ufeea" +
    "\115\ufeea\116\ufeea\117\ufeea\120\ufeea\121\ufeea\125\ufeea\130" +
    "\ufeea\132\ufeea\134\ufeea\137\ufeea\140\ufeea\141\ufeea\142\ufeea" +
    "\143\ufeea\204\ufeea\206\ufeea\211\ufeea\001\002\000\004\176" +
    "\u01db\001\002\000\004\203\uff1a\001\002\000\056\110\177" +
    "\111\153\112\166\113\151\114\201\115\200\116\171\122" +
    "\164\145\163\146\161\147\157\150\172\151\165\152\160" +
    "\163\156\166\202\175\162\206\176\210\173\211\174\214" +
    "\152\215\170\001\002\000\034\153\207\154\214\155\212" +
    "\156\217\157\205\160\210\161\216\162\204\165\206\166" +
    "\215\167\211\170\213\176\u01de\001\002\000\004\203\uff0f" +
    "\001\002\000\064\003\uff21\110\uff21\111\uff21\112\uff21\113" +
    "\uff21\114\uff21\115\uff21\116\uff21\117\uff21\120\uff21\121\uff21" +
    "\125\uff21\127\uff21\130\uff21\132\uff21\134\uff21\137\uff21\140" +
    "\uff21\141\uff21\142\uff21\143\uff21\200\uff21\204\uff21\206\uff21" +
    "\211\uff21\001\002\000\056\110\177\111\153\112\166\113" +
    "\151\114\201\115\200\116\171\122\164\145\163\146\161" +
    "\147\157\150\172\151\165\152\160\163\156\166\202\175" +
    "\162\206\176\210\173\211\174\214\152\215\170\001\002" +
    "\000\034\153\207\154\214\155\212\156\217\157\205\160" +
    "\210\161\216\162\204\165\206\166\215\167\211\170\213" +
    "\176\u01e2\001\002\000\004\203\uff0e\001\002\000\004\176" +
    "\u01e4\001\002\000\004\203\uff1d\001\002\000\010\137\334" +
    "\206\105\211\073\001\002\000\012\003\u01e8\137\334\206" +
    "\105\211\073\001\002\000\006\003\u01f6\176\u01f7\001\002" +
    "\000\004\176\u01e9\001\002\000\004\131\u01ea\001\002\000" +
    "\004\175\u01eb\001\002\000\010\145\343\206\105\211\073" +
    "\001\002\000\004\176\u01ed\001\002\000\050\110\126\111" +
    "\075\112\116\113\110\114\103\115\102\116\114\117\072" +
    "\120\111\121\123\123\u01ee\134\131\137\100\140\120\141" +
    "\117\142\071\143\133\206\105\211\073\001\002\000\004" +
    "\201\u01f0\001\002\000\062\003\ufeb5\110\ufeb5\111\ufeb5\112" +
    "\ufeb5\113\ufeb5\114\ufeb5\115\ufeb5\116\ufeb5\117\ufeb5\120\ufeb5" +
    "\121\ufeb5\125\ufeb5\130\ufeb5\132\ufeb5\134\ufeb5\137\ufeb5\140" +
    "\ufeb5\141\ufeb5\142\ufeb5\143\ufeb5\200\ufeb5\204\ufeb5\206\ufeb5" +
    "\211\ufeb5\001\002\000\004\204\u01f1\001\002\000\060\003" +
    "\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114\uff28\115\uff28" +
    "\116\uff28\117\uff28\120\uff28\121\uff28\125\uff28\130\uff28\132" +
    "\uff28\134\uff28\137\uff28\140\uff28\141\uff28\142\uff28\143\uff28" +
    "\204\uff28\206\uff28\211\uff28\001\002\000\060\003\122\110" +
    "\126\111\075\112\116\113\110\114\103\115\102\116\114" +
    "\117\072\120\111\121\123\125\112\130\101\132\130\134" +
    "\131\137\100\140\120\141\117\142\071\143\133\204\u01f3" +
    "\206\105\211\073\001\002\000\004\202\u01f4\001\002\000" +
    "\004\124\u01f5\001\002\000\062\003\ufec2\110\ufec2\111\ufec2" +
    "\112\ufec2\113\ufec2\114\ufec2\115\ufec2\116\ufec2\117\ufec2\120" +
    "\ufec2\121\ufec2\125\ufec2\130\ufec2\132\ufec2\134\ufec2\137\ufec2" +
    "\140\ufec2\141\ufec2\142\ufec2\143\ufec2\200\ufec2\204\ufec2\206" +
    "\ufec2\211\ufec2\001\002\000\004\131\u0246\001\002\000\006" +
    "\003\u01f8\131\u01f9\001\002\000\004\175\u023b\001\002\000" +
    "\006\003\u01fa\175\u01fb\001\002\000\010\145\343\206\105" +
    "\211\073\001\002\000\012\003\u01fc\145\343\206\105\211" +
    "\073\001\002\000\004\176\u0228\001\002\000\006\003\u01fe" +
    "\176\u01ff\001\002\000\050\110\126\111\075\112\116\113" +
    "\110\114\103\115\102\116\114\117\072\120\111\121\123" +
    "\123\u0220\134\131\137\100\140\120\141\117\142\071\143" +
    "\133\206\105\211\073\001\002\000\052\003\u0202\110\126" +
    "\111\075\112\116\113\110\114\103\115\102\116\114\117" +
    "\072\120\111\121\123\123\u0200\134\131\137\100\140\120" +
    "\141\117\142\071\143\133\206\105\211\073\001\002\000" +
    "\006\003\u0209\201\u020a\001\002\000\062\003\ufec5\110\ufec5" +
    "\111\ufec5\112\ufec5\113\ufec5\114\ufec5\115\ufec5\116\ufec5\117" +
    "\ufec5\120\ufec5\121\ufec5\125\ufec5\130\ufec5\132\ufec5\134\ufec5" +
    "\137\ufec5\140\ufec5\141\ufec5\142\ufec5\143\ufec5\200\ufec5\204" +
    "\ufec5\206\ufec5\211\ufec5\001\002\000\004\201\u0203\001\002" +
    "\000\004\204\u0204\001\002\000\060\003\uff28\110\uff28\111" +
    "\uff28\112\uff28\113\uff28\114\uff28\115\uff28\116\uff28\117\uff28" +
    "\120\uff28\121\uff28\125\uff28\130\uff28\132\uff28\134\uff28\137" +
    "\uff28\140\uff28\141\uff28\142\uff28\143\uff28\204\uff28\206\uff28" +
    "\211\uff28\001\002\000\060\003\122\110\126\111\075\112" +
    "\116\113\110\114\103\115\102\116\114\117\072\120\111" +
    "\121\123\125\112\130\101\132\130\134\131\137\100\140" +
    "\120\141\117\142\071\143\133\204\u0206\206\105\211\073" +
    "\001\002\000\004\202\u0207\001\002\000\004\124\u0208\001" +
    "\002\000\062\003\ufebc\110\ufebc\111\ufebc\112\ufebc\113\ufebc" +
    "\114\ufebc\115\ufebc\116\ufebc\117\ufebc\120\ufebc\121\ufebc\125" +
    "\ufebc\130\ufebc\132\ufebc\134\ufebc\137\ufebc\140\ufebc\141\ufebc" +
    "\142\ufebc\143\ufebc\200\ufebc\204\ufebc\206\ufebc\211\ufebc\001" +
    "\002\000\004\204\u021b\001\002\000\006\003\u020c\204\u020b" +
    "\001\002\000\060\003\uff28\110\uff28\111\uff28\112\uff28\113" +
    "\uff28\114\uff28\115\uff28\116\uff28\117\uff28\120\uff28\121\uff28" +
    "\125\uff28\130\uff28\132\uff28\134\uff28\137\uff28\140\uff28\141" +
    "\uff28\142\uff28\143\uff28\204\uff28\206\uff28\211\uff28\001\002" +
    "\000\060\003\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114" +
    "\uff28\115\uff28\116\uff28\117\uff28\120\uff28\121\uff28\125\uff28" +
    "\130\uff28\132\uff28\134\uff28\137\uff28\140\uff28\141\uff28\142" +
    "\uff28\143\uff28\204\uff28\206\uff28\211\uff28\001\002\000\060" +
    "\003\122\110\126\111\075\112\116\113\110\114\103\115" +
    "\102\116\114\117\072\120\111\121\123\125\112\130\101" +
    "\132\130\134\131\137\100\140\120\141\117\142\071\143" +
    "\133\204\u020e\206\105\211\073\001\002\000\004\202\u020f" +
    "\001\002\000\004\124\u0210\001\002\000\062\003\ufeba\110" +
    "\ufeba\111\ufeba\112\ufeba\113\ufeba\114\ufeba\115\ufeba\116\ufeba" +
    "\117\ufeba\120\ufeba\121\ufeba\125\ufeba\130\ufeba\132\ufeba\134" +
    "\ufeba\137\ufeba\140\ufeba\141\ufeba\142\ufeba\143\ufeba\200\ufeba" +
    "\204\ufeba\206\ufeba\211\ufeba\001\002\000\060\003\u0212\110" +
    "\126\111\075\112\116\113\110\114\103\115\102\116\114" +
    "\117\072\120\111\121\123\125\112\130\101\132\130\134" +
    "\131\137\100\140\120\141\117\142\071\143\133\204\u0213" +
    "\206\105\211\073\001\002\000\066\003\uff27\110\uff27\111" +
    "\uff27\112\uff27\113\uff27\114\uff27\115\uff27\116\uff27\117\uff27" +
    "\120\uff27\121\uff27\125\uff27\130\uff27\132\uff27\134\uff27\137" +
    "\uff27\140\uff27\141\uff27\142\uff27\143\uff27\175\330\202\u0219" +
    "\203\327\204\uff27\206\uff27\211\uff27\001\002\000\006\003" +
    "\u0215\202\u0214\001\002\000\006\003\u0217\124\u0218\001\002" +
    "\000\004\124\u0216\001\002\000\062\003\ufeb8\110\ufeb8\111" +
    "\ufeb8\112\ufeb8\113\ufeb8\114\ufeb8\115\ufeb8\116\ufeb8\117\ufeb8" +
    "\120\ufeb8\121\ufeb8\125\ufeb8\130\ufeb8\132\ufeb8\134\ufeb8\137" +
    "\ufeb8\140\ufeb8\141\ufeb8\142\ufeb8\143\ufeb8\200\ufeb8\204\ufeb8" +
    "\206\ufeb8\211\ufeb8\001\002\000\062\003\ufeb7\110\ufeb7\111" +
    "\ufeb7\112\ufeb7\113\ufeb7\114\ufeb7\115\ufeb7\116\ufeb7\117\ufeb7" +
    "\120\ufeb7\121\ufeb7\125\ufeb7\130\ufeb7\132\ufeb7\134\ufeb7\137" +
    "\ufeb7\140\ufeb7\141\ufeb7\142\ufeb7\143\ufeb7\200\ufeb7\204\ufeb7" +
    "\206\ufeb7\211\ufeb7\001\002\000\062\003\ufec6\110\ufec6\111" +
    "\ufec6\112\ufec6\113\ufec6\114\ufec6\115\ufec6\116\ufec6\117\ufec6" +
    "\120\ufec6\121\ufec6\125\ufec6\130\ufec6\132\ufec6\134\ufec6\137" +
    "\ufec6\140\ufec6\141\ufec6\142\ufec6\143\ufec6\200\ufec6\204\ufec6" +
    "\206\ufec6\211\ufec6\001\002\000\004\124\u021a\001\002\000" +
    "\062\003\ufeb9\110\ufeb9\111\ufeb9\112\ufeb9\113\ufeb9\114\ufeb9" +
    "\115\ufeb9\116\ufeb9\117\ufeb9\120\ufeb9\121\ufeb9\125\ufeb9\130" +
    "\ufeb9\132\ufeb9\134\ufeb9\137\ufeb9\140\ufeb9\141\ufeb9\142\ufeb9" +
    "\143\ufeb9\200\ufeb9\204\ufeb9\206\ufeb9\211\ufeb9\001\002\000" +
    "\060\003\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114\uff28" +
    "\115\uff28\116\uff28\117\uff28\120\uff28\121\uff28\125\uff28\130" +
    "\uff28\132\uff28\134\uff28\137\uff28\140\uff28\141\uff28\142\uff28" +
    "\143\uff28\204\uff28\206\uff28\211\uff28\001\002\000\060\003" +
    "\122\110\126\111\075\112\116\113\110\114\103\115\102" +
    "\116\114\117\072\120\111\121\123\125\112\130\101\132" +
    "\130\134\131\137\100\140\120\141\117\142\071\143\133" +
    "\204\u021d\206\105\211\073\001\002\000\004\202\u021e\001" +
    "\002\000\004\124\u021f\001\002\000\062\003\ufebb\110\ufebb" +
    "\111\ufebb\112\ufebb\113\ufebb\114\ufebb\115\ufebb\116\ufebb\117" +
    "\ufebb\120\ufebb\121\ufebb\125\ufebb\130\ufebb\132\ufebb\134\ufebb" +
    "\137\ufebb\140\ufebb\141\ufebb\142\ufebb\143\ufebb\200\ufebb\204" +
    "\ufebb\206\ufebb\211\ufebb\001\002\000\004\201\u0222\001\002" +
    "\000\062\003\ufeb0\110\ufeb0\111\ufeb0\112\ufeb0\113\ufeb0\114" +
    "\ufeb0\115\ufeb0\116\ufeb0\117\ufeb0\120\ufeb0\121\ufeb0\125\ufeb0" +
    "\130\ufeb0\132\ufeb0\134\ufeb0\137\ufeb0\140\ufeb0\141\ufeb0\142" +
    "\ufeb0\143\ufeb0\200\ufeb0\204\ufeb0\206\ufeb0\211\ufeb0\001\002" +
    "\000\004\204\u0223\001\002\000\060\003\uff28\110\uff28\111" +
    "\uff28\112\uff28\113\uff28\114\uff28\115\uff28\116\uff28\117\uff28" +
    "\120\uff28\121\uff28\125\uff28\130\uff28\132\uff28\134\uff28\137" +
    "\uff28\140\uff28\141\uff28\142\uff28\143\uff28\204\uff28\206\uff28" +
    "\211\uff28\001\002\000\060\003\122\110\126\111\075\112" +
    "\116\113\110\114\103\115\102\116\114\117\072\120\111" +
    "\121\123\125\112\130\101\132\130\134\131\137\100\140" +
    "\120\141\117\142\071\143\133\204\u0225\206\105\211\073" +
    "\001\002\000\004\202\u0226\001\002\000\004\124\u0227\001" +
    "\002\000\062\003\ufebd\110\ufebd\111\ufebd\112\ufebd\113\ufebd" +
    "\114\ufebd\115\ufebd\116\ufebd\117\ufebd\120\ufebd\121\ufebd\125" +
    "\ufebd\130\ufebd\132\ufebd\134\ufebd\137\ufebd\140\ufebd\141\ufebd" +
    "\142\ufebd\143\ufebd\200\ufebd\204\ufebd\206\ufebd\211\ufebd\001" +
    "\002\000\050\110\126\111\075\112\116\113\110\114\103" +
    "\115\102\116\114\117\072\120\111\121\123\123\u0229\134" +
    "\131\137\100\140\120\141\117\142\071\143\133\206\105" +
    "\211\073\001\002\000\004\201\u022b\001\002\000\062\003" +
    "\ufeb1\110\ufeb1\111\ufeb1\112\ufeb1\113\ufeb1\114\ufeb1\115\ufeb1" +
    "\116\ufeb1\117\ufeb1\120\ufeb1\121\ufeb1\125\ufeb1\130\ufeb1\132" +
    "\ufeb1\134\ufeb1\137\ufeb1\140\ufeb1\141\ufeb1\142\ufeb1\143\ufeb1" +
    "\200\ufeb1\204\ufeb1\206\ufeb1\211\ufeb1\001\002\000\004\204" +
    "\u022c\001\002\000\060\003\uff28\110\uff28\111\uff28\112\uff28" +
    "\113\uff28\114\uff28\115\uff28\116\uff28\117\uff28\120\uff28\121" +
    "\uff28\125\uff28\130\uff28\132\uff28\134\uff28\137\uff28\140\uff28" +
    "\141\uff28\142\uff28\143\uff28\204\uff28\206\uff28\211\uff28\001" +
    "\002\000\060\003\122\110\126\111\075\112\116\113\110" +
    "\114\103\115\102\116\114\117\072\120\111\121\123\125" +
    "\112\130\101\132\130\134\131\137\100\140\120\141\117" +
    "\142\071\143\133\204\u022e\206\105\211\073\001\002\000" +
    "\004\202\u022f\001\002\000\004\124\u0230\001\002\000\062" +
    "\003\ufebe\110\ufebe\111\ufebe\112\ufebe\113\ufebe\114\ufebe\115" +
    "\ufebe\116\ufebe\117\ufebe\120\ufebe\121\ufebe\125\ufebe\130\ufebe" +
    "\132\ufebe\134\ufebe\137\ufebe\140\ufebe\141\ufebe\142\ufebe\143" +
    "\ufebe\200\ufebe\204\ufebe\206\ufebe\211\ufebe\001\002\000\004" +
    "\176\u0232\001\002\000\050\110\126\111\075\112\116\113" +
    "\110\114\103\115\102\116\114\117\072\120\111\121\123" +
    "\123\u0233\134\131\137\100\140\120\141\117\142\071\143" +
    "\133\206\105\211\073\001\002\000\004\201\u0235\001\002" +
    "\000\062\003\ufeb2\110\ufeb2\111\ufeb2\112\ufeb2\113\ufeb2\114" +
    "\ufeb2\115\ufeb2\116\ufeb2\117\ufeb2\120\ufeb2\121\ufeb2\125\ufeb2" +
    "\130\ufeb2\132\ufeb2\134\ufeb2\137\ufeb2\140\ufeb2\141\ufeb2\142" +
    "\ufeb2\143\ufeb2\200\ufeb2\204\ufeb2\206\ufeb2\211\ufeb2\001\002" +
    "\000\004\204\u0236\001\002\000\060\003\uff28\110\uff28\111" +
    "\uff28\112\uff28\113\uff28\114\uff28\115\uff28\116\uff28\117\uff28" +
    "\120\uff28\121\uff28\125\uff28\130\uff28\132\uff28\134\uff28\137" +
    "\uff28\140\uff28\141\uff28\142\uff28\143\uff28\204\uff28\206\uff28" +
    "\211\uff28\001\002\000\060\003\122\110\126\111\075\112" +
    "\116\113\110\114\103\115\102\116\114\117\072\120\111" +
    "\121\123\125\112\130\101\132\130\134\131\137\100\140" +
    "\120\141\117\142\071\143\133\204\u0238\206\105\211\073" +
    "\001\002\000\004\202\u0239\001\002\000\004\124\u023a\001" +
    "\002\000\062\003\ufebf\110\ufebf\111\ufebf\112\ufebf\113\ufebf" +
    "\114\ufebf\115\ufebf\116\ufebf\117\ufebf\120\ufebf\121\ufebf\125" +
    "\ufebf\130\ufebf\132\ufebf\134\ufebf\137\ufebf\140\ufebf\141\ufebf" +
    "\142\ufebf\143\ufebf\200\ufebf\204\ufebf\206\ufebf\211\ufebf\001" +
    "\002\000\010\145\343\206\105\211\073\001\002\000\004" +
    "\176\u023d\001\002\000\050\110\126\111\075\112\116\113" +
    "\110\114\103\115\102\116\114\117\072\120\111\121\123" +
    "\123\u023e\134\131\137\100\140\120\141\117\142\071\143" +
    "\133\206\105\211\073\001\002\000\004\201\u0240\001\002" +
    "\000\062\003\ufeb3\110\ufeb3\111\ufeb3\112\ufeb3\113\ufeb3\114" +
    "\ufeb3\115\ufeb3\116\ufeb3\117\ufeb3\120\ufeb3\121\ufeb3\125\ufeb3" +
    "\130\ufeb3\132\ufeb3\134\ufeb3\137\ufeb3\140\ufeb3\141\ufeb3\142" +
    "\ufeb3\143\ufeb3\200\ufeb3\204\ufeb3\206\ufeb3\211\ufeb3\001\002" +
    "\000\004\204\u0241\001\002\000\060\003\uff28\110\uff28\111" +
    "\uff28\112\uff28\113\uff28\114\uff28\115\uff28\116\uff28\117\uff28" +
    "\120\uff28\121\uff28\125\uff28\130\uff28\132\uff28\134\uff28\137" +
    "\uff28\140\uff28\141\uff28\142\uff28\143\uff28\204\uff28\206\uff28" +
    "\211\uff28\001\002\000\060\003\122\110\126\111\075\112" +
    "\116\113\110\114\103\115\102\116\114\117\072\120\111" +
    "\121\123\125\112\130\101\132\130\134\131\137\100\140" +
    "\120\141\117\142\071\143\133\204\u0243\206\105\211\073" +
    "\001\002\000\004\202\u0244\001\002\000\004\124\u0245\001" +
    "\002\000\062\003\ufec0\110\ufec0\111\ufec0\112\ufec0\113\ufec0" +
    "\114\ufec0\115\ufec0\116\ufec0\117\ufec0\120\ufec0\121\ufec0\125" +
    "\ufec0\130\ufec0\132\ufec0\134\ufec0\137\ufec0\140\ufec0\141\ufec0" +
    "\142\ufec0\143\ufec0\200\ufec0\204\ufec0\206\ufec0\211\ufec0\001" +
    "\002\000\004\175\u0247\001\002\000\010\145\343\206\105" +
    "\211\073\001\002\000\004\176\u0249\001\002\000\050\110" +
    "\126\111\075\112\116\113\110\114\103\115\102\116\114" +
    "\117\072\120\111\121\123\123\u024a\134\131\137\100\140" +
    "\120\141\117\142\071\143\133\206\105\211\073\001\002" +
    "\000\004\201\u024c\001\002\000\062\003\ufeb4\110\ufeb4\111" +
    "\ufeb4\112\ufeb4\113\ufeb4\114\ufeb4\115\ufeb4\116\ufeb4\117\ufeb4" +
    "\120\ufeb4\121\ufeb4\125\ufeb4\130\ufeb4\132\ufeb4\134\ufeb4\137" +
    "\ufeb4\140\ufeb4\141\ufeb4\142\ufeb4\143\ufeb4\200\ufeb4\204\ufeb4" +
    "\206\ufeb4\211\ufeb4\001\002\000\004\204\u024d\001\002\000" +
    "\060\003\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114\uff28" +
    "\115\uff28\116\uff28\117\uff28\120\uff28\121\uff28\125\uff28\130" +
    "\uff28\132\uff28\134\uff28\137\uff28\140\uff28\141\uff28\142\uff28" +
    "\143\uff28\204\uff28\206\uff28\211\uff28\001\002\000\060\003" +
    "\122\110\126\111\075\112\116\113\110\114\103\115\102" +
    "\116\114\117\072\120\111\121\123\125\112\130\101\132" +
    "\130\134\131\137\100\140\120\141\117\142\071\143\133" +
    "\204\u024f\206\105\211\073\001\002\000\004\202\u0250\001" +
    "\002\000\004\124\u0251\001\002\000\062\003\ufec1\110\ufec1" +
    "\111\ufec1\112\ufec1\113\ufec1\114\ufec1\115\ufec1\116\ufec1\117" +
    "\ufec1\120\ufec1\121\ufec1\125\ufec1\130\ufec1\132\ufec1\134\ufec1" +
    "\137\ufec1\140\ufec1\141\ufec1\142\ufec1\143\ufec1\200\ufec1\204" +
    "\ufec1\206\ufec1\211\ufec1\001\002\000\004\176\u0253\001\002" +
    "\000\004\131\u0254\001\002\000\004\175\u0255\001\002\000" +
    "\010\145\343\206\105\211\073\001\002\000\004\176\u0257" +
    "\001\002\000\050\110\126\111\075\112\116\113\110\114" +
    "\103\115\102\116\114\117\072\120\111\121\123\123\u0258" +
    "\134\131\137\100\140\120\141\117\142\071\143\133\206" +
    "\105\211\073\001\002\000\004\201\u025a\001\002\000\062" +
    "\003\ufeb6\110\ufeb6\111\ufeb6\112\ufeb6\113\ufeb6\114\ufeb6\115" +
    "\ufeb6\116\ufeb6\117\ufeb6\120\ufeb6\121\ufeb6\125\ufeb6\130\ufeb6" +
    "\132\ufeb6\134\ufeb6\137\ufeb6\140\ufeb6\141\ufeb6\142\ufeb6\143" +
    "\ufeb6\200\ufeb6\204\ufeb6\206\ufeb6\211\ufeb6\001\002\000\004" +
    "\204\u025b\001\002\000\060\003\uff28\110\uff28\111\uff28\112" +
    "\uff28\113\uff28\114\uff28\115\uff28\116\uff28\117\uff28\120\uff28" +
    "\121\uff28\125\uff28\130\uff28\132\uff28\134\uff28\137\uff28\140" +
    "\uff28\141\uff28\142\uff28\143\uff28\204\uff28\206\uff28\211\uff28" +
    "\001\002\000\060\003\122\110\126\111\075\112\116\113" +
    "\110\114\103\115\102\116\114\117\072\120\111\121\123" +
    "\125\112\130\101\132\130\134\131\137\100\140\120\141" +
    "\117\142\071\143\133\204\u025d\206\105\211\073\001\002" +
    "\000\004\202\u025e\001\002\000\004\124\u025f\001\002\000" +
    "\062\003\ufec3\110\ufec3\111\ufec3\112\ufec3\113\ufec3\114\ufec3" +
    "\115\ufec3\116\ufec3\117\ufec3\120\ufec3\121\ufec3\125\ufec3\130" +
    "\ufec3\132\ufec3\134\ufec3\137\ufec3\140\ufec3\141\ufec3\142\ufec3" +
    "\143\ufec3\200\ufec3\204\ufec3\206\ufec3\211\ufec3\001\002\000" +
    "\060\003\122\110\126\111\075\112\116\113\110\114\103" +
    "\115\102\116\114\117\072\120\111\121\123\125\112\130" +
    "\101\132\130\134\131\137\100\140\120\141\117\142\071" +
    "\143\133\204\u0261\206\105\211\073\001\002\000\004\202" +
    "\u0262\001\002\000\004\124\u0263\001\002\000\064\003\ufee2" +
    "\110\ufee2\111\ufee2\112\ufee2\113\ufee2\114\ufee2\115\ufee2\116" +
    "\ufee2\117\ufee2\120\ufee2\121\ufee2\125\ufee2\127\ufee2\130\ufee2" +
    "\132\ufee2\134\ufee2\137\ufee2\140\ufee2\141\ufee2\142\ufee2\143" +
    "\ufee2\200\ufee2\204\ufee2\206\ufee2\211\ufee2\001\002\000\064" +
    "\003\ufecd\110\ufecd\111\ufecd\112\ufecd\113\ufecd\114\ufecd\115" +
    "\ufecd\116\ufecd\117\ufecd\120\ufecd\121\ufecd\125\ufecd\127\u0135" +
    "\130\ufecd\132\ufecd\134\ufecd\137\ufecd\140\ufecd\141\ufecd\142" +
    "\ufecd\143\ufecd\200\ufecd\204\ufecd\206\ufecd\211\ufecd\001\002" +
    "\000\062\003\ufeef\110\ufeef\111\ufeef\112\ufeef\113\ufeef\114" +
    "\ufeef\115\ufeef\116\ufeef\117\ufeef\120\ufeef\121\ufeef\125\ufeef" +
    "\130\ufeef\132\ufeef\134\ufeef\137\ufeef\140\ufeef\141\ufeef\142" +
    "\ufeef\143\ufeef\200\ufeef\204\ufeef\206\ufeef\211\ufeef\001\002" +
    "\000\006\206\ufeff\211\ufeff\001\002\000\006\206\105\211" +
    "\073\001\002\000\012\003\u0128\172\u026a\203\uff06\207\u0127" +
    "\001\002\000\004\203\uff0d\001\002\000\056\110\177\111" +
    "\153\112\166\113\151\114\201\115\200\116\171\122\164" +
    "\145\163\146\161\147\157\150\172\151\165\152\160\163" +
    "\156\166\202\175\162\206\176\210\173\211\174\214\152" +
    "\215\170\001\002\000\034\153\207\154\214\155\212\156" +
    "\217\157\205\160\210\161\216\162\204\165\206\166\215" +
    "\167\211\170\213\203\uff07\001\002\000\056\110\177\111" +
    "\153\112\166\113\151\114\201\115\200\116\171\122\164" +
    "\145\163\146\161\147\157\150\172\151\165\152\160\163" +
    "\156\166\202\175\162\206\176\210\173\211\174\214\152" +
    "\215\170\001\002\000\034\153\207\154\214\155\212\156" +
    "\217\157\205\160\210\161\216\162\204\165\206\166\215" +
    "\167\211\170\213\176\u026e\001\002\000\004\203\uff11\001" +
    "\002\000\064\003\uff1f\110\uff1f\111\uff1f\112\uff1f\113\uff1f" +
    "\114\uff1f\115\uff1f\116\uff1f\117\uff1f\120\uff1f\121\uff1f\125" +
    "\uff1f\127\uff1f\130\uff1f\132\uff1f\134\uff1f\137\uff1f\140\uff1f" +
    "\141\uff1f\142\uff1f\143\uff1f\200\uff1f\204\uff1f\206\uff1f\211" +
    "\uff1f\001\002\000\056\110\177\111\153\112\166\113\151" +
    "\114\201\115\200\116\171\122\164\145\163\146\161\147" +
    "\157\150\172\151\165\152\160\163\156\166\202\175\162" +
    "\206\176\210\173\211\174\214\152\215\170\001\002\000" +
    "\034\153\207\154\214\155\212\156\217\157\205\160\210" +
    "\161\216\162\204\165\206\166\215\167\211\170\213\176" +
    "\u0272\001\002\000\004\203\uff1b\001\002\000\060\003\uff28" +
    "\110\uff28\111\uff28\112\uff28\113\uff28\114\uff28\115\uff28\116" +
    "\uff28\117\uff28\120\uff28\121\uff28\125\uff28\130\uff28\132\uff28" +
    "\134\uff28\137\uff28\140\uff28\141\uff28\142\uff28\143\uff28\200" +
    "\uff28\206\uff28\211\uff28\001\002\000\060\003\122\110\126" +
    "\111\075\112\116\113\110\114\103\115\102\116\114\117" +
    "\072\120\111\121\123\125\112\130\101\132\130\134\131" +
    "\137\100\140\120\141\117\142\071\143\133\200\u0275\206" +
    "\105\211\073\001\002\000\012\003\uff2d\135\uff2d\136\uff2d" +
    "\164\uff2d\001\002\000\004\177\u0277\001\002\000\060\003" +
    "\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114\uff28\115\uff28" +
    "\116\uff28\117\uff28\120\uff28\121\uff28\125\uff28\130\uff28\132" +
    "\uff28\134\uff28\137\uff28\140\uff28\141\uff28\142\uff28\143\uff28" +
    "\200\uff28\206\uff28\211\uff28\001\002\000\060\003\122\110" +
    "\126\111\075\112\116\113\110\114\103\115\102\116\114" +
    "\117\072\120\111\121\123\125\112\130\101\132\130\134" +
    "\131\137\100\140\120\141\117\142\071\143\133\200\u0279" +
    "\206\105\211\073\001\002\000\012\003\uff2e\135\uff2e\136" +
    "\uff2e\164\uff2e\001\002\000\004\176\u027b\001\002\000\004" +
    "\177\u027c\001\002\000\060\003\uff28\110\uff28\111\uff28\112" +
    "\uff28\113\uff28\114\uff28\115\uff28\116\uff28\117\uff28\120\uff28" +
    "\121\uff28\125\uff28\130\uff28\132\uff28\134\uff28\137\uff28\140" +
    "\uff28\141\uff28\142\uff28\143\uff28\200\uff28\206\uff28\211\uff28" +
    "\001\002\000\060\003\122\110\126\111\075\112\116\113" +
    "\110\114\103\115\102\116\114\117\072\120\111\121\123" +
    "\125\112\130\101\132\130\134\131\137\100\140\120\141" +
    "\117\142\071\143\133\200\u027e\206\105\211\073\001\002" +
    "\000\012\003\uff2f\135\uff2f\136\uff2f\164\uff2f\001\002\000" +
    "\004\176\u0280\001\002\000\004\177\uff2a\001\002\000\060" +
    "\003\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114\uff28\115" +
    "\uff28\116\uff28\117\uff28\120\uff28\121\uff28\125\uff28\130\uff28" +
    "\132\uff28\134\uff28\137\uff28\140\uff28\141\uff28\142\uff28\143" +
    "\uff28\200\uff28\206\uff28\211\uff28\001\002\000\060\003\122" +
    "\110\126\111\075\112\116\113\110\114\103\115\102\116" +
    "\114\117\072\120\111\121\123\125\112\130\101\132\130" +
    "\134\131\137\100\140\120\141\117\142\071\143\133\200" +
    "\u0283\206\105\211\073\001\002\000\012\003\uff30\135\uff30" +
    "\136\uff30\164\uff30\001\002\000\014\003\uffd0\155\uffd0\164" +
    "\uffd0\206\uffd0\211\uffd0\001\002\000\004\017\u0286\001\002" +
    "\000\004\157\u0287\001\002\000\014\003\uffba\155\uffba\164" +
    "\uffba\206\uffba\211\uffba\001\002\000\012\155\u028e\164\u028d" +
    "\206\046\211\042\001\002\000\012\155\uffa0\164\uffa0\206" +
    "\uffa0\211\uffa0\001\002\000\014\003\uffcd\155\uffcd\164\uffcd" +
    "\206\uffcd\211\uffcd\001\002\000\012\155\uffa3\164\uffa3\206" +
    "\uffa3\211\uffa3\001\002\000\012\155\uffa1\164\uffa1\206\uffa1" +
    "\211\uffa1\001\002\000\004\022\u02e1\001\002\000\012\011" +
    "\u029e\020\u029f\022\u02a0\023\u02a1\001\002\000\012\155\uffa2" +
    "\164\uffa2\206\uffa2\211\uffa2\001\002\000\012\155\uffa2\164" +
    "\uffa2\206\uffa2\211\uffa2\001\002\000\012\155\uffa2\164\uffa2" +
    "\206\uffa2\211\uffa2\001\002\000\012\155\u028e\164\u0294\206" +
    "\046\211\042\001\002\000\012\155\uff9d\164\uff9d\206\uff9d" +
    "\211\uff9d\001\002\000\004\011\u0295\001\002\000\004\157" +
    "\u0296\001\002\000\014\003\uffbf\155\uffbf\164\uffbf\206\uffbf" +
    "\211\uffbf\001\002\000\012\155\u028e\164\u0298\206\046\211" +
    "\042\001\002\000\004\023\u029a\001\002\000\012\155\uff9e" +
    "\164\uff9e\206\uff9e\211\uff9e\001\002\000\004\157\u029b\001" +
    "\002\000\014\003\uffb7\155\uffb7\164\uffb7\206\uffb7\211\uffb7" +
    "\001\002\000\012\155\u028e\164\u028d\206\046\211\042\001" +
    "\002\000\012\155\uff9f\164\uff9f\206\uff9f\211\uff9f\001\002" +
    "\000\010\003\uff8b\157\uff8b\177\uff8b\001\002\000\004\157" +
    "\u02db\001\002\000\010\003\uff61\157\uff61\177\uff61\001\002" +
    "\000\010\003\uff5d\157\uff5d\177\uff5d\001\002\000\010\003" +
    "\u02a4\157\u02a3\177\u02a7\001\002\000\012\155\uffc0\164\uffc0" +
    "\206\uffc0\211\uffc0\001\002\000\010\003\uff5c\157\uff5c\177" +
    "\uff5c\001\002\000\010\003\uff5b\157\uff5b\177\uff5b\001\002" +
    "\000\010\003\uff5e\157\uff5e\177\uff5e\001\002\000\014\027" +
    "\u02a9\030\u02ac\031\u02ab\032\u02aa\034\u02a8\001\002\000\004" +
    "\172\u02d3\001\002\000\004\172\u02bf\001\002\000\004\172" +
    "\u02b8\001\002\000\004\172\u02b0\001\002\000\004\172\u02ad" +
    "\001\002\000\004\067\u02ae\001\002\000\004\200\u02af\001" +
    "\002\000\010\003\uff5a\157\uff5a\177\uff5a\001\002\000\014" +
    "\071\u02b4\072\u02b5\073\u02b2\074\u02b3\075\u02b6\001\002\000" +
    "\004\200\u02b7\001\002\000\004\200\uff42\001\002\000\004" +
    "\200\uff41\001\002\000\004\200\uff44\001\002\000\004\200" +
    "\uff43\001\002\000\004\200\uff40\001\002\000\010\003\uff59" +
    "\157\uff59\177\uff59\001\002\000\012\076\u02b9\077\u02bb\100" +
    "\u02bc\101\u02bd\001\002\000\004\200\uff3f\001\002\000\004" +
    "\200\u02be\001\002\000\004\200\uff3e\001\002\000\004\200" +
    "\uff3d\001\002\000\004\200\uff3c\001\002\000\010\003\uff58" +
    "\157\uff58\177\uff58\001\002\000\044\046\u02c4\047\u02c5\050" +
    "\u02c3\051\u02c7\052\u02c6\053\u02c9\054\u02d0\055\u02c2\056\u02c8" +
    "\057\u02cb\060\u02c0\061\u02cf\062\u02d1\063\u02ca\064\u02cc\065" +
    "\u02c1\066\u02cd\001\002\000\004\200\uff4b\001\002\000\004" +
    "\200\uff46\001\002\000\004\200\uff4e\001\002\000\004\200" +
    "\uff53\001\002\000\004\200\uff55\001\002\000\004\200\uff54" +
    "\001\002\000\004\200\uff51\001\002\000\004\200\uff52\001" +
    "\002\000\004\200\uff4d\001\002\000\004\200\uff50\001\002" +
    "\000\004\200\uff48\001\002\000\004\200\uff4c\001\002\000" +
    "\004\200\uff47\001\002\000\004\200\uff45\001\002\000\004" +
    "\200\u02d2\001\002\000\004\200\uff4a\001\002\000\004\200" +
    "\uff4f\001\002\000\004\200\uff49\001\002\000\010\003\uff56" +
    "\157\uff56\177\uff56\001\002\000\004\210\u02d4\001\002\000" +
    "\004\200\u02d5\001\002\000\010\003\uff57\157\uff57\177\uff57" +
    "\001\002\000\010\003\u02d8\157\u02d7\177\u02a7\001\002\000" +
    "\012\155\uffc1\164\uffc1\206\uffc1\211\uffc1\001\002\000\010" +
    "\003\uff60\157\uff60\177\uff60\001\002\000\010\003\uff5f\157" +
    "\uff5f\177\uff5f\001\002\000\010\003\uff62\157\uff62\177\uff62" +
    "\001\002\000\014\003\uffc3\155\uffc3\164\uffc3\206\uffc3\211" +
    "\uffc3\001\002\000\010\003\u02df\157\u02dd\177\u02a7\001\002" +
    "\000\012\155\uffc9\164\uffc9\206\uffc9\211\uffc9\001\002\000" +
    "\010\003\uff8c\157\uff8c\177\uff8c\001\002\000\010\003\uff8a" +
    "\157\uff8a\177\uff8a\001\002\000\010\003\uff89\157\uff89\177" +
    "\uff89\001\002\000\004\157\u02e2\001\002\000\014\003\uffb8" +
    "\155\uffb8\164\uffb8\206\uffb8\211\uffb8\001\002\000\012\155" +
    "\u028e\164\u0294\206\046\211\042\001\002\000\014\003\uffd5" +
    "\155\uffd5\164\uffd5\206\uffd5\211\uffd5\001\002\000\010\164" +
    "\u02e8\206\046\211\042\001\002\000\010\164\uffb3\206\uffb3" +
    "\211\uffb3\001\002\000\014\003\uffce\155\uffce\164\uffce\206" +
    "\uffce\211\uffce\001\002\000\004\021\u02e9\001\002\000\004" +
    "\157\u02ea\001\002\000\014\003\uffb9\155\uffb9\164\uffb9\206" +
    "\uffb9\211\uffb9\001\002\000\010\003\uff67\157\uff67\177\uff67" +
    "\001\002\000\010\003\uff87\157\uff87\177\uff87\001\002\000" +
    "\004\157\u0342\001\002\000\010\003\uff75\157\uff75\177\uff75" +
    "\001\002\000\010\003\uff79\157\uff79\177\uff79\001\002\000" +
    "\010\003\uff82\157\uff82\177\uff82\001\002\000\010\003\uff6f" +
    "\157\uff6f\177\uff6f\001\002\000\010\003\u02f4\157\u02f3\177" +
    "\u02f6\001\002\000\004\164\uffc4\001\002\000\010\003\uff6e" +
    "\157\uff6e\177\uff6e\001\002\000\010\003\uff70\157\uff70\177" +
    "\uff70\001\002\000\014\034\u02f7\041\u02fa\042\u02f9\043\u02fb" +
    "\044\u02f8\001\002\000\004\172\u030d\001\002\000\004\172" +
    "\u0307\001\002\000\004\172\u0304\001\002\000\004\172\u0301" +
    "\001\002\000\004\172\u02fc\001\002\000\006\067\u02ff\070" +
    "\u02fe\001\002\000\004\200\u0300\001\002\000\004\200\uff38" +
    "\001\002\000\004\200\uff39\001\002\000\010\003\uff6b\157" +
    "\uff6b\177\uff6b\001\002\000\004\215\u0302\001\002\000\004" +
    "\200\u0303\001\002\000\010\003\uff6d\157\uff6d\177\uff6d\001" +
    "\002\000\006\067\u02ff\070\u02fe\001\002\000\004\200\u0306" +
    "\001\002\000\010\003\uff6c\157\uff6c\177\uff6c\001\002\000" +
    "\010\210\u030a\214\u0308\215\u030b\001\002\000\004\200\uff93" +
    "\001\002\000\004\200\u030c\001\002\000\004\200\uff91\001" +
    "\002\000\004\200\uff92\001\002\000\010\003\uff6a\157\uff6a" +
    "\177\uff6a\001\002\000\004\210\u030e\001\002\000\004\200" +
    "\u030f\001\002\000\010\003\uff69\157\uff69\177\uff69\001\002" +
    "\000\010\003\u0312\157\u0311\177\u0314\001\002\000\010\164" +
    "\uffc7\206\uffc7\211\uffc7\001\002\000\010\003\uff81\157\uff81" +
    "\177\uff81\001\002\000\010\003\uff83\157\uff83\177\uff83\001" +
    "\002\000\016\030\u0319\031\u031a\032\u0318\034\u0315\036\u0317" +
    "\037\u0316\001\002\000\004\172\u032a\001\002\000\004\172" +
    "\u0327\001\002\000\004\172\u0324\001\002\000\004\172\u0321" +
    "\001\002\000\004\172\u031e\001\002\000\004\172\u031b\001" +
    "\002\000\014\071\u02b4\072\u02b5\073\u02b2\074\u02b3\075\u02b6" +
    "\001\002\000\004\200\u031d\001\002\000\010\003\uff7f\157" +
    "\uff7f\177\uff7f\001\002\000\004\067\u031f\001\002\000\004" +
    "\200\u0320\001\002\000\010\003\uff80\157\uff80\177\uff80\001" +
    "\002\000\012\076\u02b9\077\u02bb\100\u02bc\101\u02bd\001\002" +
    "\000\004\200\u0323\001\002\000\010\003\uff7e\157\uff7e\177" +
    "\uff7e\001\002\000\004\216\u0325\001\002\000\004\200\u0326" +
    "\001\002\000\010\003\uff7c\157\uff7c\177\uff7c\001\002\000" +
    "\004\216\u0328\001\002\000\004\200\u0329\001\002\000\010" +
    "\003\uff7b\157\uff7b\177\uff7b\001\002\000\004\210\u032b\001" +
    "\002\000\004\200\u032c\001\002\000\010\003\uff7d\157\uff7d" +
    "\177\uff7d\001\002\000\010\003\u032f\157\u032e\177\u02a7\001" +
    "\002\000\006\155\uffc6\164\uffc6\001\002\000\010\003\uff78" +
    "\157\uff78\177\uff78\001\002\000\010\003\uff77\157\uff77\177" +
    "\uff77\001\002\000\010\003\uff7a\157\uff7a\177\uff7a\001\002" +
    "\000\010\003\u0334\157\u0333\177\u0337\001\002\000\012\155" +
    "\uffc5\164\uffc5\206\uffc5\211\uffc5\001\002\000\010\003\uff74" +
    "\157\uff74\177\uff74\001\002\000\010\003\uff73\157\uff73\177" +
    "\uff73\001\002\000\010\003\uff76\157\uff76\177\uff76\001\002" +
    "\000\020\026\u0339\027\u02a9\030\u02ac\031\u02ab\032\u02aa\034" +
    "\u02a8\040\u0338\001\002\000\004\172\u033d\001\002\000\004" +
    "\172\u033a\001\002\000\044\046\u02c4\047\u02c5\050\u02c3\051" +
    "\u02c7\052\u02c6\053\u02c9\054\u02d0\055\u02c2\056\u02c8\057\u02cb" +
    "\060\u02c0\061\u02cf\062\u02d1\063\u02ca\064\u02cc\065\u02c1\066" +
    "\u02cd\001\002\000\004\200\u033c\001\002\000\010\003\uff71" +
    "\157\uff71\177\uff71\001\002\000\006\106\u033f\107\u033e\001" +
    "\002\000\004\200\uff3a\001\002\000\004\200\uff3b\001\002" +
    "\000\004\200\u0341\001\002\000\010\003\uff72\157\uff72\177" +
    "\uff72\001\002\000\012\003\uffe5\135\uffe5\136\uffe5\164\uffe5" +
    "\001\002\000\010\003\u0346\157\u0345\177\u0348\001\002\000" +
    "\010\003\uff88\157\uff88\177\uff88\001\002\000\010\164\uffc8" +
    "\206\uffc8\211\uffc8\001\002\000\010\003\uff86\157\uff86\177" +
    "\uff86\001\002\000\010\003\uff84\157\uff84\177\uff84\001\002" +
    "\000\016\027\u02a9\030\u02ac\031\u02ab\032\u02aa\033\u0349\034" +
    "\u02a8\001\002\000\004\172\u034a\001\002\000\012\102\u034d" +
    "\103\u034f\104\u034b\105\u034e\001\002\000\004\200\uff35\001" +
    "\002\000\004\200\u0350\001\002\000\004\200\uff37\001\002" +
    "\000\004\200\uff34\001\002\000\004\200\uff36\001\002\000" +
    "\010\003\uff85\157\uff85\177\uff85\001\002\000\010\003\u0353" +
    "\157\u0352\177\u0356\001\002\000\010\164\uffc2\206\uffc2\211" +
    "\uffc2\001\002\000\010\003\uff66\157\uff66\177\uff66\001\002" +
    "\000\010\003\uff65\157\uff65\177\uff65\001\002\000\010\003" +
    "\uff68\157\uff68\177\uff68\001\002\000\020\026\u0357\027\u02a9" +
    "\030\u02ac\031\u02ab\032\u02aa\034\u02a8\045\u0358\001\002\000" +
    "\004\172\u035c\001\002\000\004\172\u0359\001\002\000\010" +
    "\210\u030a\214\u0308\215\u030b\001\002\000\004\200\u035b\001" +
    "\002\000\010\003\uff64\157\uff64\177\uff64\001\002\000\044" +
    "\046\u02c4\047\u02c5\050\u02c3\051\u02c7\052\u02c6\053\u02c9\054" +
    "\u02d0\055\u02c2\056\u02c8\057\u02cb\060\u02c0\061\u02cf\062\u02d1" +
    "\063\u02ca\064\u02cc\065\u02c1\066\u02cd\001\002\000\004\200" +
    "\u035e\001\002\000\010\003\uff63\157\uff63\177\uff63\001\002" +
    "\000\010\164\u0360\206\046\211\042\001\002\000\004\013" +
    "\u0362\001\002\000\014\003\uffd3\155\uffd3\164\uffd3\206\uffd3" +
    "\211\uffd3\001\002\000\004\157\u0363\001\002\000\014\003" +
    "\uffbd\155\uffbd\164\uffbd\206\uffbd\211\uffbd\001\002\000\004" +
    "\157\u0365\001\002\000\006\155\uffee\164\uffee\001\002\000" +
    "\012\155\035\164\u036d\206\046\211\042\001\002\000\012" +
    "\155\uffa4\164\uffa4\206\uffa4\211\uffa4\001\002\000\012\155" +
    "\uffa2\164\uffa2\206\uffa2\211\uffa2\001\002\000\006\155\uffb5" +
    "\164\uffb5\001\002\000\010\164\uffb2\206\uffb2\211\uffb2\001" +
    "\002\000\012\155\uffa9\164\uffa9\206\uffa9\211\uffa9\001\002" +
    "\000\012\155\uffb0\164\uffb0\206\uffb0\211\uffb0\001\002\000" +
    "\004\016\u0381\001\002\000\012\155\uffb1\164\uffb1\206\uffb1" +
    "\211\uffb1\001\002\000\014\003\uffd1\155\uffd1\164\uffd1\206" +
    "\uffd1\211\uffd1\001\002\000\010\164\uffb2\206\uffb2\211\uffb2" +
    "\001\002\000\010\164\uffb2\206\uffb2\211\uffb2\001\002\000" +
    "\012\155\uffa2\164\uffa2\206\uffa2\211\uffa2\001\002\000\012" +
    "\155\uffa2\164\uffa2\206\uffa2\211\uffa2\001\002\000\004\164" +
    "\u0285\001\002\000\012\003\uff31\135\uff31\136\uff31\164\uff31" +
    "\001\002\000\012\003\053\135\052\136\055\164\057\001" +
    "\002\000\012\155\uffa5\164\uffa5\206\uffa5\211\uffa5\001\002" +
    "\000\012\155\uffaa\164\uffaa\206\uffaa\211\uffaa\001\002\000" +
    "\012\155\u028e\164\u028d\206\046\211\042\001\002\000\012" +
    "\155\uffa7\164\uffa7\206\uffa7\211\uffa7\001\002\000\012\155" +
    "\u028e\164\u0294\206\046\211\042\001\002\000\012\155\uffaf" +
    "\164\uffaf\206\uffaf\211\uffaf\001\002\000\010\164\u02e8\206" +
    "\046\211\042\001\002\000\012\155\uffa8\164\uffa8\206\uffa8" +
    "\211\uffa8\001\002\000\010\164\u0360\206\046\211\042\001" +
    "\002\000\012\155\uffad\164\uffad\206\uffad\211\uffad\001\002" +
    "\000\004\157\u0382\001\002\000\014\003\uffbb\155\uffbb\164" +
    "\uffbb\206\uffbb\211\uffbb\001\002\000\012\155\035\164\u036d" +
    "\206\046\211\042\001\002\000\012\155\uffab\164\uffab\206" +
    "\uffab\211\uffab\001\002\000\010\164\u0387\206\046\211\042" +
    "\001\002\000\012\155\uffae\164\uffae\206\uffae\211\uffae\001" +
    "\002\000\004\012\u0388\001\002\000\004\157\u0389\001\002" +
    "\000\014\003\uffbe\155\uffbe\164\uffbe\206\uffbe\211\uffbe\001" +
    "\002\000\006\155\u038b\164\u038d\001\002\000\004\015\u0391" +
    "\001\002\000\006\155\uffb6\164\uffb6\001\002\000\004\014" +
    "\u038f\001\002\000\012\155\uffac\164\uffac\206\uffac\211\uffac" +
    "\001\002\000\004\157\u0390\001\002\000\014\003\uffbc\155" +
    "\uffbc\164\uffbc\206\uffbc\211\uffbc\001\002\000\004\157\u0392" +
    "\001\002\000\010\164\uffb2\206\uffb2\211\uffb2\001\002\000" +
    "\010\164\u0394\206\046\211\042\001\002\000\004\015\u0395" +
    "\001\002\000\004\157\u0396\001\002\000\006\155\uffb4\164" +
    "\uffb4\001\002\000\012\155\u028e\164\u0298\206\046\211\042" +
    "\001\002\000\012\155\uffa6\164\uffa6\206\uffa6\211\uffa6\001" +
    "\002\000\010\164\u0387\206\046\211\042\001\002\000\014" +
    "\003\uffd4\155\uffd4\164\uffd4\206\uffd4\211\uffd4\001\002\000" +
    "\006\155\u038b\164\u038d\001\002\000\014\003\uffd2\155\uffd2" +
    "\164\uffd2\206\uffd2\211\uffd2\001\002\000\012\155\u028e\164" +
    "\u0298\206\046\211\042\001\002\000\014\003\uffcc\155\uffcc" +
    "\164\uffcc\206\uffcc\211\uffcc\001\002\000\010\003\uff8f\157" +
    "\uff8f\177\uff8f\001\002\000\010\003\u03a2\157\u03a1\177\u03a4" +
    "\001\002\000\014\003\ufff0\155\ufff0\164\ufff0\206\ufff0\211" +
    "\ufff0\001\002\000\010\003\uff8e\157\uff8e\177\uff8e\001\002" +
    "\000\010\003\uff90\157\uff90\177\uff90\001\002\000\004\026" +
    "\u03a5\001\002\000\004\172\u03a6\001\002\000\044\046\u02c4" +
    "\047\u02c5\050\u02c3\051\u02c7\052\u02c6\053\u02c9\054\u02d0\055" +
    "\u02c2\056\u02c8\057\u02cb\060\u02c0\061\u02cf\062\u02d1\063\u02ca" +
    "\064\u02cc\065\u02c1\066\u02cd\001\002\000\004\200\u03a8\001" +
    "\002\000\010\003\uff8d\157\uff8d\177\uff8d\001\002\000\006" +
    "\155\u03ab\164\u03ae\001\002\000\004\010\u039f\001\002\000" +
    "\004\024\u02ed\001\002\000\004\164\u03ae\001\002\000\004" +
    "\002\ufffb\001\002\000\004\004\u03af\001\002\000\004\157" +
    "\u03b0\001\002\000\004\002\ufff5\001\002\000\004\002\ufff7" +
    "\001\002\000\004\164\u03ae\001\002\000\004\002\ufffd\001" +
    "\002\000\004\002\ufffa\001\002\000\012\003\u03b6\135\052" +
    "\136\055\164\u03b7\001\002\000\004\175\u027a\001\002\000" +
    "\004\024\u03b8\001\002\000\004\157\u03b9\001\002\000\010" +
    "\003\uff33\155\uff33\164\uff33\001\002\000\004\157\u03bb\001" +
    "\002\000\010\003\ufff3\155\ufff3\164\ufff3\001\002\000\004" +
    "\005\u03ba\001\002\000\006\003\020\155\022\001\002\000" +
    "\006\155\u03ab\164\u03ae\001\002\000\006\003\020\155\u03aa" +
    "\001\002\000\006\155\u03ab\164\u03ae\001\002\000\004\164" +
    "\u03ae\001\002\000\004\002\ufff9\001\002\000\004\002\ufff6" +
    "\001\002\000\004\164\u03ae\001\002\000\004\002\ufffc\001" +
    "\002\000\004\002\ufff8\001\002\000\010\003\u03c9\155\u03ca" +
    "\164\u03ce\001\002\000\006\003\u03e8\164\u03e9\001\002\000" +
    "\010\003\uffeb\155\uffeb\164\uffeb\001\002\000\010\006\u03dc" +
    "\007\u03db\024\u02ed\001\002\000\012\003\uffdd\164\uffdd\206" +
    "\uffdd\211\uffdd\001\002\000\010\003\uffed\155\uffed\164\uffed" +
    "\001\002\000\006\003\ufff4\155\ufff4\001\002\000\004\005" +
    "\u03d2\001\002\000\012\003\uff31\135\uff31\136\uff31\164\uff31" +
    "\001\002\000\012\003\053\135\052\136\055\164\057\001" +
    "\002\000\010\003\uffe8\155\uffe8\164\uffe8\001\002\000\004" +
    "\157\u03d3\001\002\000\006\003\ufff2\155\ufff2\001\002\000" +
    "\012\003\u03d6\164\u03d8\206\046\211\042\001\002\000\012" +
    "\003\uffde\164\uffde\206\uffde\211\uffde\001\002\000\010\003" +
    "\uffe1\155\uffe1\164\uffe1\001\002\000\010\003\uffe9\155\uffe9" +
    "\164\uffe9\001\002\000\004\006\u03d9\001\002\000\004\157" +
    "\u03da\001\002\000\010\003\uffe2\155\uffe2\164\uffe2\001\002" +
    "\000\010\003\uff96\157\uff96\177\uff96\001\002\000\004\157" +
    "\u03dd\001\002\000\012\003\uffe6\164\uffe6\206\uffe6\211\uffe6" +
    "\001\002\000\010\003\u03e1\157\u03e0\177\u03e2\001\002\000" +
    "\010\003\uff97\157\uff97\177\uff97\001\002\000\006\003\uffe7" +
    "\164\uffe7\001\002\000\010\003\uff95\157\uff95\177\uff95\001" +
    "\002\000\004\025\u03e3\001\002\000\004\172\u03e4\001\002" +
    "\000\004\215\u03e5\001\002\000\004\200\u03e6\001\002\000" +
    "\010\003\uff94\157\uff94\177\uff94\001\002\000\010\003\uffea" +
    "\155\uffea\164\uffea\001\002\000\010\003\uffe3\155\uffe3\164" +
    "\uffe3\001\002\000\004\007\u03ea\001\002\000\004\157\u03eb" +
    "\001\002\000\010\003\uffe4\155\uffe4\164\uffe4\001\002\000" +
    "\010\003\uff9b\157\uff9b\177\uff9b\001\002\000\010\003\u03ef" +
    "\157\u03ee\177\u03f1\001\002\000\004\155\uffff\001\002\000" +
    "\010\003\uff9a\157\uff9a\177\uff9a\001\002\000\010\003\uff9c" +
    "\157\uff9c\177\uff9c\001\002\000\006\034\u03f2\035\u03f3\001" +
    "\002\000\004\172\u03f7\001\002\000\004\172\u03f4\001\002" +
    "\000\010\210\u030a\214\u0308\215\u030b\001\002\000\004\200" +
    "\u03f6\001\002\000\010\003\uff98\157\uff98\177\uff98\001\002" +
    "\000\004\210\u03f8\001\002\000\004\200\u03f9\001\002\000" +
    "\010\003\uff99\157\uff99\177\uff99\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u03f7\000\006\002\006\146\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\015\005\012\014\010" +
    "\147\011\154\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\u03c6\001\001\000\006" +
    "\003\u03bc\147\011\001\001\000\002\001\001\000\004\043" +
    "\u03b4\001\001\000\012\004\016\005\020\150\022\154\014" +
    "\001\001\000\010\005\u03b1\046\u03b2\154\014\001\001\000" +
    "\002\001\001\000\006\004\u03a8\150\022\001\001\000\002" +
    "\001\001\000\004\016\023\001\001\000\036\021\046\023" +
    "\024\154\044\155\036\156\027\157\033\160\026\161\031" +
    "\162\043\163\030\164\035\165\040\166\025\205\037\001" +
    "\001\000\002\001\001\000\004\113\u039c\001\001\000\004" +
    "\035\u039a\001\001\000\004\042\u0398\001\001\000\002\001" +
    "\001\000\004\044\u0365\001\001\000\002\001\001\000\004" +
    "\042\u035e\001\001\000\002\001\001\000\004\042\u02e4\001" +
    "\001\000\004\113\u02e2\001\001\000\002\001\001\000\004" +
    "\113\u0287\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\174\u0283\001\001\000\004\043\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\104\055\203\050\210" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\101\066\001\001\000\036\013\105" +
    "\034\114\102\112\103\067\115\073\116\124\117\106\120" +
    "\103\124\123\130\131\134\075\145\126\201\120\202\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\u0266\001\001\000\004\101\u025f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\013\105\034\114\103\u0131\115\073\116" +
    "\124\130\131\134\075\145\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\111\142\112\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\112\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\131\u011b\132" +
    "\153\144\166\001\001\000\010\131\154\132\153\144\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\131\267" +
    "\132\153\144\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\131\265\132\153\144\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\131" +
    "\202\132\153\144\166\001\001\000\002\001\001\000\010" +
    "\131\232\132\153\144\166\001\001\000\010\131\231\132" +
    "\153\144\166\001\001\000\010\131\230\132\153\144\166" +
    "\001\001\000\010\131\227\132\153\144\166\001\001\000" +
    "\010\131\226\132\153\144\166\001\001\000\010\131\225" +
    "\132\153\144\166\001\001\000\010\131\224\132\153\144" +
    "\166\001\001\000\010\131\223\132\153\144\166\001\001" +
    "\000\010\131\222\132\153\144\166\001\001\000\010\131" +
    "\221\132\153\144\166\001\001\000\010\131\220\132\153" +
    "\144\166\001\001\000\010\131\217\132\153\144\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\131" +
    "\234\132\153\144\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\131" +
    "\241\132\153\144\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\013\105\034\114\103" +
    "\246\115\073\116\124\130\131\134\075\145\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\101\251\001\001\000\036\013\105\034\114\102\112" +
    "\103\067\115\073\116\124\117\106\120\103\124\123\130" +
    "\131\134\075\145\126\201\120\202\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\131\260\132\153\144\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\013\105\034\114\103\u0105\115\073" +
    "\116\124\130\131\134\075\145\126\001\001\000\022\013" +
    "\105\034\114\103\275\115\073\116\124\130\131\134\075" +
    "\145\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\101\301\001\001" +
    "\000\036\013\105\034\114\102\112\103\067\115\073\116" +
    "\124\117\106\120\103\124\123\130\131\134\075\145\126" +
    "\201\120\202\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\101\315\001\001\000\004\101\311\001\001\000" +
    "\036\013\105\034\114\102\112\103\067\115\073\116\124" +
    "\117\106\120\103\124\123\130\131\134\075\145\126\201" +
    "\120\202\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\013\105\034\114\102\112\103" +
    "\067\115\073\116\124\117\106\120\103\124\123\130\131" +
    "\134\075\145\126\201\120\202\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\034\334\121\335" +
    "\131\330\132\153\144\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\356\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\034\343\122\341\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\101\350" +
    "\001\001\000\036\013\105\034\114\102\112\103\067\115" +
    "\073\116\124\117\106\120\103\124\123\130\131\134\075" +
    "\145\126\201\120\202\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\131\355\132\153" +
    "\144\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\131\360\132\153\144\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\101\367\001\001" +
    "\000\036\013\105\034\114\102\112\103\067\115\073\116" +
    "\124\117\106\120\103\124\123\130\131\134\075\145\126" +
    "\201\120\202\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\101\u0100\001" +
    "\001\000\036\013\105\034\114\102\112\103\067\115\073" +
    "\116\124\117\106\120\103\124\123\130\131\134\075\145" +
    "\126\201\120\202\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\101\u0108\001\001\000\036" +
    "\013\105\034\114\102\112\103\067\115\073\116\124\117" +
    "\106\120\103\124\123\130\131\134\075\145\126\201\120" +
    "\202\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\013\105\034\114\103\u010e\115\073" +
    "\116\124\130\131\134\075\145\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\101\u0111" +
    "\001\001\000\036\013\105\034\114\102\112\103\067\115" +
    "\073\116\124\117\106\120\103\124\123\130\131\134\075" +
    "\145\126\201\120\202\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\131\u0116\132\153" +
    "\144\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\131\u0119\132\153\144\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\013\105\034\114\103\u011f\115\073\116\124\130\131" +
    "\134\075\145\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\101\u0122\001\001\000\036" +
    "\013\105\034\114\102\112\103\067\115\073\116\124\117" +
    "\106\120\103\124\123\130\131\134\075\145\126\201\120" +
    "\202\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\u012b\001\001\000\002\001\001" +
    "\000\010\131\u0129\132\153\144\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\131\u012d" +
    "\132\153\144\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\125\u0132" +
    "\001\001\000\006\126\u0133\127\u0135\001\001\000\002\001" +
    "\001\000\022\013\105\034\114\103\u0137\115\073\116\124" +
    "\130\131\134\075\145\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\131\u013c\132\153\144" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\013\105\034\114\103\u0140\115\073\116\124\130\131\134" +
    "\075\145\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\101\u0143\001\001\000\036\013" +
    "\105\034\114\102\112\103\067\115\073\116\124\117\106" +
    "\120\103\124\123\130\131\134\075\145\126\201\120\202" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\101\u0148\001\001\000\036\013\105\034" +
    "\114\102\112\103\067\115\073\116\124\117\106\120\103" +
    "\124\123\130\131\134\075\145\126\201\120\202\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\131\u018f\132\153\144\166\001\001\000\010\131" +
    "\u014e\132\153\144\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\013\105\034\114\103" +
    "\u0153\115\073\116\124\130\131\134\075\145\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\101\u0156\001\001\000\036\013\105\034\114\102\112" +
    "\103\067\115\073\116\124\117\106\120\103\124\123\130" +
    "\131\134\075\145\126\201\120\202\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\013\105\034\114\103\u017f" +
    "\115\073\116\124\130\131\134\075\145\126\001\001\000" +
    "\022\013\105\034\114\103\u015f\115\073\116\124\130\131" +
    "\134\075\145\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\101\u0163" +
    "\001\001\000\036\013\105\034\114\102\112\103\067\115" +
    "\073\116\124\117\106\120\103\124\123\130\131\134\075" +
    "\145\126\201\120\202\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\101\u016f\001\001\000\004\101\u016b\001" +
    "\001\000\036\013\105\034\114\102\112\103\067\115\073" +
    "\116\124\117\106\120\103\124\123\130\131\134\075\145" +
    "\126\201\120\202\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\013\105\034\114\102" +
    "\112\103\067\115\073\116\124\117\106\120\103\124\123" +
    "\130\131\134\075\145\126\201\120\202\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\101\u017a" +
    "\001\001\000\036\013\105\034\114\102\112\103\067\115" +
    "\073\116\124\117\106\120\103\124\123\130\131\134\075" +
    "\145\126\201\120\202\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\101\u0182\001\001\000" +
    "\036\013\105\034\114\102\112\103\067\115\073\116\124" +
    "\117\106\120\103\124\123\130\131\134\075\145\126\201" +
    "\120\202\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\013\105\034\114\103\u0188\115" +
    "\073\116\124\130\131\134\075\145\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\101" +
    "\u018b\001\001\000\036\013\105\034\114\102\112\103\067" +
    "\115\073\116\124\117\106\120\103\124\123\130\131\134" +
    "\075\145\126\201\120\202\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\013\105\034\114\103\u0193\115\073" +
    "\116\124\130\131\134\075\145\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\101\u0196" +
    "\001\001\000\036\013\105\034\114\102\112\103\067\115" +
    "\073\116\124\117\106\120\103\124\123\130\131\134\075" +
    "\145\126\201\120\202\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\101\u01a2\001\001\000\004\101\u019e\001" +
    "\001\000\036\013\105\034\114\102\112\103\067\115\073" +
    "\116\124\117\106\120\103\124\123\130\131\134\075\145" +
    "\126\201\120\202\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\013\105\034\114\102" +
    "\112\103\067\115\073\116\124\117\106\120\103\124\123" +
    "\130\131\134\075\145\126\201\120\202\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\101\u01ad" +
    "\001\001\000\036\013\105\034\114\102\112\103\067\115" +
    "\073\116\124\117\106\120\103\124\123\130\131\134\075" +
    "\145\126\201\120\202\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\131\u01b2\132\153" +
    "\144\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\131\u01d3\132\153" +
    "\144\166\001\001\000\010\131\u01b8\132\153\144\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\131\u01dc\132\153\144\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\131\u01e0\132\153" +
    "\144\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\034\334\121\u0251" +
    "\001\001\000\006\034\334\121\u01e6\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\034\343\122\u01eb\001\001\000\002\001\001\000" +
    "\022\013\105\034\114\103\u01ee\115\073\116\124\130\131" +
    "\134\075\145\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\101\u01f1\001\001\000\036" +
    "\013\105\034\114\102\112\103\067\115\073\116\124\117" +
    "\106\120\103\124\123\130\131\134\075\145\126\201\120" +
    "\202\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\034\343\122\u0230\001" +
    "\001\000\006\034\343\122\u01fc\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\013\105\034\114\103\u0220\115" +
    "\073\116\124\130\131\134\075\145\126\001\001\000\022" +
    "\013\105\034\114\103\u0200\115\073\116\124\130\131\134" +
    "\075\145\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\101\u0204\001" +
    "\001\000\036\013\105\034\114\102\112\103\067\115\073" +
    "\116\124\117\106\120\103\124\123\130\131\134\075\145" +
    "\126\201\120\202\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\101\u0210\001\001\000\004\101\u020c\001\001" +
    "\000\036\013\105\034\114\102\112\103\067\115\073\116" +
    "\124\117\106\120\103\124\123\130\131\134\075\145\126" +
    "\201\120\202\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\013\105\034\114\102\112" +
    "\103\067\115\073\116\124\117\106\120\103\124\123\130" +
    "\131\134\075\145\126\201\120\202\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\101\u021b\001" +
    "\001\000\036\013\105\034\114\102\112\103\067\115\073" +
    "\116\124\117\106\120\103\124\123\130\131\134\075\145" +
    "\126\201\120\202\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\101\u0223\001\001\000\036" +
    "\013\105\034\114\102\112\103\067\115\073\116\124\117" +
    "\106\120\103\124\123\130\131\134\075\145\126\201\120" +
    "\202\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\013\105\034\114\103\u0229\115\073" +
    "\116\124\130\131\134\075\145\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\101\u022c" +
    "\001\001\000\036\013\105\034\114\102\112\103\067\115" +
    "\073\116\124\117\106\120\103\124\123\130\131\134\075" +
    "\145\126\201\120\202\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\013\105\034\114\103\u0233\115\073\116\124\130\131\134" +
    "\075\145\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\101\u0236\001\001\000\036\013" +
    "\105\034\114\102\112\103\067\115\073\116\124\117\106" +
    "\120\103\124\123\130\131\134\075\145\126\201\120\202" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\034\343\122\u023b\001\001\000\002\001" +
    "\001\000\022\013\105\034\114\103\u023e\115\073\116\124" +
    "\130\131\134\075\145\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\101\u0241\001\001" +
    "\000\036\013\105\034\114\102\112\103\067\115\073\116" +
    "\124\117\106\120\103\124\123\130\131\134\075\145\126" +
    "\201\120\202\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\034\343" +
    "\122\u0247\001\001\000\002\001\001\000\022\013\105\034" +
    "\114\103\u024a\115\073\116\124\130\131\134\075\145\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\101\u024d\001\001\000\036\013\105\034\114" +
    "\102\112\103\067\115\073\116\124\117\106\120\103\124" +
    "\123\130\131\134\075\145\126\201\120\202\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\343\122\u0255\001\001\000\002\001\001\000\022\013" +
    "\105\034\114\103\u0258\115\073\116\124\130\131\134\075" +
    "\145\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\101\u025b\001\001\000\036\013\105" +
    "\034\114\102\112\103\067\115\073\116\124\117\106\120" +
    "\103\124\123\130\131\134\075\145\126\201\120\202\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\013\105\034\114\102\112\103\067\115\073" +
    "\116\124\117\106\120\103\124\123\130\131\134\075\145" +
    "\126\201\120\202\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\125\u0263\001\001\000\006\126\u0133\127" +
    "\u0264\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\114\145\u0267\001\001\000\004\135\u0268\001\001\000" +
    "\002\001\001\000\010\131\u026a\132\153\144\166\001\001" +
    "\000\002\001\001\000\010\131\u026c\132\153\144\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\131\u0270\132\153\144\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\101\u0273\001\001\000\036" +
    "\013\105\034\114\102\112\103\067\115\073\116\124\117" +
    "\106\120\103\124\123\130\131\134\075\145\126\201\120" +
    "\202\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\101\u0277\001\001\000\036\013\105\034\114\102\112" +
    "\103\067\115\073\116\124\117\106\120\103\124\123\130" +
    "\131\134\075\145\126\201\120\202\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\101" +
    "\u027c\001\001\000\036\013\105\034\114\102\112\103\067" +
    "\115\073\116\124\117\106\120\103\124\123\130\131\134" +
    "\075\145\126\201\120\202\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\101\u0281\001" +
    "\001\000\036\013\105\034\114\102\112\103\067\115\073" +
    "\116\124\117\106\120\103\124\123\130\131\134\075\145" +
    "\126\201\120\202\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\023\u028b\114\u028a\155\u0290\163\u0288\165\u028e" +
    "\166\u028f\177\u0289\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\113\u029b\001\001\000\004\113" +
    "\u0296\001\001\000\004\113\u0291\001\001\000\020\023\u028b" +
    "\114\u028a\155\u0290\163\u0288\165\u028e\166\u028f\167\u0292\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\023\u028b\114\u028a\155\u0290\163" +
    "\u0288\165\u028e\166\u028f\200\u0298\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\023\u028b\114\u028a\155\u0290\163\u0288\165\u028e\166\u028f" +
    "\177\u029c\001\001\000\002\001\001\000\004\056\u02db\001" +
    "\001\000\002\001\001\000\004\074\u02d5\001\001\000\004" +
    "\076\u02a1\001\001\000\006\047\u02a4\077\u02a5\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\u02b0\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\u02b9\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\u02cd\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\047\u02d8\075\u02d9\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\047\u02df\057\u02dd\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\023\u028b" +
    "\114\u028a\155\u0290\163\u0288\165\u028e\166\u028f\167\u02e3\001" +
    "\001\000\002\001\001\000\006\023\u02e5\176\u02e6\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\072\u0350\001\001" +
    "\000\004\060\u0342\001\001\000\002\001\001\000\004\066" +
    "\u0331\001\001\000\004\064\u032c\001\001\000\004\062\u030f" +
    "\001\001\000\004\070\u02f1\001\001\000\004\071\u02f4\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\u02fc\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\u0304\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\u0308\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\u0312\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\u031b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\u0321\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\047\u032f\065\u0330\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\047\u0334" +
    "\067\u0335\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\u033a\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\u033f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\047\u0346\061\u0343" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\u034b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\047\u0353\073\u0354\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\u0359\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\u035c\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\u02e5\171\u0360\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\023\u0366" +
    "\045\u036d\154\u0374\155\u0371\156\u0369\157\u036f\160\u0368\161" +
    "\u036b\162\u0373\163\u036a\164\u0370\165\u0372\166\u0367\173\u036e" +
    "\001\001\000\002\001\001\000\004\113\u0396\001\001\000" +
    "\004\035\u0389\001\001\000\004\042\u0384\001\001\000\002" +
    "\001\001\000\004\044\u0382\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\u037e\001\001" +
    "\000\004\042\u037c\001\001\000\004\113\u037a\001\001\000" +
    "\004\113\u0378\001\001\000\004\174\u0377\001\001\000\004" +
    "\043\u0375\001\001\000\010\104\055\203\050\210\u0376\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\023\u028b" +
    "\114\u028a\155\u0290\163\u0288\165\u028e\166\u028f\177\u0379\001" +
    "\001\000\002\001\001\000\020\023\u028b\114\u028a\155\u0290" +
    "\163\u0288\165\u028e\166\u028f\167\u037b\001\001\000\002\001" +
    "\001\000\006\023\u02e5\176\u037d\001\001\000\002\001\001" +
    "\000\006\023\u02e5\171\u037f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\023\u0366\045\u036d" +
    "\154\u0374\155\u0371\156\u0369\157\u036f\160\u0368\161\u036b\162" +
    "\u0373\163\u036a\164\u0370\165\u0372\166\u0367\173\u0383\001\001" +
    "\000\002\001\001\000\006\023\u02e5\170\u0385\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\u038b\172\u038d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\u0392\001\001\000\004\023\u02e5\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\023" +
    "\u028b\114\u028a\155\u0290\163\u0288\165\u028e\166\u028f\200\u0397" +
    "\001\001\000\002\001\001\000\006\023\u02e5\170\u0399\001" +
    "\001\000\002\001\001\000\006\022\u038b\172\u039b\001\001" +
    "\000\002\001\001\000\020\023\u028b\114\u028a\155\u0290\163" +
    "\u0288\165\u028e\166\u028f\200\u039d\001\001\000\002\001\001" +
    "\000\004\054\u039f\001\001\000\004\055\u03a2\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\u03a6\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\u03ab\046\u03ac" +
    "\154\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\u03b0\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\u03b3\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\104\055\203\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\u03bd\005\u03be\150\022\154\014\001\001\000\010\005\u03c3" +
    "\046\u03c4\154\014\001\001\000\006\004\u03bf\150\022\001" +
    "\001\000\010\005\u03c0\046\u03c1\154\014\001\001\000\004" +
    "\046\u03c2\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\u03c5\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\020\u03cb\152\u03c7\153\u03ca\154\u03ce\204\u03cc\001" +
    "\001\000\004\206\u03e6\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\u03d3\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\u03cf\001\001" +
    "\000\010\104\055\203\050\210\u03d0\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\u03d4" +
    "\207\u03d6\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\052\u03dd\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\u03de\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\u03ec" +
    "\001\001\000\004\051\u03ef\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\u03f4\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$EtiquetadoParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$EtiquetadoParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$EtiquetadoParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ArrayList<Captcha> listaCaptchas;
    private ArrayList<Advertencia> listaErrores;
    private ArrayList<String> parametros;
    private ArrayList<Identificador> procesos;
    private ArrayList<Identificador> identificadores;
    private Captcha captchaSolicitado;
    private TablaDeSimbolos tablaSimbolos;
    private TablasDeOperaciones tablaOperaciones;
    private OperacionesBooleanas operacionesBooleanas;
    private FuncionesEspeciales funcionesEspeciales;

    private String integer = TipoDeDato.INTEGER;
    private String string = TipoDeDato.STRING;
    private String decimal = TipoDeDato.DECIMAL;
    private String character = TipoDeDato.CHAR;
    private String booleano = TipoDeDato.BOOLEAN;
    private String error = TipoDeDato.ERROR;

    private String procesoActual;
    private String codigoScripting;
    private String insertCompletoPorProceso;
    private int cantOnLoad;
    private int totalOnLoad;
    private int procesoRepetido;

    /* ETIQUETAS PRINCIPALES */
    private EtiquetaGCIC gcicPrincipal = new EtiquetaGCIC();
    private EtiquetaHead headPrincipal = new EtiquetaHead();
    private EtiquetaBody bodyPrincipal = new EtiquetaBody();

    public EtiquetadoParser(EtiquetadoLexer lexer, ArrayList<Advertencia> listaErrores, ArrayList<Captcha> listaCaptchas) {
        super(lexer);
        this.listaErrores = listaErrores;
        this.listaCaptchas = listaCaptchas;
        this.captchaSolicitado = new Captcha();
        this.tablaOperaciones = new TablasDeOperaciones();
        this.operacionesBooleanas = new OperacionesBooleanas();
        this.funcionesEspeciales = new FuncionesEspeciales();
        this.parametros = new ArrayList<>();
        this.procesos = new ArrayList<>();
        this.identificadores = new ArrayList<>();
        this.procesoActual = "";
        this.insertCompletoPorProceso = "";
        this.codigoScripting = "";
        this.totalOnLoad = 0;
        this.cantOnLoad = 0;
        this.procesoRepetido = 0;
        this.tablaSimbolos = captchaSolicitado.getTablaSimbolos();
    }
    public void report_error(String message, Object info) {
        System.out.println("reporterror");;
    }
    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal " + info);
    }
    @Override
    public void syntax_error(Symbol s) {
        Advertencia errorNuevo = new Advertencia("Sintactico");
        //System.out.println("linea: " + s.left + "   columna: " + s.right + "   token: " + symbl_name_from_id(s.sym) + "     texto: " + s.value);
        errorNuevo.setLinea(s.left);
        errorNuevo.setColumna(s.right);
        errorNuevo.setToken(symbl_name_from_id(s.sym)); //Se cambiará por uno de la tabla
        errorNuevo.setTexto(s.value.toString());
        //Agregamos los simbolos que se esperan
        String solucion = "";
        for(int i = 0; i < expected_token_ids().size(); i++) {
            if(i != 0) {
                solucion += ",";
            }
            solucion += " " + symbl_name_from_id(expected_token_ids().get(i));
        }
        errorNuevo.setSolucion(solucion);
        listaErrores.add(errorNuevo);
    }
    protected int error_sync_size() {
        return 1;
    }

    public void agregarErrorSemantico(String mensaje) {
        Advertencia errorNuevo = new Advertencia("Semantico");
        errorNuevo.setMensaje(mensaje);
        listaErrores.add(errorNuevo);
    }

    public boolean etiquetasDuplicadas(int linea, int columna) {
        boolean comprobante = false;
        Set<String> datosSinDuplicar = new HashSet<String>(parametros); //Creamos un Set de los parametros
        for(String param : datosSinDuplicar) {
            int repeticion = Collections.frequency(parametros, param);
            if(repeticion > 1) {
                agregarErrorSemantico("El parametro " + param + " se ha repetido " + repeticion + " veces.\nConflicto en Linea: " + linea + " - Columna: " + columna);
                comprobante = true;
            }
        }
        return comprobante;
    }

    public void agregarIdentificador(String id, int linea, int columna) {
        boolean comprobante = true;
        for(Identificador ident : identificadores) {
            if(ident.getId().equals(id)) {
                agregarErrorSemantico("El identificador " + id + " ya fue declarado en la Linea: " + ident.getLinea() + " - Columna: " + ident.getColumna() + ".\nConflicto en Linea: " + linea + " - Columna: " + columna);
                comprobante = false;
                break;
            }
        }
        if(comprobante) {
            identificadores.add(new Identificador(id, linea, columna));
        }
    }

    public boolean variableExistente(String id, String procesoActual) {
        for(Simbolo simb : tablaSimbolos.getTablaSimbolos()) {
            if(simb.getIdentificador().equals(id) && (simb.getProcedimiento().equals(procesoActual) || simb.getModo().equals("@global"))) {
                return true;
            }
        }
        return false;
    }
    
    public boolean variableValida(String id, String procesoActual, String tipo) {
        for(Simbolo simb : tablaSimbolos.getTablaSimbolos()) {
            if(simb.getIdentificador().equals(id) && (simb.getProcedimiento().equals(procesoActual) || simb.getModo().equals("@global")) && simb.getTipo().equals(tipo)) {
                return true;
            }
        }
        return false;
    }

    public String agregarProceso(String nombreProceso, int linea, int columna) {
        for(Identificador proc : procesos) {
            if(proc.getId().equals(nombreProceso)) {
                agregarErrorSemantico("El proceso " + nombreProceso + " Ya está declarado en la Linea: " + proc.getLinea() + " - Columna: " + proc.getColumna() + ".\nConflicto en Linea: " + linea + " - Columna: " + columna); 
                procesoRepetido++;
                return nombreProceso + procesoRepetido;
            }
        }
        return nombreProceso;
    }

    public boolean verificarTipo(Dato dato, String tipo, int linea, int columna) {
        if(dato.getTipo().equals(tipo)) {
            return true;
        } else {
            agregarErrorSemantico("La función solo recibe parametros del tipo: " + tipo + ". (Se recibió parametro de tipo: " + dato.getTipo() + ").\nConflicto en la Linea: " + linea + " - Columna: " + columna);
            return false;
        }
    }

    public Captcha getCaptcha() {
        return captchaSolicitado;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$EtiquetadoParser$actions {
  private final EtiquetadoParser parser;

  /** Constructor */
  CUP$EtiquetadoParser$actions(EtiquetadoParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$EtiquetadoParser$do_action_part00000000(
    int                        CUP$EtiquetadoParser$act_num,
    java_cup.runtime.lr_parser CUP$EtiquetadoParser$parser,
    java.util.Stack            CUP$EtiquetadoParser$stack,
    int                        CUP$EtiquetadoParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$EtiquetadoParser$result;

      /* select the action based on the action number */
      switch (CUP$EtiquetadoParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		RESULT = start_val;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$EtiquetadoParser$parser.done_parsing();
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= apertura_gcic cuerpo_gcic 
            {
              Object RESULT =null;
		
                                                    System.out.println("Se ha llegado al final del reconocimiento. Los simbolos encontrados son: ");
                                                    for(Simbolo simb: tablaSimbolos.getTablaSimbolos()) {
                                                        System.out.println(simb);
                                                    }
                                                    System.out.println(" \n\n");
                                                    System.out.println(gcicPrincipal.generarHTML());
                                                    captchaSolicitado.setContenidoCaptcha(gcicPrincipal);
                                                
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // apertura_gcic ::= MENOR_QUE GCIC cuerpo_parametros_gcic MAYOR_QUE 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> param = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                                            if(!etiquetasDuplicadas(inileft, iniright) && param != null) {
                                                                                                for(Parametro element: param) {
                                                                                                    gcicPrincipal.setByString(element, listaErrores);
                                                                                                }
                                                                                            }
                                                                                        
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_gcic",100, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // apertura_gcic ::= error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_gcic",100, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cuerpo_gcic ::= cabecera cuerpo cierre_gcic 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_gcic",10, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cuerpo_gcic ::= scripting cabecera cuerpo cierre_gcic 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_gcic",10, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpo_gcic ::= cabecera scripting cuerpo cierre_gcic 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_gcic",10, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpo_gcic ::= cabecera cuerpo scripting cierre_gcic 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_gcic",10, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpo_gcic ::= scripting cabecera scripting cuerpo cierre_gcic 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_gcic",10, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cuerpo_gcic ::= scripting cabecera cuerpo scripting cierre_gcic 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_gcic",10, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cuerpo_gcic ::= cabecera scripting cuerpo scripting cierre_gcic 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_gcic",10, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo_gcic ::= scripting cabecera scripting cuerpo scripting cierre_gcic 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_gcic",10, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-5)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cierre_gcic ::= MENOR_CIERRE GCIC MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cierre_gcic",36, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cabecera ::= apertura_cabecera cuerpo_cabecera cierre_cabecera 
            {
              Object RESULT =null;
		gcicPrincipal.getListaEtiquetas().add(headPrincipal);
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cabecera",1, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // apertura_cabecera ::= MENOR_QUE HEAD MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_cabecera",101, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cierre_cabecera ::= MENOR_CIERRE HEAD MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cierre_cabecera",130, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cuerpo ::= apertura_body cuerpo_cuerpo cierre_body 
            {
              Object RESULT =null;
		gcicPrincipal.getListaEtiquetas().add(bodyPrincipal);
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // apertura_body ::= MENOR_QUE BODY cuerpo_parametros_body MAYOR_QUE 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> param = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                                        if(!etiquetasDuplicadas(inileft, iniright) && param != null) {
                                                                                            for(Parametro element: param) {
                                                                                                bodyPrincipal.setByString(element, listaErrores);
                                                                                            }
                                                                                        }
                                                                                    
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_body",102, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // apertura_body ::= error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_body",102, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cierre_body ::= MENOR_CIERRE BODY MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cierre_body",131, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cuerpo_cabecera ::= cuerpo_cabecera etiquetas_cabecera 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cabecera",11, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cuerpo_cabecera ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cabecera",11, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cuerpo_cabecera ::= cuerpo_cabecera error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cabecera",11, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // etiquetas_cabecera ::= apertura_link cierre_link 
            {
              Object RESULT =null;
		headPrincipal.getEtiquetasHead().add(new EtiquetaLink());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cabecera",14, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // etiquetas_cabecera ::= apertura_title cuerpo_title cierre_title 
            {
              Object RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Object ct = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		EtiquetaTitle et = new EtiquetaTitle(); et.setTitulo(ct.toString()); headPrincipal.getEtiquetasHead().add(et);
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cabecera",14, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // etiquetas_cabecera ::= apertura_scripting cuerpo_scripting cierre_scripting 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cabecera",14, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // apertura_link ::= MENOR_QUE LINK cuerpo_parametros_link MAYOR_QUE 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		
                                                                                if(!etiquetasDuplicadas(inileft, iniright)) {

                                                                                }
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_link",104, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // apertura_title ::= MENOR_QUE TITLE MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_title",105, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // apertura_scripting ::= MENOR_QUE SCRIPTING MAYOR_QUE 
            {
              EtiquetaScripting RESULT =null;
		cantOnLoad = 0; insertCompletoPorProceso = ""; codigoScripting = ""; RESULT = new EtiquetaScripting();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_scripting",106, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cierre_link ::= MENOR_CIERRE LINK MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cierre_link",132, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cierre_link ::= error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cierre_link",132, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cierre_title ::= MENOR_CIERRE TITLE MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cierre_title",133, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cierre_title ::= error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cierre_title",133, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cierre_scripting ::= MENOR_CIERRE SCRIPTING MAYOR_QUE 
            {
              Object RESULT =null;
		
                                                                    if(insertCompletoPorProceso.length() > 0) {
                                                                        System.out.println("INSERT " + procesoActual);
                                                                        System.out.println(insertCompletoPorProceso + "\n");
                                                                    }
                                                                
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cierre_scripting",134, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cierre_scripting ::= error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cierre_scripting",134, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cuerpo_title ::= cuerpo_title texto 
            {
              Object RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Object ct = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int entleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT= ct.toString() + " " + ent.toString();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_title",13, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cuerpo_title ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_title",13, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cuerpo_texto_sin_etiqueta ::= cuerpo_texto_sin_etiqueta texto 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_texto_sin_etiqueta",62, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cuerpo_texto_sin_etiqueta ::= texto 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_texto_sin_etiqueta",62, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // texto ::= ALFANUMERICO 
            {
              String RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT=ent.toString();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("texto",17, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // texto ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT=ent.toString();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("texto",17, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cuerpo_cuerpo ::= cuerpo_cuerpo etiquetas_cuerpo 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cuerpo",12, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cuerpo_cuerpo ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cuerpo",12, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cuerpo_cuerpo ::= cuerpo_cuerpo error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cuerpo",12, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // etiquetas_cuerpo ::= apertura_spam parametros_etiquetas_texuales cerradura_spam 
            {
              Object RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaSpam eti = (EtiquetaSpam)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setTextoInterno(txt.trim()); bodyPrincipal.getEtiquetasBody().add(eti);
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // etiquetas_cuerpo ::= apertura_input cuerpo_texto cerradura_input 
            {
              Object RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaInput eti = (EtiquetaInput)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setTextoInterno(txt.trim()); bodyPrincipal.getEtiquetasBody().add(eti);
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // etiquetas_cuerpo ::= apertura_textarea cuerpo_texto cerradura_textarea 
            {
              Object RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaTextarea eti = (EtiquetaTextarea)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setTextoInterno(txt.trim()); bodyPrincipal.getEtiquetasBody().add(eti);
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // etiquetas_cuerpo ::= apertura_select cuerpo_select cerradura_select 
            {
              Object RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaSelect eti = (EtiquetaSelect)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int cseleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int cseright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<EtiquetaOption> cse = (ArrayList<EtiquetaOption>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setOpciones(cse); bodyPrincipal.getEtiquetasBody().add(eti);
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // etiquetas_cuerpo ::= apertura_div cuerpo_div cerradura_div 
            {
              Object RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaDiv eti = (EtiquetaDiv)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int crpleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int crpright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Etiqueta> crp = (ArrayList<Etiqueta>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setEtiquetasInternas(crp); bodyPrincipal.getEtiquetasBody().add(eti);
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // etiquetas_cuerpo ::= apertura_img cerradura_img 
            {
              Object RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		EtiquetaImg eti = (EtiquetaImg)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		bodyPrincipal.getEtiquetasBody().add(eti);
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // etiquetas_cuerpo ::= apertura_br 
            {
              Object RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		EtiquetaBr eti = (EtiquetaBr)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		bodyPrincipal.getEtiquetasBody().add(eti);
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // etiquetas_cuerpo ::= apertura_button cuerpo_texto cerradura_button 
            {
              Object RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaButton eti = (EtiquetaButton)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setTextoInterno(txt.trim()); bodyPrincipal.getEtiquetasBody().add(eti);
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // etiquetas_cuerpo ::= apertura_h1 parametros_etiquetas_texuales cerradura_h1 
            {
              Object RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaH1 eti = (EtiquetaH1)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setTextoInterno(txt.trim()); bodyPrincipal.getEtiquetasBody().add(eti);
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // etiquetas_cuerpo ::= apertura_p parametros_etiquetas_texuales cerradura_p 
            {
              Object RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaP eti = (EtiquetaP)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setTextoInterno(txt.trim()); bodyPrincipal.getEtiquetasBody().add(eti);
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // etiquetas_cuerpo ::= apertura_scripting cuerpo_scripting cierre_scripting 
            {
              Object RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaScripting eti = (EtiquetaScripting)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int crpleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int crpright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String crp = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setTextoInterno(crp); bodyPrincipal.getEtiquetasBody().add(eti);
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // etiquetas_cuerpo ::= texto 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // apertura_spam ::= MENOR_QUE SPAM cuerpo_parametros_spam MAYOR_QUE 
            {
              EtiquetaSpam RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> param = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                                        EtiquetaSpam spam = new EtiquetaSpam();
                                                                                        if(!etiquetasDuplicadas(inileft, iniright) && param != null) {
                                                                                            for(Parametro element: param) {
                                                                                                spam.setByString(element, listaErrores);
                                                                                            }
                                                                                        }
                                                                                        RESULT = spam;
                                                                                    
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_spam",107, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // apertura_input ::= MENOR_QUE INPUT cuerpo_parametros_input MAYOR_QUE 
            {
              EtiquetaInput RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> param = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                                        EtiquetaInput input = new EtiquetaInput();
                                                                                        if(!etiquetasDuplicadas(inileft, iniright) && param != null) {
                                                                                            System.out.println("filtro input: ");
                                                                                            for(Parametro element: param) {
                                                                                                input.setByString(element, listaErrores);
                                                                                            }
                                                                                        }
                                                                                        RESULT = input;
                                                                                    
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_input",108, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // apertura_textarea ::= MENOR_QUE TEXTAREA cuerpo_parametros_textarea MAYOR_QUE 
            {
              EtiquetaTextarea RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> param = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                                                    EtiquetaTextarea textarea = new EtiquetaTextarea();
                                                                                                    if(!etiquetasDuplicadas(inileft, iniright) && param != null) {
                                                                                                        for(Parametro element: param) {
                                                                                                            textarea.setByString(element, listaErrores);
                                                                                                        }
                                                                                                    }
                                                                                                    RESULT = textarea;
                                                                                                
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_textarea",109, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // apertura_select ::= MENOR_QUE SELECT cuerpo_parametros_select MAYOR_QUE 
            {
              EtiquetaSelect RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> param = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                                            EtiquetaSelect select = new EtiquetaSelect();
                                                                                            if(!etiquetasDuplicadas(inileft, iniright) && param != null) {
                                                                                                for(Parametro element: param) {
                                                                                                    select.setByString(element, listaErrores);
                                                                                                }
                                                                                            }
                                                                                            RESULT = select;
                                                                                        
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_select",110, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // apertura_div ::= MENOR_QUE DIV cuerpo_parametros_div MAYOR_QUE 
            {
              EtiquetaDiv RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> param = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                                        EtiquetaDiv div = new EtiquetaDiv();
                                                                                        if(!etiquetasDuplicadas(inileft, iniright) && param != null) {
                                                                                            for(Parametro element: param) {
                                                                                                div.setByString(element, listaErrores);
                                                                                            }
                                                                                        }
                                                                                        RESULT = div;
                                                                                    
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_div",111, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // apertura_img ::= MENOR_QUE IMG cuerpo_parametros_img MAYOR_QUE 
            {
              EtiquetaImg RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> param = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                                        EtiquetaImg img = new EtiquetaImg();
                                                                                        if(!etiquetasDuplicadas(inileft, iniright) && param != null) {
                                                                                            for(Parametro element: param) {
                                                                                                img.setByString(element, listaErrores);
                                                                                            }
                                                                                        }
                                                                                        RESULT = img;
                                                                                    
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_img",112, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // apertura_br ::= MENOR_QUE BR MAYOR_QUE 
            {
              EtiquetaBr RESULT =null;
		RESULT = new EtiquetaBr();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_br",113, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // apertura_button ::= MENOR_QUE BUTTON cuerpo_parametros_button MAYOR_QUE 
            {
              EtiquetaButton RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> param = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                                            EtiquetaButton button = new EtiquetaButton();
                                                                                            if(!etiquetasDuplicadas(inileft, iniright) && param != null) {
                                                                                                for(Parametro element: param) {
                                                                                                    button.setByString(element, listaErrores);
                                                                                                }
                                                                                            }
                                                                                            RESULT = button;
                                                                                        
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_button",114, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // apertura_h1 ::= MENOR_QUE H1 cuerpo_parametros_h1 MAYOR_QUE 
            {
              EtiquetaH1 RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> param = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                                EtiquetaH1 h1 = new EtiquetaH1();
                                                                                if(!etiquetasDuplicadas(inileft, iniright) && param != null) {
                                                                                    for(Parametro element: param) {
                                                                                        h1.setByString(element, listaErrores);
                                                                                    }
                                                                                }
                                                                                RESULT = h1;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_h1",115, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // apertura_p ::= MENOR_QUE P cuerpo_parametros_p MAYOR_QUE 
            {
              EtiquetaP RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> param = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                                EtiquetaP p = new EtiquetaP();
                                                                                if(!etiquetasDuplicadas(inileft, iniright) && param != null) {
                                                                                    for(Parametro element: param) {
                                                                                        p.setByString(element, listaErrores);
                                                                                    }
                                                                                }
                                                                                RESULT = p;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_p",116, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // cerradura_spam ::= MENOR_CIERRE SPAM MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cerradura_spam",117, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cerradura_input ::= MENOR_CIERRE INPUT MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cerradura_input",118, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cerradura_textarea ::= MENOR_CIERRE TEXTAREA MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cerradura_textarea",119, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cerradura_select ::= MENOR_CIERRE SELECT MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cerradura_select",120, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cerradura_div ::= MENOR_CIERRE DIV MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cerradura_div",121, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cerradura_img ::= MENOR_CIERRE IMG MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cerradura_img",122, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cerradura_button ::= MENOR_CIERRE BUTTON MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cerradura_button",124, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cerradura_h1 ::= MENOR_CIERRE H1 MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cerradura_h1",125, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // cerradura_p ::= MENOR_CIERRE P MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cerradura_p",126, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cuerpo_select ::= cuerpo_select etiqueta_option 
            {
              ArrayList<EtiquetaOption> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<EtiquetaOption> l = (ArrayList<EtiquetaOption>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		EtiquetaOption p = (EtiquetaOption)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		l.add(p); RESULT = l;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_select",27, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cuerpo_select ::= 
            {
              ArrayList<EtiquetaOption> RESULT =null;
		ArrayList<EtiquetaOption> lista = new ArrayList<>(); RESULT = lista;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_select",27, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // etiqueta_option ::= MENOR_QUE OPTION MAYOR_QUE cuerpo_texto MENOR_CIERRE OPTION MAYOR_QUE 
            {
              EtiquetaOption RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		EtiquetaOption option = new EtiquetaOption(); option.setTextoInterno(txt.trim()); RESULT = option;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiqueta_option",16, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-6)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cuerpo_texto ::= cuerpo_texto texto 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = c + t + " ";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_texto",32, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cuerpo_texto ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_texto",32, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cuerpo_div ::= cuerpo_div etiquetas_cuerpo_div 
            {
              ArrayList<Etiqueta> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Etiqueta> l = (ArrayList<Etiqueta>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Etiqueta p = (Etiqueta)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		l.add(p); RESULT = l;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_div",34, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cuerpo_div ::= 
            {
              ArrayList<Etiqueta> RESULT =null;
		ArrayList<Etiqueta> lista = new ArrayList<>(); RESULT = lista;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_div",34, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // etiquetas_cuerpo_div ::= apertura_spam parametros_etiquetas_texuales cerradura_spam 
            {
              Etiqueta RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaSpam eti = (EtiquetaSpam)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setTextoInterno(txt.trim()); RESULT = eti;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo_div",35, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // etiquetas_cuerpo_div ::= apertura_input cuerpo_texto cerradura_input 
            {
              Etiqueta RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaInput eti = (EtiquetaInput)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setTextoInterno(txt.trim()); RESULT = eti;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo_div",35, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // etiquetas_cuerpo_div ::= apertura_textarea cuerpo_texto cerradura_textarea 
            {
              Etiqueta RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaTextarea eti = (EtiquetaTextarea)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setTextoInterno(txt.trim()); RESULT = eti;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo_div",35, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // etiquetas_cuerpo_div ::= apertura_select cuerpo_select cerradura_select 
            {
              Etiqueta RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaSelect eti = (EtiquetaSelect)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int cseleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int cseright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<EtiquetaOption> cse = (ArrayList<EtiquetaOption>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setOpciones(cse); RESULT = eti;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo_div",35, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // etiquetas_cuerpo_div ::= apertura_div cuerpo_div cerradura_div 
            {
              Etiqueta RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaDiv eti = (EtiquetaDiv)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int crpleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int crpright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Etiqueta> crp = (ArrayList<Etiqueta>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setEtiquetasInternas(crp); RESULT = eti;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo_div",35, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // etiquetas_cuerpo_div ::= apertura_img cerradura_img 
            {
              Etiqueta RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		EtiquetaImg eti = (EtiquetaImg)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		RESULT = eti;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo_div",35, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // etiquetas_cuerpo_div ::= apertura_br 
            {
              Etiqueta RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		EtiquetaBr eti = (EtiquetaBr)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = eti;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo_div",35, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // etiquetas_cuerpo_div ::= apertura_button cuerpo_texto cerradura_button 
            {
              Etiqueta RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaButton eti = (EtiquetaButton)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setTextoInterno(txt.trim()); RESULT = eti;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo_div",35, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // etiquetas_cuerpo_div ::= apertura_h1 parametros_etiquetas_texuales cerradura_h1 
            {
              Etiqueta RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaH1 eti = (EtiquetaH1)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setTextoInterno(txt.trim()); RESULT = eti;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo_div",35, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // etiquetas_cuerpo_div ::= apertura_p parametros_etiquetas_texuales cerradura_p 
            {
              Etiqueta RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaP eti = (EtiquetaP)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setTextoInterno(txt.trim()); RESULT = eti;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo_div",35, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // etiquetas_cuerpo_div ::= apertura_scripting cuerpo_scripting cierre_scripting 
            {
              Etiqueta RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaScripting eti = (EtiquetaScripting)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int crpleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int crpright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String crp = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setTextoInterno(crp); RESULT = eti;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo_div",35, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // etiquetas_cuerpo_div ::= texto 
            {
              Etiqueta RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo_div",35, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // parametros_etiquetas_texuales ::= parametros_etiquetas_texuales parametros_etiquetas_texuales_p 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = c + " " + p;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas_texuales",73, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // parametros_etiquetas_texuales ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas_texuales",73, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // parametros_etiquetas_texuales_p ::= texto 
            {
              String RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = ide.toString();;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas_texuales_p",74, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parametros_etiquetas_texuales_p ::= apertura_br 
            {
              String RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		EtiquetaBr ide = (EtiquetaBr)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = "<br>";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas_texuales_p",74, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parametros_etiquetas_texuales_p ::= apertura_h1 parametros_etiquetas_texuales cerradura_h1 
            {
              String RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		RESULT = ide.toString();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas_texuales_p",74, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parametros_etiquetas_texuales_p ::= apertura_p parametros_etiquetas_texuales cerradura_p 
            {
              String RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		RESULT = ide.toString();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas_texuales_p",74, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parametros_etiquetas_texuales_p ::= apertura_spam parametros_etiquetas_texuales cerradura_spam 
            {
              String RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		RESULT = ide.toString();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas_texuales_p",74, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cuerpo_parametros_gcic ::= cuerpo_parametros_gcic parametros_gcic 
            {
              ArrayList<Parametro> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> l = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		l.add(p); RESULT = l;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_gcic",38, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // cuerpo_parametros_gcic ::= 
            {
              ArrayList<Parametro> RESULT =null;
		parametros.clear(); ArrayList<Parametro> parametrosGCIC = new ArrayList<>(); RESULT = parametrosGCIC;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_gcic",38, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // cuerpo_parametros_gcic ::= cuerpo_parametros_gcic error 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_gcic",38, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parametros_gcic ::= CORA ID IGUAL ID_ETIQUETA CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("id"); agregarIdentificador(ide.toString(), ideleft, ideright); RESULT = new Parametro("id", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_gcic",39, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parametros_gcic ::= CORA NAME IGUAL texto_comillas_complete CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("name"); RESULT = new Parametro("name", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_gcic",39, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // cuerpo_parametros_link ::= cuerpo_parametros_link parametros_link 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_link",40, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // cuerpo_parametros_link ::= 
            {
              ArrayList<Parametro> RESULT =null;
		parametros.clear();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_link",40, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // cuerpo_parametros_link ::= cuerpo_parametros_link error 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_link",40, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // parametros_link ::= CORA HREF IGUAL ALLCHARNOSPACE CORC 
            {
              Parametro RESULT =null;
		parametros.add("href");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_link",41, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // texto_comillas_complete ::= ALLCHAR 
            {
              String RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = par.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("texto_comillas_complete",18, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // texto_comillas_complete ::= ALLCHARNOSPACE 
            {
              String RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = par.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("texto_comillas_complete",18, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // texto_comillas_complete ::= ID_ETIQUETA 
            {
              String RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = par.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("texto_comillas_complete",18, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // cuerpo_parametros_body ::= cuerpo_parametros_body parametros_body 
            {
              ArrayList<Parametro> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> l = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		l.add(p); RESULT = l;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_body",42, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // cuerpo_parametros_body ::= 
            {
              ArrayList<Parametro> RESULT =null;
		parametros.clear(); ArrayList<Parametro> lista = new ArrayList<>(); RESULT = lista;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_body",42, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // cuerpo_parametros_body ::= cuerpo_parametros_body error 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_body",42, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // parametros_body ::= CORA BACKGROUND IGUAL colores CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("background"); RESULT = new Parametro("background", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_body",43, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // cuerpo_parametros_spam ::= cuerpo_parametros_spam parametros_spam 
            {
              ArrayList<Parametro> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> l = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		l.add(p); RESULT = l;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_spam",44, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // cuerpo_parametros_spam ::= 
            {
              ArrayList<Parametro> RESULT =null;
		parametros.clear(); ArrayList<Parametro> parametrosSpam = new ArrayList<>(); RESULT = parametrosSpam;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_spam",44, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // cuerpo_parametros_spam ::= cuerpo_parametros_spam error 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_spam",44, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // parametros_spam ::= parametros_textuales 
            {
              Parametro RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro val = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_spam",45, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // cuerpo_parametros_input ::= cuerpo_parametros_input parametros_input 
            {
              ArrayList<Parametro> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> l = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		l.add(p); RESULT = l;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_input",46, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // cuerpo_parametros_input ::= 
            {
              ArrayList<Parametro> RESULT =null;
		parametros.clear(); ArrayList<Parametro> parametrosInput = new ArrayList<>(); RESULT = parametrosInput;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_input",46, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // cuerpo_parametros_input ::= cuerpo_parametros_input error 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_input",46, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // parametros_input ::= CORA TYPE IGUAL tipos_input CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("type"); RESULT = new Parametro("type", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_input",47, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // parametros_input ::= parametros_textuales 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro ide = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = ide;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_input",47, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // cuerpo_parametros_textarea ::= cuerpo_parametros_textarea parametros_textarea 
            {
              ArrayList<Parametro> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> l = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		l.add(p); RESULT = l;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_textarea",48, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // cuerpo_parametros_textarea ::= 
            {
              ArrayList<Parametro> RESULT =null;
		parametros.clear(); ArrayList<Parametro> parametrosTextarea = new ArrayList<>(); RESULT = parametrosTextarea;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_textarea",48, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // cuerpo_parametros_textarea ::= cuerpo_parametros_textarea error 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_textarea",48, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // parametros_textarea ::= CORA FONTSIZE IGUAL PIXELES CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("font-size"); RESULT = new Parametro("font-size", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textarea",49, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // parametros_textarea ::= CORA FONTFAMILY IGUAL font_family CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("font-family"); RESULT = new Parametro("font-family", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textarea",49, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // parametros_textarea ::= CORA TEXTALIGN IGUAL alineaciones CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("text-align"); RESULT = new Parametro("text-align", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textarea",49, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // parametros_textarea ::= CORA ID IGUAL ID_ETIQUETA CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("id"); agregarIdentificador(ide.toString(), ideleft, ideright); RESULT = new Parametro("id", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textarea",49, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // parametros_textarea ::= CORA COLS IGUAL DIGITO_COM CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("cols"); RESULT = new Parametro("cols", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textarea",49, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // parametros_textarea ::= CORA ROWS IGUAL DIGITO_COM CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("rows"); RESULT = new Parametro("rows", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textarea",49, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // cuerpo_parametros_select ::= cuerpo_parametros_select parametros_select 
            {
              ArrayList<Parametro> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> l = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		l.add(p); RESULT = l;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_select",50, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // cuerpo_parametros_select ::= 
            {
              ArrayList<Parametro> RESULT =null;
		parametros.clear(); ArrayList<Parametro> listaParametros = new ArrayList<>(); RESULT = listaParametros;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_select",50, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // cuerpo_parametros_select ::= cuerpo_parametros_select error 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_select",50, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // parametros_select ::= parametros_textuales 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro ide = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = ide;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_select",51, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // cuerpo_parametros_div ::= cuerpo_parametros_div parametros_div 
            {
              ArrayList<Parametro> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> l = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		l.add(p); RESULT = l;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_div",52, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // cuerpo_parametros_div ::= 
            {
              ArrayList<Parametro> RESULT =null;
		parametros.clear(); ArrayList<Parametro> listaParametros = new ArrayList<>(); RESULT = listaParametros;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_div",52, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // cuerpo_parametros_div ::= cuerpo_parametros_div error 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_div",52, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // parametros_div ::= parametros_textuales 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro ide = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = ide;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_div",53, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // parametros_div ::= CORA CLASS IGUAL clases CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("class"); RESULT = new Parametro("class", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_div",53, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // parametros_div ::= CORA BACKGROUND IGUAL colores CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("background"); RESULT = new Parametro("background", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_div",53, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // cuerpo_parametros_img ::= cuerpo_parametros_img parametros_img 
            {
              ArrayList<Parametro> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> l = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		l.add(p); RESULT = l;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_img",54, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // cuerpo_parametros_img ::= 
            {
              ArrayList<Parametro> RESULT =null;
		parametros.clear(); ArrayList<Parametro> parametrosInput = new ArrayList<>(); RESULT = parametrosInput;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_img",54, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // cuerpo_parametros_img ::= cuerpo_parametros_img error 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_img",54, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // parametros_img ::= CORA SRC IGUAL ALLCHARNOSPACE CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("src"); RESULT = new Parametro("src", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_img",55, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // parametros_img ::= CORA WIDTH IGUAL tamaños CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("width"); RESULT = new Parametro("width", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_img",55, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // parametros_img ::= CORA HEIGHT IGUAL tamaños CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("height"); RESULT = new Parametro("height", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_img",55, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // parametros_img ::= CORA ALT IGUAL texto_comillas_complete CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("alt"); RESULT = new Parametro("alt", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_img",55, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // parametros_img ::= CORA ID IGUAL ID_ETIQUETA CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("id"); agregarIdentificador(ide.toString(), ideleft, ideright); RESULT = new Parametro("id", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_img",55, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // cuerpo_parametros_button ::= cuerpo_parametros_button parametros_button 
            {
              ArrayList<Parametro> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> l = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		l.add(p); RESULT = l;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_button",56, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // cuerpo_parametros_button ::= 
            {
              ArrayList<Parametro> RESULT =null;
		parametros.clear(); ArrayList<Parametro> parametrosButton = new ArrayList<>(); RESULT = parametrosButton;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_button",56, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // cuerpo_parametros_button ::= cuerpo_parametros_button error 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_button",56, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // parametros_button ::= parametros_textuales 
            {
              Parametro RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro param = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = param;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_button",57, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // parametros_button ::= CORA ONCLICK IGUAL texto_comillas_complete CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		RESULT = new Parametro("onClick", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_button",57, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // parametros_button ::= CORA BACKGROUND IGUAL colores CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		RESULT = new Parametro("background", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_button",57, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // cuerpo_parametros_h1 ::= cuerpo_parametros_h1 parametros_h1 
            {
              ArrayList<Parametro> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> l = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		l.add(p); RESULT = l;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_h1",58, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // cuerpo_parametros_h1 ::= 
            {
              ArrayList<Parametro> RESULT =null;
		parametros.clear(); ArrayList<Parametro> listaParametros = new ArrayList<>(); RESULT = listaParametros;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_h1",58, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // cuerpo_parametros_h1 ::= cuerpo_parametros_h1 error 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_h1",58, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // parametros_h1 ::= parametros_textuales 
            {
              Parametro RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro val = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_h1",59, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // cuerpo_parametros_p ::= cuerpo_parametros_p parametros_p 
            {
              ArrayList<Parametro> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> l = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		l.add(p); RESULT = l;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_p",60, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // cuerpo_parametros_p ::= 
            {
              ArrayList<Parametro> RESULT =null;
		parametros.clear(); ArrayList<Parametro> listaParametros = new ArrayList<>(); RESULT = listaParametros;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_p",60, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // cuerpo_parametros_p ::= cuerpo_parametros_p error 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_p",60, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // parametros_p ::= parametros_textuales 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro ide = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = ide;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_p",61, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // parametros_textuales ::= CORA FONTSIZE IGUAL PIXELES CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("font-size"); RESULT = new Parametro("font-size", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textuales",37, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // parametros_textuales ::= CORA FONTFAMILY IGUAL font_family CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("font-family"); RESULT = new Parametro("font-family", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textuales",37, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // parametros_textuales ::= CORA TEXTALIGN IGUAL alineaciones CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("text-align"); RESULT = new Parametro("text-align", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textuales",37, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // parametros_textuales ::= CORA ID IGUAL ID_ETIQUETA CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("id"); agregarIdentificador(ide.toString(), ideleft, ideright); RESULT = new Parametro("id", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textuales",37, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // parametros_textuales ::= CORA COLOR IGUAL colores CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("color"); RESULT = new Parametro("color", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textuales",37, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // colores ::= BLACK 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // colores ::= OLIVE 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // colores ::= TEAL 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // colores ::= RED 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // colores ::= BLUE 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // colores ::= MAROON 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // colores ::= NAVY 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // colores ::= GRAY 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // colores ::= LIME 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // colores ::= FUCHSIA 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // colores ::= GREEN 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // colores ::= WHITE 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // colores ::= PURPLE 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // colores ::= SILVER 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // colores ::= YELLOW 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // colores ::= AQUA 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // colores ::= HEXADECIMAL 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // font_family ::= COURIER 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("font_family",21, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // font_family ::= VERDANA 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("font_family",21, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // font_family ::= ARIAL 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("font_family",21, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // font_family ::= GENEVA 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("font_family",21, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // font_family ::= SANS_SERIF 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("font_family",21, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // alineaciones ::= LEFT 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("alineaciones",22, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // alineaciones ::= RIGHT 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("alineaciones",22, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // alineaciones ::= CENTER 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("alineaciones",22, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // alineaciones ::= JUSTIFY 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("alineaciones",22, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // clases ::= ROW 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("clases",23, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // clases ::= COLUMN 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("clases",23, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // tamaños ::= PIXELES 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tamaños",24, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // tamaños ::= PORCENTAJE 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tamaños",24, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // tipos_input ::= TEXT 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tipos_input",25, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // tipos_input ::= NUMBER 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tipos_input",25, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // tipos_input ::= RADIO 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tipos_input",25, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // tipos_input ::= CHECKBOX 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tipos_input",25, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // scripting ::= apertura_scripting cuerpo_scripting MENOR_CIERRE SCRIPTING MAYOR_QUE 
            {
              Object RESULT =null;
		int crpleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int crpright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		String crp = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		
                    EtiquetaScripting etiqueta = new EtiquetaScripting();
                    etiqueta.setTextoInterno(crp);
                    gcicPrincipal.getListaEtiquetas().add(etiqueta);
                
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("scripting",3, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // cuerpo_scripting ::= cuerpo_scripting parametros_scripting 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = l + p + "\n";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_scripting",33, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // cuerpo_scripting ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_scripting",33, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // parametros_scripting ::= apertura_proceso CORA cuerpo_parametros_proceso CORC 
            {
              String RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		String proc = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int crpleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int crpright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String crp = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                String scriptingInterno = "";
                                if(proc.equals("ON_LOAD")) {
                                    scriptingInterno += "window.onload=function()";
                                } else {
                                    scriptingInterno += "function " + proc + "()";
                                }
                                scriptingInterno += "{" + "\n";
                                scriptingInterno += crp;
                                scriptingInterno += "}\n";
                                RESULT = scriptingInterno;
                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_scripting",66, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // parametros_scripting ::= error PARA PARC CORA cuerpo_parametros_proceso CORC 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_scripting",66, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-5)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // parametros_scripting ::= PROCESS error PARC CORA cuerpo_parametros_proceso CORC 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_scripting",66, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-5)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // parametros_scripting ::= PROCESS PARA error CORA cuerpo_parametros_proceso CORC 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_scripting",66, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-5)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // parametros_scripting ::= PROCESS PARA PARC error cuerpo_parametros_proceso CORC 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_scripting",66, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-5)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // apertura_proceso ::= PROCESS PARA PARC 
            {
              String RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		
                                                        procesoActual = agregarProceso(proc.toString(), procleft, procright);
                                                        procesos.add(new Identificador(procesoActual, procleft, procright));
                                                        RESULT = procesoActual;
                                                    
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_proceso",129, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // apertura_proceso ::= ON_LOAD PARA PARC 
            {
              String RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		
                                                        cantOnLoad++; totalOnLoad++;
                                                        procesoActual = proc.toString() + totalOnLoad;
                                                        procesos.add(new Identificador(procesoActual, procleft, procright));
                                                        if(cantOnLoad > 1) {
                                                            agregarErrorSemantico("Ya existe un bloque ON_LOAD() en el scripting.\nConflicto en Linea: " + procleft + " - Columna: " + procright);
                                                        }
                                                        RESULT = proc.toString();
                                                    
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_proceso",129, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // cuerpo_parametros_proceso ::= cuerpo_parametros_proceso parametros_proceso 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                        RESULT = l + p + "\n";
                                                                                    
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_proceso",63, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // cuerpo_parametros_proceso ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_proceso",63, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // cuerpo_parametros_proceso ::= cuerpo_parametros_proceso error 
            {
              String RESULT =null;
		System.out.println("Se ha encontrado un error de prueba");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_proceso",63, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // parametros_proceso ::= parametros_proceso_simples 
            {
              String RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		String par = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                RESULT = par + "\n";
                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_proceso",64, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // parametros_proceso ::= condicion_if 
            {
              String RESULT =null;
		RESULT = "IF";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_proceso",64, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // parametros_proceso ::= ciclo_repeat 
            {
              String RESULT =null;
		RESULT = "REPEAT";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_proceso",64, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // parametros_proceso ::= ciclo_while 
            {
              String RESULT =null;
		RESULT = "WHILE";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_proceso",64, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // parametros_proceso ::= error PUNTO_COMA 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_proceso",64, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // parametros_proceso_simples ::= variables PUNTO_COMA 
            {
              String RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		RESULT = var;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_proceso_simples",65, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // parametros_proceso_simples ::= asignacion_valor PUNTO_COMA 
            {
              String RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		RESULT = var;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_proceso_simples",65, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // parametros_proceso_simples ::= funciones_especiales PUNTO_COMA 
            {
              String RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String fun = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		RESULT = fun;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_proceso_simples",65, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // funciones_especiales ::= funciones_strings 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_especiales",75, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // funciones_especiales ::= CARACTER_ALEATORIO PARA PARC 
            {
              String RESULT =null;
		RESULT = "";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_especiales",75, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // funciones_especiales ::= NUM_ALEATORIO PARA PARC 
            {
              String RESULT =null;
		RESULT = "";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_especiales",75, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // funciones_especiales ::= ALERT_INFO PARA condicion PARC 
            {
              String RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Dato con = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                            if(verificarTipo(con, string, inileft, iniright)) {
                                                                                if(!con.getValor().contains("getElementById"))
                                                                                    RESULT = "alert(\"" + con.getValor() + "\");";
                                                                                else 
                                                                                    RESULT = "alert(" + con.getValor() + ");";
                                                                            }
                                                                        
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_especiales",75, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // funciones_especiales ::= EXIT PARA PARC 
            {
              String RESULT =null;
		RESULT = "EXIT";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_especiales",75, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // funciones_especiales ::= REDIRECT PARA PARC 
            {
              String RESULT =null;
		RESULT = "RESULT";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_especiales",75, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // funciones_especiales ::= INSERT PARA cuerpo_insert PARC 
            {
              String RESULT =null;
		int bodleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int bodright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String bod = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		insertCompletoPorProceso += bod + "\n";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_especiales",75, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // cuerpo_insert ::= cuerpo_insert COMA parametros_insert 
            {
              String RESULT =null;
		int bodleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int bodright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		String bod = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = bod + "\n" + param;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_insert",71, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // cuerpo_insert ::= parametros_insert 
            {
              String RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = param;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_insert",71, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // parametros_insert ::= ALLCHAR_COMSIMP 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("'", "").replace("’", "").replace("‘", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_insert",72, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // parametros_insert ::= ALFANUMERICO 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                    if(variableExistente(val.toString(), procesoActual)) {
                                                        Dato valorVariable = tablaSimbolos.obtenerDato(val.toString(), procesoActual);
                                                        if(variableValida(val.toString(), procesoActual, string)) {
                                                            if(!valorVariable.getTipo().equals(error)) {
                                                                RESULT = valorVariable.getValor();
                                                            } else {
                                                                agregarErrorSemantico("La variable " + val.toString() + " no es valida para la instrucción insert");
                                                            }
                                                        } else {
                                                            agregarErrorSemantico("La variable " + val.toString() + " no es del tipo string (tipo de la variable: " + valorVariable.getTipo() + ")");
                                                        }
                                                    } else {
                                                        agregarErrorSemantico("La variable " + val.toString() + " no está declarada en el proceso actual.\nConlficto en la Linea: " + valleft + " - Columna: " + valright);
                                                    }
                                                
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_insert",72, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // parametros_insert ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                    if(variableExistente(val.toString(), procesoActual)) {
                                                        Dato valorVariable = tablaSimbolos.obtenerDato(val.toString(), procesoActual);
                                                        if(variableValida(val.toString(), procesoActual, string)) {
                                                            if(!valorVariable.getTipo().equals(error)) {
                                                                RESULT = valorVariable.getValor();
                                                            } else {
                                                                agregarErrorSemantico("La variable " + val.toString() + " no es valida para la instrucción insert");
                                                            }
                                                        } else {
                                                            agregarErrorSemantico("La variable " + val.toString() + " no es del tipo string (tipo de la variable: " + valorVariable.getTipo() + ")");
                                                        }
                                                    } else {
                                                        agregarErrorSemantico("La variable " + val.toString() + " no está declarada en el proceso actual.\nConlficto en la Linea: " + valleft + " - Columna: " + valright);
                                                    }
                                                
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_insert",72, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // funciones_strings ::= ASC PARA condicion PARC 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Dato con = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                            if(verificarTipo(con, string, inileft, iniright)) {
                                                                                
                                                                            }
                                                                        
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_strings",76, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // funciones_strings ::= DESC PARA condicion PARC 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Dato con = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                            if(verificarTipo(con, string, inileft, iniright)) {

                                                                            }
                                                                        
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_strings",76, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // funciones_strings ::= LETPAR_NUM PARA condicion PARC 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Dato con = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                            if(verificarTipo(con, string, inileft, iniright)) {

                                                                            }
                                                                        
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_strings",76, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // funciones_strings ::= LETIMPAR_NUM PARA condicion PARC 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Dato con = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                            if(verificarTipo(con, string, inileft, iniright)) {

                                                                            }
                                                                        
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_strings",76, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // funciones_strings ::= REVERSE PARA condicion PARC 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Dato con = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                            if(verificarTipo(con, string, inileft, iniright)) {

                                                                            }
                                                                        
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_strings",76, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // variables ::= tipos_variables modo cuerpo_identificadores igual_variable 
            {
              String RESULT =null;
		int tipoVarleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int tipoVarright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		String tipoVar = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int modeleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Object mode = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<String> ids = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato valor = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                                        boolean comprobante = true;
                                                                                                        for(String id: ids) {
                                                                                                            if(valor.getValor() != null && valor.getTipo().equals(error) && valor.getValor().equals("vacio")){
                                                                                                                if(!tablaSimbolos.insertarSimbolo(new Simbolo(id, tipoVar, null, mode.toString(), procesoActual))) {
                                                                                                                    Advertencia errorNuevo = new Advertencia("Semantico");
                                                                                                                    if(mode.toString().equals("@global"))
                                                                                                                        errorNuevo.setMensaje("El simbolo " + id + " ya existe.\nConflicto en la Linea: " + tipoVarleft + " - Columna: " + tipoVarright);
                                                                                                                    else 
                                                                                                                        errorNuevo.setMensaje("El simbolo " + id + " ya existe en el procedimiento " + procesoActual + " o es una variable global" + ".\nConflicto en la Linea: " + tipoVarleft + " - Columna: " + tipoVarright);
                                                                                                                    listaErrores.add(errorNuevo);
                                                                                                                    comprobante = false;
                                                                                                                }
                                                                                                            } else if(valor.getTipo().equals(error)) {
                                                                                                                agregarErrorSemantico(valor.getValor() + ".\nConflicto en la Linea: " + tipoVarleft + " - Columna: " + tipoVarright);
                                                                                                                comprobante = false;
                                                                                                            } else {
                                                                                                                if(tipoVar.equals(valor.getTipo())) {
                                                                                                                    if(!tablaSimbolos.insertarSimbolo(new Simbolo(id, tipoVar, valor.getValor(), mode.toString(), procesoActual))){
                                                                                                                        Advertencia errorNuevo = new Advertencia("Semantico");
                                                                                                                        errorNuevo.setMensaje("El simbolo " + id + " ya existe en el procedimiento " + procesoActual + " o es una variable global" + ".\nConflicto en la Linea: " + tipoVarleft + " - Columna: " + tipoVarright);
                                                                                                                        listaErrores.add(errorNuevo);
                                                                                                                        comprobante = false;
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    agregarErrorSemantico("El valor asignado a la(s) variable(s) no es compatible. Conflicto en Linea " + tipoVarleft + " - Columna " + tipoVarright);
                                                                                                                    comprobante = false;
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        String variablesImpresas = "";
                                                                                                        if(comprobante){
                                                                                                            variablesImpresas += "var ";
                                                                                                            int contador = 0;
                                                                                                            for(String id: ids) {
                                                                                                                if(contador > 0) {
                                                                                                                    variablesImpresas += ", ";
                                                                                                                }
                                                                                                                variablesImpresas += id;
                                                                                                                if(valor.getTipo().equals(string)) {
                                                                                                                    if(valor.getValor().contains("getElementById"))
                                                                                                                        variablesImpresas += " = " + valor.getValor();
                                                                                                                    else
                                                                                                                        variablesImpresas += " = \"" + valor.getValor() + "\"";
                                                                                                                } else if(!valor.getTipo().equals(error)) {
                                                                                                                    variablesImpresas += " = " + valor.getValor();
                                                                                                                }
                                                                                                                contador++;
                                                                                                            }
                                                                                                        }
                                                                                                        variablesImpresas += ";";
                                                                                                        RESULT = variablesImpresas;
                                                                                                    
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("variables",9, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // tipos_variables ::= INTEGER 
            {
              String RESULT =null;
		RESULT = integer;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tipos_variables",90, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // tipos_variables ::= DECIMAL 
            {
              String RESULT =null;
		RESULT = decimal;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tipos_variables",90, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // tipos_variables ::= STRING 
            {
              String RESULT =null;
		RESULT = string;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tipos_variables",90, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // tipos_variables ::= BOOLEAN 
            {
              String RESULT =null;
		RESULT = booleano;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tipos_variables",90, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // tipos_variables ::= CHAR 
            {
              String RESULT =null;
		RESULT = character;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tipos_variables",90, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // igual_variable ::= IGUAL condicion 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato val = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("igual_variable",91, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // igual_variable ::= 
            {
              Dato RESULT =null;
		RESULT = new Dato(error, "vacio");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("igual_variable",91, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // cuerpo_identificadores ::= cuerpo_identificadores COMA identificadores 
            {
              ArrayList<String> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		ArrayList<String> ids = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		ids.add(id); RESULT = ids;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_identificadores",99, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // cuerpo_identificadores ::= identificadores 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		ArrayList<String> identificadoresNuevos = new ArrayList<>(); identificadoresNuevos.add(id); RESULT = identificadoresNuevos;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_identificadores",99, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // cuerpo_identificadores ::= cuerpo_identificadores error 
            {
              ArrayList<String> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_identificadores",99, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // cuerpo_identificadores ::= cuerpo_identificadores COMA error 
            {
              ArrayList<String> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_identificadores",99, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // identificadores ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = id.toString();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("identificadores",26, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // identificadores ::= ALFANUMERICO 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = id.toString();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("identificadores",26, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // modo ::= GLOBAL 
            {
              Object RESULT =null;
		RESULT = "@global";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("modo",5, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // modo ::= 
            {
              Object RESULT =null;
		RESULT = "-";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("modo",5, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // strings_concatenados ::= strings_concatenados SUMA strings 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("strings_concatenados",7, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // strings_concatenados ::= strings 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("strings_concatenados",7, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // strings_concatenados ::= strings_concatenados error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("strings_concatenados",7, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // booleanos ::= TRUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("booleanos",8, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // booleanos ::= FALSE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("booleanos",8, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // booleanos ::= error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("booleanos",8, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // strings ::= ALLCHAR 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("strings",6, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // strings ::= ALLCHARNOSPACE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("strings",6, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // strings ::= D_STRING 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("strings",6, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // strings ::= ID_ETIQUETA 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("strings",6, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // strings ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("strings",6, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // strings ::= funciones_strings 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("strings",6, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // strings ::= error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("strings",6, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // asignacion_valor ::= cuerpo_identificadores IGUAL condicion 
            {
              String RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		ArrayList<String> ids = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato con = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                boolean comprobante = true;
                                                                                String tipoVar = con.getTipo();
                                                                                for(String iden: ids) {
                                                                                    if(variableExistente(iden, procesoActual)) {
                                                                                        if(!variableValida(iden, procesoActual, tipoVar)) {
                                                                                            agregarErrorSemantico("La variable: " + iden + " no es del tipo " + tipoVar + ".\nConflicto en la Linea: " + idsleft + " - Columna: " + idsright);
                                                                                            comprobante = false;
                                                                                        }
                                                                                    } else {
                                                                                        agregarErrorSemantico("La variable " + iden + " no está declarada en el proceso " + procesoActual + ".\nConflicto en la Linea: " + idsleft + " - Columna: " + idsright);
                                                                                        comprobante = false;
                                                                                    }
                                                                                }
                                                                                String variablesImpresas = "";
                                                                                if(comprobante) {
                                                                                    int contador = 0;
                                                                                    for(String id: ids) {
                                                                                        if(contador > 0) {
                                                                                            variablesImpresas += ", ";
                                                                                        }
                                                                                        variablesImpresas += id;
                                                                                        if(con.getTipo().equals(string)) {
                                                                                            if(con.getValor().contains("getElementById"))
                                                                                                variablesImpresas += " = " + con.getValor();
                                                                                            else
                                                                                                variablesImpresas += " = \"" + con.getValor() + "\"";
                                                                                        } else if(!con.getTipo().equals(error)) {
                                                                                            variablesImpresas += " = " + con.getValor();
                                                                                        }
                                                                                        contador++;
                                                                                    }
                                                                                    variablesImpresas = ";";
                                                                                }
                                                                                RESULT = variablesImpresas;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("asignacion_valor",86, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // condicion_if ::= apertura_if_complete cuerpo_parametros_proceso PUNTOS LLAC END condicion_else_if condicion_else 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_if",77, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-6)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // condicion_if ::= apertura_if parametros_proceso_simples condicion_else_if condicion_else 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_if",77, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // apertura_if_complete ::= IF PARA condicion PARC THEN INIT LLAA PUNTOS 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_if_complete",128, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // apertura_if_complete ::= IF PARA error PARC THEN INIT LLAA PUNTOS 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_if_complete",128, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // apertura_if_complete ::= error PARA condicion PARC THEN INIT LLAA PUNTOS 
            {
              Object RESULT =null;
		listaErrores.get(listaErrores.size()-1).setSolucion("IF");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_if_complete",128, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // apertura_if_complete ::= IF error condicion PARC THEN INIT LLAA PUNTOS 
            {
              Object RESULT =null;
		listaErrores.get(listaErrores.size()-1).setSolucion("(");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_if_complete",128, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // apertura_if_complete ::= IF PARA condicion error THEN INIT LLAA PUNTOS 
            {
              Object RESULT =null;
		listaErrores.get(listaErrores.size()-1).setSolucion(")");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_if_complete",128, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // apertura_if_complete ::= IF PARA condicion PARC error INIT LLAA PUNTOS 
            {
              Object RESULT =null;
		listaErrores.get(listaErrores.size()-1).setSolucion("THEN");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_if_complete",128, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // apertura_if_complete ::= IF PARA condicion PARC THEN error LLAA PUNTOS 
            {
              Object RESULT =null;
		listaErrores.get(listaErrores.size()-1).setSolucion("INIT");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_if_complete",128, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // apertura_if_complete ::= IF PARA condicion PARC THEN INIT error PUNTOS 
            {
              Object RESULT =null;
		listaErrores.get(listaErrores.size()-1).setSolucion("{");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_if_complete",128, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // apertura_if_complete ::= IF PARA condicion PARC THEN INIT LLAA error 
            {
              Object RESULT =null;
		listaErrores.get(listaErrores.size()-1).setSolucion(":");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_if_complete",128, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // apertura_if ::= IF PARA condicion PARC THEN 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_if",127, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // condicion_else_if ::= condicion_else_if parametros_else_if 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else_if",83, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // condicion_else_if ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else_if",83, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // parametros_else_if ::= ELSE IF PARA condicion PARC THEN INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // parametros_else_if ::= ELSE IF PARA condicion PARC THEN parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-6)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // parametros_else_if ::= ELSE error PARA condicion PARC THEN INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // parametros_else_if ::= ELSE IF error condicion PARC THEN INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // parametros_else_if ::= ELSE IF PARA error PARC THEN INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // parametros_else_if ::= ELSE IF PARA condicion error THEN INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // parametros_else_if ::= ELSE IF PARA condicion PARC error INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // parametros_else_if ::= ELSE IF PARA condicion PARC THEN error LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // parametros_else_if ::= ELSE IF PARA condicion PARC THEN INIT error PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // parametros_else_if ::= ELSE IF PARA condicion PARC THEN INIT LLAA error cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // parametros_else_if ::= ELSE IF PARA condicion PARC THEN INIT LLAA PUNTOS cuerpo_parametros_proceso error LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // parametros_else_if ::= ELSE IF PARA condicion PARC THEN INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS error END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$EtiquetadoParser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$EtiquetadoParser$do_action_part00000001(
    int                        CUP$EtiquetadoParser$act_num,
    java_cup.runtime.lr_parser CUP$EtiquetadoParser$parser,
    java.util.Stack            CUP$EtiquetadoParser$stack,
    int                        CUP$EtiquetadoParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$EtiquetadoParser$result;

      /* select the action based on the action number */
      switch (CUP$EtiquetadoParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // parametros_else_if ::= ELSE IF PARA condicion PARC THEN INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // parametros_else_if ::= ELSE error PARA condicion PARC THEN parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-6)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // parametros_else_if ::= ELSE IF error condicion PARC THEN parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-6)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // parametros_else_if ::= ELSE IF PARA error PARC THEN parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-6)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // parametros_else_if ::= ELSE IF PARA condicion error THEN parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-6)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // parametros_else_if ::= ELSE IF PARA condicion PARC error parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-6)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // condicion_else ::= ELSE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // condicion_else ::= ELSE parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // condicion_else ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // condicion_else ::= ELSE error LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // condicion_else ::= ELSE INIT error PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // condicion_else ::= ELSE INIT LLAA error cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // condicion_else ::= ELSE INIT LLAA PUNTOS cuerpo_parametros_proceso error LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // condicion_else ::= ELSE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS error END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // condicion_else ::= ELSE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA repetir_limite PARC parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-8)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // ciclo_repeat ::= error PARA repetir_declaracion PARC HUNTIL PARA repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // ciclo_repeat ::= REPEAT error repetir_declaracion PARC HUNTIL PARA repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // ciclo_repeat ::= REPEAT PARA error PARC HUNTIL PARA repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // ciclo_repeat ::= REPEAT PARA repetir_declaracion error HUNTIL PARA repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC error PARA repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL error repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA error PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA repetir_limite error INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA repetir_limite PARC error LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA repetir_limite PARC INIT error PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA repetir_limite PARC INIT LLAA error cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso error LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS error END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // ciclo_repeat ::= REPEAT error repetir_declaracion PARC HUNTIL PARA repetir_limite PARC parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-8)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // ciclo_repeat ::= REPEAT PARA error PARC HUNTIL PARA repetir_limite PARC parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-8)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // ciclo_repeat ::= REPEAT PARA repetir_declaracion error HUNTIL PARA repetir_limite PARC parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-8)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC error PARA repetir_limite PARC parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-8)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL error repetir_limite PARC parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-8)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA error PARC parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-8)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA repetir_limite error parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-8)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // repetir_declaracion ::= INTEGER identificadores IGUAL condicion 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int entright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato val = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                if(val.getTipo().equals(integer)) {
                                                                                    if(!tablaSimbolos.insertarSimbolo(new Simbolo(ide.toString(), integer, val.getValor(), "-", procesoActual))){
                                                                                        agregarErrorSemantico("El simbolo " + ide.toString() + " ya existe en el procedimiento " + procesoActual + ".\nConflicto en Linea: " + entleft + " - Columna: " + entright);
                                                                                    }
                                                                                } else {
                                                                                    agregarErrorSemantico("El valor asignado a la variable no es compatible.\n Conflicto en Linea: " + entleft + " - Columna: " + entright);
                                                                                }
                                                                                
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("repetir_declaracion",79, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // repetir_declaracion ::= identificadores IGUAL condicion 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato val = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                if(!val.getTipo().equals(integer)) {
                                                                                    agregarErrorSemantico("El valor a asignar no es de tipo integer, recuerde que REPEAT solo acepta parametros de tipo integer.\nConflicto en Linea: " + valleft + " - Columna: " + valright);
                                                                                }
                                                                                if(variableExistente(ide.toString(), procesoActual)) {
                                                                                    if(variableValida(ide.toString(), procesoActual, integer)) {
                                                                                        
                                                                                    } else {
                                                                                        agregarErrorSemantico("La variable " + ide.toString() + " no es una variable de tipo integer.\nConflicto en Linea: " + ideleft + " - Columna: " + ideright);
                                                                                    }
                                                                                } else {
                                                                                    agregarErrorSemantico("La variable " + ide.toString() + " no está declarada en el proceso " + procesoActual + ".\nConflicto en Linea: " + ideleft + " - Columna: " + ideright);
                                                                                }
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("repetir_declaracion",79, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // repetir_limite ::= D_INTEGER 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("repetir_limite",80, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // repetir_limite ::= identificadores 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("repetir_limite",80, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // igual_repeat ::= D_INTEGER 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("igual_repeat",81, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // ciclo_while ::= WHILE PARA condicion PARC THENWHILE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // ciclo_while ::= WHILE PARA condicion PARC THENWHILE parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-5)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // ciclo_while ::= error PARA condicion PARC THENWHILE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // ciclo_while ::= WHILE error condicion PARC THENWHILE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // ciclo_while ::= WHILE PARA error PARC THENWHILE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // ciclo_while ::= WHILE PARA condicion error THENWHILE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // ciclo_while ::= WHILE PARA condicion PARC error INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // ciclo_while ::= WHILE PARA condicion PARC THENWHILE error LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // ciclo_while ::= WHILE PARA condicion PARC THENWHILE INIT error PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // ciclo_while ::= WHILE PARA condicion PARC THENWHILE INIT LLAA error cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // ciclo_while ::= WHILE PARA condicion PARC THENWHILE INIT LLAA PUNTOS cuerpo_parametros_proceso error LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // ciclo_while ::= WHILE PARA condicion PARC THENWHILE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS error END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // ciclo_while ::= WHILE PARA condicion PARC THENWHILE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // ciclo_while ::= WHILE error condicion PARC THENWHILE parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-5)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // ciclo_while ::= WHILE PARA error PARC THENWHILE parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-5)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // ciclo_while ::= WHILE PARA condicion error THENWHILE parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-5)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // ciclo_while ::= WHILE PARA condicion PARC error parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-5)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // condicion ::= condicion IGUAL_IGUAL condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoCondicionado = operacionesBooleanas.igualIgual(dato1, dato2);
                                                                                System.out.println("\n" + dato1.getTipo() + ":" + dato1.getValor() + " == " + dato2.getTipo() + ":" + dato2.getValor() + "\n");
                                                                                if(datoCondicionado.getTipo().equals(error)) {
                                                                                    agregarErrorSemantico(datoCondicionado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                }
                                                                                RESULT = datoCondicionado;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // condicion ::= condicion DIFERENTE_IGUAL condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoCondicionado = operacionesBooleanas.diferenteIgual(dato1, dato2);
                                                                                if(datoCondicionado.getTipo().equals(error)) {
                                                                                    agregarErrorSemantico(datoCondicionado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                }
                                                                                RESULT = datoCondicionado;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // condicion ::= condicion MENOR_QUE condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoCondicionado = operacionesBooleanas.menorQue(dato1, dato2);
                                                                                if(datoCondicionado.getTipo().equals(error)) {
                                                                                    agregarErrorSemantico(datoCondicionado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                }
                                                                                RESULT = datoCondicionado;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // condicion ::= condicion MENOR_IGUAL condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoCondicionado = operacionesBooleanas.menorIgual(dato1, dato2);
                                                                                if(datoCondicionado.getTipo().equals(error)) {
                                                                                    agregarErrorSemantico(datoCondicionado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                }
                                                                                RESULT = datoCondicionado;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // condicion ::= condicion MAYOR_QUE condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoCondicionado = operacionesBooleanas.mayorQue(dato1, dato2);
                                                                                System.out.println("\n" + dato1.getTipo() + ":" + dato1.getValor() + " > " + dato2.getTipo() + ":" + dato2.getValor() + "\n");
                                                                                if(datoCondicionado.getTipo().equals(error)) {
                                                                                    agregarErrorSemantico(datoCondicionado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                }
                                                                                RESULT = datoCondicionado;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // condicion ::= condicion MAYOR_IGUAL condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoCondicionado = operacionesBooleanas.mayorIgual(dato1, dato2);
                                                                                if(datoCondicionado.getTipo().equals(error)) {
                                                                                    agregarErrorSemantico(datoCondicionado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                }
                                                                                RESULT = datoCondicionado;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // condicion ::= NOT condicion 
            {
              Dato RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoCondicionado = operacionesBooleanas.not(dato);
                                                                                if(datoCondicionado.getTipo().equals(error)) {
                                                                                    agregarErrorSemantico(datoCondicionado.getValor() + ".\nConflicto en Linea " + datoleft + " - Columna " + datoright);
                                                                                }
                                                                                RESULT = datoCondicionado;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // condicion ::= condicion AND condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoCondicionado = operacionesBooleanas.and(dato1, dato2);
                                                                                System.out.println("\n" + dato1.getTipo() + ":" + dato1.getValor() + " && " + dato2.getTipo() + ":" + dato2.getValor() + "\n");
                                                                                if(datoCondicionado.getTipo().equals(error)) {
                                                                                    agregarErrorSemantico(datoCondicionado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                }
                                                                                RESULT = datoCondicionado;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // condicion ::= condicion OR condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoCondicionado = operacionesBooleanas.or(dato1, dato2);
                                                                                if(datoCondicionado.getTipo().equals(error)) {
                                                                                    agregarErrorSemantico(datoCondicionado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                }
                                                                                RESULT = datoCondicionado;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // condicion ::= RESTA condicion 
            {
              Dato RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoMultiplicado = tablaOperaciones.menosUnario(dato);
                                                                                if(datoMultiplicado.getTipo().equals(error)) {
                                                                                    if(datoMultiplicado.getValor() != null) {
                                                                                        agregarErrorSemantico("El dato " + dato.getValor() + " no es compatible para operar de manera unaria.\nConflicto en Linea " + datoleft + " - Columna " + datoright);
                                                                                    } else {
                                                                                        agregarErrorSemantico(datoMultiplicado.getValor() + ".\nConflicto en Linea " + datoleft + " - Columna " + datoright);
                                                                                    }
                                                                                    RESULT = datoMultiplicado;
                                                                                } else {
                                                                                    RESULT = datoMultiplicado;
                                                                                }
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // condicion ::= condicion SUMA condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoSumado = tablaOperaciones.sumar(dato1, dato2);
                                                                                if(datoSumado.getTipo().equals(error)) {
                                                                                    if(datoSumado.getValor() != null) {
                                                                                        agregarErrorSemantico("Los datos " + dato1.getValor() + " y " + dato2.getValor() + " no son compatibles para sumar.\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                    } else {
                                                                                        agregarErrorSemantico(datoSumado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                    }
                                                                                    RESULT = datoSumado;
                                                                                } else {
                                                                                    RESULT = datoSumado;
                                                                                }
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // condicion ::= condicion RESTA condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoRestado = tablaOperaciones.restar(dato1, dato2);
                                                                                if(datoRestado.getTipo().equals(error)) {
                                                                                    if(datoRestado.getValor() != null) {
                                                                                        agregarErrorSemantico("Los datos " + dato1.getValor() + " y " + dato2.getValor() + " no son compatibles para restar.\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                    } else {
                                                                                        agregarErrorSemantico(datoRestado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                    }
                                                                                    RESULT = datoRestado;
                                                                                } else {
                                                                                    RESULT = datoRestado;
                                                                                }
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // condicion ::= condicion MULTIPLICACION condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoMultiplicado = tablaOperaciones.multiplicar(dato1, dato2);
                                                                                if(datoMultiplicado.getTipo().equals(error)) {
                                                                                    if(datoMultiplicado.getValor() != null) {
                                                                                        agregarErrorSemantico("Los datos " + dato1.getValor() + " y " + dato2.getValor() + " no son compatibles para multiplicar.\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                    } else {
                                                                                        agregarErrorSemantico(datoMultiplicado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                    }
                                                                                    RESULT = datoMultiplicado;
                                                                                } else {
                                                                                    RESULT = datoMultiplicado;
                                                                                }
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // condicion ::= condicion DIVISION condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoDividido = tablaOperaciones.dividir(dato1, dato2);
                                                                                if(datoDividido.getTipo().equals(error)) {
                                                                                    if(datoDividido.getValor() != null) {
                                                                                        agregarErrorSemantico("Los datos " + dato1.getValor() + " y " + dato2.getValor() + " no son compatibles para dividir.\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                    } else {
                                                                                        agregarErrorSemantico(datoDividido.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                    }
                                                                                    RESULT = datoDividido;
                                                                                } else {
                                                                                    RESULT = datoDividido;
                                                                                }
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // condicion ::= valor_condicion 
            {
              Dato RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = dato;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // condicion ::= PARA condicion PARC 
            {
              Dato RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		RESULT = dato;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // valor_condicion ::= valor_numerico 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato val = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_condicion",88, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // valor_numerico ::= D_INTEGER 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = new Dato(integer, val.toString());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // valor_numerico ::= D_DECIMAL 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = new Dato(decimal, val.toString());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // valor_numerico ::= IDENTIFICADOR 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                Dato nuevoDato = tablaSimbolos.obtenerDato(val.toString(), procesoActual);
                                                if(nuevoDato.getTipo().equals(error)) {
                                                    agregarErrorSemantico(nuevoDato.getValor() + ".\nConflicto en Linea: " + valleft + " - Columna: " + valright);
                                                }
                                                RESULT = nuevoDato;
                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // valor_numerico ::= ALFANUMERICO 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                Dato nuevoDato = tablaSimbolos.obtenerDato(val.toString(), procesoActual);
                                                if(nuevoDato.getTipo().equals(error)) {
                                                    agregarErrorSemantico(nuevoDato.getValor() + ".\nConflicto en Linea: " + valleft + " - Columna: " + valright);
                                                }
                                                RESULT = nuevoDato;
                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // valor_numerico ::= D_CHAR 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		String caracterSt = val.toString().substring(1,2); RESULT = new Dato(character, caracterSt);
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // valor_numerico ::= ALLCHAR 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = new Dato(string, val.toString().replace("\"", ""));
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // valor_numerico ::= ALLCHARNOSPACE 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = new Dato(string, val.toString().replace("\"", ""));
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // valor_numerico ::= D_STRING 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = new Dato(string, val.toString().replace("\"", ""));
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // valor_numerico ::= ID_ETIQUETA 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = new Dato(string, val.toString().replace("\"", ""));
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // valor_numerico ::= TRUE 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = new Dato(booleano, "true");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // valor_numerico ::= FALSE 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = new Dato(booleano, "false");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // valor_numerico ::= GETBYID PARA ID_ETIQUETA PARC 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                RESULT = new Dato(string, "document.getElementById(\"" + val.toString().replace("\"", "").trim() + "\").value");
                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // valor_numerico ::= ASC PARA condicion PARC 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Dato val = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                Dato dato = funcionesEspeciales.asc(val);
                                                                if(!dato.getTipo().equals(string)) {
                                                                    agregarErrorSemantico(dato.getValor() + ".\nConflicto en Linea: " + valleft + " - Columna: " + valright);
                                                                }
                                                                RESULT = dato;
                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // valor_numerico ::= DESC PARA condicion PARC 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Dato val = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                Dato dato = funcionesEspeciales.desc(val);
                                                                if(!dato.getTipo().equals(string)) {
                                                                    agregarErrorSemantico(dato.getValor() + ".\nConflicto en Linea: " + valleft + " - Columna: " + valright);
                                                                }
                                                                RESULT = dato;
                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // valor_numerico ::= LETPAR_NUM PARA condicion PARC 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Dato val = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                Dato dato = funcionesEspeciales.letparNum(val);
                                                                if(!dato.getTipo().equals(string)) {
                                                                    agregarErrorSemantico(dato.getValor() + ".\nConflicto en Linea: " + valleft + " - Columna: " + valright);
                                                                }
                                                                RESULT = dato;
                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // valor_numerico ::= LETIMPAR_NUM PARA condicion PARC 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Dato val = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                Dato dato = funcionesEspeciales.letimparNum(val);
                                                                if(!dato.getTipo().equals(string)) {
                                                                    agregarErrorSemantico(dato.getValor() + ".\nConflicto en Linea: " + valleft + " - Columna: " + valright);
                                                                }
                                                                RESULT = dato;
                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // valor_numerico ::= REVERSE PARA condicion PARC 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Dato val = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                Dato dato = funcionesEspeciales.reverse(val);
                                                                if(!dato.getTipo().equals(string)) {
                                                                    agregarErrorSemantico(dato.getValor() + ".\nConflicto en Linea: " + valleft + " - Columna: " + valright);
                                                                }
                                                                RESULT = dato;
                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // valor_numerico ::= CARACTER_ALEATORIO PARA PARC 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		
                                                                Dato dato = funcionesEspeciales.caracterAleatorio();
                                                                if(!dato.getTipo().equals(character)) {
                                                                    agregarErrorSemantico(dato.getValor() + ".\nConflicto en Linea: " + valleft + " - Columna: " + valright);
                                                                }
                                                                RESULT = dato;
                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // valor_numerico ::= NUM_ALEATORIO PARA PARC 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		
                                                                Dato dato = funcionesEspeciales.numAleatorio();
                                                                if(!dato.getTipo().equals(integer)) {
                                                                    agregarErrorSemantico(dato.getValor() + ".\nConflicto en Linea: " + valleft + " - Columna: " + valright);
                                                                }
                                                                RESULT = dato;
                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$EtiquetadoParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$EtiquetadoParser$do_action(
    int                        CUP$EtiquetadoParser$act_num,
    java_cup.runtime.lr_parser CUP$EtiquetadoParser$parser,
    java.util.Stack            CUP$EtiquetadoParser$stack,
    int                        CUP$EtiquetadoParser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$EtiquetadoParser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$EtiquetadoParser$do_action_part00000000(
                               CUP$EtiquetadoParser$act_num,
                               CUP$EtiquetadoParser$parser,
                               CUP$EtiquetadoParser$stack,
                               CUP$EtiquetadoParser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$EtiquetadoParser$do_action_part00000001(
                               CUP$EtiquetadoParser$act_num,
                               CUP$EtiquetadoParser$parser,
                               CUP$EtiquetadoParser$stack,
                               CUP$EtiquetadoParser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}