// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: EtiquetadoLexer.jflex

//Secci√≥n de Importaciones
package com.froi.pruebas.gramaticas;
import java_cup.runtime.*;
import static com.froi.pruebas.gramaticas.EtiquetadoParserSym.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class EtiquetadoLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\u10df\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\2\22\0\1\3"+
    "\1\4\1\5\1\0\1\6\1\0\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\0\1\15\1\16\1\17\1\20"+
    "\1\21\10\22\1\23\1\24\1\25\1\26\1\27\1\0"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\42\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\42\1\61\1\0\1\62\1\0\1\63"+
    "\1\0\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\42\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\42\1\103\1\104\1\105\1\106\1\107\1\110"+
    "\1\111\1\112\1\113\1\114\1\115\1\116\u019a\0\2\10"+
    "\346\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\2\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\1\16\4\1\22\1\23"+
    "\16\4\1\24\1\25\1\26\1\2\1\27\1\0\1\30"+
    "\1\0\2\14\1\31\1\0\1\32\1\33\1\34\1\0"+
    "\3\4\1\0\5\4\1\35\24\4\1\36\12\4\1\37"+
    "\1\40\1\41\2\0\1\4\1\42\1\4\7\0\1\43"+
    "\2\0\2\4\1\44\6\4\1\0\5\4\1\45\17\4"+
    "\1\46\5\4\2\0\2\4\1\0\1\47\3\0\1\50"+
    "\12\0\1\51\1\52\1\53\1\4\1\54\3\4\2\0"+
    "\3\4\1\55\3\4\1\56\2\4\1\57\5\4\1\60"+
    "\1\4\1\61\1\4\1\62\2\4\1\63\1\64\1\4"+
    "\3\0\2\4\2\0\1\65\2\0\1\66\10\0\4\4"+
    "\2\0\4\4\1\67\2\4\1\70\1\71\1\4\1\72"+
    "\1\0\5\4\1\0\1\73\3\0\1\4\1\74\1\0"+
    "\1\75\1\76\1\0\1\77\3\0\1\100\2\0\1\101"+
    "\1\102\2\4\2\0\1\4\1\103\5\4\2\0\1\4"+
    "\1\104\2\4\1\105\2\0\1\106\1\0\1\4\1\0"+
    "\1\107\4\0\1\110\1\4\2\0\1\111\1\4\1\112"+
    "\2\4\1\113\1\114\2\0\1\4\1\115\1\116\2\0"+
    "\1\4\1\117\1\120\1\0\1\121\1\0\1\4\3\0"+
    "\2\4\2\0\1\4\10\0\1\122\1\123\1\4\1\0"+
    "\1\124\1\4\1\0\1\125\2\0\1\126\1\0\1\127"+
    "\1\0\1\130\1\0\1\4\1\131\1\0\1\132\2\0"+
    "\1\133\1\4\1\0\1\134\1\0\1\4\1\0\1\135"+
    "\1\4\1\0\1\136\3\0\1\137";

  private static int [] zzUnpackAction() {
    int [] result = new int[389];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\117\0\117\0\236\0\355\0\117\0\u013c\0\u018b"+
    "\0\117\0\117\0\117\0\117\0\u01da\0\117\0\u0229\0\u0278"+
    "\0\117\0\117\0\u02c7\0\u0316\0\u0365\0\u03b4\0\u0403\0\u0452"+
    "\0\u04a1\0\u04f0\0\u053f\0\u058e\0\u05dd\0\u062c\0\u067b\0\u06ca"+
    "\0\u0719\0\u0768\0\u07b7\0\u0806\0\117\0\117\0\u0855\0\u08a4"+
    "\0\u08f3\0\u0942\0\u0991\0\u09e0\0\u0a2f\0\u0a7e\0\u0acd\0\u0b1c"+
    "\0\u0b6b\0\u0bba\0\u0c09\0\u0c58\0\117\0\u0ca7\0\117\0\u0cf6"+
    "\0\117\0\u0d45\0\117\0\u0d94\0\u0de3\0\u0e32\0\u0e81\0\u0ed0"+
    "\0\117\0\117\0\117\0\u0f1f\0\u0f6e\0\u0fbd\0\u100c\0\u105b"+
    "\0\u10aa\0\u10f9\0\u1148\0\u1197\0\u11e6\0\u0452\0\u1235\0\u1284"+
    "\0\u12d3\0\u1322\0\u1371\0\u13c0\0\u140f\0\u145e\0\u14ad\0\u14fc"+
    "\0\u154b\0\u159a\0\u15e9\0\u1638\0\u1687\0\u16d6\0\u1725\0\u1774"+
    "\0\u17c3\0\u1812\0\u0452\0\u1861\0\u18b0\0\u18ff\0\u194e\0\u199d"+
    "\0\u19ec\0\u1a3b\0\u1a8a\0\u1ad9\0\u1b28\0\117\0\117\0\117"+
    "\0\u1b77\0\u1bc6\0\u1c15\0\u0452\0\u1c64\0\u1cb3\0\u1d02\0\u1d51"+
    "\0\u1da0\0\u1def\0\u1e3e\0\u1e8d\0\117\0\u1edc\0\u1f2b\0\u1f7a"+
    "\0\u1fc9\0\u0452\0\u2018\0\u2067\0\u20b6\0\u2105\0\u2154\0\u21a3"+
    "\0\u21f2\0\u2241\0\u2290\0\u22df\0\u232e\0\u237d\0\u0452\0\u23cc"+
    "\0\u241b\0\u246a\0\u24b9\0\u2508\0\u2557\0\u25a6\0\u25f5\0\u2644"+
    "\0\u2693\0\u26e2\0\u2731\0\u2780\0\u27cf\0\u281e\0\u0452\0\u286d"+
    "\0\u28bc\0\u290b\0\u295a\0\u29a9\0\u29f8\0\u2a47\0\u2a96\0\u2ae5"+
    "\0\u2b34\0\117\0\u2b83\0\u2bd2\0\u2c21\0\117\0\u2c70\0\u2cbf"+
    "\0\u2d0e\0\u2d5d\0\u2dac\0\u2dfb\0\u2e4a\0\u2e99\0\u2ee8\0\u2f37"+
    "\0\u0452\0\u0452\0\u0452\0\u2f86\0\u0452\0\u2fd5\0\u3024\0\u3073"+
    "\0\u30c2\0\u3111\0\u3160\0\u31af\0\u31fe\0\u324d\0\u329c\0\u32eb"+
    "\0\u333a\0\u0452\0\u3389\0\u33d8\0\u0452\0\u3427\0\u3476\0\u34c5"+
    "\0\u3514\0\u3563\0\u0452\0\u35b2\0\u0452\0\u3601\0\u0452\0\u3650"+
    "\0\u369f\0\u0452\0\u0452\0\u36ee\0\u373d\0\u378c\0\u37db\0\u382a"+
    "\0\u3879\0\u38c8\0\u3917\0\117\0\u3966\0\u39b5\0\117\0\u3a04"+
    "\0\u3a53\0\u3aa2\0\u3af1\0\u3b40\0\u3b8f\0\u3bde\0\u3c2d\0\u3c7c"+
    "\0\u3ccb\0\u3d1a\0\u3d69\0\u3db8\0\u3e07\0\u3e56\0\u3ea5\0\u3ef4"+
    "\0\u3f43\0\u0452\0\u3f92\0\u3fe1\0\u0452\0\u0452\0\u4030\0\u0452"+
    "\0\u407f\0\u40ce\0\u411d\0\u416c\0\u41bb\0\u420a\0\u4259\0\u0452"+
    "\0\u42a8\0\u42f7\0\u4346\0\u4395\0\117\0\u43e4\0\117\0\117"+
    "\0\u4433\0\117\0\u4482\0\u44d1\0\u4520\0\117\0\u456f\0\u45be"+
    "\0\u0452\0\u0452\0\u460d\0\u465c\0\u46ab\0\u46fa\0\u4749\0\u0452"+
    "\0\u4798\0\u47e7\0\u4836\0\u4885\0\u48d4\0\u4923\0\u4972\0\u49c1"+
    "\0\u0452\0\u4a10\0\u4a5f\0\u0452\0\u4aae\0\u4afd\0\117\0\u4b4c"+
    "\0\u4b9b\0\u4bea\0\117\0\u4c39\0\u4c88\0\u4cd7\0\u4d26\0\117"+
    "\0\u4d75\0\u4dc4\0\u4e13\0\117\0\u4e62\0\u0452\0\u4eb1\0\u4f00"+
    "\0\u0452\0\u0452\0\u4f4f\0\u4f9e\0\u4fed\0\u0452\0\u0452\0\u503c"+
    "\0\u508b\0\u50da\0\117\0\117\0\u5129\0\117\0\u5178\0\u51c7"+
    "\0\u5216\0\u5265\0\u52b4\0\u5303\0\u5352\0\u53a1\0\u53f0\0\u543f"+
    "\0\u548e\0\u54dd\0\u552c\0\u557b\0\u55ca\0\u5619\0\u5668\0\u56b7"+
    "\0\u52b4\0\u0452\0\u5706\0\u5755\0\117\0\u57a4\0\u57f3\0\117"+
    "\0\u5842\0\u5891\0\117\0\u58e0\0\117\0\u592f\0\u0452\0\u597e"+
    "\0\u59cd\0\117\0\u5a1c\0\117\0\u5a6b\0\u5aba\0\117\0\u5b09"+
    "\0\u5b58\0\117\0\u5ba7\0\u5bf6\0\u5c45\0\117\0\u5c94\0\u5ce3"+
    "\0\u0452\0\u5d32\0\u5d81\0\u5dd0\0\117";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[389];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\2\1\16\1\17\2\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\2\30\1\34\1\35\2\30\1\36"+
    "\1\30\1\37\1\40\1\41\1\42\1\30\1\43\2\30"+
    "\1\44\2\30\1\45\1\46\1\6\1\47\1\50\1\51"+
    "\1\52\1\30\1\53\1\54\1\55\1\56\3\30\1\57"+
    "\1\60\1\30\1\61\1\62\1\63\2\30\1\64\3\30"+
    "\1\65\1\66\1\67\123\0\1\70\21\0\1\71\70\0"+
    "\5\72\1\0\111\72\7\0\1\73\107\0\3\74\1\0"+
    "\4\74\1\0\106\74\20\0\1\75\2\76\112\0\1\77"+
    "\1\0\3\30\6\0\30\30\3\0\30\30\21\0\1\77"+
    "\1\0\3\20\6\0\30\30\3\0\30\30\7\0\1\100"+
    "\21\0\1\101\116\0\1\102\116\0\1\103\162\0\1\104"+
    "\44\0\3\30\6\0\13\30\1\105\5\30\1\106\6\30"+
    "\3\0\30\30\23\0\3\30\6\0\30\30\3\0\30\30"+
    "\23\0\3\30\6\0\1\107\27\30\2\0\1\110\30\30"+
    "\23\0\3\30\6\0\4\30\1\111\23\30\3\0\30\30"+
    "\23\0\3\30\6\0\13\30\1\112\1\30\1\113\10\30"+
    "\1\114\1\30\3\0\30\30\23\0\3\30\6\0\23\30"+
    "\1\115\4\30\3\0\30\30\23\0\3\30\6\0\5\30"+
    "\1\116\7\30\1\117\12\30\3\0\30\30\23\0\3\30"+
    "\6\0\4\30\1\120\23\30\3\0\30\30\23\0\3\30"+
    "\6\0\23\30\1\121\4\30\3\0\30\30\23\0\3\30"+
    "\6\0\15\30\1\122\12\30\3\0\30\30\23\0\3\30"+
    "\6\0\20\30\1\123\7\30\3\0\30\30\23\0\3\30"+
    "\6\0\4\30\1\124\23\30\3\0\30\30\23\0\3\30"+
    "\6\0\7\30\1\125\20\30\3\0\30\30\23\0\3\30"+
    "\6\0\7\30\1\126\20\30\3\0\30\30\23\0\3\30"+
    "\6\0\30\30\3\0\12\30\1\127\15\30\23\0\3\30"+
    "\6\0\30\30\3\0\1\130\14\30\1\131\12\30\23\0"+
    "\3\30\6\0\30\30\2\0\1\110\7\30\1\132\2\30"+
    "\1\133\2\30\1\134\12\30\23\0\3\30\6\0\30\30"+
    "\3\0\4\30\1\135\23\30\23\0\3\30\6\0\30\30"+
    "\3\0\1\136\14\30\1\137\12\30\23\0\3\30\6\0"+
    "\30\30\3\0\4\30\1\140\23\30\23\0\3\30\6\0"+
    "\30\30\3\0\4\30\1\141\12\30\1\142\10\30\23\0"+
    "\3\30\6\0\30\30\3\0\3\30\1\143\10\30\1\144"+
    "\13\30\23\0\3\30\6\0\30\30\3\0\1\145\27\30"+
    "\23\0\3\30\6\0\30\30\3\0\14\30\1\146\13\30"+
    "\23\0\3\30\6\0\30\30\3\0\15\30\1\147\12\30"+
    "\23\0\3\30\6\0\30\30\3\0\17\30\1\150\1\30"+
    "\1\151\6\30\23\0\3\30\6\0\30\30\3\0\4\30"+
    "\1\152\12\30\1\153\6\30\1\154\1\30\23\0\3\30"+
    "\6\0\30\30\3\0\10\30\1\155\17\30\120\0\1\156"+
    "\1\0\2\70\1\0\114\70\5\0\1\157\121\0\1\160"+
    "\124\0\1\77\116\0\1\77\1\0\3\76\114\0\3\77"+
    "\111\0\1\161\177\0\1\162\40\0\3\30\6\0\4\30"+
    "\1\163\23\30\3\0\30\30\23\0\3\30\6\0\2\30"+
    "\1\164\25\30\3\0\30\30\23\0\3\30\6\0\20\30"+
    "\1\165\7\30\3\0\30\30\35\0\1\166\1\0\1\167"+
    "\2\0\1\170\1\171\1\172\2\0\1\173\2\0\1\174"+
    "\1\175\1\0\1\176\1\177\11\0\1\166\1\0\1\167"+
    "\2\0\1\170\1\171\1\172\1\0\1\173\2\0\1\174"+
    "\1\175\1\0\1\176\1\177\31\0\3\30\6\0\21\30"+
    "\1\200\6\30\3\0\30\30\23\0\3\30\6\0\21\30"+
    "\1\201\6\30\3\0\30\30\23\0\3\30\6\0\3\30"+
    "\1\202\24\30\3\0\30\30\23\0\3\30\6\0\10\30"+
    "\1\203\17\30\3\0\30\30\23\0\3\30\6\0\15\30"+
    "\1\204\12\30\3\0\30\30\23\0\3\30\6\0\10\30"+
    "\1\205\10\30\1\206\6\30\3\0\30\30\23\0\3\30"+
    "\6\0\22\30\1\207\5\30\3\0\30\30\23\0\3\30"+
    "\6\0\14\30\1\210\13\30\3\0\30\30\23\0\3\30"+
    "\6\0\30\30\2\0\1\211\30\30\23\0\3\30\6\0"+
    "\16\30\1\212\11\30\3\0\30\30\23\0\3\30\6\0"+
    "\17\30\1\213\4\30\1\214\3\30\3\0\30\30\23\0"+
    "\3\30\6\0\4\30\1\215\23\30\3\0\30\30\23\0"+
    "\3\30\6\0\10\30\1\216\17\30\3\0\30\30\23\0"+
    "\3\30\6\0\30\30\3\0\21\30\1\217\6\30\23\0"+
    "\3\30\6\0\30\30\3\0\2\30\1\220\25\30\23\0"+
    "\3\30\6\0\30\30\3\0\15\30\1\221\12\30\23\0"+
    "\3\30\6\0\30\30\3\0\1\222\27\30\23\0\3\30"+
    "\6\0\30\30\3\0\1\223\27\30\23\0\3\30\6\0"+
    "\30\30\3\0\12\30\1\224\15\30\23\0\3\30\6\0"+
    "\30\30\3\0\2\30\1\225\25\30\23\0\3\30\6\0"+
    "\30\30\3\0\12\30\1\226\15\30\23\0\3\30\6\0"+
    "\30\30\3\0\14\30\1\227\13\30\23\0\3\30\6\0"+
    "\30\30\3\0\21\30\1\230\6\30\23\0\3\30\6\0"+
    "\30\30\3\0\10\30\1\231\17\30\23\0\3\30\6\0"+
    "\30\30\3\0\4\30\1\232\23\30\23\0\3\30\6\0"+
    "\30\30\3\0\21\30\1\233\6\30\23\0\3\30\6\0"+
    "\30\30\3\0\13\30\1\234\14\30\23\0\3\30\6\0"+
    "\30\30\3\0\2\30\1\235\25\30\23\0\3\30\6\0"+
    "\30\30\3\0\24\30\1\236\3\30\23\0\3\30\6\0"+
    "\30\30\3\0\2\30\1\237\25\30\23\0\3\30\6\0"+
    "\30\30\3\0\17\30\1\240\10\30\23\0\3\30\6\0"+
    "\30\30\3\0\25\30\1\241\2\30\23\0\3\30\6\0"+
    "\30\30\3\0\22\30\1\242\5\30\23\0\3\30\6\0"+
    "\30\30\3\0\16\30\1\243\11\30\23\0\3\30\6\0"+
    "\30\30\3\0\3\30\1\244\24\30\20\0\1\245\202\0"+
    "\1\246\35\0\3\30\6\0\20\30\1\247\7\30\3\0"+
    "\30\30\23\0\3\30\6\0\1\250\27\30\3\0\30\30"+
    "\52\0\1\251\1\0\1\252\2\0\1\253\24\0\1\251"+
    "\1\0\1\252\2\0\1\253\51\0\1\254\32\0\1\254"+
    "\55\0\1\255\32\0\1\255\51\0\1\256\13\0\1\257"+
    "\32\0\1\257\73\0\1\260\1\261\30\0\1\260\1\261"+
    "\57\0\1\262\32\0\1\262\72\0\1\263\31\0\1\263"+
    "\47\0\1\264\1\0\1\265\12\0\1\266\15\0\1\264"+
    "\1\0\1\265\11\0\1\266\51\0\1\267\3\0\1\270"+
    "\26\0\1\267\3\0\1\270\42\0\3\30\6\0\2\30"+
    "\1\271\25\30\3\0\30\30\23\0\3\30\6\0\4\30"+
    "\1\272\23\30\3\0\30\30\23\0\3\30\6\0\22\30"+
    "\1\273\5\30\3\0\30\30\23\0\3\30\6\0\22\30"+
    "\1\274\5\30\3\0\30\30\23\0\3\30\6\0\22\30"+
    "\1\275\5\30\3\0\30\30\23\0\3\30\6\0\4\30"+
    "\1\276\23\30\3\0\30\30\23\0\3\30\6\0\10\30"+
    "\1\277\6\30\1\300\10\30\3\0\30\30\23\0\3\30"+
    "\6\0\30\30\2\0\1\301\30\30\47\0\1\302\72\0"+
    "\3\30\6\0\2\30\1\303\25\30\3\0\30\30\23\0"+
    "\3\30\6\0\4\30\1\304\23\30\3\0\30\30\23\0"+
    "\3\30\6\0\4\30\1\305\23\30\3\0\30\30\23\0"+
    "\3\30\6\0\15\30\1\306\12\30\3\0\30\30\23\0"+
    "\3\30\6\0\13\30\1\307\14\30\3\0\30\30\23\0"+
    "\3\30\6\0\30\30\3\0\11\30\1\310\16\30\23\0"+
    "\3\30\6\0\30\30\3\0\12\30\1\311\15\30\23\0"+
    "\3\30\6\0\30\30\3\0\17\30\1\312\10\30\23\0"+
    "\3\30\6\0\30\30\3\0\20\30\1\313\7\30\23\0"+
    "\3\30\6\0\30\30\3\0\15\30\1\314\2\30\1\315"+
    "\7\30\23\0\3\30\6\0\30\30\3\0\10\30\1\316"+
    "\17\30\23\0\3\30\6\0\30\30\3\0\20\30\1\317"+
    "\7\30\23\0\3\30\6\0\30\30\3\0\21\30\1\320"+
    "\6\30\23\0\3\30\6\0\4\30\1\321\23\30\3\0"+
    "\30\30\23\0\3\30\6\0\30\30\3\0\6\30\1\322"+
    "\21\30\23\0\3\30\6\0\30\30\3\0\5\30\1\323"+
    "\22\30\23\0\3\30\6\0\30\30\3\0\4\30\1\324"+
    "\23\30\23\0\3\30\6\0\30\30\3\0\4\30\1\325"+
    "\23\30\23\0\3\30\6\0\30\30\3\0\12\30\1\326"+
    "\15\30\23\0\3\30\6\0\30\30\3\0\20\30\1\327"+
    "\7\30\23\0\3\30\6\0\30\30\3\0\10\30\1\330"+
    "\17\30\23\0\3\30\6\0\30\30\3\0\21\30\1\331"+
    "\6\30\23\0\3\30\6\0\30\30\3\0\4\30\1\332"+
    "\23\30\23\0\3\30\6\0\30\30\3\0\4\30\1\333"+
    "\23\30\23\0\3\30\6\0\30\30\3\0\21\30\1\334"+
    "\6\30\3\0\15\335\1\336\101\335\65\0\1\337\51\0"+
    "\3\30\6\0\22\30\1\340\5\30\3\0\30\30\23\0"+
    "\3\30\6\0\2\30\1\341\25\30\3\0\30\30\37\0"+
    "\1\342\32\0\1\342\102\0\1\343\31\0\1\343\66\0"+
    "\1\344\31\0\1\344\50\0\1\345\32\0\1\345\53\0"+
    "\1\346\32\0\1\346\71\0\1\347\32\0\1\347\74\0"+
    "\1\350\31\0\1\350\62\0\1\351\31\0\1\351\71\0"+
    "\1\352\31\0\1\352\62\0\1\353\31\0\1\353\57\0"+
    "\1\354\31\0\1\354\51\0\1\355\32\0\1\355\111\0"+
    "\1\356\31\0\1\356\60\0\1\357\31\0\1\357\31\0"+
    "\3\30\6\0\10\30\1\360\17\30\3\0\30\30\23\0"+
    "\3\30\6\0\20\30\1\361\7\30\3\0\30\30\23\0"+
    "\3\30\6\0\14\30\1\362\13\30\3\0\30\30\23\0"+
    "\3\30\6\0\1\363\27\30\3\0\30\30\34\0\1\364"+
    "\134\0\1\365\67\0\3\30\6\0\4\30\1\366\23\30"+
    "\3\0\30\30\23\0\3\30\6\0\1\367\27\30\3\0"+
    "\30\30\23\0\3\30\6\0\20\30\1\370\7\30\3\0"+
    "\30\30\23\0\3\30\6\0\25\30\1\371\2\30\3\0"+
    "\30\30\23\0\3\30\6\0\4\30\1\372\23\30\3\0"+
    "\30\30\23\0\3\30\6\0\30\30\3\0\6\30\1\373"+
    "\21\30\23\0\3\30\6\0\30\30\3\0\4\30\1\374"+
    "\23\30\23\0\3\30\6\0\30\30\3\0\20\30\1\375"+
    "\7\30\23\0\3\30\6\0\30\30\3\0\17\30\1\376"+
    "\10\30\23\0\3\30\6\0\30\30\3\0\13\30\1\377"+
    "\14\30\23\0\3\30\6\0\30\30\3\0\4\30\1\u0100"+
    "\23\30\20\0\1\u0101\2\0\3\30\6\0\30\30\3\0"+
    "\30\30\23\0\3\30\6\0\30\30\3\0\12\30\1\u0102"+
    "\15\30\23\0\3\30\6\0\30\30\3\0\7\30\1\u0103"+
    "\20\30\23\0\3\30\6\0\30\30\3\0\6\30\1\u0104"+
    "\21\30\23\0\3\30\6\0\30\30\3\0\10\30\1\u0105"+
    "\17\30\23\0\3\30\6\0\30\30\3\0\14\30\1\u0106"+
    "\13\30\20\0\1\u0107\2\0\3\30\6\0\30\30\3\0"+
    "\30\30\23\0\3\30\6\0\30\30\3\0\7\30\1\u0108"+
    "\20\30\3\0\15\335\1\u0109\101\335\15\0\1\336\11\0"+
    "\1\3\153\0\1\u010a\52\0\3\30\6\0\30\30\2\0"+
    "\1\u010b\30\30\23\0\3\30\6\0\22\30\1\u010c\5\30"+
    "\3\0\30\30\63\0\1\u010d\31\0\1\u010d\57\0\1\u010e"+
    "\31\0\1\u010e\44\0\1\u010f\32\0\1\u010f\64\0\1\u0110"+
    "\32\0\1\u0110\103\0\1\u0111\31\0\1\u0111\53\0\1\u0112"+
    "\31\0\1\u0112\62\0\1\u0113\32\0\1\u0113\63\0\1\u0114"+
    "\32\0\1\u0114\57\0\1\u0115\32\0\1\u0115\73\0\1\u0116"+
    "\31\0\1\u0116\72\0\1\u0117\31\0\1\u0117\55\0\1\u0118"+
    "\31\0\1\u0118\40\0\3\30\6\0\13\30\1\u0119\14\30"+
    "\3\0\30\30\23\0\3\30\6\0\22\30\1\u011a\5\30"+
    "\3\0\30\30\23\0\3\30\6\0\17\30\1\u011b\10\30"+
    "\3\0\30\30\23\0\3\30\6\0\20\30\1\u011c\7\30"+
    "\3\0\30\30\47\0\1\u011d\103\0\1\u011e\105\0\3\30"+
    "\6\0\21\30\1\u011f\6\30\3\0\30\30\23\0\3\30"+
    "\6\0\22\30\1\u0120\5\30\3\0\30\30\23\0\3\30"+
    "\6\0\21\30\1\u0121\6\30\3\0\30\30\23\0\3\30"+
    "\6\0\7\30\1\u0122\20\30\3\0\30\30\23\0\3\30"+
    "\6\0\30\30\3\0\17\30\1\u0123\10\30\23\0\3\30"+
    "\6\0\30\30\3\0\1\u0124\27\30\23\0\3\30\6\0"+
    "\30\30\3\0\1\u0125\27\30\74\0\1\u0126\12\0\1\u0127"+
    "\32\0\3\30\6\0\30\30\3\0\4\30\1\u0128\23\30"+
    "\23\0\3\30\6\0\30\30\3\0\21\30\1\u0129\6\30"+
    "\23\0\3\30\6\0\30\30\3\0\4\30\1\u012a\23\30"+
    "\23\0\3\30\6\0\30\30\3\0\2\30\1\u012b\25\30"+
    "\23\0\3\30\6\0\30\30\3\0\6\30\1\u012c\21\30"+
    "\67\0\1\u012d\32\0\15\335\1\u012e\101\335\76\0\1\u012f"+
    "\61\0\1\u0130\75\0\3\30\6\0\4\30\1\u0131\23\30"+
    "\3\0\30\30\52\0\1\u0132\31\0\1\u0132\70\0\1\u0133"+
    "\31\0\1\u0133\60\0\1\u0134\31\0\1\u0134\65\0\1\u0135"+
    "\31\0\1\u0135\47\0\1\u0136\32\0\1\u0136\61\0\1\u0137"+
    "\32\0\1\u0137\67\0\1\u0138\32\0\1\u0138\46\0\3\30"+
    "\6\0\1\u0139\27\30\3\0\30\30\23\0\3\30\6\0"+
    "\30\30\2\0\1\u013a\30\30\40\0\1\u013b\115\0\1\u013c"+
    "\102\0\3\30\6\0\21\30\1\u013d\6\30\3\0\30\30"+
    "\23\0\3\30\6\0\4\30\1\u013e\23\30\3\0\30\30"+
    "\23\0\3\30\6\0\10\30\1\u013f\17\30\3\0\30\30"+
    "\23\0\3\30\6\0\30\30\3\0\15\30\1\u0140\12\30"+
    "\23\0\3\30\6\0\30\30\3\0\14\30\1\u0141\13\30"+
    "\23\0\3\30\6\0\30\30\3\0\12\30\1\u0142\15\30"+
    "\67\0\1\u0143\126\0\1\u0144\42\0\3\30\6\0\30\30"+
    "\3\0\13\30\1\u0145\14\30\23\0\3\30\6\0\30\30"+
    "\3\0\17\30\1\u0146\10\30\23\0\3\30\6\0\30\30"+
    "\3\0\11\30\1\u0147\16\30\101\0\1\u0148\20\0\15\335"+
    "\1\u012e\11\335\1\3\67\335\46\0\1\u0149\70\0\3\30"+
    "\6\0\20\30\1\u014a\7\30\3\0\30\30\51\0\1\u014b"+
    "\31\0\1\u014b\64\0\1\u014c\31\0\1\u014c\71\0\1\u014d"+
    "\31\0\1\u014d\64\0\1\u014e\31\0\1\u014e\62\0\1\u014f"+
    "\31\0\1\u014f\33\0\3\30\6\0\20\30\1\u0150\7\30"+
    "\3\0\30\30\51\0\1\u0151\101\0\1\u0152\105\0\3\30"+
    "\6\0\30\30\2\0\1\u0153\30\30\23\0\3\30\6\0"+
    "\13\30\1\u0154\14\30\3\0\30\30\23\0\3\30\6\0"+
    "\30\30\3\0\22\30\1\u0155\5\30\102\0\1\u0156\132\0"+
    "\1\u0157\23\0\3\30\6\0\30\30\3\0\4\30\1\u0158"+
    "\23\30\77\0\1\u0159\60\0\1\u015a\100\0\3\30\6\0"+
    "\30\30\2\0\1\u015b\30\30\44\0\1\u015c\32\0\1\u015c"+
    "\57\0\1\u015d\32\0\1\u015d\46\0\3\30\6\0\30\30"+
    "\2\0\1\u015e\30\30\57\0\1\u015f\115\0\1\u0160\63\0"+
    "\3\u0161\6\0\30\u0161\3\0\30\u0161\23\0\3\30\6\0"+
    "\4\30\1\u0162\23\30\3\0\30\30\23\0\3\30\6\0"+
    "\30\30\3\0\14\30\1\u0163\13\30\77\0\1\u0164\112\0"+
    "\1\u0165\46\0\3\30\6\0\30\30\3\0\14\30\1\u0166"+
    "\13\30\75\0\1\u0167\73\0\1\u0168\100\0\1\u0169\133\0"+
    "\1\u016a\31\0\1\u016a\47\0\1\u016b\32\0\1\u016b\100\0"+
    "\1\u016c\115\0\1\u016d\120\0\1\u016e\67\0\3\30\6\0"+
    "\30\30\3\0\3\30\1\u016f\24\30\101\0\1\u0170\40\0"+
    "\3\30\6\0\30\30\3\0\21\30\1\u0171\6\30\103\0"+
    "\1\u0172\62\0\1\u0173\111\0\1\u0174\32\0\1\u0174\100\0"+
    "\1\u0175\113\0\1\u0176\157\0\1\u0177\24\0\3\30\6\0"+
    "\1\30\1\u0178\26\30\3\0\30\30\40\0\1\u0179\126\0"+
    "\1\u017a\112\0\1\u017b\75\0\3\30\6\0\30\30\3\0"+
    "\26\30\1\u017c\1\30\34\0\1\u017d\134\0\1\u017e\67\0"+
    "\3\30\6\0\10\30\1\u017f\17\30\3\0\30\30\56\0"+
    "\1\u0180\63\0\3\30\6\0\30\30\3\0\3\30\1\u0181"+
    "\24\30\52\0\1\u0182\120\0\1\u0183\106\0\1\u0184\124\0"+
    "\1\u0185\47\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24095];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\2\1\4\11\1\1\1\11"+
    "\2\1\2\11\22\1\2\11\16\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\0\1\11\1\0\3\1\1\0\3\11"+
    "\1\0\3\1\1\0\45\1\3\11\2\0\3\1\7\0"+
    "\1\11\2\0\11\1\1\0\33\1\2\0\2\1\1\0"+
    "\1\11\3\0\1\11\12\0\10\1\2\0\32\1\3\0"+
    "\2\1\2\0\1\11\2\0\1\11\10\0\4\1\2\0"+
    "\13\1\1\0\5\1\1\0\1\1\3\0\1\1\1\11"+
    "\1\0\2\11\1\0\1\11\3\0\1\11\2\0\4\1"+
    "\2\0\7\1\2\0\5\1\2\0\1\11\1\0\1\1"+
    "\1\0\1\11\4\0\1\11\1\1\2\0\1\11\6\1"+
    "\2\0\3\1\2\0\1\1\2\11\1\0\1\11\1\0"+
    "\1\1\3\0\2\1\2\0\1\1\10\0\3\1\1\0"+
    "\1\11\1\1\1\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\1\1\0\1\1\1\11\1\0\1\11\2\0"+
    "\1\11\1\1\1\0\1\11\1\0\1\1\1\0\1\11"+
    "\1\1\1\0\1\1\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[389];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    /* CODIGO A√ëADIDO */    


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public EtiquetadoLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    /* CODIGO EJECUTADO AL FINAL DEL ANALISIS */
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 96: break;
          case 2:
            { /* IGNORAR */
            }
            // fall through
          case 97: break;
          case 3:
            { return new Symbol(NOT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 98: break;
          case 4:
            { return new Symbol(IDENTIFICADOR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 99: break;
          case 5:
            { return new Symbol(COM_SIMP, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 100: break;
          case 6:
            { return new Symbol(PARA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 101: break;
          case 7:
            { return new Symbol(PARC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 102: break;
          case 8:
            { return new Symbol(MULTIPLICACION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 103: break;
          case 9:
            { return new Symbol(SUMA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 104: break;
          case 10:
            { return new Symbol(RESTA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 105: break;
          case 11:
            { return new Symbol(DIVISION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 106: break;
          case 12:
            { return new Symbol(D_INTEGER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 107: break;
          case 13:
            { return new Symbol(PUNTOS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 108: break;
          case 14:
            { return new Symbol(PUNTO_COMA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 109: break;
          case 15:
            { return new Symbol(MENOR_QUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 110: break;
          case 16:
            { return new Symbol(IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 111: break;
          case 17:
            { return new Symbol(MAYOR_QUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 112: break;
          case 18:
            { return new Symbol(CORA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 113: break;
          case 19:
            { return new Symbol(CORC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 114: break;
          case 20:
            { return new Symbol(LLAA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 115: break;
          case 21:
            { return new Symbol(BARRA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 116: break;
          case 22:
            { return new Symbol(LLAC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 117: break;
          case 23:
            { return new Symbol(DIFERENTE_IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 118: break;
          case 24:
            { return new Symbol(AND, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 119: break;
          case 25:
            { return new Symbol(D_DECIMAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 120: break;
          case 26:
            { return new Symbol(MENOR_IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 121: break;
          case 27:
            { return new Symbol(IGUAL_IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 122: break;
          case 28:
            { return new Symbol(MAYOR_IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 123: break;
          case 29:
            { return new Symbol(IF, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 124: break;
          case 30:
            { return new Symbol(ID, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 125: break;
          case 31:
            { return new Symbol(OR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 126: break;
          case 32:
            { return new Symbol(D_STRING, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 127: break;
          case 33:
            { return new Symbol(D_CHAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 128: break;
          case 34:
            { return new Symbol(ASC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 129: break;
          case 35:
            { return new Symbol(P, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 130: break;
          case 36:
            { return new Symbol(END, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 131: break;
          case 37:
            { return new Symbol(ALT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 132: break;
          case 38:
            { return new Symbol(SRC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 133: break;
          case 39:
            { return new Symbol(BR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 134: break;
          case 40:
            { return new Symbol(H1, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 135: break;
          case 41:
            { return new Symbol(DESC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 136: break;
          case 42:
            { return new Symbol(ELSE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 137: break;
          case 43:
            { return new Symbol(EXIT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 138: break;
          case 44:
            { return new Symbol(INIT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 139: break;
          case 45:
            { return new Symbol(THEN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 140: break;
          case 46:
            { return new Symbol(CHAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 141: break;
          case 47:
            { return new Symbol(COLS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 142: break;
          case 48:
            { return new Symbol(HREF, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 143: break;
          case 49:
            { return new Symbol(NAME, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 144: break;
          case 50:
            { return new Symbol(ROWS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 145: break;
          case 51:
            { return new Symbol(TRUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 146: break;
          case 52:
            { return new Symbol(TYPE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 147: break;
          case 53:
            { return new Symbol(DIV, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 148: break;
          case 54:
            { return new Symbol(IMG, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 149: break;
          case 55:
            { return new Symbol(WHILE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 150: break;
          case 56:
            { return new Symbol(CLASS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 151: break;
          case 57:
            { return new Symbol(COLOR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 152: break;
          case 58:
            { return new Symbol(FALSE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 153: break;
          case 59:
            { return new Symbol(WIDTH, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 154: break;
          case 60:
            { return new Symbol(BODY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 155: break;
          case 61:
            { return new Symbol(GCIC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 156: break;
          case 62:
            { return new Symbol(HEAD, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 157: break;
          case 63:
            { return new Symbol(LINK, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 158: break;
          case 64:
            { return new Symbol(SPAM, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 159: break;
          case 65:
            { return new Symbol(HUNTIL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 160: break;
          case 66:
            { return new Symbol(INSERT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 161: break;
          case 67:
            { return new Symbol(REPEAT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 162: break;
          case 68:
            { return new Symbol(HEIGHT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 163: break;
          case 69:
            { return new Symbol(STRING, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 164: break;
          case 70:
            { return new Symbol(GLOBAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 165: break;
          case 71:
            { return new Symbol(INPUT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 166: break;
          case 72:
            { return new Symbol(TITLE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 167: break;
          case 73:
            { return new Symbol(ON_LOAD, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 168: break;
          case 74:
            { return new Symbol(REVERSE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 169: break;
          case 75:
            { return new Symbol(BOOLEAN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 170: break;
          case 76:
            { return new Symbol(DECIMAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 171: break;
          case 77:
            { return new Symbol(INTEGER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 172: break;
          case 78:
            { return new Symbol(ONCLICK, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 173: break;
          case 79:
            { return new Symbol(BUTTON, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 174: break;
          case 80:
            { return new Symbol(OPTION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 175: break;
          case 81:
            { return new Symbol(SELECT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 176: break;
          case 82:
            { return new Symbol(PROCESS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 177: break;
          case 83:
            { return new Symbol(THENWHILE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 178: break;
          case 84:
            { return new Symbol(FONTSIZE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 179: break;
          case 85:
            { return new Symbol(ALERT_INFO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 180: break;
          case 86:
            { return new Symbol(TEXTAREA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 181: break;
          case 87:
            { return new Symbol(LETPAR_NUM, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 182: break;
          case 88:
            { return new Symbol(BACKGROUND, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 183: break;
          case 89:
            { return new Symbol(TEXTALIGN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 184: break;
          case 90:
            { return new Symbol(SCRIPTING, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 185: break;
          case 91:
            { return new Symbol(FONTFAMILY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 186: break;
          case 92:
            { return new Symbol(LETIMPAR_NUM, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 187: break;
          case 93:
            { return new Symbol(NUM_ALEATORIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 188: break;
          case 94:
            { return new Symbol(GETBYID, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 189: break;
          case 95:
            { return new Symbol(CARACTER_ALEATORIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 190: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
