// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: EtiquetadoLexer.jflex

//Secci√≥n de Importaciones
package com.froi.pruebas.gramaticas;
import java_cup.runtime.*;
import static com.froi.pruebas.gramaticas.EtiquetadoParserSym.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class EtiquetadoLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\u10df\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\2\22\0\1\3"+
    "\1\4\1\5\1\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\0\1\16\1\17\1\20\1\21"+
    "\1\22\10\23\1\24\1\25\1\26\1\27\1\30\1\0"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\43\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\43\1\62\1\0\1\63\1\0\1\64"+
    "\1\0\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
    "\1\114\1\115\1\116\1\117\1\120\1\121\u019a\0\2\11"+
    "\346\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\2\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\1\20\22\1\23\1\24"+
    "\23\22\1\25\1\26\1\27\1\2\1\30\1\0\1\31"+
    "\1\0\2\14\1\0\1\32\1\33\1\22\1\0\1\34"+
    "\1\35\1\36\1\0\4\22\1\0\7\22\1\37\32\22"+
    "\1\40\30\22\1\41\1\42\1\43\1\0\1\44\2\0"+
    "\1\22\1\45\2\22\7\0\1\46\2\0\3\22\1\47"+
    "\7\22\1\0\6\22\1\50\37\22\1\51\1\22\1\52"+
    "\2\22\1\53\10\22\1\44\2\0\3\22\1\0\1\54"+
    "\3\0\1\55\12\0\1\22\1\56\1\57\1\60\2\22"+
    "\1\61\3\22\2\0\3\22\1\62\2\22\1\63\2\22"+
    "\1\64\2\22\1\65\3\22\1\66\6\22\1\67\2\22"+
    "\1\70\2\22\1\71\1\72\1\22\1\73\1\74\6\22"+
    "\1\75\3\22\1\76\1\77\1\100\1\101\3\22\3\0"+
    "\1\22\1\102\1\22\2\0\1\103\2\0\1\104\10\0"+
    "\6\22\2\0\5\22\1\105\1\22\1\106\3\22\1\107"+
    "\1\110\2\22\1\111\1\0\2\22\1\112\5\22\1\113"+
    "\2\22\1\114\1\115\1\0\2\22\1\0\1\116\1\117"+
    "\1\22\3\0\1\22\1\120\1\0\1\121\1\122\1\0"+
    "\1\123\3\0\1\124\2\0\1\22\1\125\1\126\1\127"+
    "\2\22\2\0\1\22\1\130\5\22\1\131\1\22\1\132"+
    "\1\22\2\0\2\22\1\133\2\22\1\134\1\135\1\22"+
    "\1\136\1\0\1\137\1\140\1\0\1\141\1\0\1\142"+
    "\1\0\1\22\1\0\1\143\4\0\1\144\1\145\1\22"+
    "\2\0\1\146\1\22\1\147\1\22\1\150\1\22\1\151"+
    "\1\22\1\152\2\0\1\153\1\22\1\154\1\155\1\156"+
    "\3\0\1\22\1\157\1\160\1\0\1\161\1\0\1\22"+
    "\3\0\2\22\1\162\2\0\1\22\11\0\1\163\1\164"+
    "\1\22\1\0\1\165\1\22\2\0\1\166\2\0\1\167"+
    "\1\0\1\170\1\0\1\171\1\0\1\22\1\172\1\173"+
    "\1\0\1\174\2\0\1\175\1\22\1\0\1\176\1\0"+
    "\1\22\1\0\1\177\1\22\1\0\1\200\3\0\1\201";

  private static int [] zzUnpackAction() {
    int [] result = new int[526];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\122\0\122\0\244\0\366\0\122\0\u0148\0\u019a"+
    "\0\122\0\122\0\122\0\122\0\u01ec\0\122\0\u023e\0\u0290"+
    "\0\122\0\122\0\u02e2\0\u0334\0\u0386\0\u03d8\0\u042a\0\u047c"+
    "\0\u04ce\0\u0520\0\u0572\0\u05c4\0\u0616\0\u0668\0\u06ba\0\u070c"+
    "\0\u075e\0\u07b0\0\u0802\0\u0854\0\u08a6\0\u08f8\0\122\0\122"+
    "\0\u094a\0\u099c\0\u09ee\0\u0a40\0\u0a92\0\u0ae4\0\u0b36\0\u0b88"+
    "\0\u0bda\0\u0c2c\0\u0c7e\0\u0cd0\0\u0d22\0\u0d74\0\u0dc6\0\u0e18"+
    "\0\u0e6a\0\u0ebc\0\u0f0e\0\122\0\u0f60\0\122\0\u0fb2\0\122"+
    "\0\u1004\0\122\0\u1056\0\u10a8\0\u10fa\0\u114c\0\122\0\u119e"+
    "\0\u11f0\0\u1242\0\122\0\122\0\122\0\u1294\0\u12e6\0\u1338"+
    "\0\u138a\0\u13dc\0\u142e\0\u1480\0\u14d2\0\u1524\0\u1576\0\u15c8"+
    "\0\u161a\0\u166c\0\u047c\0\u16be\0\u1710\0\u1762\0\u17b4\0\u1806"+
    "\0\u1858\0\u18aa\0\u18fc\0\u194e\0\u19a0\0\u19f2\0\u1a44\0\u1a96"+
    "\0\u1ae8\0\u1b3a\0\u1b8c\0\u1bde\0\u1c30\0\u1c82\0\u1cd4\0\u1d26"+
    "\0\u1d78\0\u1dca\0\u1e1c\0\u1e6e\0\u1ec0\0\u047c\0\u1f12\0\u1f64"+
    "\0\u1fb6\0\u2008\0\u205a\0\u20ac\0\u20fe\0\u2150\0\u21a2\0\u21f4"+
    "\0\u2246\0\u2298\0\u22ea\0\u233c\0\u238e\0\u23e0\0\u2432\0\u2484"+
    "\0\u24d6\0\u2528\0\u257a\0\u25cc\0\u261e\0\u2670\0\122\0\122"+
    "\0\122\0\u26c2\0\u047c\0\u2714\0\u2766\0\u27b8\0\u047c\0\u280a"+
    "\0\u285c\0\u28ae\0\u2900\0\u2952\0\u29a4\0\u29f6\0\u2a48\0\u2a9a"+
    "\0\122\0\u2aec\0\u2b3e\0\u2b90\0\u2be2\0\u2c34\0\u047c\0\u2c86"+
    "\0\u2cd8\0\u2d2a\0\u2d7c\0\u2dce\0\u2e20\0\u2e72\0\u2ec4\0\u2f16"+
    "\0\u2f68\0\u2fba\0\u300c\0\u305e\0\u30b0\0\u047c\0\u3102\0\u3154"+
    "\0\u31a6\0\u31f8\0\u324a\0\u329c\0\u32ee\0\u3340\0\u3392\0\u33e4"+
    "\0\u3436\0\u3488\0\u34da\0\u352c\0\u357e\0\u35d0\0\u3622\0\u3674"+
    "\0\u36c6\0\u3718\0\u376a\0\u37bc\0\u380e\0\u3860\0\u38b2\0\u3904"+
    "\0\u3956\0\u39a8\0\u39fa\0\u3a4c\0\u3a9e\0\u047c\0\u3af0\0\u3b42"+
    "\0\u3b94\0\u3be6\0\u047c\0\u3c38\0\u3c8a\0\u3cdc\0\u3d2e\0\u3d80"+
    "\0\u3dd2\0\u3e24\0\u3e76\0\122\0\u3ec8\0\u3f1a\0\u3f6c\0\u3fbe"+
    "\0\u4010\0\u4062\0\122\0\u40b4\0\u4106\0\u4158\0\122\0\u41aa"+
    "\0\u41fc\0\u424e\0\u42a0\0\u42f2\0\u4344\0\u4396\0\u43e8\0\u443a"+
    "\0\u448c\0\u44de\0\u047c\0\u047c\0\u047c\0\u4530\0\u4582\0\u047c"+
    "\0\u45d4\0\u4626\0\u4678\0\u46ca\0\u471c\0\u476e\0\u47c0\0\u4812"+
    "\0\u4864\0\u48b6\0\u4908\0\u047c\0\u495a\0\u49ac\0\u047c\0\u49fe"+
    "\0\u4a50\0\u047c\0\u4aa2\0\u4af4\0\u4b46\0\u047c\0\u4b98\0\u4bea"+
    "\0\u4c3c\0\u4c8e\0\u4ce0\0\u4d32\0\u047c\0\u4d84\0\u4dd6\0\u047c"+
    "\0\u4e28\0\u4e7a\0\u047c\0\u047c\0\u4ecc\0\u047c\0\u047c\0\u4f1e"+
    "\0\u4f70\0\u4fc2\0\u5014\0\u5066\0\u50b8\0\u047c\0\u510a\0\u515c"+
    "\0\u51ae\0\u047c\0\u5200\0\u047c\0\u047c\0\u5252\0\u52a4\0\u52f6"+
    "\0\u5348\0\u539a\0\u53ec\0\u543e\0\u047c\0\u5490\0\u54e2\0\u5534"+
    "\0\122\0\u5586\0\u55d8\0\122\0\u562a\0\u567c\0\u56ce\0\u5720"+
    "\0\u5772\0\u57c4\0\u5816\0\u5868\0\u58ba\0\u590c\0\u595e\0\u59b0"+
    "\0\u5a02\0\u5a54\0\u5aa6\0\u5af8\0\u5b4a\0\u5b9c\0\u5bee\0\u5c40"+
    "\0\u5c92\0\u047c\0\u5ce4\0\u047c\0\u5d36\0\u5d88\0\u5dda\0\u047c"+
    "\0\u047c\0\u5e2c\0\u5e7e\0\u047c\0\u5ed0\0\u5f22\0\u5f74\0\u047c"+
    "\0\u5fc6\0\u6018\0\u606a\0\u60bc\0\u610e\0\u047c\0\u6160\0\u61b2"+
    "\0\u047c\0\u047c\0\u6204\0\u6256\0\u62a8\0\u62fa\0\u047c\0\u047c"+
    "\0\u634c\0\u639e\0\u63f0\0\u6442\0\u6494\0\122\0\u64e6\0\122"+
    "\0\122\0\u6538\0\122\0\u658a\0\u65dc\0\u662e\0\122\0\u6680"+
    "\0\u66d2\0\u6724\0\u047c\0\u047c\0\u047c\0\u6776\0\u67c8\0\u681a"+
    "\0\u686c\0\u68be\0\u047c\0\u6910\0\u6962\0\u69b4\0\u6a06\0\u6a58"+
    "\0\u047c\0\u6aaa\0\u047c\0\u6afc\0\u6b4e\0\u6ba0\0\u6bf2\0\u6c44"+
    "\0\u047c\0\u6c96\0\u6ce8\0\u047c\0\u047c\0\u6d3a\0\u047c\0\u6d8c"+
    "\0\u047c\0\u047c\0\u6dde\0\u047c\0\u6e30\0\122\0\u6e82\0\u6ed4"+
    "\0\u6f26\0\122\0\u6f78\0\u6fca\0\u701c\0\u706e\0\122\0\u047c"+
    "\0\u70c0\0\u7112\0\u7164\0\122\0\u71b6\0\u047c\0\u7208\0\u047c"+
    "\0\u725a\0\u047c\0\u72ac\0\u047c\0\u72fe\0\u7350\0\u047c\0\u73a2"+
    "\0\u047c\0\u047c\0\u047c\0\u73f4\0\u7446\0\u7498\0\u74ea\0\122"+
    "\0\122\0\u753c\0\122\0\u758e\0\u75e0\0\u7632\0\u7684\0\u76d6"+
    "\0\u7728\0\u777a\0\u047c\0\u77cc\0\u781e\0\u7870\0\u78c2\0\u7914"+
    "\0\u7966\0\u79b8\0\u7a0a\0\u7a5c\0\u7aae\0\u7b00\0\u7b52\0\u76d6"+
    "\0\u047c\0\u7ba4\0\u7bf6\0\122\0\u7c48\0\u7c9a\0\u7cec\0\122"+
    "\0\u7d3e\0\u7d90\0\122\0\u7de2\0\122\0\u7e34\0\u047c\0\u7e86"+
    "\0\u7ed8\0\122\0\122\0\u7f2a\0\122\0\u7f7c\0\u7fce\0\122"+
    "\0\u8020\0\u8072\0\122\0\u80c4\0\u8116\0\u8168\0\122\0\u81ba"+
    "\0\u820c\0\u047c\0\u825e\0\u82b0\0\u8302\0\122";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[526];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\2\1\16\1\17"+
    "\2\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\30\1\34\1\35\1\36"+
    "\2\30\1\37\1\30\1\40\1\41\1\42\1\43\1\30"+
    "\1\44\1\30\1\45\1\46\2\30\1\47\1\50\1\6"+
    "\1\51\1\52\1\53\1\54\1\30\1\55\1\56\1\57"+
    "\1\60\1\61\1\30\1\62\1\63\1\64\1\65\1\66"+
    "\1\30\1\67\1\70\1\71\2\30\1\72\1\30\1\73"+
    "\1\30\1\74\1\75\1\76\126\0\1\77\22\0\1\100"+
    "\72\0\5\101\1\0\114\101\10\0\1\102\111\0\3\103"+
    "\1\0\5\103\1\0\110\103\21\0\1\104\2\105\77\0"+
    "\1\106\1\0\1\106\3\0\1\107\7\0\1\110\1\0"+
    "\3\30\6\0\17\30\1\111\10\30\3\0\17\30\1\111"+
    "\12\30\4\0\1\106\1\0\1\106\3\0\1\107\7\0"+
    "\1\110\1\0\3\20\6\0\17\30\1\111\10\30\3\0"+
    "\17\30\1\111\12\30\7\0\1\112\22\0\1\113\121\0"+
    "\1\114\121\0\1\115\165\0\1\116\47\0\3\30\6\0"+
    "\13\30\1\117\5\30\1\120\6\30\3\0\21\30\1\121"+
    "\10\30\24\0\3\30\6\0\30\30\3\0\32\30\24\0"+
    "\3\30\6\0\1\122\27\30\2\0\1\123\16\30\1\124"+
    "\13\30\24\0\3\30\6\0\4\30\1\125\23\30\3\0"+
    "\32\30\24\0\3\30\6\0\13\30\1\126\1\30\1\127"+
    "\10\30\1\130\1\30\3\0\32\30\24\0\3\30\6\0"+
    "\30\30\3\0\4\30\1\131\25\30\24\0\3\30\6\0"+
    "\23\30\1\132\4\30\3\0\32\30\24\0\3\30\6\0"+
    "\5\30\1\133\7\30\1\134\12\30\3\0\32\30\24\0"+
    "\3\30\6\0\4\30\1\135\23\30\3\0\32\30\24\0"+
    "\3\30\6\0\23\30\1\136\4\30\3\0\32\30\24\0"+
    "\3\30\6\0\15\30\1\137\12\30\3\0\32\30\24\0"+
    "\3\30\6\0\20\30\1\140\7\30\3\0\32\30\24\0"+
    "\3\30\6\0\4\30\1\141\23\30\3\0\32\30\24\0"+
    "\3\30\6\0\7\30\1\142\20\30\3\0\32\30\24\0"+
    "\3\30\6\0\30\30\3\0\4\30\1\143\25\30\24\0"+
    "\3\30\6\0\7\30\1\144\20\30\3\0\32\30\24\0"+
    "\3\30\6\0\30\30\3\0\13\30\1\145\4\30\1\146"+
    "\11\30\24\0\3\30\6\0\30\30\3\0\1\147\12\30"+
    "\1\150\2\30\1\151\13\30\24\0\3\30\6\0\30\30"+
    "\2\0\1\123\4\30\1\152\2\30\1\153\3\30\1\154"+
    "\2\30\1\155\13\30\24\0\3\30\6\0\30\30\3\0"+
    "\4\30\1\156\25\30\24\0\3\30\6\0\30\30\3\0"+
    "\1\157\15\30\1\160\5\30\1\161\5\30\24\0\3\30"+
    "\6\0\30\30\3\0\4\30\1\162\14\30\1\163\10\30"+
    "\24\0\3\30\6\0\30\30\3\0\4\30\1\164\14\30"+
    "\1\165\10\30\24\0\3\30\6\0\30\30\3\0\3\30"+
    "\1\166\11\30\1\167\14\30\24\0\3\30\6\0\30\30"+
    "\3\0\24\30\1\170\5\30\24\0\3\30\6\0\30\30"+
    "\3\0\4\30\1\171\3\30\1\172\21\30\24\0\3\30"+
    "\6\0\30\30\3\0\1\173\31\30\24\0\3\30\6\0"+
    "\30\30\3\0\1\174\23\30\1\175\5\30\24\0\3\30"+
    "\6\0\30\30\3\0\13\30\1\176\1\30\1\177\14\30"+
    "\24\0\3\30\6\0\30\30\3\0\24\30\1\200\5\30"+
    "\24\0\3\30\6\0\30\30\3\0\1\201\3\30\1\202"+
    "\3\30\1\203\5\30\1\204\13\30\24\0\3\30\6\0"+
    "\30\30\3\0\1\205\7\30\1\206\10\30\1\207\1\30"+
    "\1\210\6\30\24\0\3\30\6\0\30\30\3\0\4\30"+
    "\1\211\14\30\1\212\6\30\1\213\1\30\24\0\3\30"+
    "\6\0\30\30\3\0\7\30\1\214\1\215\21\30\24\0"+
    "\3\30\6\0\30\30\3\0\4\30\1\216\25\30\123\0"+
    "\1\217\1\0\2\77\1\0\117\77\5\0\1\220\125\0"+
    "\1\221\127\0\1\110\121\0\1\110\1\0\3\105\77\0"+
    "\1\106\1\0\1\106\3\0\1\107\41\0\1\222\32\0"+
    "\1\222\36\0\3\110\117\0\3\30\6\0\26\30\1\223"+
    "\1\30\3\0\27\30\1\223\2\30\21\0\1\224\203\0"+
    "\1\225\42\0\3\30\6\0\4\30\1\226\23\30\3\0"+
    "\32\30\24\0\3\30\6\0\2\30\1\227\25\30\3\0"+
    "\32\30\24\0\3\30\6\0\30\30\3\0\10\30\1\230"+
    "\21\30\24\0\3\30\6\0\20\30\1\231\7\30\3\0"+
    "\32\30\36\0\1\232\1\0\1\233\2\0\1\234\1\235"+
    "\1\236\2\0\1\237\2\0\1\240\1\241\1\0\1\242"+
    "\1\243\11\0\1\232\1\0\1\233\2\0\1\234\1\235"+
    "\1\236\2\0\1\237\2\0\1\240\1\241\2\0\1\242"+
    "\1\243\32\0\3\30\6\0\30\30\3\0\24\30\1\244"+
    "\5\30\24\0\3\30\6\0\21\30\1\245\6\30\3\0"+
    "\32\30\24\0\3\30\6\0\21\30\1\246\6\30\3\0"+
    "\32\30\24\0\3\30\6\0\3\30\1\247\24\30\3\0"+
    "\32\30\24\0\3\30\6\0\10\30\1\250\17\30\3\0"+
    "\32\30\24\0\3\30\6\0\30\30\3\0\15\30\1\251"+
    "\14\30\24\0\3\30\6\0\15\30\1\252\12\30\3\0"+
    "\32\30\24\0\3\30\6\0\10\30\1\253\10\30\1\254"+
    "\6\30\3\0\32\30\24\0\3\30\6\0\22\30\1\255"+
    "\5\30\3\0\32\30\24\0\3\30\6\0\14\30\1\256"+
    "\13\30\3\0\32\30\24\0\3\30\6\0\30\30\2\0"+
    "\1\257\32\30\24\0\3\30\6\0\16\30\1\260\11\30"+
    "\3\0\32\30\24\0\3\30\6\0\17\30\1\261\4\30"+
    "\1\262\3\30\3\0\32\30\24\0\3\30\6\0\4\30"+
    "\1\263\23\30\3\0\32\30\24\0\3\30\6\0\30\30"+
    "\3\0\21\30\1\264\10\30\24\0\3\30\6\0\10\30"+
    "\1\265\17\30\3\0\32\30\24\0\3\30\6\0\30\30"+
    "\3\0\23\30\1\266\6\30\24\0\3\30\6\0\30\30"+
    "\3\0\24\30\1\267\5\30\24\0\3\30\6\0\30\30"+
    "\3\0\2\30\1\270\27\30\24\0\3\30\6\0\30\30"+
    "\3\0\1\271\23\30\1\272\5\30\24\0\3\30\6\0"+
    "\30\30\3\0\16\30\1\273\13\30\24\0\3\30\6\0"+
    "\30\30\3\0\15\30\1\274\14\30\24\0\3\30\6\0"+
    "\30\30\3\0\1\275\3\30\1\276\25\30\24\0\3\30"+
    "\6\0\30\30\3\0\1\277\31\30\24\0\3\30\6\0"+
    "\30\30\3\0\13\30\1\300\16\30\24\0\3\30\6\0"+
    "\30\30\3\0\2\30\1\301\27\30\24\0\3\30\6\0"+
    "\30\30\3\0\13\30\1\302\16\30\24\0\3\30\6\0"+
    "\30\30\3\0\15\30\1\303\14\30\24\0\3\30\6\0"+
    "\30\30\3\0\2\30\1\304\27\30\24\0\3\30\6\0"+
    "\30\30\3\0\23\30\1\305\6\30\24\0\3\30\6\0"+
    "\30\30\3\0\1\306\3\30\1\307\25\30\24\0\3\30"+
    "\6\0\30\30\3\0\10\30\1\310\21\30\24\0\3\30"+
    "\6\0\30\30\3\0\4\30\1\311\25\30\24\0\3\30"+
    "\6\0\30\30\3\0\23\30\1\312\6\30\24\0\3\30"+
    "\6\0\30\30\3\0\22\30\1\313\7\30\24\0\3\30"+
    "\6\0\30\30\3\0\5\30\1\314\24\30\24\0\3\30"+
    "\6\0\30\30\3\0\14\30\1\315\15\30\24\0\3\30"+
    "\6\0\30\30\3\0\21\30\1\316\10\30\24\0\3\30"+
    "\6\0\30\30\3\0\14\30\1\317\10\30\1\320\4\30"+
    "\24\0\3\30\6\0\30\30\3\0\14\30\1\321\15\30"+
    "\24\0\3\30\6\0\30\30\3\0\10\30\1\322\21\30"+
    "\24\0\3\30\6\0\30\30\3\0\2\30\1\323\27\30"+
    "\24\0\3\30\6\0\30\30\3\0\21\30\1\324\10\30"+
    "\24\0\3\30\6\0\30\30\3\0\3\30\1\325\26\30"+
    "\24\0\3\30\6\0\30\30\3\0\3\30\1\326\26\30"+
    "\24\0\3\30\6\0\30\30\3\0\6\30\1\327\23\30"+
    "\24\0\3\30\6\0\30\30\3\0\26\30\1\330\3\30"+
    "\24\0\3\30\6\0\30\30\3\0\15\30\1\331\14\30"+
    "\24\0\3\30\6\0\30\30\3\0\13\30\1\332\16\30"+
    "\24\0\3\30\6\0\30\30\3\0\2\30\1\333\27\30"+
    "\24\0\3\30\6\0\30\30\3\0\21\30\1\334\10\30"+
    "\24\0\3\30\6\0\30\30\3\0\1\335\26\30\1\336"+
    "\2\30\24\0\3\30\6\0\30\30\3\0\24\30\1\337"+
    "\5\30\24\0\3\30\6\0\30\30\3\0\17\30\1\340"+
    "\12\30\24\0\3\30\6\0\30\30\3\0\10\30\1\341"+
    "\21\30\24\0\3\30\6\0\30\30\3\0\3\30\1\342"+
    "\26\30\24\0\3\30\6\0\30\30\3\0\13\30\1\343"+
    "\16\30\63\0\1\344\33\0\1\344\23\0\1\345\206\0"+
    "\1\346\37\0\3\30\6\0\20\30\1\347\7\30\3\0"+
    "\32\30\24\0\3\30\6\0\30\30\3\0\1\350\31\30"+
    "\24\0\3\30\6\0\1\351\27\30\3\0\32\30\53\0"+
    "\1\352\1\0\1\353\2\0\1\354\25\0\1\352\2\0"+
    "\1\353\2\0\1\354\52\0\1\355\32\0\1\355\60\0"+
    "\1\356\32\0\1\356\54\0\1\357\13\0\1\360\32\0"+
    "\1\360\76\0\1\361\1\362\31\0\1\361\1\362\61\0"+
    "\1\363\32\0\1\363\75\0\1\364\32\0\1\364\51\0"+
    "\1\365\1\0\1\366\12\0\1\367\15\0\1\365\1\0"+
    "\1\366\12\0\1\367\53\0\1\370\3\0\1\371\26\0"+
    "\1\370\3\0\1\371\45\0\3\30\6\0\30\30\3\0"+
    "\21\30\1\372\10\30\24\0\3\30\6\0\2\30\1\373"+
    "\25\30\3\0\32\30\24\0\3\30\6\0\4\30\1\374"+
    "\23\30\3\0\32\30\24\0\3\30\6\0\22\30\1\375"+
    "\5\30\3\0\32\30\24\0\3\30\6\0\30\30\3\0"+
    "\4\30\1\376\25\30\24\0\3\30\6\0\22\30\1\377"+
    "\5\30\3\0\32\30\24\0\3\30\6\0\22\30\1\u0100"+
    "\5\30\3\0\32\30\24\0\3\30\6\0\4\30\1\u0101"+
    "\23\30\3\0\32\30\24\0\3\30\6\0\10\30\1\u0102"+
    "\6\30\1\u0103\10\30\3\0\32\30\24\0\3\30\6\0"+
    "\30\30\2\0\1\u0104\32\30\50\0\1\u0105\75\0\3\30"+
    "\6\0\2\30\1\u0106\25\30\3\0\32\30\24\0\3\30"+
    "\6\0\4\30\1\u0107\23\30\3\0\32\30\24\0\3\30"+
    "\6\0\4\30\1\u0108\23\30\3\0\32\30\24\0\3\30"+
    "\6\0\15\30\1\u0109\12\30\3\0\32\30\24\0\3\30"+
    "\6\0\30\30\3\0\3\30\1\u010a\26\30\24\0\3\30"+
    "\6\0\13\30\1\u010b\14\30\3\0\32\30\24\0\3\30"+
    "\6\0\30\30\3\0\1\u010c\31\30\24\0\3\30\6\0"+
    "\30\30\3\0\12\30\1\u010d\17\30\24\0\3\30\6\0"+
    "\30\30\3\0\2\30\1\u010e\27\30\24\0\3\30\6\0"+
    "\30\30\3\0\4\30\1\u010f\25\30\24\0\3\30\6\0"+
    "\30\30\3\0\13\30\1\u0110\16\30\24\0\3\30\6\0"+
    "\30\30\3\0\23\30\1\u0111\6\30\24\0\3\30\6\0"+
    "\30\30\3\0\21\30\1\u0112\10\30\24\0\3\30\6\0"+
    "\30\30\3\0\2\30\1\u0113\27\30\24\0\3\30\6\0"+
    "\30\30\3\0\22\30\1\u0114\7\30\24\0\3\30\6\0"+
    "\30\30\3\0\16\30\1\u0115\3\30\1\u0116\1\30\1\u0117"+
    "\5\30\24\0\3\30\6\0\30\30\3\0\10\30\1\u0118"+
    "\21\30\24\0\3\30\6\0\30\30\3\0\22\30\1\u0119"+
    "\7\30\24\0\3\30\6\0\30\30\3\0\23\30\1\u011a"+
    "\6\30\24\0\3\30\6\0\30\30\3\0\7\30\1\u011b"+
    "\22\30\24\0\3\30\6\0\4\30\1\u011c\23\30\3\0"+
    "\32\30\24\0\3\30\6\0\30\30\3\0\30\30\1\u011d"+
    "\1\30\24\0\3\30\6\0\30\30\3\0\4\30\1\u011e"+
    "\25\30\24\0\3\30\6\0\30\30\3\0\6\30\1\u011f"+
    "\23\30\24\0\3\30\6\0\30\30\3\0\5\30\1\u0120"+
    "\24\30\24\0\3\30\6\0\30\30\3\0\4\30\1\u0121"+
    "\25\30\24\0\3\30\6\0\30\30\3\0\23\30\1\u0122"+
    "\6\30\24\0\3\30\6\0\30\30\3\0\23\30\1\u0123"+
    "\6\30\24\0\3\30\6\0\30\30\3\0\4\30\1\u0124"+
    "\25\30\24\0\3\30\6\0\30\30\3\0\16\30\1\u0125"+
    "\13\30\24\0\3\30\6\0\30\30\3\0\4\30\1\u0126"+
    "\25\30\24\0\3\30\6\0\30\30\3\0\30\30\1\u0127"+
    "\1\30\24\0\3\30\6\0\30\30\3\0\1\30\1\u0128"+
    "\30\30\24\0\3\30\6\0\30\30\3\0\25\30\1\u0129"+
    "\4\30\24\0\3\30\6\0\30\30\3\0\13\30\1\u012a"+
    "\16\30\24\0\3\30\6\0\30\30\3\0\17\30\1\u012b"+
    "\12\30\24\0\3\30\6\0\30\30\3\0\10\30\1\u012c"+
    "\21\30\24\0\3\30\6\0\30\30\3\0\7\30\1\u012d"+
    "\22\30\24\0\3\30\6\0\30\30\3\0\22\30\1\u012e"+
    "\7\30\24\0\3\30\6\0\30\30\3\0\22\30\1\u012f"+
    "\7\30\24\0\3\30\6\0\30\30\3\0\25\30\1\u0130"+
    "\4\30\24\0\3\30\6\0\30\30\3\0\10\30\1\u0131"+
    "\21\30\24\0\3\30\6\0\30\30\3\0\13\30\1\u0132"+
    "\16\30\24\0\3\30\6\0\30\30\3\0\23\30\1\u0133"+
    "\6\30\24\0\3\30\6\0\30\30\3\0\4\30\1\u0134"+
    "\25\30\24\0\3\30\6\0\30\30\3\0\4\30\1\u0135"+
    "\25\30\24\0\3\30\6\0\30\30\3\0\23\30\1\u0136"+
    "\6\30\24\0\3\30\6\0\30\30\3\0\23\30\1\u0137"+
    "\6\30\24\0\3\30\6\0\30\30\3\0\13\30\1\u0138"+
    "\16\30\3\0\16\u0139\1\u013a\103\u0139\66\0\1\u013b\54\0"+
    "\3\30\6\0\22\30\1\u013c\5\30\3\0\32\30\24\0"+
    "\3\30\6\0\30\30\3\0\13\30\1\u013d\16\30\24\0"+
    "\3\30\6\0\2\30\1\u013e\25\30\3\0\32\30\40\0"+
    "\1\u013f\32\0\1\u013f\105\0\1\u0140\33\0\1\u0140\67\0"+
    "\1\u0141\33\0\1\u0141\51\0\1\u0142\32\0\1\u0142\56\0"+
    "\1\u0143\32\0\1\u0143\74\0\1\u0144\32\0\1\u0144\77\0"+
    "\1\u0145\32\0\1\u0145\64\0\1\u0146\32\0\1\u0146\73\0"+
    "\1\u0147\33\0\1\u0147\63\0\1\u0148\33\0\1\u0148\60\0"+
    "\1\u0149\32\0\1\u0149\53\0\1\u014a\32\0\1\u014a\114\0"+
    "\1\u014b\33\0\1\u014b\61\0\1\u014c\33\0\1\u014c\32\0"+
    "\3\30\6\0\30\30\3\0\10\30\1\u014d\21\30\24\0"+
    "\3\30\6\0\30\30\3\0\25\30\1\u014e\4\30\24\0"+
    "\3\30\6\0\10\30\1\u014f\17\30\3\0\32\30\24\0"+
    "\3\30\6\0\20\30\1\u0150\7\30\3\0\32\30\24\0"+
    "\3\30\6\0\14\30\1\u0151\13\30\3\0\32\30\24\0"+
    "\3\30\6\0\1\u0152\27\30\3\0\32\30\35\0\1\u0153"+
    "\137\0\1\u0154\72\0\3\30\6\0\4\30\1\u0155\23\30"+
    "\3\0\32\30\24\0\3\30\6\0\1\u0156\27\30\3\0"+
    "\32\30\24\0\3\30\6\0\20\30\1\u0157\7\30\3\0"+
    "\32\30\24\0\3\30\6\0\25\30\1\u0158\2\30\3\0"+
    "\32\30\24\0\3\30\6\0\30\30\3\0\1\u0159\31\30"+
    "\24\0\3\30\6\0\4\30\1\u015a\23\30\3\0\32\30"+
    "\24\0\3\30\6\0\30\30\3\0\6\30\1\u015b\23\30"+
    "\24\0\3\30\6\0\30\30\3\0\12\30\1\u015c\17\30"+
    "\24\0\3\30\6\0\30\30\3\0\4\30\1\u015d\25\30"+
    "\24\0\3\30\6\0\30\30\3\0\4\30\1\u015e\25\30"+
    "\24\0\3\30\6\0\30\30\3\0\12\30\1\u015f\17\30"+
    "\24\0\3\30\6\0\30\30\3\0\22\30\1\u0160\7\30"+
    "\24\0\3\30\6\0\30\30\3\0\21\30\1\u0161\10\30"+
    "\24\0\3\30\6\0\30\30\3\0\14\30\1\u0162\15\30"+
    "\24\0\3\30\6\0\30\30\3\0\14\30\1\u0163\15\30"+
    "\24\0\3\30\6\0\30\30\3\0\4\30\1\u0164\25\30"+
    "\21\0\1\u0165\2\0\3\30\6\0\30\30\3\0\32\30"+
    "\24\0\3\30\6\0\30\30\3\0\22\30\1\u0166\7\30"+
    "\24\0\3\30\6\0\30\30\3\0\13\30\1\u0167\16\30"+
    "\24\0\3\30\6\0\30\30\3\0\15\30\1\u0168\14\30"+
    "\24\0\3\30\6\0\30\30\3\0\7\30\1\u0169\22\30"+
    "\24\0\3\30\6\0\30\30\3\0\6\30\1\u016a\23\30"+
    "\24\0\3\30\6\0\30\30\3\0\10\30\1\u016b\21\30"+
    "\24\0\3\30\6\0\30\30\3\0\16\30\1\u016c\13\30"+
    "\24\0\3\30\6\0\30\30\3\0\4\30\1\u016d\25\30"+
    "\24\0\3\30\6\0\30\30\3\0\4\30\1\u016e\25\30"+
    "\24\0\3\30\6\0\30\30\3\0\10\30\1\u016f\21\30"+
    "\24\0\3\30\6\0\30\30\3\0\13\30\1\u0170\16\30"+
    "\24\0\3\30\6\0\30\30\3\0\16\30\1\u0171\13\30"+
    "\24\0\3\30\6\0\30\30\3\0\23\30\1\u0172\6\30"+
    "\21\0\1\u0173\2\0\3\30\6\0\30\30\3\0\32\30"+
    "\24\0\3\30\6\0\30\30\3\0\4\30\1\u0174\25\30"+
    "\24\0\3\30\6\0\30\30\3\0\15\30\1\u0175\14\30"+
    "\21\0\1\u0176\2\0\3\30\6\0\30\30\3\0\32\30"+
    "\24\0\3\30\6\0\30\30\3\0\4\30\1\u0177\25\30"+
    "\24\0\3\30\6\0\30\30\3\0\7\30\1\u0178\22\30"+
    "\24\0\3\30\6\0\30\30\3\0\16\30\1\u0179\13\30"+
    "\3\0\16\u0139\1\u017a\103\u0139\16\0\1\u013a\11\0\1\3"+
    "\156\0\1\u017b\55\0\3\30\6\0\30\30\2\0\1\u017c"+
    "\32\30\24\0\3\30\6\0\22\30\1\u017d\5\30\3\0"+
    "\32\30\64\0\1\u017e\33\0\1\u017e\60\0\1\u017f\33\0"+
    "\1\u017f\45\0\1\u0180\32\0\1\u0180\67\0\1\u0181\32\0"+
    "\1\u0181\106\0\1\u0182\33\0\1\u0182\54\0\1\u0183\32\0"+
    "\1\u0183\64\0\1\u0184\32\0\1\u0184\66\0\1\u0185\32\0"+
    "\1\u0185\62\0\1\u0186\32\0\1\u0186\76\0\1\u0187\32\0"+
    "\1\u0187\74\0\1\u0188\33\0\1\u0188\56\0\1\u0189\32\0"+
    "\1\u0189\42\0\3\30\6\0\30\30\3\0\4\30\1\u018a"+
    "\25\30\24\0\3\30\6\0\30\30\3\0\1\u018b\31\30"+
    "\24\0\3\30\6\0\13\30\1\u018c\14\30\3\0\32\30"+
    "\24\0\3\30\6\0\22\30\1\u018d\5\30\3\0\32\30"+
    "\24\0\3\30\6\0\17\30\1\u018e\10\30\3\0\32\30"+
    "\24\0\3\30\6\0\20\30\1\u018f\7\30\3\0\32\30"+
    "\50\0\1\u0190\106\0\1\u0191\110\0\3\30\6\0\21\30"+
    "\1\u0192\6\30\3\0\32\30\24\0\3\30\6\0\22\30"+
    "\1\u0193\5\30\3\0\32\30\24\0\3\30\6\0\21\30"+
    "\1\u0194\6\30\3\0\32\30\24\0\3\30\6\0\7\30"+
    "\1\u0195\20\30\3\0\32\30\24\0\3\30\6\0\30\30"+
    "\3\0\15\30\1\u0196\14\30\24\0\3\30\6\0\30\30"+
    "\3\0\21\30\1\u0197\10\30\24\0\3\30\6\0\30\30"+
    "\3\0\1\u0198\31\30\24\0\3\30\6\0\30\30\3\0"+
    "\21\30\1\u0199\10\30\24\0\3\30\6\0\30\30\3\0"+
    "\1\30\1\u019a\30\30\24\0\3\30\6\0\30\30\3\0"+
    "\15\30\1\u019b\14\30\24\0\3\30\6\0\30\30\3\0"+
    "\1\u019c\31\30\75\0\1\u019d\14\0\1\u019e\33\0\3\30"+
    "\6\0\30\30\3\0\10\30\1\u019f\21\30\24\0\3\30"+
    "\6\0\30\30\3\0\4\30\1\u01a0\25\30\24\0\3\30"+
    "\6\0\30\30\3\0\23\30\1\u01a1\6\30\24\0\3\30"+
    "\6\0\30\30\3\0\4\30\1\u01a2\25\30\24\0\3\30"+
    "\6\0\30\30\3\0\5\30\1\u01a3\24\30\24\0\3\30"+
    "\6\0\30\30\3\0\15\30\1\u01a4\14\30\24\0\3\30"+
    "\6\0\30\30\3\0\21\30\1\u01a5\10\30\24\0\3\30"+
    "\6\0\30\30\3\0\2\30\1\u01a6\27\30\24\0\3\30"+
    "\6\0\30\30\3\0\4\30\1\u01a7\25\30\112\0\1\u01a8"+
    "\33\0\3\30\6\0\30\30\3\0\21\30\1\u01a9\10\30"+
    "\24\0\3\30\6\0\30\30\3\0\6\30\1\u01aa\23\30"+
    "\70\0\1\u01ab\55\0\3\30\6\0\30\30\3\0\26\30"+
    "\1\u01ac\3\30\3\0\16\u0139\1\u01ad\103\u0139\100\0\1\u01ae"+
    "\63\0\1\u01af\100\0\3\30\6\0\4\30\1\u01b0\23\30"+
    "\3\0\32\30\53\0\1\u01b1\32\0\1\u01b1\72\0\1\u01b2"+
    "\33\0\1\u01b2\61\0\1\u01b3\32\0\1\u01b3\67\0\1\u01b4"+
    "\32\0\1\u01b4\51\0\1\u01b5\32\0\1\u01b5\64\0\1\u01b6"+
    "\32\0\1\u01b6\72\0\1\u01b7\32\0\1\u01b7\51\0\3\30"+
    "\6\0\30\30\3\0\21\30\1\u01b8\10\30\24\0\3\30"+
    "\6\0\1\u01b9\27\30\3\0\32\30\24\0\3\30\6\0"+
    "\30\30\2\0\1\u01ba\32\30\41\0\1\u01bb\120\0\1\u01bc"+
    "\105\0\3\30\6\0\21\30\1\u01bd\6\30\3\0\32\30"+
    "\24\0\3\30\6\0\4\30\1\u01be\23\30\3\0\32\30"+
    "\24\0\3\30\6\0\10\30\1\u01bf\17\30\3\0\32\30"+
    "\24\0\3\30\6\0\30\30\3\0\1\u01c0\31\30\24\0"+
    "\3\30\6\0\30\30\3\0\16\30\1\u01c1\13\30\24\0"+
    "\3\30\6\0\30\30\3\0\15\30\1\u01c2\14\30\24\0"+
    "\3\30\6\0\30\30\3\0\16\30\1\u01c3\13\30\24\0"+
    "\3\30\6\0\30\30\3\0\13\30\1\u01c4\16\30\70\0"+
    "\1\u01c5\131\0\1\u01c6\45\0\3\30\6\0\30\30\3\0"+
    "\1\u01c7\31\30\24\0\3\30\6\0\30\30\3\0\14\30"+
    "\1\u01c8\15\30\24\0\3\30\6\0\30\30\3\0\21\30"+
    "\1\u01c9\10\30\24\0\3\30\6\0\30\30\3\0\30\30"+
    "\1\u01ca\1\30\24\0\3\30\6\0\30\30\3\0\12\30"+
    "\1\u01cb\17\30\74\0\1\u01cc\130\0\1\u01cd\21\0\16\u0139"+
    "\1\u01ad\11\u0139\1\3\71\u0139\47\0\1\u01ce\73\0\3\30"+
    "\6\0\20\30\1\u01cf\7\30\3\0\32\30\52\0\1\u01d0"+
    "\32\0\1\u01d0\66\0\1\u01d1\32\0\1\u01d1\73\0\1\u01d2"+
    "\33\0\1\u01d2\65\0\1\u01d3\33\0\1\u01d3\63\0\1\u01d4"+
    "\33\0\1\u01d4\34\0\3\30\6\0\20\30\1\u01d5\7\30"+
    "\3\0\32\30\52\0\1\u01d6\104\0\1\u01d7\110\0\3\30"+
    "\6\0\30\30\2\0\1\u01d8\32\30\24\0\3\30\6\0"+
    "\13\30\1\u01d9\14\30\3\0\32\30\24\0\3\30\6\0"+
    "\30\30\3\0\24\30\1\u01da\5\30\24\0\3\30\6\0"+
    "\30\30\3\0\27\30\1\u01db\2\30\104\0\1\u01dc\136\0"+
    "\1\u01dd\24\0\3\30\6\0\30\30\3\0\4\30\1\u01de"+
    "\25\30\111\0\1\u01df\110\0\1\u01e0\63\0\1\u01e1\103\0"+
    "\3\30\6\0\30\30\2\0\1\u01e2\32\30\45\0\1\u01e3"+
    "\32\0\1\u01e3\62\0\1\u01e4\32\0\1\u01e4\51\0\3\30"+
    "\6\0\30\30\2\0\1\u01e5\32\30\60\0\1\u01e6\120\0"+
    "\1\u01e7\66\0\3\u01e8\6\0\30\u01e8\3\0\32\u01e8\24\0"+
    "\3\30\6\0\4\30\1\u01e9\23\30\3\0\32\30\24\0"+
    "\3\30\6\0\30\30\3\0\15\30\1\u01ea\14\30\100\0"+
    "\1\u01eb\115\0\1\u01ec\51\0\3\30\6\0\30\30\3\0"+
    "\15\30\1\u01ed\14\30\100\0\1\u01ee\117\0\1\u01ef\76\0"+
    "\1\u01f0\103\0\1\u01f1\136\0\1\u01f2\32\0\1\u01f2\51\0"+
    "\1\u01f3\32\0\1\u01f3\103\0\1\u01f4\120\0\1\u01f5\123\0"+
    "\1\u01f6\72\0\3\30\6\0\30\30\3\0\3\30\1\u01f7"+
    "\26\30\103\0\1\u01f8\42\0\3\30\6\0\30\30\3\0"+
    "\23\30\1\u01f9\6\30\75\0\1\u01fa\131\0\1\u01fb\64\0"+
    "\1\u01fc\114\0\1\u01fd\32\0\1\u01fd\103\0\1\u01fe\116\0"+
    "\1\u01ff\164\0\1\u0200\25\0\3\30\6\0\1\30\1\u0201"+
    "\26\30\3\0\32\30\41\0\1\u0202\131\0\1\u0203\115\0"+
    "\1\u0204\100\0\3\30\6\0\30\30\3\0\30\30\1\u0205"+
    "\1\30\35\0\1\u0206\137\0\1\u0207\72\0\3\30\6\0"+
    "\10\30\1\u0208\17\30\3\0\32\30\57\0\1\u0209\66\0"+
    "\3\30\6\0\30\30\3\0\3\30\1\u020a\26\30\53\0"+
    "\1\u020b\123\0\1\u020c\111\0\1\u020d\127\0\1\u020e\51\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[33620];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\2\1\4\11\1\1\1\11"+
    "\2\1\2\11\24\1\2\11\23\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\0\1\11\1\0\2\1\1\0\1\11"+
    "\2\1\1\0\3\11\1\0\4\1\1\0\73\1\3\11"+
    "\1\0\1\1\2\0\4\1\7\0\1\11\2\0\13\1"+
    "\1\0\64\1\1\11\2\0\3\1\1\0\1\11\3\0"+
    "\1\11\12\0\12\1\2\0\63\1\3\0\3\1\2\0"+
    "\1\11\2\0\1\11\10\0\6\1\2\0\20\1\1\0"+
    "\15\1\1\0\2\1\1\0\3\1\3\0\1\1\1\11"+
    "\1\0\2\11\1\0\1\11\3\0\1\11\2\0\6\1"+
    "\2\0\13\1\2\0\11\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\11\1\0\1\1\1\0\1\11\4\0\1\11"+
    "\2\1\2\0\1\11\10\1\2\0\5\1\3\0\1\1"+
    "\2\11\1\0\1\11\1\0\1\1\3\0\3\1\2\0"+
    "\1\1\11\0\3\1\1\0\1\11\1\1\2\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\1\1\0\1\1"+
    "\2\11\1\0\1\11\2\0\1\11\1\1\1\0\1\11"+
    "\1\0\1\1\1\0\1\11\1\1\1\0\1\1\3\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[526];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    /* CODIGO A√ëADIDO */    


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public EtiquetadoLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    /* CODIGO EJECUTADO AL FINAL DEL ANALISIS */
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 130: break;
          case 2:
            { /* IGNORAR */
            }
            // fall through
          case 131: break;
          case 3:
            { return new Symbol(NOT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 132: break;
          case 4:
            { return new Symbol(IDENTIFICADOR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 133: break;
          case 5:
            { return new Symbol(COM_SIMP, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 134: break;
          case 6:
            { return new Symbol(PARA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 135: break;
          case 7:
            { return new Symbol(PARC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 136: break;
          case 8:
            { return new Symbol(MULTIPLICACION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 137: break;
          case 9:
            { return new Symbol(SUMA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 138: break;
          case 10:
            { return new Symbol(RESTA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 139: break;
          case 11:
            { return new Symbol(DIVISION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 140: break;
          case 12:
            { return new Symbol(D_INTEGER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 141: break;
          case 13:
            { return new Symbol(PUNTOS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 142: break;
          case 14:
            { return new Symbol(PUNTO_COMA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 143: break;
          case 15:
            { return new Symbol(MENOR_QUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 144: break;
          case 16:
            { return new Symbol(IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 145: break;
          case 17:
            { return new Symbol(MAYOR_QUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 146: break;
          case 18:
            { return new Symbol(ALFANUMERICO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 147: break;
          case 19:
            { return new Symbol(CORA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 148: break;
          case 20:
            { return new Symbol(CORC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 149: break;
          case 21:
            { return new Symbol(LLAA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 150: break;
          case 22:
            { return new Symbol(BARRA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 151: break;
          case 23:
            { return new Symbol(LLAC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 152: break;
          case 24:
            { return new Symbol(DIFERENTE_IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 153: break;
          case 25:
            { return new Symbol(AND, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 154: break;
          case 26:
            { return new Symbol(PORCENTAJE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 155: break;
          case 27:
            { return new Symbol(D_DECIMAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 156: break;
          case 28:
            { return new Symbol(MENOR_IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 157: break;
          case 29:
            { return new Symbol(IGUAL_IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 158: break;
          case 30:
            { return new Symbol(MAYOR_IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 159: break;
          case 31:
            { return new Symbol(IF, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 160: break;
          case 32:
            { return new Symbol(ID, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 161: break;
          case 33:
            { return new Symbol(OR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 162: break;
          case 34:
            { return new Symbol(D_STRING, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 163: break;
          case 35:
            { return new Symbol(D_CHAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 164: break;
          case 36:
            { return new Symbol(PIXELES, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 165: break;
          case 37:
            { return new Symbol(ASC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 166: break;
          case 38:
            { return new Symbol(P, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 167: break;
          case 39:
            { return new Symbol(END, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 168: break;
          case 40:
            { return new Symbol(ALT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 169: break;
          case 41:
            { return new Symbol(RED, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 170: break;
          case 42:
            { return new Symbol(ROW, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 171: break;
          case 43:
            { return new Symbol(SRC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 172: break;
          case 44:
            { return new Symbol(BR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 173: break;
          case 45:
            { return new Symbol(H1, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 174: break;
          case 46:
            { return new Symbol(DESC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 175: break;
          case 47:
            { return new Symbol(ELSE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 176: break;
          case 48:
            { return new Symbol(EXIT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 177: break;
          case 49:
            { return new Symbol(INIT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 178: break;
          case 50:
            { return new Symbol(THEN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 179: break;
          case 51:
            { return new Symbol(AQUA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 180: break;
          case 52:
            { return new Symbol(BLUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 181: break;
          case 53:
            { return new Symbol(CHAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 182: break;
          case 54:
            { return new Symbol(COLS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 183: break;
          case 55:
            { return new Symbol(GRAY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 184: break;
          case 56:
            { return new Symbol(HREF, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 185: break;
          case 57:
            { return new Symbol(LEFT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 186: break;
          case 58:
            { return new Symbol(LIME, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 187: break;
          case 59:
            { return new Symbol(NAME, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 188: break;
          case 60:
            { return new Symbol(NAVY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 189: break;
          case 61:
            { return new Symbol(ROWS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 190: break;
          case 62:
            { return new Symbol(TEAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 191: break;
          case 63:
            { return new Symbol(TEXT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 192: break;
          case 64:
            { return new Symbol(TRUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 193: break;
          case 65:
            { return new Symbol(TYPE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 194: break;
          case 66:
            { return new Symbol(ARIAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 195: break;
          case 67:
            { return new Symbol(DIV, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 196: break;
          case 68:
            { return new Symbol(IMG, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 197: break;
          case 69:
            { return new Symbol(WHILE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 198: break;
          case 70:
            { return new Symbol(BLACK, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 199: break;
          case 71:
            { return new Symbol(CLASS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 200: break;
          case 72:
            { return new Symbol(COLOR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 201: break;
          case 73:
            { return new Symbol(FALSE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 202: break;
          case 74:
            { return new Symbol(GREEN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 203: break;
          case 75:
            { return new Symbol(OLIVE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 204: break;
          case 76:
            { return new Symbol(RADIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 205: break;
          case 77:
            { return new Symbol(RIGHT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 206: break;
          case 78:
            { return new Symbol(WHITE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 207: break;
          case 79:
            { return new Symbol(WIDTH, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 208: break;
          case 80:
            { return new Symbol(BODY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 209: break;
          case 81:
            { return new Symbol(GCIC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 210: break;
          case 82:
            { return new Symbol(HEAD, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 211: break;
          case 83:
            { return new Symbol(LINK, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 212: break;
          case 84:
            { return new Symbol(SPAM, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 213: break;
          case 85:
            { return new Symbol(GENEVA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 214: break;
          case 86:
            { return new Symbol(HUNTIL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 215: break;
          case 87:
            { return new Symbol(INSERT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 216: break;
          case 88:
            { return new Symbol(REPEAT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 217: break;
          case 89:
            { return new Symbol(CENTER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 218: break;
          case 90:
            { return new Symbol(COLUMN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 219: break;
          case 91:
            { return new Symbol(HEIGHT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 220: break;
          case 92:
            { return new Symbol(MAROON, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 221: break;
          case 93:
            { return new Symbol(NUMBER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 222: break;
          case 94:
            { return new Symbol(PURPLE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 223: break;
          case 95:
            { return new Symbol(SILVER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 224: break;
          case 96:
            { return new Symbol(STRING, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 225: break;
          case 97:
            { return new Symbol(YELLOW, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 226: break;
          case 98:
            { return new Symbol(GLOBAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 227: break;
          case 99:
            { return new Symbol(INPUT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 228: break;
          case 100:
            { return new Symbol(TITLE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 229: break;
          case 101:
            { return new Symbol(COURIER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 230: break;
          case 102:
            { return new Symbol(ON_LOAD, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 231: break;
          case 103:
            { return new Symbol(REVERSE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 232: break;
          case 104:
            { return new Symbol(VERDANA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 233: break;
          case 105:
            { return new Symbol(BOOLEAN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 234: break;
          case 106:
            { return new Symbol(DECIMAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 235: break;
          case 107:
            { return new Symbol(FUCHSIA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 236: break;
          case 108:
            { return new Symbol(INTEGER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 237: break;
          case 109:
            { return new Symbol(JUSTIFY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 238: break;
          case 110:
            { return new Symbol(ONCLICK, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 239: break;
          case 111:
            { return new Symbol(BUTTON, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 240: break;
          case 112:
            { return new Symbol(OPTION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 241: break;
          case 113:
            { return new Symbol(SELECT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 242: break;
          case 114:
            { return new Symbol(CHECKBOX, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 243: break;
          case 115:
            { return new Symbol(PROCESS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 244: break;
          case 116:
            { return new Symbol(THENWHILE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 245: break;
          case 117:
            { return new Symbol(FONTSIZE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 246: break;
          case 118:
            { return new Symbol(ALERT_INFO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 247: break;
          case 119:
            { return new Symbol(TEXTAREA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 248: break;
          case 120:
            { return new Symbol(LETPAR_NUM, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 249: break;
          case 121:
            { return new Symbol(BACKGROUND, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 250: break;
          case 122:
            { return new Symbol(SANS_SERIF, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 251: break;
          case 123:
            { return new Symbol(TEXTALIGN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 252: break;
          case 124:
            { return new Symbol(SCRIPTING, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 253: break;
          case 125:
            { return new Symbol(FONTFAMILY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 254: break;
          case 126:
            { return new Symbol(LETIMPAR_NUM, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 255: break;
          case 127:
            { return new Symbol(NUM_ALEATORIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 256: break;
          case 128:
            { return new Symbol(GETBYID, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 257: break;
          case 129:
            { return new Symbol(CARACTER_ALEATORIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 258: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
