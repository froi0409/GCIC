// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: EtiquetadoLexer.jflex

//Secci√≥n de Importaciones
package com.froi.pruebas.gramaticas;
import java_cup.runtime.*;
import static com.froi.pruebas.gramaticas.EtiquetadoParserSym.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class EtiquetadoLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\u10df\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\1\5\1\6\1\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\0\1\17\1\20\1\21\1\22"+
    "\1\23\10\24\1\25\1\26\1\27\1\30\1\31\1\0"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\44\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\44\1\63\1\0\1\64\1\0\1\65"+
    "\1\0\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114"+
    "\1\115\1\116\1\117\1\120\1\121\1\122\103\0\1\44"+
    "\7\0\1\44\3\0\1\44\5\0\1\44\6\0\1\44"+
    "\6\0\1\44\7\0\1\44\3\0\1\44\5\0\1\44"+
    "\6\0\1\44\1\0\1\44\u011b\0\2\12\346\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\2\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\1\16\22\1\23\1\24"+
    "\16\22\1\25\1\26\1\27\1\2\1\30\32\0\1\31"+
    "\1\0\2\14\1\32\1\0\1\33\1\34\1\35\1\0"+
    "\3\22\1\4\5\22\1\36\24\22\1\37\12\22\1\40"+
    "\2\0\1\41\54\0\1\42\36\0\1\43\2\0\1\22"+
    "\1\44\1\22\7\4\1\45\2\4\2\22\1\46\6\22"+
    "\1\4\5\22\1\47\17\22\1\50\5\22\1\51\1\52"+
    "\36\0\1\53\42\0\2\22\1\4\1\54\3\4\1\55"+
    "\12\4\1\56\1\57\1\60\1\22\1\61\3\22\2\4"+
    "\3\22\1\62\3\22\1\63\2\22\1\64\5\22\1\65"+
    "\1\22\1\66\1\22\1\67\2\22\1\70\1\71\1\22"+
    "\40\0\1\72\26\0\1\73\1\0\1\74\11\0\2\22"+
    "\2\4\1\75\2\4\1\76\10\4\4\22\2\4\4\22"+
    "\1\77\2\22\1\100\1\101\1\22\1\102\1\4\5\22"+
    "\1\4\1\103\41\0\1\104\1\0\1\105\4\0\1\106"+
    "\2\0\1\107\1\110\1\0\1\111\7\0\1\112\1\113"+
    "\4\0\1\4\1\22\1\114\1\4\1\115\1\116\1\4"+
    "\1\117\3\4\1\120\2\4\1\121\1\122\2\22\2\4"+
    "\1\22\1\123\5\22\2\4\1\22\1\124\2\22\1\125"+
    "\1\4\25\0\1\126\3\0\1\127\4\0\1\130\3\0"+
    "\1\131\1\0\1\132\1\133\2\0\1\134\2\0\1\135"+
    "\1\4\1\22\1\4\1\136\4\4\1\137\1\22\2\4"+
    "\1\140\1\22\1\141\2\22\1\142\1\143\2\4\1\22"+
    "\1\144\1\145\1\4\17\0\1\146\1\0\1\147\1\0"+
    "\1\150\2\0\1\151\1\152\1\153\1\0\1\154\1\155"+
    "\1\4\1\22\1\156\1\157\1\4\1\160\1\4\1\22"+
    "\3\4\2\22\2\4\1\22\1\4\6\0\1\161\1\162"+
    "\1\0\1\163\1\164\1\0\7\4\1\165\1\166\1\22"+
    "\1\4\1\167\1\22\1\4\2\0\1\170\1\0\1\171"+
    "\2\4\1\172\1\4\1\173\1\4\1\174\1\4\1\22"+
    "\1\175\2\0\1\4\1\176\2\4\1\177\1\22\1\0"+
    "\1\200\1\4\1\201\1\4\1\22\1\4\1\202\1\22"+
    "\1\4\1\203\3\4\1\204";

  private static int [] zzUnpackAction() {
    int [] result = new int[768];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\123\0\123\0\246\0\371\0\u014c\0\u019f\0\u01f2"+
    "\0\123\0\123\0\123\0\123\0\u0245\0\123\0\u0298\0\u02eb"+
    "\0\123\0\123\0\u033e\0\u0391\0\u03e4\0\u0437\0\u048a\0\u04dd"+
    "\0\u0530\0\u0583\0\u05d6\0\u0629\0\u067c\0\u06cf\0\u0722\0\u0775"+
    "\0\u07c8\0\u081b\0\u086e\0\u08c1\0\123\0\123\0\u0914\0\u0967"+
    "\0\u09ba\0\u0a0d\0\u0a60\0\u0ab3\0\u0b06\0\u0b59\0\u0bac\0\u0bff"+
    "\0\u0c52\0\u0ca5\0\u0cf8\0\u0d4b\0\123\0\u0d9e\0\123\0\u0df1"+
    "\0\123\0\u0e44\0\u0e97\0\u0eea\0\u0f3d\0\u0f90\0\u0fe3\0\u1036"+
    "\0\u1089\0\u10dc\0\u112f\0\u1182\0\u11d5\0\u1228\0\u127b\0\u12ce"+
    "\0\u1321\0\u1374\0\u13c7\0\u141a\0\u146d\0\u14c0\0\u1513\0\u1566"+
    "\0\u15b9\0\u160c\0\u165f\0\123\0\u16b2\0\u1705\0\u1758\0\u17ab"+
    "\0\u17fe\0\123\0\123\0\123\0\u1851\0\u18a4\0\u18f7\0\u194a"+
    "\0\u199d\0\u19f0\0\u1a43\0\u1a96\0\u1ae9\0\u1b3c\0\u04dd\0\u1b8f"+
    "\0\u1be2\0\u1c35\0\u1c88\0\u1cdb\0\u1d2e\0\u1d81\0\u1dd4\0\u1e27"+
    "\0\u1e7a\0\u1ecd\0\u1f20\0\u1f73\0\u1fc6\0\u2019\0\u206c\0\u20bf"+
    "\0\u2112\0\u2165\0\u21b8\0\u04dd\0\u220b\0\u225e\0\u22b1\0\u2304"+
    "\0\u2357\0\u23aa\0\u23fd\0\u2450\0\u24a3\0\u24f6\0\123\0\u2549"+
    "\0\u259c\0\123\0\u25ef\0\u2642\0\u2695\0\u26e8\0\u273b\0\u278e"+
    "\0\u27e1\0\u2834\0\u2887\0\u28da\0\u292d\0\u2980\0\u29d3\0\u2a26"+
    "\0\u2a79\0\u2acc\0\u2b1f\0\u2b72\0\u2bc5\0\u2c18\0\u2c6b\0\u2cbe"+
    "\0\u2d11\0\u2d64\0\u2db7\0\u2e0a\0\u2e5d\0\u2eb0\0\u2f03\0\u2f56"+
    "\0\u2fa9\0\u2ffc\0\u304f\0\u30a2\0\u30f5\0\u3148\0\u319b\0\u31ee"+
    "\0\u3241\0\u3294\0\u32e7\0\u333a\0\u338d\0\u33e0\0\123\0\u3433"+
    "\0\u3486\0\u34d9\0\u352c\0\u357f\0\u35d2\0\u3625\0\u3678\0\u36cb"+
    "\0\u371e\0\u3771\0\u37c4\0\u3817\0\u386a\0\u38bd\0\u3910\0\u3963"+
    "\0\u39b6\0\u3a09\0\u3a5c\0\u3aaf\0\u3b02\0\u3b55\0\u3ba8\0\u3bfb"+
    "\0\u3c4e\0\u3ca1\0\u3cf4\0\u3d47\0\u3d9a\0\123\0\u3ded\0\u3e40"+
    "\0\u3e93\0\u04dd\0\u3ee6\0\u3f39\0\u3f8c\0\u3fdf\0\u4032\0\u4085"+
    "\0\u40d8\0\u412b\0\u014c\0\u417e\0\u41d1\0\u4224\0\u4277\0\u04dd"+
    "\0\u42ca\0\u431d\0\u4370\0\u43c3\0\u4416\0\u4469\0\u44bc\0\u450f"+
    "\0\u4562\0\u45b5\0\u4608\0\u465b\0\u04dd\0\u46ae\0\u4701\0\u4754"+
    "\0\u47a7\0\u47fa\0\u484d\0\u48a0\0\u48f3\0\u4946\0\u4999\0\u49ec"+
    "\0\u4a3f\0\u4a92\0\u4ae5\0\u4b38\0\u04dd\0\u4b8b\0\u4bde\0\u4c31"+
    "\0\u4c84\0\u4cd7\0\123\0\123\0\u4d2a\0\u4d7d\0\u4dd0\0\u4e23"+
    "\0\u4e76\0\u4ec9\0\u4f1c\0\u4f6f\0\u4fc2\0\u5015\0\u5068\0\u50bb"+
    "\0\u510e\0\u5161\0\u51b4\0\u5207\0\u525a\0\u52ad\0\u5300\0\u5353"+
    "\0\u53a6\0\u53f9\0\u544c\0\u549f\0\u54f2\0\u5545\0\u5598\0\u55eb"+
    "\0\u563e\0\u5691\0\123\0\u56e4\0\u5737\0\u578a\0\u57dd\0\u5830"+
    "\0\u5883\0\u58d6\0\u5929\0\u597c\0\u59cf\0\u5a22\0\u5a75\0\u5ac8"+
    "\0\u5b1b\0\u5b6e\0\u5bc1\0\u5c14\0\u5c67\0\u5cba\0\u5d0d\0\u5d60"+
    "\0\u5db3\0\u5e06\0\u5e59\0\u5eac\0\u5eff\0\u5f52\0\u5fa5\0\u5ff8"+
    "\0\u604b\0\u609e\0\u60f1\0\u6144\0\u6197\0\u61ea\0\u623d\0\u6290"+
    "\0\u014c\0\u62e3\0\u6336\0\u6389\0\u014c\0\u63dc\0\u642f\0\u6482"+
    "\0\u64d5\0\u6528\0\u657b\0\u65ce\0\u6621\0\u6674\0\u66c7\0\u04dd"+
    "\0\u04dd\0\u04dd\0\u671a\0\u04dd\0\u676d\0\u67c0\0\u6813\0\u6866"+
    "\0\u68b9\0\u690c\0\u695f\0\u69b2\0\u6a05\0\u6a58\0\u6aab\0\u6afe"+
    "\0\u04dd\0\u6b51\0\u6ba4\0\u04dd\0\u6bf7\0\u6c4a\0\u6c9d\0\u6cf0"+
    "\0\u6d43\0\u04dd\0\u6d96\0\u04dd\0\u6de9\0\u04dd\0\u6e3c\0\u6e8f"+
    "\0\u04dd\0\u04dd\0\u6ee2\0\u6f35\0\u6f88\0\u6fdb\0\u702e\0\u7081"+
    "\0\u70d4\0\u7127\0\u717a\0\u71cd\0\u7220\0\u7273\0\u72c6\0\u7319"+
    "\0\u736c\0\u73bf\0\u7412\0\u7465\0\u74b8\0\u750b\0\u755e\0\u75b1"+
    "\0\u7604\0\u7657\0\u76aa\0\u76fd\0\u7750\0\u77a3\0\u77f6\0\u7849"+
    "\0\u789c\0\u78ef\0\u7942\0\123\0\u7995\0\u79e8\0\u7a3b\0\u7a8e"+
    "\0\u7ae1\0\u7b34\0\u7b87\0\u7bda\0\u7c2d\0\u7c80\0\u7cd3\0\u7d26"+
    "\0\u7d79\0\u7dcc\0\u7e1f\0\u7e72\0\u7ec5\0\u7f18\0\u7f6b\0\u7fbe"+
    "\0\u8011\0\u8064\0\123\0\u80b7\0\123\0\u810a\0\u815d\0\u81b0"+
    "\0\u8203\0\u8256\0\u82a9\0\u82fc\0\u834f\0\u83a2\0\u83f5\0\u8448"+
    "\0\u849b\0\u84ee\0\u014c\0\u8541\0\u8594\0\u014c\0\u85e7\0\u863a"+
    "\0\u868d\0\u86e0\0\u8733\0\u8786\0\u87d9\0\u882c\0\u887f\0\u88d2"+
    "\0\u8925\0\u8978\0\u89cb\0\u8a1e\0\u8a71\0\u8ac4\0\u8b17\0\u8b6a"+
    "\0\u04dd\0\u8bbd\0\u8c10\0\u04dd\0\u04dd\0\u8c63\0\u04dd\0\u8cb6"+
    "\0\u8d09\0\u8d5c\0\u8daf\0\u8e02\0\u8e55\0\u8ea8\0\u04dd\0\u8efb"+
    "\0\u8f4e\0\u8fa1\0\u8ff4\0\u9047\0\u909a\0\u90ed\0\u9140\0\u9193"+
    "\0\u91e6\0\u9239\0\u928c\0\u92df\0\u9332\0\u9385\0\u93d8\0\u942b"+
    "\0\u947e\0\u94d1\0\u9524\0\u9577\0\u95ca\0\u961d\0\u9670\0\u96c3"+
    "\0\u9716\0\u9769\0\u97bc\0\u980f\0\u9862\0\u98b5\0\u9908\0\u995b"+
    "\0\123\0\u99ae\0\123\0\u9a01\0\u9a54\0\u9aa7\0\u9afa\0\123"+
    "\0\u9b4d\0\u9ba0\0\123\0\123\0\u9bf3\0\123\0\u9c46\0\u9c99"+
    "\0\u9cec\0\u9d3f\0\u9d92\0\u9de5\0\u9e38\0\123\0\123\0\u9e8b"+
    "\0\u9ede\0\u9f31\0\u9f84\0\u9fd7\0\ua02a\0\u014c\0\ua07d\0\u014c"+
    "\0\u014c\0\ua0d0\0\u014c\0\ua123\0\ua176\0\ua1c9\0\u014c\0\ua21c"+
    "\0\ua26f\0\u04dd\0\u04dd\0\ua2c2\0\ua315\0\ua368\0\ua3bb\0\ua40e"+
    "\0\u04dd\0\ua461\0\ua4b4\0\ua507\0\ua55a\0\ua5ad\0\ua600\0\ua653"+
    "\0\ua6a6\0\u04dd\0\ua6f9\0\ua74c\0\u04dd\0\ua79f\0\ua7f2\0\ua845"+
    "\0\ua898\0\ua8eb\0\ua93e\0\ua991\0\ua9e4\0\uaa37\0\uaa8a\0\uaadd"+
    "\0\uab30\0\uab83\0\uabd6\0\uac29\0\uac7c\0\uaccf\0\uad22\0\uad75"+
    "\0\uadc8\0\uae1b\0\uae6e\0\123\0\uaec1\0\uaf14\0\uaf67\0\123"+
    "\0\uafba\0\ub00d\0\ub060\0\ub0b3\0\123\0\ub106\0\ub159\0\ub1ac"+
    "\0\123\0\ub1ff\0\123\0\123\0\ub252\0\ub2a5\0\123\0\ub2f8"+
    "\0\ub34b\0\123\0\ub39e\0\ub3f1\0\ub444\0\u014c\0\ub497\0\ub4ea"+
    "\0\ub53d\0\ub590\0\u014c\0\ub5e3\0\ub636\0\ub689\0\u014c\0\ub6dc"+
    "\0\u04dd\0\ub72f\0\ub782\0\u04dd\0\u04dd\0\ub7d5\0\ub828\0\ub87b"+
    "\0\u04dd\0\u04dd\0\ub8ce\0\ub921\0\ub974\0\ub9c7\0\uba1a\0\uba6d"+
    "\0\ubac0\0\ubb13\0\ubb66\0\ubbb9\0\ubc0c\0\ubc5f\0\ubcb2\0\ubd05"+
    "\0\ubd58\0\ubdab\0\123\0\ubdfe\0\123\0\ube51\0\123\0\ubea4"+
    "\0\ubef7\0\123\0\123\0\123\0\ubf4a\0\123\0\123\0\ubf9d"+
    "\0\ubff0\0\u014c\0\u014c\0\uc043\0\u014c\0\uc096\0\uc0e9\0\uc13c"+
    "\0\uc18f\0\uc1e2\0\uc235\0\uc288\0\uc2db\0\uc32e\0\uc381\0\uc3d4"+
    "\0\uc427\0\uc47a\0\uc4cd\0\uc520\0\uc573\0\uc5c6\0\123\0\123"+
    "\0\uc619\0\123\0\123\0\uc66c\0\uc6bf\0\uc712\0\uc765\0\uc7b8"+
    "\0\uc80b\0\uc85e\0\uc8b1\0\uc1e2\0\u04dd\0\uc904\0\uc957\0\u014c"+
    "\0\uc9aa\0\uc9fd\0\uca50\0\ucaa3\0\123\0\ucaf6\0\u014c\0\ucb49"+
    "\0\ucb9c\0\u014c\0\ucbef\0\u014c\0\ucc42\0\u04dd\0\ucc95\0\ucce8"+
    "\0\u014c\0\ucd3b\0\ucd8e\0\ucde1\0\u014c\0\uce34\0\uce87\0\u014c"+
    "\0\uceda\0\ucf2d\0\123\0\ucf80\0\u014c\0\ucfd3\0\ud026\0\ud079"+
    "\0\u014c\0\ud0cc\0\ud11f\0\u04dd\0\ud172\0\ud1c5\0\ud218\0\u014c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[768];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\4\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\2\1\16\1\17"+
    "\2\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\2\30\1\34\1\35\2\30"+
    "\1\36\1\30\1\37\1\40\1\41\1\42\1\30\1\43"+
    "\2\30\1\44\2\30\1\45\1\46\1\6\1\47\1\50"+
    "\1\51\1\52\1\30\1\53\1\54\1\55\1\56\4\30"+
    "\1\57\1\60\2\30\1\61\1\62\1\63\2\30\1\64"+
    "\3\30\1\65\1\66\1\67\130\0\1\70\22\0\1\71"+
    "\72\0\1\72\1\73\1\74\1\72\1\75\1\72\1\0"+
    "\13\72\1\76\2\77\6\72\1\100\1\72\1\101\3\72"+
    "\1\102\15\72\1\103\6\72\1\104\1\105\1\106\2\72"+
    "\1\107\1\110\2\72\1\111\1\72\1\112\1\113\1\114"+
    "\1\115\1\116\1\72\1\117\1\120\1\121\2\72\1\122"+
    "\1\72\1\123\4\72\7\0\1\6\7\0\1\6\2\0"+
    "\3\6\6\0\30\6\2\0\33\6\14\0\1\124\111\0"+
    "\4\125\1\0\5\125\1\0\110\125\7\0\1\6\7\0"+
    "\1\6\2\0\1\126\2\127\6\0\30\6\2\0\33\6"+
    "\12\0\1\6\7\0\1\6\1\130\1\0\3\30\6\0"+
    "\30\30\2\0\1\6\32\30\12\0\1\6\7\0\1\6"+
    "\1\130\1\0\3\20\6\0\30\30\2\0\1\6\32\30"+
    "\10\0\1\131\22\0\1\132\122\0\1\133\122\0\1\134"+
    "\166\0\1\135\35\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\13\30\1\136\5\30\1\137\6\30\2\0\1\6"+
    "\32\30\12\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\30\30\2\0\1\6\32\30\12\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\1\140\27\30\2\0\1\141\32\30"+
    "\12\0\1\6\7\0\1\6\2\0\3\30\6\0\4\30"+
    "\1\142\23\30\2\0\1\6\32\30\12\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\13\30\1\143\1\30\1\144"+
    "\10\30\1\145\1\30\2\0\1\6\32\30\12\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\23\30\1\146\4\30"+
    "\2\0\1\6\32\30\12\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\5\30\1\147\7\30\1\150\12\30\2\0"+
    "\1\6\32\30\12\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\4\30\1\151\23\30\2\0\1\6\32\30\12\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\23\30\1\152"+
    "\4\30\2\0\1\6\32\30\12\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\15\30\1\153\12\30\2\0\1\6"+
    "\32\30\12\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\20\30\1\154\7\30\2\0\1\6\32\30\12\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\4\30\1\155\23\30"+
    "\2\0\1\6\32\30\12\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\7\30\1\156\20\30\2\0\1\6\32\30"+
    "\12\0\1\6\7\0\1\6\2\0\3\30\6\0\7\30"+
    "\1\157\20\30\2\0\1\6\32\30\12\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\30\30\2\0\1\6\13\30"+
    "\1\160\16\30\12\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\30\30\2\0\1\6\1\161\15\30\1\162\13\30"+
    "\12\0\1\6\7\0\1\6\2\0\3\30\6\0\30\30"+
    "\2\0\1\141\7\30\1\163\3\30\1\164\2\30\1\165"+
    "\13\30\12\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\30\30\2\0\1\6\4\30\1\166\25\30\12\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\30\30\2\0\1\6"+
    "\1\167\15\30\1\170\13\30\12\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\30\30\2\0\1\6\4\30\1\171"+
    "\25\30\12\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\30\30\2\0\1\6\4\30\1\172\14\30\1\173\10\30"+
    "\12\0\1\6\7\0\1\6\2\0\3\30\6\0\30\30"+
    "\2\0\1\6\3\30\1\174\11\30\1\175\14\30\12\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\30\30\2\0"+
    "\1\6\1\176\31\30\12\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\30\30\2\0\1\6\15\30\1\177\14\30"+
    "\12\0\1\6\7\0\1\6\2\0\3\30\6\0\30\30"+
    "\2\0\1\6\16\30\1\200\13\30\12\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\30\30\2\0\1\6\21\30"+
    "\1\201\1\30\1\202\6\30\12\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\30\30\2\0\1\6\4\30\1\203"+
    "\14\30\1\204\6\30\1\205\1\30\12\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\30\30\2\0\1\6\10\30"+
    "\1\206\21\30\124\0\1\207\1\0\2\70\2\0\117\70"+
    "\2\210\1\211\1\210\1\211\1\210\1\212\115\210\1\213"+
    "\1\211\1\210\1\214\1\210\1\212\13\210\1\76\2\77"+
    "\6\210\1\215\1\210\1\216\3\210\1\217\15\210\1\220"+
    "\6\210\1\221\1\222\1\223\2\210\1\224\1\225\2\210"+
    "\1\226\1\210\1\227\1\230\1\231\1\232\1\233\1\210"+
    "\1\234\1\235\1\236\2\210\1\237\1\210\1\240\4\210"+
    "\6\211\1\212\115\211\1\214\2\211\1\214\1\211\1\212"+
    "\13\211\1\241\2\242\6\211\1\243\1\211\1\244\3\211"+
    "\1\245\15\211\1\246\6\211\1\247\1\250\1\251\2\211"+
    "\1\252\1\253\2\211\1\254\1\211\1\255\1\256\1\257"+
    "\1\260\1\261\1\211\1\262\1\263\1\264\2\211\1\265"+
    "\1\211\1\266\4\211\1\210\1\76\1\211\1\210\1\241"+
    "\1\210\1\267\1\210\1\270\41\210\1\271\32\210\1\271"+
    "\16\210\1\76\1\211\1\210\1\241\1\210\1\267\1\210"+
    "\1\270\11\210\3\77\25\210\1\271\32\210\1\271\17\210"+
    "\1\211\1\210\1\211\1\210\1\212\100\210\1\272\15\210"+
    "\1\211\1\210\1\211\1\210\1\212\75\210\1\273\20\210"+
    "\1\211\1\210\1\211\1\210\1\212\63\210\1\274\32\210"+
    "\1\211\1\210\1\211\1\210\1\212\63\210\1\275\32\210"+
    "\1\211\1\210\1\211\1\210\1\212\77\210\1\276\16\210"+
    "\1\211\1\210\1\211\1\210\1\212\72\210\1\277\23\210"+
    "\1\211\1\210\1\211\1\210\1\212\63\210\1\300\2\210"+
    "\1\301\6\210\1\302\20\210\1\211\1\210\1\211\1\210"+
    "\1\212\103\210\1\303\12\210\1\211\1\210\1\211\1\210"+
    "\1\212\100\210\1\304\15\210\1\211\1\210\1\211\1\210"+
    "\1\212\103\210\1\305\12\210\1\211\1\210\1\211\1\210"+
    "\1\212\63\210\1\306\3\210\1\307\26\210\1\211\1\210"+
    "\1\211\1\210\1\212\57\210\1\310\36\210\1\211\1\210"+
    "\1\211\1\210\1\212\57\210\1\311\23\210\1\312\12\210"+
    "\1\211\1\210\1\211\1\210\1\212\72\210\1\313\23\210"+
    "\1\211\1\210\1\211\1\210\1\212\103\210\1\314\12\210"+
    "\1\211\1\210\1\211\1\210\1\212\57\210\1\315\3\210"+
    "\1\316\3\210\1\317\5\210\1\320\20\210\1\211\1\210"+
    "\1\211\1\210\1\212\57\210\1\321\7\210\1\322\26\210"+
    "\1\211\1\210\1\211\1\210\1\212\63\210\1\323\32\210"+
    "\1\211\1\210\1\211\1\210\1\212\66\210\1\324\27\210"+
    "\1\211\1\210\1\211\1\210\1\212\63\210\1\325\30\210"+
    "\12\0\1\326\117\0\1\6\7\0\1\6\1\130\1\0"+
    "\3\6\6\0\30\6\2\0\33\6\12\0\1\6\7\0"+
    "\1\6\1\130\1\0\3\127\6\0\30\6\2\0\33\6"+
    "\25\0\3\130\115\0\1\327\204\0\1\330\30\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\4\30\1\331\23\30"+
    "\2\0\1\6\32\30\12\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\2\30\1\332\25\30\2\0\1\6\32\30"+
    "\12\0\1\6\7\0\1\6\2\0\3\30\6\0\20\30"+
    "\1\333\7\30\2\0\1\6\32\30\12\0\1\6\7\0"+
    "\1\6\2\0\3\6\6\0\1\6\1\334\1\6\1\335"+
    "\2\6\1\336\1\337\1\340\2\6\1\341\2\6\1\342"+
    "\1\343\1\6\1\344\1\345\5\6\2\0\2\6\1\334"+
    "\1\6\1\335\2\6\1\336\1\337\1\340\2\6\1\341"+
    "\2\6\1\342\1\343\2\6\1\344\1\345\6\6\12\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\21\30\1\346"+
    "\6\30\2\0\1\6\32\30\12\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\21\30\1\347\6\30\2\0\1\6"+
    "\32\30\12\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\3\30\1\350\24\30\2\0\1\6\32\30\12\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\10\30\1\351\17\30"+
    "\2\0\1\6\32\30\12\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\15\30\1\352\12\30\2\0\1\6\32\30"+
    "\12\0\1\6\7\0\1\6\2\0\3\30\6\0\10\30"+
    "\1\353\10\30\1\354\6\30\2\0\1\6\32\30\12\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\22\30\1\355"+
    "\5\30\2\0\1\6\32\30\12\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\14\30\1\356\13\30\2\0\1\6"+
    "\32\30\12\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\30\30\2\0\1\357\32\30\12\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\16\30\1\360\11\30\2\0\1\6"+
    "\32\30\12\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\17\30\1\361\4\30\1\362\3\30\2\0\1\6\32\30"+
    "\12\0\1\6\7\0\1\6\2\0\3\30\6\0\4\30"+
    "\1\363\23\30\2\0\1\6\32\30\12\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\10\30\1\364\17\30\2\0"+
    "\1\6\32\30\12\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\30\30\2\0\1\6\23\30\1\365\6\30\12\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\30\30\2\0"+
    "\1\6\2\30\1\366\27\30\12\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\30\30\2\0\1\6\16\30\1\367"+
    "\13\30\12\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\30\30\2\0\1\6\1\370\31\30\12\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\30\30\2\0\1\6\1\371"+
    "\31\30\12\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\30\30\2\0\1\6\13\30\1\372\16\30\12\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\30\30\2\0\1\6"+
    "\2\30\1\373\27\30\12\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\30\30\2\0\1\6\13\30\1\374\16\30"+
    "\12\0\1\6\7\0\1\6\2\0\3\30\6\0\30\30"+
    "\2\0\1\6\15\30\1\375\14\30\12\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\30\30\2\0\1\6\23\30"+
    "\1\376\6\30\12\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\30\30\2\0\1\6\10\30\1\377\21\30\12\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\30\30\2\0"+
    "\1\6\4\30\1\u0100\25\30\12\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\30\30\2\0\1\6\23\30\1\u0101"+
    "\6\30\12\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\30\30\2\0\1\6\14\30\1\u0102\15\30\12\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\30\30\2\0\1\6"+
    "\2\30\1\u0103\27\30\12\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\30\30\2\0\1\6\26\30\1\u0104\3\30"+
    "\12\0\1\6\7\0\1\6\2\0\3\30\6\0\30\30"+
    "\2\0\1\6\2\30\1\u0105\27\30\12\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\30\30\2\0\1\6\21\30"+
    "\1\u0106\10\30\12\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\30\30\2\0\1\6\27\30\1\u0107\2\30\12\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\30\30\2\0"+
    "\1\6\24\30\1\u0108\5\30\12\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\30\30\2\0\1\6\17\30\1\u0109"+
    "\12\30\12\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\30\30\2\0\1\6\3\30\1\u010a\26\30\3\0\2\210"+
    "\1\211\1\210\1\211\1\210\1\u010b\114\210\6\211\1\u010c"+
    "\114\211\1\210\1\213\1\211\1\210\1\214\1\210\1\u010b"+
    "\13\210\1\76\2\77\6\210\1\215\1\210\1\216\3\210"+
    "\1\217\15\210\1\220\6\210\1\221\1\222\1\223\2\210"+
    "\1\224\1\225\2\210\1\226\1\210\1\227\1\230\1\231"+
    "\1\232\1\233\1\210\1\234\1\235\1\236\2\210\1\237"+
    "\1\210\1\240\4\210\1\211\1\214\2\211\1\214\1\211"+
    "\1\u010c\13\211\1\241\2\242\6\211\1\243\1\211\1\244"+
    "\3\211\1\245\15\211\1\246\6\211\1\247\1\250\1\251"+
    "\2\211\1\252\1\253\2\211\1\254\1\211\1\255\1\256"+
    "\1\257\1\260\1\261\1\211\1\262\1\263\1\264\2\211"+
    "\1\265\1\211\1\266\4\211\2\210\1\211\1\210\1\211"+
    "\1\210\1\u010b\100\210\1\272\15\210\1\211\1\210\1\211"+
    "\1\210\1\u010b\75\210\1\273\20\210\1\211\1\210\1\211"+
    "\1\210\1\u010b\63\210\1\274\32\210\1\211\1\210\1\211"+
    "\1\210\1\u010b\63\210\1\275\32\210\1\211\1\210\1\211"+
    "\1\210\1\u010b\77\210\1\276\16\210\1\211\1\210\1\211"+
    "\1\210\1\u010b\72\210\1\277\23\210\1\211\1\210\1\211"+
    "\1\210\1\u010b\63\210\1\300\2\210\1\301\6\210\1\302"+
    "\20\210\1\211\1\210\1\211\1\210\1\u010b\103\210\1\303"+
    "\12\210\1\211\1\210\1\211\1\210\1\u010b\100\210\1\304"+
    "\15\210\1\211\1\210\1\211\1\210\1\u010b\103\210\1\305"+
    "\12\210\1\211\1\210\1\211\1\210\1\u010b\63\210\1\306"+
    "\3\210\1\307\26\210\1\211\1\210\1\211\1\210\1\u010b"+
    "\57\210\1\310\36\210\1\211\1\210\1\211\1\210\1\u010b"+
    "\57\210\1\311\23\210\1\312\12\210\1\211\1\210\1\211"+
    "\1\210\1\u010b\72\210\1\313\23\210\1\211\1\210\1\211"+
    "\1\210\1\u010b\103\210\1\314\12\210\1\211\1\210\1\211"+
    "\1\210\1\u010b\57\210\1\315\3\210\1\316\3\210\1\317"+
    "\5\210\1\320\20\210\1\211\1\210\1\211\1\210\1\u010b"+
    "\57\210\1\321\7\210\1\322\26\210\1\211\1\210\1\211"+
    "\1\210\1\u010b\63\210\1\323\32\210\1\211\1\210\1\211"+
    "\1\210\1\u010b\66\210\1\324\27\210\1\211\1\210\1\211"+
    "\1\210\1\u010b\63\210\1\325\30\210\1\211\1\241\2\211"+
    "\1\241\1\211\1\267\1\211\1\u010d\41\211\1\u010e\32\211"+
    "\1\u010e\16\211\1\241\2\211\1\241\1\211\1\267\1\211"+
    "\1\u010d\11\211\3\242\25\211\1\u010e\32\211\1\u010e\23\211"+
    "\1\u010c\100\211\1\u010f\21\211\1\u010c\75\211\1\u0110\24\211"+
    "\1\u010c\63\211\1\u0111\36\211\1\u010c\63\211\1\u0112\36\211"+
    "\1\u010c\77\211\1\u0113\22\211\1\u010c\72\211\1\u0114\27\211"+
    "\1\u010c\63\211\1\u0115\2\211\1\u0116\6\211\1\u0117\24\211"+
    "\1\u010c\103\211\1\u0118\16\211\1\u010c\100\211\1\u0119\21\211"+
    "\1\u010c\103\211\1\u011a\16\211\1\u010c\63\211\1\u011b\3\211"+
    "\1\u011c\32\211\1\u010c\57\211\1\u011d\42\211\1\u010c\57\211"+
    "\1\u011e\23\211\1\u011f\16\211\1\u010c\72\211\1\u0120\27\211"+
    "\1\u010c\103\211\1\u0121\16\211\1\u010c\57\211\1\u0122\3\211"+
    "\1\u0123\3\211\1\u0124\5\211\1\u0125\24\211\1\u010c\57\211"+
    "\1\u0126\7\211\1\u0127\32\211\1\u010c\63\211\1\u0128\36\211"+
    "\1\u010c\66\211\1\u0129\33\211\1\u010c\63\211\1\u012a\30\211"+
    "\1\210\1\270\1\211\1\210\1\u010d\1\210\1\u012b\116\210"+
    "\1\211\1\210\1\211\1\210\1\u010b\52\210\1\u012c\33\210"+
    "\1\u012c\7\210\1\211\1\210\1\211\1\210\1\u010b\67\210"+
    "\1\u012d\26\210\1\211\1\210\1\211\1\210\1\u010b\103\210"+
    "\1\u012e\12\210\1\211\1\210\1\211\1\210\1\u010b\74\210"+
    "\1\u012f\21\210\1\211\1\210\1\211\1\210\1\u010b\100\210"+
    "\1\u0130\15\210\1\211\1\210\1\211\1\210\1\u010b\103\210"+
    "\1\u0131\12\210\1\211\1\210\1\211\1\210\1\u010b\57\210"+
    "\1\u0132\23\210\1\u0133\12\210\1\211\1\210\1\211\1\210"+
    "\1\u010b\74\210\1\u0134\21\210\1\211\1\210\1\211\1\210"+
    "\1\u010b\63\210\1\u0135\32\210\1\211\1\210\1\211\1\210"+
    "\1\u010b\72\210\1\u0136\23\210\1\211\1\210\1\211\1\210"+
    "\1\u010b\61\210\1\u0137\34\210\1\211\1\210\1\211\1\210"+
    "\1\u010b\57\210\1\u0138\3\210\1\u0139\32\210\1\211\1\210"+
    "\1\211\1\210\1\u010b\101\210\1\u013a\14\210\1\211\1\210"+
    "\1\211\1\210\1\u010b\64\210\1\u013b\31\210\1\211\1\210"+
    "\1\211\1\210\1\u010b\73\210\1\u013c\22\210\1\211\1\210"+
    "\1\211\1\210\1\u010b\100\210\1\u013d\15\210\1\211\1\210"+
    "\1\211\1\210\1\u010b\104\210\1\u013e\11\210\1\211\1\210"+
    "\1\211\1\210\1\u010b\73\210\1\u013f\22\210\1\211\1\210"+
    "\1\211\1\210\1\u010b\67\210\1\u0140\26\210\1\211\1\210"+
    "\1\211\1\210\1\u010b\100\210\1\u0141\15\210\1\211\1\210"+
    "\1\211\1\210\1\u010b\62\210\1\u0142\33\210\1\211\1\210"+
    "\1\211\1\210\1\u010b\62\210\1\u0143\33\210\1\211\1\210"+
    "\1\211\1\210\1\u010b\65\210\1\u0144\30\210\1\211\1\210"+
    "\1\211\1\210\1\u010b\105\210\1\u0145\10\210\1\211\1\210"+
    "\1\211\1\210\1\u010b\74\210\1\u0146\21\210\1\211\1\210"+
    "\1\211\1\210\1\u010b\72\210\1\u0147\23\210\1\211\1\210"+
    "\1\211\1\210\1\u010b\57\210\1\u0148\26\210\1\u0149\7\210"+
    "\1\211\1\210\1\211\1\210\1\u010b\67\210\1\u014a\26\210"+
    "\1\211\1\210\1\211\1\210\1\u010b\72\210\1\u014b\21\210"+
    "\17\0\1\u014c\207\0\1\u014d\25\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\20\30\1\u014e\7\30\2\0\1\6"+
    "\32\30\12\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\1\u014f\27\30\2\0\1\6\32\30\12\0\1\6\7\0"+
    "\1\6\2\0\3\6\6\0\16\6\1\u0150\1\6\1\u0151"+
    "\2\6\1\u0152\4\6\2\0\17\6\1\u0150\2\6\1\u0151"+
    "\2\6\1\u0152\5\6\12\0\1\6\7\0\1\6\2\0"+
    "\3\6\6\0\10\6\1\u0153\17\6\2\0\11\6\1\u0153"+
    "\21\6\12\0\1\6\7\0\1\6\2\0\3\6\6\0"+
    "\2\6\1\u0154\25\6\2\0\3\6\1\u0154\27\6\12\0"+
    "\1\6\7\0\1\6\2\0\1\6\1\u0155\1\6\6\0"+
    "\4\6\1\u0156\23\6\2\0\5\6\1\u0156\25\6\12\0"+
    "\1\6\7\0\1\6\2\0\3\6\6\0\14\6\1\u0157"+
    "\1\u0158\12\6\2\0\15\6\1\u0157\1\u0158\14\6\12\0"+
    "\1\6\7\0\1\6\2\0\3\6\6\0\10\6\1\u0159"+
    "\17\6\2\0\11\6\1\u0159\21\6\12\0\1\6\7\0"+
    "\1\6\2\0\3\6\6\0\17\6\1\u015a\10\6\2\0"+
    "\20\6\1\u015a\12\6\12\0\1\6\7\0\1\6\2\0"+
    "\3\6\6\0\2\6\1\u015b\1\6\1\u015c\12\6\1\u015d"+
    "\10\6\2\0\3\6\1\u015b\1\6\1\u015c\12\6\1\u015d"+
    "\12\6\12\0\1\6\7\0\1\6\2\0\3\6\6\0"+
    "\4\6\1\u015e\3\6\1\u015f\17\6\2\0\5\6\1\u015e"+
    "\3\6\1\u015f\21\6\12\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\2\30\1\u0160\25\30\2\0\1\6\32\30"+
    "\12\0\1\6\7\0\1\6\2\0\3\30\6\0\4\30"+
    "\1\u0161\23\30\2\0\1\6\32\30\12\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\22\30\1\u0162\5\30\2\0"+
    "\1\6\32\30\12\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\22\30\1\u0163\5\30\2\0\1\6\32\30\12\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\22\30\1\u0164"+
    "\5\30\2\0\1\6\32\30\12\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\4\30\1\u0165\23\30\2\0\1\6"+
    "\32\30\12\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\10\30\1\u0166\6\30\1\u0167\10\30\2\0\1\6\32\30"+
    "\12\0\1\6\7\0\1\6\2\0\3\30\6\0\30\30"+
    "\2\0\1\u0168\32\30\12\0\1\6\7\0\1\6\2\0"+
    "\3\6\6\0\13\6\1\u0169\14\6\2\0\33\6\12\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\2\30\1\u016a"+
    "\25\30\2\0\1\6\32\30\12\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\4\30\1\u016b\23\30\2\0\1\6"+
    "\32\30\12\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\4\30\1\u016c\23\30\2\0\1\6\32\30\12\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\15\30\1\u016d\12\30"+
    "\2\0\1\6\32\30\12\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\13\30\1\u016e\14\30\2\0\1\6\32\30"+
    "\12\0\1\6\7\0\1\6\2\0\3\30\6\0\30\30"+
    "\2\0\1\6\12\30\1\u016f\17\30\12\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\30\30\2\0\1\6\13\30"+
    "\1\u0170\16\30\12\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\30\30\2\0\1\6\21\30\1\u0171\10\30\12\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\30\30\2\0"+
    "\1\6\22\30\1\u0172\7\30\12\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\30\30\2\0\1\6\16\30\1\u0173"+
    "\3\30\1\u0174\7\30\12\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\30\30\2\0\1\6\10\30\1\u0175\21\30"+
    "\12\0\1\6\7\0\1\6\2\0\3\30\6\0\30\30"+
    "\2\0\1\6\22\30\1\u0176\7\30\12\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\30\30\2\0\1\6\23\30"+
    "\1\u0177\6\30\12\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\4\30\1\u0178\23\30\2\0\1\6\32\30\12\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\30\30\2\0"+
    "\1\6\6\30\1\u0179\23\30\12\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\30\30\2\0\1\6\5\30\1\u017a"+
    "\24\30\12\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\30\30\2\0\1\6\4\30\1\u017b\25\30\12\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\30\30\2\0\1\6"+
    "\4\30\1\u017c\25\30\12\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\30\30\2\0\1\6\13\30\1\u017d\16\30"+
    "\12\0\1\6\7\0\1\6\2\0\3\30\6\0\30\30"+
    "\2\0\1\6\22\30\1\u017e\7\30\12\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\30\30\2\0\1\6\10\30"+
    "\1\u017f\21\30\12\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\30\30\2\0\1\6\23\30\1\u0180\6\30\12\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\30\30\2\0"+
    "\1\6\4\30\1\u0181\25\30\12\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\30\30\2\0\1\6\4\30\1\u0182"+
    "\25\30\12\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\30\30\2\0\1\6\23\30\1\u0183\6\30\3\0\1\211"+
    "\1\u010d\2\211\1\u010d\1\211\1\u012b\122\211\1\u010c\52\211"+
    "\1\u0184\33\211\1\u0184\13\211\1\u010c\67\211\1\u0185\32\211"+
    "\1\u010c\103\211\1\u0186\16\211\1\u010c\74\211\1\u0187\25\211"+
    "\1\u010c\100\211\1\u0188\21\211\1\u010c\103\211\1\u0189\16\211"+
    "\1\u010c\57\211\1\u018a\23\211\1\u018b\16\211\1\u010c\74\211"+
    "\1\u018c\25\211\1\u010c\63\211\1\u018d\36\211\1\u010c\72\211"+
    "\1\u018e\27\211\1\u010c\61\211\1\u018f\40\211\1\u010c\57\211"+
    "\1\u0190\3\211\1\u0191\36\211\1\u010c\101\211\1\u0192\20\211"+
    "\1\u010c\64\211\1\u0193\35\211\1\u010c\73\211\1\u0194\26\211"+
    "\1\u010c\100\211\1\u0195\21\211\1\u010c\104\211\1\u0196\15\211"+
    "\1\u010c\73\211\1\u0197\26\211\1\u010c\67\211\1\u0198\32\211"+
    "\1\u010c\100\211\1\u0199\21\211\1\u010c\62\211\1\u019a\37\211"+
    "\1\u010c\62\211\1\u019b\37\211\1\u010c\65\211\1\u019c\34\211"+
    "\1\u010c\105\211\1\u019d\14\211\1\u010c\74\211\1\u019e\25\211"+
    "\1\u010c\72\211\1\u019f\27\211\1\u010c\57\211\1\u01a0\26\211"+
    "\1\u01a1\13\211\1\u010c\67\211\1\u01a2\32\211\1\u010c\72\211"+
    "\1\u01a3\21\211\1\210\1\u012c\1\211\1\210\1\u0184\1\210"+
    "\1\u01a4\116\210\1\211\1\210\1\211\1\210\1\u010b\57\210"+
    "\1\u01a5\36\210\1\211\1\210\1\211\1\210\1\u010b\100\210"+
    "\1\u01a6\15\210\1\211\1\210\1\211\1\210\1\u010b\63\210"+
    "\1\u01a7\32\210\1\211\1\210\1\211\1\210\1\u010b\62\210"+
    "\1\u01a8\33\210\1\211\1\210\1\211\1\210\1\u010b\57\210"+
    "\1\u01a9\36\210\1\211\1\210\1\211\1\210\1\u010b\61\210"+
    "\1\u01aa\34\210\1\211\1\210\1\211\1\210\1\u010b\63\210"+
    "\1\u01ab\32\210\1\211\1\210\1\211\1\210\1\u010b\102\210"+
    "\1\u01ac\13\210\1\211\1\210\1\211\1\210\1\u010b\61\210"+
    "\1\u01ad\34\210\1\211\1\210\1\211\1\210\1\u010b\103\210"+
    "\1\u01ae\12\210\1\211\1\210\1\211\1\210\1\u010b\66\210"+
    "\1\u01af\27\210\1\211\1\210\1\211\1\210\1\u010b\107\210"+
    "\1\u01b0\6\210\1\211\1\210\1\211\1\210\1\u010b\63\210"+
    "\1\u01b1\32\210\1\211\1\210\1\211\1\210\1\u010b\102\210"+
    "\1\u01b2\13\210\1\211\1\210\1\211\1\210\1\u010b\102\210"+
    "\1\u01b3\13\210\1\211\1\210\1\211\1\210\1\u010b\63\210"+
    "\1\u01b4\32\210\1\211\1\210\1\211\1\210\1\u010b\75\210"+
    "\1\u01b5\20\210\1\211\1\210\1\211\1\210\1\u010b\107\210"+
    "\1\u01b6\6\210\1\211\1\210\1\211\1\210\1\u010b\60\210"+
    "\1\u01b7\35\210\1\211\1\210\1\211\1\210\1\u010b\104\210"+
    "\1\u01b8\11\210\1\211\1\210\1\211\1\210\1\u010b\76\210"+
    "\1\u01b9\17\210\1\211\1\210\1\211\1\210\1\u010b\67\210"+
    "\1\u01ba\25\210\1\u0143\1\211\1\210\1\u019b\1\210\1\u01bb"+
    "\116\210\1\211\1\210\1\211\1\210\1\u010b\66\210\1\u01bc"+
    "\26\210\1\u0145\1\211\1\210\1\u019d\1\210\1\u01bd\116\210"+
    "\1\211\1\210\1\211\1\210\1\u010b\101\210\1\u01be\14\210"+
    "\1\211\1\210\1\211\1\210\1\u010b\104\210\1\u01bf\11\210"+
    "\1\211\1\210\1\211\1\210\1\u010b\72\210\1\u01c0\23\210"+
    "\1\211\1\210\1\211\1\210\1\u010b\102\210\1\u01c1\13\210"+
    "\1\211\1\210\1\211\1\210\1\u010b\102\210\1\u01c2\13\210"+
    "\1\211\1\210\1\211\1\210\1\u010b\72\210\1\u01c3\21\210"+
    "\17\u01c4\1\u01c5\103\u01c4\67\0\1\u01c6\42\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\22\30\1\u01c7\5\30\2\0"+
    "\1\6\32\30\12\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\2\30\1\u01c8\25\30\2\0\1\6\32\30\12\0"+
    "\1\6\7\0\1\6\2\0\3\6\6\0\3\6\1\u01c9"+
    "\24\6\2\0\4\6\1\u01c9\26\6\12\0\1\6\7\0"+
    "\1\6\2\0\3\6\6\0\22\6\1\u01ca\5\6\2\0"+
    "\24\6\1\u01ca\6\6\12\0\1\6\7\0\1\6\2\0"+
    "\3\6\6\0\24\6\1\u01cb\3\6\2\0\26\6\1\u01cb"+
    "\4\6\12\0\1\6\7\0\1\6\2\0\3\6\6\0"+
    "\10\6\1\u01cc\17\6\2\0\11\6\1\u01cc\21\6\12\0"+
    "\1\6\7\0\1\6\2\0\3\6\6\0\1\u01cd\27\6"+
    "\2\0\1\6\1\u01cd\31\6\12\0\1\6\7\0\1\6"+
    "\2\0\3\6\6\0\6\6\1\u01ce\21\6\2\0\7\6"+
    "\1\u01ce\23\6\12\0\1\6\7\0\1\6\2\0\3\6"+
    "\6\0\17\6\1\u01cf\10\6\2\0\20\6\1\u01cf\12\6"+
    "\12\0\1\6\7\0\1\6\2\0\3\6\6\0\15\6"+
    "\1\u01d0\12\6\2\0\16\6\1\u01d0\14\6\12\0\1\6"+
    "\7\0\1\6\2\0\3\6\6\0\22\6\1\u01d1\5\6"+
    "\2\0\24\6\1\u01d1\6\6\12\0\1\6\7\0\1\6"+
    "\2\0\3\6\6\0\20\6\1\u01d2\7\6\2\0\22\6"+
    "\1\u01d2\10\6\12\0\1\6\7\0\1\6\2\0\3\6"+
    "\6\0\13\6\1\u01d3\14\6\2\0\14\6\1\u01d3\16\6"+
    "\12\0\1\6\7\0\1\6\2\0\3\6\6\0\1\u01d4"+
    "\27\6\2\0\1\6\1\u01d4\31\6\12\0\1\6\7\0"+
    "\1\6\2\0\3\6\6\0\26\6\1\u01d5\1\6\2\0"+
    "\30\6\1\u01d5\2\6\12\0\1\6\7\0\1\6\2\0"+
    "\3\6\6\0\22\6\1\u01d6\5\6\2\0\24\6\1\u01d6"+
    "\6\6\12\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\10\30\1\u01d7\17\30\2\0\1\6\32\30\12\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\20\30\1\u01d8\7\30"+
    "\2\0\1\6\32\30\12\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\14\30\1\u01d9\13\30\2\0\1\6\32\30"+
    "\12\0\1\6\7\0\1\6\2\0\3\30\6\0\1\u01da"+
    "\27\30\2\0\1\6\32\30\12\0\1\6\7\0\1\6"+
    "\2\0\3\6\6\0\1\u01db\27\6\2\0\33\6\12\0"+
    "\1\6\7\0\1\6\2\0\3\6\6\0\16\6\1\u01dc"+
    "\11\6\2\0\33\6\12\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\4\30\1\u01dd\23\30\2\0\1\6\32\30"+
    "\12\0\1\6\7\0\1\6\2\0\3\30\6\0\1\u01de"+
    "\27\30\2\0\1\6\32\30\12\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\20\30\1\u01df\7\30\2\0\1\6"+
    "\32\30\12\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\25\30\1\u01e0\2\30\2\0\1\6\32\30\12\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\4\30\1\u01e1\23\30"+
    "\2\0\1\6\32\30\12\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\30\30\2\0\1\6\6\30\1\u01e2\23\30"+
    "\12\0\1\6\7\0\1\6\2\0\3\30\6\0\30\30"+
    "\2\0\1\6\4\30\1\u01e3\25\30\12\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\30\30\2\0\1\6\22\30"+
    "\1\u01e4\7\30\12\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\30\30\2\0\1\6\21\30\1\u01e5\10\30\12\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\30\30\2\0"+
    "\1\6\14\30\1\u01e6\15\30\12\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\30\30\2\0\1\6\4\30\1\u01e7"+
    "\25\30\12\0\1\6\7\0\1\u01e8\2\0\3\30\6\0"+
    "\30\30\2\0\1\6\32\30\12\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\30\30\2\0\1\6\13\30\1\u01e9"+
    "\16\30\12\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\30\30\2\0\1\6\23\30\1\u01ea\6\30\12\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\30\30\2\0\1\6"+
    "\6\30\1\u01eb\23\30\12\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\30\30\2\0\1\6\10\30\1\u01ec\21\30"+
    "\12\0\1\6\7\0\1\6\2\0\3\30\6\0\30\30"+
    "\2\0\1\6\15\30\1\u01ed\14\30\12\0\1\6\7\0"+
    "\1\u01ee\2\0\3\30\6\0\30\30\2\0\1\6\32\30"+
    "\12\0\1\6\7\0\1\6\2\0\3\30\6\0\30\30"+
    "\2\0\1\6\7\30\1\u01ef\22\30\3\0\1\211\1\u0184"+
    "\2\211\1\u0184\1\211\1\u01a4\122\211\1\u010c\57\211\1\u01f0"+
    "\42\211\1\u010c\100\211\1\u01f1\21\211\1\u010c\63\211\1\u01f2"+
    "\36\211\1\u010c\62\211\1\u01f3\37\211\1\u010c\57\211\1\u01f4"+
    "\42\211\1\u010c\61\211\1\u01f5\40\211\1\u010c\63\211\1\u01f6"+
    "\36\211\1\u010c\102\211\1\u01f7\17\211\1\u010c\61\211\1\u01f8"+
    "\40\211\1\u010c\103\211\1\u01f9\16\211\1\u010c\66\211\1\u01fa"+
    "\33\211\1\u010c\107\211\1\u01fb\12\211\1\u010c\63\211\1\u01fc"+
    "\36\211\1\u010c\102\211\1\u01fd\17\211\1\u010c\102\211\1\u01fe"+
    "\17\211\1\u010c\63\211\1\u01ff\36\211\1\u010c\75\211\1\u0200"+
    "\24\211\1\u010c\107\211\1\u0201\12\211\1\u010c\60\211\1\u0202"+
    "\41\211\1\u010c\104\211\1\u0203\15\211\1\u010c\76\211\1\u0204"+
    "\23\211\1\u010c\67\211\1\u0205\25\211\1\u019b\2\211\1\u019b"+
    "\1\211\1\u01bb\122\211\1\u010c\66\211\1\u0206\26\211\1\u019d"+
    "\2\211\1\u019d\1\211\1\u01bd\122\211\1\u010c\101\211\1\u0207"+
    "\20\211\1\u010c\104\211\1\u0208\15\211\1\u010c\72\211\1\u0209"+
    "\27\211\1\u010c\102\211\1\u020a\17\211\1\u010c\102\211\1\u020b"+
    "\17\211\1\u010c\72\211\1\u020c\21\211\2\210\1\211\1\210"+
    "\1\211\1\210\1\u010b\72\210\1\u020d\23\210\1\211\1\210"+
    "\1\211\1\210\1\u010b\67\210\1\u020e\26\210\1\211\1\210"+
    "\1\211\1\210\1\u010b\104\210\1\u020f\11\210\1\211\1\210"+
    "\1\211\1\210\1\u010b\57\210\1\u0210\35\210\1\u01a9\1\211"+
    "\1\210\1\u01f4\1\210\1\u0211\116\210\1\211\1\210\1\211"+
    "\1\210\1\u010b\71\210\1\u0212\23\210\1\u01ab\1\211\1\210"+
    "\1\u01f6\1\210\1\u0213\116\210\1\211\1\210\1\211\1\210"+
    "\1\u010b\63\210\1\u0214\32\210\1\211\1\210\1\211\1\210"+
    "\1\u010b\71\210\1\u0215\24\210\1\211\1\210\1\211\1\210"+
    "\1\u010b\73\210\1\u0216\22\210\1\211\1\210\1\211\1\210"+
    "\1\u010b\101\210\1\u0217\13\210\1\u01b0\1\211\1\210\1\u01fb"+
    "\1\210\1\u0218\116\210\1\211\1\210\1\211\1\210\1\u010b"+
    "\74\210\1\u0219\21\210\1\211\1\210\1\211\1\210\1\u010b"+
    "\67\210\1\u021a\25\210\1\u01b3\1\211\1\210\1\u01fe\1\210"+
    "\1\u021b\115\210\1\u01b4\1\211\1\210\1\u01ff\1\210\1\u021c"+
    "\116\210\1\211\1\210\1\211\1\210\1\u010b\75\210\1\u021d"+
    "\17\210\1\u01b6\1\211\1\210\1\u0201\1\210\1\u021e\116\210"+
    "\1\211\1\210\1\211\1\210\1\u010b\63\210\1\u021f\32\210"+
    "\1\211\1\210\1\211\1\210\1\u010b\63\210\1\u0220\32\210"+
    "\1\211\1\210\1\211\1\210\1\u010b\72\210\1\u0221\23\210"+
    "\1\211\1\210\1\211\1\210\1\u010b\75\210\1\u0222\20\210"+
    "\1\211\1\210\1\211\1\210\1\u010b\102\210\1\u0223\13\210"+
    "\1\211\1\210\1\211\1\210\1\u010b\10\210\1\u0224\105\210"+
    "\1\211\1\210\1\211\1\210\1\u010b\63\210\1\u0225\31\210"+
    "\1\u01c0\1\211\1\210\1\u0209\1\210\1\u0226\115\210\1\u01c1"+
    "\1\211\1\210\1\u020a\1\210\1\u0227\116\210\1\211\1\210"+
    "\1\211\1\210\1\u010b\63\210\1\u0228\32\210\1\211\1\210"+
    "\1\211\1\210\1\u010b\75\210\1\u0229\16\210\17\u01c4\1\u022a"+
    "\103\u01c4\17\0\1\u01c5\11\0\1\3\157\0\1\u022b\43\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\30\30\2\0"+
    "\1\u022c\32\30\12\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\22\30\1\u022d\5\30\2\0\1\6\32\30\12\0"+
    "\1\6\7\0\1\6\2\0\3\6\6\0\27\6\1\u022e"+
    "\2\0\31\6\1\u022e\1\6\12\0\1\6\7\0\1\6"+
    "\2\0\3\6\6\0\22\6\1\u022f\5\6\2\0\24\6"+
    "\1\u022f\6\6\12\0\1\6\7\0\1\6\2\0\3\6"+
    "\6\0\2\6\1\u0230\25\6\2\0\3\6\1\u0230\27\6"+
    "\12\0\1\6\7\0\1\6\2\0\3\6\6\0\3\6"+
    "\1\u0231\24\6\2\0\4\6\1\u0231\26\6\12\0\1\6"+
    "\7\0\1\6\2\0\3\6\6\0\23\6\1\u0232\4\6"+
    "\2\0\25\6\1\u0232\5\6\12\0\1\6\7\0\1\6"+
    "\2\0\3\6\6\0\12\6\1\u0233\15\6\2\0\13\6"+
    "\1\u0233\17\6\12\0\1\6\7\0\1\6\2\0\3\6"+
    "\6\0\10\6\1\u0234\17\6\2\0\11\6\1\u0234\21\6"+
    "\12\0\1\6\7\0\1\6\2\0\3\6\6\0\10\6"+
    "\1\u0235\17\6\2\0\11\6\1\u0235\21\6\12\0\1\6"+
    "\7\0\1\6\2\0\3\6\6\0\4\6\1\u0236\23\6"+
    "\2\0\5\6\1\u0236\25\6\12\0\1\6\7\0\1\6"+
    "\2\0\3\6\6\0\14\6\1\u0237\13\6\2\0\15\6"+
    "\1\u0237\15\6\12\0\1\6\7\0\1\6\2\0\3\6"+
    "\6\0\22\6\1\u0238\5\6\2\0\24\6\1\u0238\6\6"+
    "\12\0\1\6\7\0\1\6\2\0\3\6\6\0\13\6"+
    "\1\u0239\14\6\2\0\14\6\1\u0239\16\6\12\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\13\30\1\u023a\14\30"+
    "\2\0\1\6\32\30\12\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\22\30\1\u023b\5\30\2\0\1\6\32\30"+
    "\12\0\1\6\7\0\1\6\2\0\3\30\6\0\17\30"+
    "\1\u023c\10\30\2\0\1\6\32\30\12\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\20\30\1\u023d\7\30\2\0"+
    "\1\6\32\30\12\0\1\6\7\0\1\6\2\0\3\6"+
    "\6\0\13\6\1\u023e\14\6\2\0\33\6\12\0\1\6"+
    "\7\0\1\6\2\0\3\6\6\0\1\u023f\27\6\2\0"+
    "\33\6\12\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\21\30\1\u0240\6\30\2\0\1\6\32\30\12\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\22\30\1\u0241\5\30"+
    "\2\0\1\6\32\30\12\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\21\30\1\u0242\6\30\2\0\1\6\32\30"+
    "\12\0\1\6\7\0\1\6\2\0\3\30\6\0\7\30"+
    "\1\u0243\20\30\2\0\1\6\32\30\12\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\30\30\2\0\1\6\21\30"+
    "\1\u0244\10\30\12\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\30\30\2\0\1\6\1\u0245\31\30\12\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\30\30\2\0\1\6"+
    "\1\u0246\31\30\12\0\1\6\7\0\1\6\2\0\3\6"+
    "\6\0\30\6\2\0\6\6\1\u0247\14\6\1\u0248\7\6"+
    "\12\0\1\6\7\0\1\6\2\0\3\30\6\0\30\30"+
    "\2\0\1\6\4\30\1\u0249\25\30\12\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\30\30\2\0\1\6\7\30"+
    "\1\u024a\22\30\12\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\30\30\2\0\1\6\4\30\1\u024b\25\30\12\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\30\30\2\0"+
    "\1\6\2\30\1\u024c\27\30\12\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\30\30\2\0\1\6\6\30\1\u024d"+
    "\23\30\12\0\1\6\7\0\1\6\2\0\3\6\6\0"+
    "\30\6\2\0\1\6\1\u024e\31\6\3\0\6\211\1\u010c"+
    "\72\211\1\u024f\27\211\1\u010c\67\211\1\u0250\32\211\1\u010c"+
    "\104\211\1\u0251\15\211\1\u010c\57\211\1\u0252\35\211\1\u01f4"+
    "\2\211\1\u01f4\1\211\1\u0211\122\211\1\u010c\71\211\1\u0253"+
    "\23\211\1\u01f6\2\211\1\u01f6\1\211\1\u0213\122\211\1\u010c"+
    "\63\211\1\u0254\36\211\1\u010c\71\211\1\u0255\30\211\1\u010c"+
    "\73\211\1\u0256\26\211\1\u010c\101\211\1\u0257\13\211\1\u01fb"+
    "\2\211\1\u01fb\1\211\1\u0218\122\211\1\u010c\74\211\1\u0258"+
    "\25\211\1\u010c\67\211\1\u0259\25\211\1\u01fe\2\211\1\u01fe"+
    "\1\211\1\u021b\115\211\1\u01ff\2\211\1\u01ff\1\211\1\u021c"+
    "\122\211\1\u010c\75\211\1\u025a\17\211\1\u0201\2\211\1\u0201"+
    "\1\211\1\u021e\122\211\1\u010c\63\211\1\u025b\36\211\1\u010c"+
    "\63\211\1\u025c\36\211\1\u010c\72\211\1\u025d\27\211\1\u010c"+
    "\75\211\1\u025e\24\211\1\u010c\102\211\1\u025f\17\211\1\u010c"+
    "\10\211\1\u0260\111\211\1\u010c\63\211\1\u0261\31\211\1\u0209"+
    "\2\211\1\u0209\1\211\1\u0226\115\211\1\u020a\2\211\1\u020a"+
    "\1\211\1\u0227\122\211\1\u010c\63\211\1\u0262\36\211\1\u010c"+
    "\75\211\1\u0263\16\211\1\210\1\u020d\1\211\1\210\1\u024f"+
    "\1\210\1\u0264\116\210\1\211\1\210\1\211\1\210\1\u010b"+
    "\63\210\1\u0265\32\210\1\211\1\210\1\211\1\210\1\u010b"+
    "\57\210\1\u0266\36\210\1\211\1\210\1\211\1\210\1\u010b"+
    "\74\210\1\u0267\20\210\1\u0212\1\211\1\210\1\u0253\1\210"+
    "\1\u0268\116\210\1\211\1\210\1\211\1\210\1\u010b\100\210"+
    "\1\u0269\15\210\1\211\1\210\1\211\1\210\1\u010b\60\210"+
    "\1\u026a\35\210\1\211\1\210\1\211\1\210\1\u010b\74\210"+
    "\1\u026b\21\210\1\211\1\210\1\211\1\210\1\u010b\67\210"+
    "\1\u026c\25\210\1\u0219\1\211\1\210\1\u0258\1\210\1\u026d"+
    "\116\210\1\211\1\210\1\211\1\210\1\u010b\64\210\1\u026e"+
    "\31\210\1\211\1\210\1\211\1\210\1\u010b\74\210\1\u026f"+
    "\21\210\1\211\1\210\1\211\1\210\1\u010b\100\210\1\u0270"+
    "\14\210\1\u0220\1\211\1\210\1\u025c\1\210\1\u0271\116\210"+
    "\1\211\1\210\1\211\1\210\1\u010b\63\210\1\u0272\31\210"+
    "\1\u0222\1\211\1\210\1\u025e\1\210\1\u0273\115\210\1\u0223"+
    "\1\211\1\210\1\u025f\1\210\1\u0274\116\210\1\211\1\210"+
    "\1\211\1\210\1\u010b\101\210\1\u0275\14\210\1\211\1\210"+
    "\1\211\1\210\1\u010b\100\210\1\u0276\14\210\1\u0228\1\211"+
    "\1\210\1\u0262\1\210\1\u0277\116\210\1\211\1\210\1\211"+
    "\1\210\1\u010b\105\210\1\u0278\6\210\17\u01c4\1\u0279\103\u01c4"+
    "\101\0\1\u027a\30\0\1\6\7\0\1\6\2\0\3\6"+
    "\6\0\10\6\1\u027b\17\6\2\0\33\6\12\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\4\30\1\u027c\23\30"+
    "\2\0\1\6\32\30\12\0\1\6\7\0\1\6\2\0"+
    "\3\6\6\0\16\6\1\u027d\11\6\2\0\17\6\1\u027d"+
    "\13\6\12\0\1\6\7\0\1\6\2\0\3\6\6\0"+
    "\22\6\1\u027e\5\6\2\0\24\6\1\u027e\6\6\12\0"+
    "\1\6\7\0\1\6\2\0\3\6\6\0\16\6\1\u027f"+
    "\11\6\2\0\17\6\1\u027f\13\6\12\0\1\6\7\0"+
    "\1\6\2\0\3\6\6\0\17\6\1\u0280\10\6\2\0"+
    "\20\6\1\u0280\12\6\12\0\1\6\7\0\1\6\2\0"+
    "\3\6\6\0\2\6\1\u0281\25\6\2\0\3\6\1\u0281"+
    "\27\6\12\0\1\6\7\0\1\6\2\0\3\6\6\0"+
    "\1\u0282\27\6\2\0\1\6\1\u0282\31\6\12\0\1\6"+
    "\7\0\1\6\2\0\3\6\6\0\4\6\1\u0283\23\6"+
    "\2\0\5\6\1\u0283\25\6\12\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\1\u0284\27\30\2\0\1\6\32\30"+
    "\12\0\1\6\7\0\1\6\2\0\3\30\6\0\30\30"+
    "\2\0\1\u0285\32\30\12\0\1\6\7\0\1\6\2\0"+
    "\3\6\6\0\4\6\1\u0286\23\6\2\0\33\6\12\0"+
    "\1\6\7\0\1\6\2\0\3\6\6\0\3\6\1\u0287"+
    "\24\6\2\0\33\6\12\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\21\30\1\u0288\6\30\2\0\1\6\32\30"+
    "\12\0\1\6\7\0\1\6\2\0\3\30\6\0\4\30"+
    "\1\u0289\23\30\2\0\1\6\32\30\12\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\10\30\1\u028a\17\30\2\0"+
    "\1\6\32\30\12\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\30\30\2\0\1\6\16\30\1\u028b\13\30\12\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\30\30\2\0"+
    "\1\6\15\30\1\u028c\14\30\12\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\30\30\2\0\1\6\13\30\1\u028d"+
    "\16\30\12\0\1\6\7\0\1\6\2\0\3\6\6\0"+
    "\30\6\2\0\1\6\1\u028e\31\6\12\0\1\6\7\0"+
    "\1\6\2\0\3\6\6\0\30\6\2\0\11\6\1\u028f"+
    "\21\6\12\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\30\30\2\0\1\6\14\30\1\u0290\15\30\12\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\30\30\2\0\1\6"+
    "\21\30\1\u0291\10\30\12\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\30\30\2\0\1\6\12\30\1\u0292\17\30"+
    "\12\0\1\6\7\0\1\6\2\0\3\6\6\0\30\6"+
    "\2\0\14\6\1\u0293\16\6\3\0\1\211\1\u024f\2\211"+
    "\1\u024f\1\211\1\u0264\122\211\1\u010c\63\211\1\u0294\36\211"+
    "\1\u010c\57\211\1\u0295\42\211\1\u010c\74\211\1\u0296\20\211"+
    "\1\u0253\2\211\1\u0253\1\211\1\u0268\122\211\1\u010c\100\211"+
    "\1\u0297\21\211\1\u010c\60\211\1\u0298\41\211\1\u010c\74\211"+
    "\1\u0299\25\211\1\u010c\67\211\1\u029a\25\211\1\u0258\2\211"+
    "\1\u0258\1\211\1\u026d\122\211\1\u010c\64\211\1\u029b\35\211"+
    "\1\u010c\74\211\1\u029c\25\211\1\u010c\100\211\1\u029d\14\211"+
    "\1\u025c\2\211\1\u025c\1\211\1\u0271\122\211\1\u010c\63\211"+
    "\1\u029e\31\211\1\u025e\2\211\1\u025e\1\211\1\u0273\115\211"+
    "\1\u025f\2\211\1\u025f\1\211\1\u0274\122\211\1\u010c\101\211"+
    "\1\u029f\20\211\1\u010c\100\211\1\u02a0\14\211\1\u0262\2\211"+
    "\1\u0262\1\211\1\u0277\122\211\1\u010c\105\211\1\u02a1\6\211"+
    "\2\210\1\211\1\210\1\211\1\210\1\u010b\100\210\1\u02a2"+
    "\14\210\1\u0266\1\211\1\210\1\u0295\1\210\1\u02a3\116\210"+
    "\1\211\1\210\1\211\1\210\1\u010b\57\210\1\u02a4\35\210"+
    "\1\u0269\1\211\1\210\1\u0297\1\210\1\u02a5\116\210\1\211"+
    "\1\210\1\211\1\210\1\u010b\75\210\1\u02a6\17\210\1\u026b"+
    "\1\211\1\210\1\u0299\1\210\1\u02a7\116\210\1\211\1\210"+
    "\1\211\1\210\1\u010b\57\210\1\u02a8\36\210\1\211\1\210"+
    "\1\211\1\210\1\u010b\107\210\1\u02a9\5\210\1\u026f\1\211"+
    "\1\210\1\u029c\1\210\1\u02aa\115\210\1\u0270\1\211\1\210"+
    "\1\u029d\1\210\1\u02ab\115\210\1\u0272\1\211\1\210\1\u029e"+
    "\1\210\1\u02ac\116\210\1\211\1\210\1\211\1\210\1\u010b"+
    "\63\210\1\u02ad\31\210\1\u0276\1\211\1\210\1\u02a0\1\210"+
    "\1\u02ae\115\210\1\u0278\1\211\1\210\1\u02a1\1\210\1\u02af"+
    "\114\210\17\u01c4\1\u0279\11\u01c4\1\3\71\u01c4\7\0\1\6"+
    "\7\0\1\6\2\0\3\6\6\0\15\6\1\u02b0\12\6"+
    "\2\0\33\6\12\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\20\30\1\u02b1\7\30\2\0\1\6\32\30\12\0"+
    "\1\6\7\0\1\6\2\0\3\6\6\0\15\6\1\u02b2"+
    "\12\6\2\0\16\6\1\u02b2\14\6\12\0\1\6\7\0"+
    "\1\6\2\0\3\6\6\0\15\6\1\u02b3\12\6\2\0"+
    "\16\6\1\u02b3\14\6\12\0\1\6\7\0\1\6\2\0"+
    "\3\6\6\0\22\6\1\u02b4\5\6\2\0\24\6\1\u02b4"+
    "\6\6\12\0\1\6\7\0\1\6\2\0\3\6\6\0"+
    "\22\6\1\u02b5\5\6\2\0\24\6\1\u02b5\6\6\12\0"+
    "\1\6\7\0\1\6\2\0\3\6\6\0\20\6\1\u02b6"+
    "\7\6\2\0\22\6\1\u02b6\10\6\12\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\20\30\1\u02b7\7\30\2\0"+
    "\1\6\32\30\12\0\1\6\7\0\1\6\2\0\3\6"+
    "\6\0\15\6\1\u02b8\12\6\2\0\33\6\12\0\1\6"+
    "\7\0\1\6\2\0\3\6\6\0\1\u02b9\27\6\2\0"+
    "\33\6\12\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\30\30\2\0\1\u02ba\32\30\12\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\13\30\1\u02bb\14\30\2\0\1\6"+
    "\32\30\12\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\30\30\2\0\1\6\24\30\1\u02bc\5\30\12\0\1\6"+
    "\7\0\1\6\2\0\3\6\6\0\30\6\2\0\15\6"+
    "\1\u02bd\15\6\12\0\1\6\7\0\1\6\2\0\3\6"+
    "\6\0\30\6\2\0\32\6\1\u02be\12\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\30\30\2\0\1\6\4\30"+
    "\1\u02bf\25\30\12\0\1\6\7\0\1\6\2\0\3\6"+
    "\6\0\30\6\2\0\11\6\1\u02c0\21\6\3\0\6\211"+
    "\1\u010c\100\211\1\u02c1\14\211\1\u0295\2\211\1\u0295\1\211"+
    "\1\u02a3\122\211\1\u010c\57\211\1\u02c2\35\211\1\u0297\2\211"+
    "\1\u0297\1\211\1\u02a5\122\211\1\u010c\75\211\1\u02c3\17\211"+
    "\1\u0299\2\211\1\u0299\1\211\1\u02a7\122\211\1\u010c\57\211"+
    "\1\u02c4\42\211\1\u010c\107\211\1\u02c5\5\211\1\u029c\2\211"+
    "\1\u029c\1\211\1\u02aa\115\211\1\u029d\2\211\1\u029d\1\211"+
    "\1\u02ab\115\211\1\u029e\2\211\1\u029e\1\211\1\u02ac\122\211"+
    "\1\u010c\63\211\1\u02c6\31\211\1\u02a0\2\211\1\u02a0\1\211"+
    "\1\u02ae\115\211\1\u02a1\2\211\1\u02a1\1\211\1\u02af\114\211"+
    "\1\210\1\u02a2\1\211\1\210\1\u02c1\1\210\1\u02c7\115\210"+
    "\1\u02a4\1\211\1\210\1\u02c2\1\210\1\u02c8\116\210\1\211"+
    "\1\210\1\211\1\210\1\u010b\106\210\1\u02c9\6\210\1\u02a8"+
    "\1\211\1\210\1\u02c4\1\210\1\u02ca\115\210\1\u02a9\1\211"+
    "\1\210\1\u02c5\1\210\1\u02cb\116\210\1\211\1\210\1\211"+
    "\1\210\1\u010b\100\210\1\u02cc\13\210\7\0\1\6\7\0"+
    "\1\6\2\0\3\6\6\0\5\6\1\u02cd\22\6\2\0"+
    "\33\6\12\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\30\30\2\0\1\u02ce\32\30\12\0\1\6\7\0\1\6"+
    "\2\0\3\6\6\0\10\6\1\u02cf\17\6\2\0\11\6"+
    "\1\u02cf\21\6\12\0\1\6\7\0\1\6\2\0\3\6"+
    "\6\0\4\6\1\u02d0\23\6\2\0\5\6\1\u02d0\25\6"+
    "\12\0\1\6\7\0\1\6\2\0\3\30\6\0\30\30"+
    "\2\0\1\u02d1\32\30\12\0\1\6\7\0\1\6\2\0"+
    "\3\6\6\0\23\6\1\u02d2\4\6\2\0\33\6\12\0"+
    "\1\6\7\0\1\6\2\0\3\6\6\0\22\6\1\u02d3"+
    "\5\6\2\0\33\6\12\0\1\6\7\0\1\6\2\0"+
    "\3\u02d4\6\0\30\u02d4\2\0\1\6\32\u02d4\12\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\4\30\1\u02d5\23\30"+
    "\2\0\1\6\32\30\12\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\30\30\2\0\1\6\15\30\1\u02d6\14\30"+
    "\12\0\1\6\7\0\1\6\2\0\3\6\6\0\30\6"+
    "\2\0\11\6\1\u02d7\21\6\12\0\1\6\7\0\1\6"+
    "\2\0\3\6\6\0\30\6\2\0\5\6\1\u02d8\25\6"+
    "\12\0\1\6\7\0\1\6\2\0\3\30\6\0\30\30"+
    "\2\0\1\6\15\30\1\u02d9\14\30\12\0\1\6\7\0"+
    "\1\6\2\0\3\6\6\0\30\6\2\0\7\6\1\u02da"+
    "\23\6\3\0\1\211\1\u02c1\2\211\1\u02c1\1\211\1\u02c7"+
    "\115\211\1\u02c2\2\211\1\u02c2\1\211\1\u02c8\122\211\1\u010c"+
    "\106\211\1\u02db\6\211\1\u02c4\2\211\1\u02c4\1\211\1\u02ca"+
    "\115\211\1\u02c5\2\211\1\u02c5\1\211\1\u02cb\122\211\1\u010c"+
    "\100\211\1\u02dc\13\211\1\210\1\u02c9\1\211\1\210\1\u02db"+
    "\1\210\1\u02dd\116\210\1\211\1\210\1\211\1\210\1\u010b"+
    "\67\210\1\u02de\24\210\7\0\1\6\7\0\1\6\2\0"+
    "\3\6\6\0\16\6\1\u02df\11\6\2\0\33\6\12\0"+
    "\1\6\7\0\1\6\2\0\3\6\6\0\1\u02e0\27\6"+
    "\2\0\33\6\12\0\1\6\7\0\1\6\2\0\3\6"+
    "\6\0\15\6\1\u02e1\12\6\2\0\16\6\1\u02e1\14\6"+
    "\12\0\1\6\7\0\1\6\2\0\3\6\6\0\1\u02e2"+
    "\27\6\2\0\1\6\1\u02e2\31\6\12\0\1\6\7\0"+
    "\1\6\2\0\3\6\6\0\15\6\1\u02e3\12\6\2\0"+
    "\33\6\12\0\1\6\7\0\1\6\2\0\3\6\6\0"+
    "\14\6\1\u02e4\13\6\2\0\33\6\12\0\1\6\7\0"+
    "\1\6\2\0\3\6\6\0\16\6\1\u02e5\11\6\2\0"+
    "\33\6\12\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\30\30\2\0\1\6\3\30\1\u02e6\26\30\12\0\1\6"+
    "\7\0\1\6\2\0\3\6\6\0\30\6\2\0\14\6"+
    "\1\u02e7\16\6\12\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\30\30\2\0\1\6\23\30\1\u02e8\6\30\12\0"+
    "\1\6\7\0\1\6\2\0\3\6\6\0\30\6\2\0"+
    "\16\6\1\u02e9\14\6\3\0\1\211\1\u02db\2\211\1\u02db"+
    "\1\211\1\u02dd\122\211\1\u010c\67\211\1\u02ea\24\211\2\210"+
    "\1\211\1\210\1\211\1\210\1\u010b\64\210\1\u02eb\27\210"+
    "\7\0\1\6\7\0\1\6\2\0\3\6\6\0\13\6"+
    "\1\u02ec\14\6\2\0\33\6\12\0\1\6\7\0\1\6"+
    "\2\0\3\6\6\0\6\6\1\u02ed\21\6\2\0\7\6"+
    "\1\u02ed\23\6\12\0\1\6\7\0\1\6\2\0\3\6"+
    "\6\0\23\6\1\u02ee\4\6\2\0\33\6\12\0\1\6"+
    "\7\0\1\6\2\0\3\6\6\0\20\6\1\u02ef\7\6"+
    "\2\0\33\6\12\0\1\6\7\0\1\6\2\0\3\6"+
    "\6\0\30\6\2\0\31\6\1\u02f0\1\6\12\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\1\30\1\u02f1\26\30"+
    "\2\0\1\6\32\30\3\0\6\211\1\u010c\64\211\1\u02f2"+
    "\27\211\1\210\1\u02eb\1\211\1\210\1\u02f2\1\210\1\u02f3"+
    "\114\210\7\0\1\6\7\0\1\6\2\0\3\6\6\0"+
    "\4\6\1\u02f4\23\6\2\0\33\6\12\0\1\6\7\0"+
    "\1\6\2\0\3\6\6\0\14\6\1\u02f5\13\6\2\0"+
    "\33\6\12\0\1\6\7\0\1\6\2\0\3\6\6\0"+
    "\10\6\1\u02f6\17\6\2\0\33\6\12\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\30\30\2\0\1\6\30\30"+
    "\1\u02f7\1\30\3\0\1\211\1\u02f2\2\211\1\u02f2\1\211"+
    "\1\u02f3\114\211\7\0\1\6\7\0\1\6\2\0\3\6"+
    "\6\0\1\u02f8\27\6\2\0\33\6\12\0\1\6\7\0"+
    "\1\6\2\0\3\6\6\0\16\6\1\u02f9\11\6\2\0"+
    "\33\6\12\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\10\30\1\u02fa\17\30\2\0\1\6\32\30\12\0\1\6"+
    "\7\0\1\6\2\0\3\6\6\0\22\6\1\u02fb\5\6"+
    "\2\0\33\6\12\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\30\30\2\0\1\6\3\30\1\u02fc\26\30\12\0"+
    "\1\6\7\0\1\6\2\0\3\6\6\0\16\6\1\u02fd"+
    "\11\6\2\0\33\6\12\0\1\6\7\0\1\6\2\0"+
    "\3\6\6\0\20\6\1\u02fe\7\6\2\0\33\6\12\0"+
    "\1\6\7\0\1\6\2\0\3\6\6\0\10\6\1\u02ff"+
    "\17\6\2\0\33\6\12\0\1\6\7\0\1\6\2\0"+
    "\3\6\6\0\16\6\1\u0300\11\6\2\0\33\6\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[53867];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\5\1\4\11\1\1\1\11\2\1\2\11"+
    "\22\1\2\11\16\1\1\11\1\1\1\11\1\1\1\11"+
    "\32\0\1\11\1\0\3\1\1\0\3\11\1\0\51\1"+
    "\1\11\2\0\1\11\54\0\1\11\36\0\1\11\2\0"+
    "\62\1\2\11\36\0\1\11\42\0\66\1\40\0\1\11"+
    "\26\0\1\11\1\0\1\11\11\0\51\1\41\0\1\11"+
    "\1\0\1\11\4\0\1\11\2\0\2\11\1\0\1\11"+
    "\7\0\2\11\4\0\43\1\25\0\1\11\3\0\1\11"+
    "\4\0\1\11\3\0\1\11\1\0\2\11\2\0\1\11"+
    "\2\0\1\11\31\1\17\0\1\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\1\0\2\11\21\1\6\0\2\11"+
    "\1\0\2\11\1\0\16\1\2\0\1\11\1\0\13\1"+
    "\2\0\6\1\1\0\1\11\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[768];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    /* CODIGO A√ëADIDO */    


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public EtiquetadoLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    /* CODIGO EJECUTADO AL FINAL DEL ANALISIS */
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 133: break;
          case 2:
            { /* IGNORAR */
            }
            // fall through
          case 134: break;
          case 3:
            { return new Symbol(NOT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 135: break;
          case 4:
            { return new Symbol(IDENTIFICADOR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 136: break;
          case 5:
            { return new Symbol(COM_SIMP, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 137: break;
          case 6:
            { return new Symbol(PARA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 138: break;
          case 7:
            { return new Symbol(PARC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 139: break;
          case 8:
            { return new Symbol(MULTIPLICACION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 140: break;
          case 9:
            { return new Symbol(SUMA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 141: break;
          case 10:
            { return new Symbol(RESTA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 142: break;
          case 11:
            { return new Symbol(DIVISION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 143: break;
          case 12:
            { return new Symbol(D_INTEGER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 144: break;
          case 13:
            { return new Symbol(PUNTOS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 145: break;
          case 14:
            { return new Symbol(PUNTO_COMA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 146: break;
          case 15:
            { return new Symbol(MENOR_QUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 147: break;
          case 16:
            { return new Symbol(IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 148: break;
          case 17:
            { return new Symbol(MAYOR_QUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 149: break;
          case 18:
            { return new Symbol(ALFANUMERICO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 150: break;
          case 19:
            { return new Symbol(CORA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 151: break;
          case 20:
            { return new Symbol(CORC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 152: break;
          case 21:
            { return new Symbol(LLAA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 153: break;
          case 22:
            { return new Symbol(BARRA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 154: break;
          case 23:
            { return new Symbol(LLAC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 155: break;
          case 24:
            { return new Symbol(DIFERENTE_IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 156: break;
          case 25:
            { return new Symbol(AND, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 157: break;
          case 26:
            { return new Symbol(D_DECIMAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 158: break;
          case 27:
            { return new Symbol(MENOR_IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 159: break;
          case 28:
            { return new Symbol(IGUAL_IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 160: break;
          case 29:
            { return new Symbol(MAYOR_IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 161: break;
          case 30:
            { return new Symbol(IF, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 162: break;
          case 31:
            { return new Symbol(ID, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 163: break;
          case 32:
            { return new Symbol(OR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 164: break;
          case 33:
            { return new Symbol(D_STRING, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 165: break;
          case 34:
            { return new Symbol(DIGITO_COM, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 166: break;
          case 35:
            { return new Symbol(D_CHAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 167: break;
          case 36:
            { return new Symbol(ASC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 168: break;
          case 37:
            { return new Symbol(P, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 169: break;
          case 38:
            { return new Symbol(END, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 170: break;
          case 39:
            { return new Symbol(ALT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 171: break;
          case 40:
            { return new Symbol(SRC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 172: break;
          case 41:
            { return new Symbol(ALLCHARNOSPACE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 173: break;
          case 42:
            { return new Symbol(ALLCHAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 174: break;
          case 43:
            { return new Symbol(PORCENTAJE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 175: break;
          case 44:
            { return new Symbol(BR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 176: break;
          case 45:
            { return new Symbol(H1, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 177: break;
          case 46:
            { return new Symbol(DESC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 178: break;
          case 47:
            { return new Symbol(ELSE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 179: break;
          case 48:
            { return new Symbol(EXIT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 180: break;
          case 49:
            { return new Symbol(INIT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 181: break;
          case 50:
            { return new Symbol(THEN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 182: break;
          case 51:
            { return new Symbol(CHAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 183: break;
          case 52:
            { return new Symbol(COLS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 184: break;
          case 53:
            { return new Symbol(HREF, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 185: break;
          case 54:
            { return new Symbol(NAME, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 186: break;
          case 55:
            { return new Symbol(ROWS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 187: break;
          case 56:
            { return new Symbol(TRUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 188: break;
          case 57:
            { return new Symbol(TYPE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 189: break;
          case 58:
            { return new Symbol(PIXELES, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 190: break;
          case 59:
            { return new Symbol(RED, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 191: break;
          case 60:
            { return new Symbol(ROW, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 192: break;
          case 61:
            { return new Symbol(DIV, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 193: break;
          case 62:
            { return new Symbol(IMG, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 194: break;
          case 63:
            { return new Symbol(WHILE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 195: break;
          case 64:
            { return new Symbol(CLASS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 196: break;
          case 65:
            { return new Symbol(COLOR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 197: break;
          case 66:
            { return new Symbol(FALSE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 198: break;
          case 67:
            { return new Symbol(WIDTH, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 199: break;
          case 68:
            { return new Symbol(AQUA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 200: break;
          case 69:
            { return new Symbol(BLUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 201: break;
          case 70:
            { return new Symbol(GRAY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 202: break;
          case 71:
            { return new Symbol(LEFT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 203: break;
          case 72:
            { return new Symbol(LIME, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 204: break;
          case 73:
            { return new Symbol(NAVY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 205: break;
          case 74:
            { return new Symbol(TEAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 206: break;
          case 75:
            { return new Symbol(TEXT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 207: break;
          case 76:
            { return new Symbol(BODY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 208: break;
          case 77:
            { return new Symbol(GCIC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 209: break;
          case 78:
            { return new Symbol(HEAD, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 210: break;
          case 79:
            { return new Symbol(LINK, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 211: break;
          case 80:
            { return new Symbol(SPAM, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 212: break;
          case 81:
            { return new Symbol(HUNTIL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 213: break;
          case 82:
            { return new Symbol(INSERT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 214: break;
          case 83:
            { return new Symbol(REPEAT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 215: break;
          case 84:
            { return new Symbol(HEIGHT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 216: break;
          case 85:
            { return new Symbol(STRING, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 217: break;
          case 86:
            { return new Symbol(ARIAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 218: break;
          case 87:
            { return new Symbol(BLACK, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 219: break;
          case 88:
            { return new Symbol(GREEN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 220: break;
          case 89:
            { return new Symbol(OLIVE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 221: break;
          case 90:
            { return new Symbol(RADIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 222: break;
          case 91:
            { return new Symbol(RIGHT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 223: break;
          case 92:
            { return new Symbol(WHITE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 224: break;
          case 93:
            { return new Symbol(GLOBAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 225: break;
          case 94:
            { return new Symbol(INPUT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 226: break;
          case 95:
            { return new Symbol(TITLE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 227: break;
          case 96:
            { return new Symbol(ON_LOAD, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 228: break;
          case 97:
            { return new Symbol(REVERSE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 229: break;
          case 98:
            { return new Symbol(BOOLEAN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 230: break;
          case 99:
            { return new Symbol(DECIMAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 231: break;
          case 100:
            { return new Symbol(INTEGER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 232: break;
          case 101:
            { return new Symbol(ONCLICK, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 233: break;
          case 102:
            { return new Symbol(GENEVA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 234: break;
          case 103:
            { return new Symbol(CENTER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 235: break;
          case 104:
            { return new Symbol(COLUMN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 236: break;
          case 105:
            { return new Symbol(MAROON, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 237: break;
          case 106:
            { return new Symbol(NUMBER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 238: break;
          case 107:
            { return new Symbol(PURPLE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 239: break;
          case 108:
            { return new Symbol(SILVER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 240: break;
          case 109:
            { return new Symbol(YELLOW, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 241: break;
          case 110:
            { return new Symbol(BUTTON, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 242: break;
          case 111:
            { return new Symbol(OPTION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 243: break;
          case 112:
            { return new Symbol(SELECT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 244: break;
          case 113:
            { return new Symbol(COURIER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 245: break;
          case 114:
            { return new Symbol(VERDANA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 246: break;
          case 115:
            { return new Symbol(FUCHSIA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 247: break;
          case 116:
            { return new Symbol(JUSTIFY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 248: break;
          case 117:
            { return new Symbol(PROCESS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 249: break;
          case 118:
            { return new Symbol(THENWHILE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 250: break;
          case 119:
            { return new Symbol(FONTSIZE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 251: break;
          case 120:
            { return new Symbol(CHECKBOX, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 252: break;
          case 121:
            { return new Symbol(ALERT_INFO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 253: break;
          case 122:
            { return new Symbol(TEXTAREA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 254: break;
          case 123:
            { return new Symbol(LETPAR_NUM, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 255: break;
          case 124:
            { return new Symbol(BACKGROUND, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 256: break;
          case 125:
            { return new Symbol(TEXTALIGN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 257: break;
          case 126:
            { return new Symbol(SCRIPTING, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 258: break;
          case 127:
            { return new Symbol(FONTFAMILY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 259: break;
          case 128:
            { return new Symbol(SANS_SERIF, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 260: break;
          case 129:
            { return new Symbol(LETIMPAR_NUM, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 261: break;
          case 130:
            { return new Symbol(NUM_ALEATORIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 262: break;
          case 131:
            { return new Symbol(GETBYID, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 263: break;
          case 132:
            { return new Symbol(CARACTER_ALEATORIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 264: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
