// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: EtiquetadoLexer.jflex

//Secci√≥n de Importaciones
package com.froi.pruebas.gramaticas;
import java_cup.runtime.*;
import static com.froi.pruebas.gramaticas.EtiquetadoParserSym.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class EtiquetadoLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int YYSECOND = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\u10df\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\1\5\1\6\1\0\1\7\1\0\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\0\1\16\1\17\1\20\1\21"+
    "\1\22\10\23\1\24\1\25\1\26\1\27\1\30\1\0"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\43\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\43\1\62\1\0\1\63\1\0\1\64"+
    "\1\0\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\43\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\43\1\104\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\1\117\u019a\0\2\11"+
    "\346\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\2\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\1\16\21\1\22\1\23\16\21"+
    "\1\24\1\25\1\26\1\1\3\27\1\30\1\0\1\31"+
    "\1\0\2\13\1\32\1\0\1\33\1\34\1\35\1\0"+
    "\3\21\1\0\5\21\1\36\24\21\1\37\12\21\1\40"+
    "\1\41\1\42\1\43\2\0\1\21\1\44\1\21\7\0"+
    "\1\45\2\0\2\21\1\46\6\21\1\0\5\21\1\47"+
    "\17\21\1\50\5\21\2\0\2\21\1\0\1\51\3\0"+
    "\1\52\12\0\1\53\1\54\1\55\1\21\1\56\3\21"+
    "\2\0\3\21\1\57\3\21\1\60\2\21\1\61\5\21"+
    "\1\62\1\21\1\63\1\21\1\64\2\21\1\65\1\66"+
    "\1\21\3\0\2\21\2\0\1\67\2\0\1\70\10\0"+
    "\4\21\2\0\4\21\1\71\2\21\1\72\1\73\1\21"+
    "\1\74\1\0\5\21\1\0\1\75\3\0\1\21\1\76"+
    "\1\0\1\77\1\100\1\0\1\101\3\0\1\102\2\0"+
    "\1\103\1\104\2\21\2\0\1\21\1\105\5\21\2\0"+
    "\1\21\1\106\2\21\1\107\2\0\1\110\1\0\1\21"+
    "\1\0\1\111\4\0\1\112\1\21\2\0\1\113\1\21"+
    "\1\114\2\21\1\115\1\116\2\0\1\21\1\117\1\120"+
    "\2\0\1\21\1\121\1\122\1\0\1\123\1\0\1\21"+
    "\3\0\2\21\2\0\1\21\10\0\1\124\1\125\1\21"+
    "\1\0\1\126\1\21\1\0\1\127\2\0\1\130\1\0"+
    "\1\131\1\0\1\132\1\0\1\21\1\133\1\0\1\134"+
    "\2\0\1\135\1\21\1\0\1\136\1\0\1\21\1\0"+
    "\1\137\1\21\1\0\1\140\3\0\1\141";

  private static int [] zzUnpackAction() {
    int [] result = new int[393];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\120\0\240\0\360\0\u0140\0\240\0\u0190\0\u01e0"+
    "\0\240\0\240\0\240\0\240\0\u0230\0\240\0\u0280\0\u02d0"+
    "\0\240\0\240\0\u0320\0\u0370\0\u03c0\0\u0410\0\u0460\0\u04b0"+
    "\0\u0500\0\u0550\0\u05a0\0\u05f0\0\u0640\0\u0690\0\u06e0\0\u0730"+
    "\0\u0780\0\u07d0\0\u0820\0\u0870\0\240\0\240\0\u08c0\0\u0910"+
    "\0\u0960\0\u09b0\0\u0a00\0\u0a50\0\u0aa0\0\u0af0\0\u0b40\0\u0b90"+
    "\0\u0be0\0\u0c30\0\u0c80\0\u0cd0\0\240\0\u0d20\0\240\0\u0d70"+
    "\0\u0d70\0\240\0\u0dc0\0\240\0\u0e10\0\240\0\u0e60\0\u0eb0"+
    "\0\u0f00\0\u0f50\0\u0fa0\0\240\0\240\0\240\0\u0ff0\0\u1040"+
    "\0\u1090\0\u10e0\0\u1130\0\u1180\0\u11d0\0\u1220\0\u1270\0\u12c0"+
    "\0\u04b0\0\u1310\0\u1360\0\u13b0\0\u1400\0\u1450\0\u14a0\0\u14f0"+
    "\0\u1540\0\u1590\0\u15e0\0\u1630\0\u1680\0\u16d0\0\u1720\0\u1770"+
    "\0\u17c0\0\u1810\0\u1860\0\u18b0\0\u1900\0\u04b0\0\u1950\0\u19a0"+
    "\0\u19f0\0\u1a40\0\u1a90\0\u1ae0\0\u1b30\0\u1b80\0\u1bd0\0\u1c20"+
    "\0\240\0\u0d70\0\240\0\240\0\u1c70\0\u1cc0\0\u1d10\0\u04b0"+
    "\0\u1d60\0\u1db0\0\u1e00\0\u1e50\0\u1ea0\0\u1ef0\0\u1f40\0\u1f90"+
    "\0\240\0\u1fe0\0\u2030\0\u2080\0\u20d0\0\u04b0\0\u2120\0\u2170"+
    "\0\u21c0\0\u2210\0\u2260\0\u22b0\0\u2300\0\u2350\0\u23a0\0\u23f0"+
    "\0\u2440\0\u2490\0\u04b0\0\u24e0\0\u2530\0\u2580\0\u25d0\0\u2620"+
    "\0\u2670\0\u26c0\0\u2710\0\u2760\0\u27b0\0\u2800\0\u2850\0\u28a0"+
    "\0\u28f0\0\u2940\0\u04b0\0\u2990\0\u29e0\0\u2a30\0\u2a80\0\u2ad0"+
    "\0\u2b20\0\u2b70\0\u2bc0\0\u2c10\0\u2c60\0\240\0\u2cb0\0\u2d00"+
    "\0\u2d50\0\240\0\u2da0\0\u2df0\0\u2e40\0\u2e90\0\u2ee0\0\u2f30"+
    "\0\u2f80\0\u2fd0\0\u3020\0\u3070\0\u04b0\0\u04b0\0\u04b0\0\u30c0"+
    "\0\u04b0\0\u3110\0\u3160\0\u31b0\0\u3200\0\u3250\0\u32a0\0\u32f0"+
    "\0\u3340\0\u3390\0\u33e0\0\u3430\0\u3480\0\u04b0\0\u34d0\0\u3520"+
    "\0\u04b0\0\u3570\0\u35c0\0\u3610\0\u3660\0\u36b0\0\u04b0\0\u3700"+
    "\0\u04b0\0\u3750\0\u04b0\0\u37a0\0\u37f0\0\u04b0\0\u04b0\0\u3840"+
    "\0\u3890\0\u38e0\0\u3930\0\u3980\0\u39d0\0\u3a20\0\u3a70\0\240"+
    "\0\u3ac0\0\u3b10\0\240\0\u3b60\0\u3bb0\0\u3c00\0\u3c50\0\u3ca0"+
    "\0\u3cf0\0\u3d40\0\u3d90\0\u3de0\0\u3e30\0\u3e80\0\u3ed0\0\u3f20"+
    "\0\u3f70\0\u3fc0\0\u4010\0\u4060\0\u40b0\0\u04b0\0\u4100\0\u4150"+
    "\0\u04b0\0\u04b0\0\u41a0\0\u04b0\0\u41f0\0\u4240\0\u4290\0\u42e0"+
    "\0\u4330\0\u4380\0\u43d0\0\u04b0\0\u4420\0\u4470\0\u44c0\0\u4510"+
    "\0\240\0\u4560\0\240\0\240\0\u45b0\0\240\0\u4600\0\u4650"+
    "\0\u46a0\0\240\0\u46f0\0\u4740\0\u04b0\0\u04b0\0\u4790\0\u47e0"+
    "\0\u4830\0\u4880\0\u48d0\0\u04b0\0\u4920\0\u4970\0\u49c0\0\u4a10"+
    "\0\u4a60\0\u4ab0\0\u4b00\0\u4b50\0\u04b0\0\u4ba0\0\u4bf0\0\u04b0"+
    "\0\u4c40\0\u4c90\0\240\0\u4ce0\0\u4d30\0\u4d80\0\240\0\u4dd0"+
    "\0\u4e20\0\u4e70\0\u4ec0\0\240\0\u4f10\0\u4f60\0\u4fb0\0\240"+
    "\0\u5000\0\u04b0\0\u5050\0\u50a0\0\u04b0\0\u04b0\0\u50f0\0\u5140"+
    "\0\u5190\0\u04b0\0\u04b0\0\u51e0\0\u5230\0\u5280\0\240\0\240"+
    "\0\u52d0\0\240\0\u5320\0\u5370\0\u53c0\0\u5410\0\u5460\0\u54b0"+
    "\0\u5500\0\u5550\0\u55a0\0\u55f0\0\u5640\0\u5690\0\u56e0\0\u5730"+
    "\0\u5780\0\u57d0\0\u5820\0\u5870\0\u5460\0\u04b0\0\u58c0\0\u5910"+
    "\0\240\0\u5960\0\u59b0\0\240\0\u5a00\0\u5a50\0\240\0\u5aa0"+
    "\0\240\0\u5af0\0\u04b0\0\u5b40\0\u5b90\0\240\0\u5be0\0\240"+
    "\0\u5c30\0\u5c80\0\240\0\u5cd0\0\u5d20\0\240\0\u5d70\0\u5dc0"+
    "\0\u5e10\0\240\0\u5e60\0\u5eb0\0\u04b0\0\u5f00\0\u5f50\0\u5fa0"+
    "\0\240";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[393];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\5\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\3\1\16\1\17\2\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\2\30\1\34\1\35\2\30\1\36\1\30"+
    "\1\37\1\40\1\41\1\42\1\30\1\43\2\30\1\44"+
    "\2\30\1\45\1\46\1\6\1\47\1\50\1\51\1\52"+
    "\1\30\1\53\1\54\1\55\1\56\3\30\1\57\1\60"+
    "\1\30\1\61\1\62\1\63\2\30\1\64\3\30\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\71\1\72\1\3"+
    "\12\70\1\3\5\70\1\3\1\70\1\3\65\70\1\71"+
    "\1\70\125\0\1\73\21\0\1\74\70\0\6\75\1\0"+
    "\111\75\10\0\1\76\107\0\4\77\1\0\4\77\1\0"+
    "\106\77\21\0\1\100\2\101\113\0\1\102\1\0\3\30"+
    "\6\0\30\30\3\0\30\30\22\0\1\102\1\0\3\20"+
    "\6\0\30\30\3\0\30\30\10\0\1\103\21\0\1\104"+
    "\117\0\1\105\117\0\1\106\163\0\1\107\45\0\3\30"+
    "\6\0\13\30\1\110\5\30\1\111\6\30\3\0\30\30"+
    "\24\0\3\30\6\0\30\30\3\0\30\30\24\0\3\30"+
    "\6\0\1\112\27\30\2\0\1\113\30\30\24\0\3\30"+
    "\6\0\4\30\1\114\23\30\3\0\30\30\24\0\3\30"+
    "\6\0\13\30\1\115\1\30\1\116\10\30\1\117\1\30"+
    "\3\0\30\30\24\0\3\30\6\0\23\30\1\120\4\30"+
    "\3\0\30\30\24\0\3\30\6\0\5\30\1\121\7\30"+
    "\1\122\12\30\3\0\30\30\24\0\3\30\6\0\4\30"+
    "\1\123\23\30\3\0\30\30\24\0\3\30\6\0\23\30"+
    "\1\124\4\30\3\0\30\30\24\0\3\30\6\0\15\30"+
    "\1\125\12\30\3\0\30\30\24\0\3\30\6\0\20\30"+
    "\1\126\7\30\3\0\30\30\24\0\3\30\6\0\4\30"+
    "\1\127\23\30\3\0\30\30\24\0\3\30\6\0\7\30"+
    "\1\130\20\30\3\0\30\30\24\0\3\30\6\0\7\30"+
    "\1\131\20\30\3\0\30\30\24\0\3\30\6\0\30\30"+
    "\3\0\12\30\1\132\15\30\24\0\3\30\6\0\30\30"+
    "\3\0\1\133\14\30\1\134\12\30\24\0\3\30\6\0"+
    "\30\30\2\0\1\113\7\30\1\135\2\30\1\136\2\30"+
    "\1\137\12\30\24\0\3\30\6\0\30\30\3\0\4\30"+
    "\1\140\23\30\24\0\3\30\6\0\30\30\3\0\1\141"+
    "\14\30\1\142\12\30\24\0\3\30\6\0\30\30\3\0"+
    "\4\30\1\143\23\30\24\0\3\30\6\0\30\30\3\0"+
    "\4\30\1\144\12\30\1\145\10\30\24\0\3\30\6\0"+
    "\30\30\3\0\3\30\1\146\10\30\1\147\13\30\24\0"+
    "\3\30\6\0\30\30\3\0\1\150\27\30\24\0\3\30"+
    "\6\0\30\30\3\0\14\30\1\151\13\30\24\0\3\30"+
    "\6\0\30\30\3\0\15\30\1\152\12\30\24\0\3\30"+
    "\6\0\30\30\3\0\17\30\1\153\1\30\1\154\6\30"+
    "\24\0\3\30\6\0\30\30\3\0\4\30\1\155\12\30"+
    "\1\156\6\30\1\157\1\30\24\0\3\30\6\0\30\30"+
    "\3\0\10\30\1\160\17\30\121\0\1\161\1\0\26\162"+
    "\1\0\1\162\1\0\67\162\2\73\2\0\114\73\6\0"+
    "\1\163\122\0\1\164\125\0\1\102\117\0\1\102\1\0"+
    "\3\101\115\0\3\102\112\0\1\165\200\0\1\166\41\0"+
    "\3\30\6\0\4\30\1\167\23\30\3\0\30\30\24\0"+
    "\3\30\6\0\2\30\1\170\25\30\3\0\30\30\24\0"+
    "\3\30\6\0\20\30\1\171\7\30\3\0\30\30\36\0"+
    "\1\172\1\0\1\173\2\0\1\174\1\175\1\176\2\0"+
    "\1\177\2\0\1\200\1\201\1\0\1\202\1\203\11\0"+
    "\1\172\1\0\1\173\2\0\1\174\1\175\1\176\1\0"+
    "\1\177\2\0\1\200\1\201\1\0\1\202\1\203\32\0"+
    "\3\30\6\0\21\30\1\204\6\30\3\0\30\30\24\0"+
    "\3\30\6\0\21\30\1\205\6\30\3\0\30\30\24\0"+
    "\3\30\6\0\3\30\1\206\24\30\3\0\30\30\24\0"+
    "\3\30\6\0\10\30\1\207\17\30\3\0\30\30\24\0"+
    "\3\30\6\0\15\30\1\210\12\30\3\0\30\30\24\0"+
    "\3\30\6\0\10\30\1\211\10\30\1\212\6\30\3\0"+
    "\30\30\24\0\3\30\6\0\22\30\1\213\5\30\3\0"+
    "\30\30\24\0\3\30\6\0\14\30\1\214\13\30\3\0"+
    "\30\30\24\0\3\30\6\0\30\30\2\0\1\215\30\30"+
    "\24\0\3\30\6\0\16\30\1\216\11\30\3\0\30\30"+
    "\24\0\3\30\6\0\17\30\1\217\4\30\1\220\3\30"+
    "\3\0\30\30\24\0\3\30\6\0\4\30\1\221\23\30"+
    "\3\0\30\30\24\0\3\30\6\0\10\30\1\222\17\30"+
    "\3\0\30\30\24\0\3\30\6\0\30\30\3\0\21\30"+
    "\1\223\6\30\24\0\3\30\6\0\30\30\3\0\2\30"+
    "\1\224\25\30\24\0\3\30\6\0\30\30\3\0\15\30"+
    "\1\225\12\30\24\0\3\30\6\0\30\30\3\0\1\226"+
    "\27\30\24\0\3\30\6\0\30\30\3\0\1\227\27\30"+
    "\24\0\3\30\6\0\30\30\3\0\12\30\1\230\15\30"+
    "\24\0\3\30\6\0\30\30\3\0\2\30\1\231\25\30"+
    "\24\0\3\30\6\0\30\30\3\0\12\30\1\232\15\30"+
    "\24\0\3\30\6\0\30\30\3\0\14\30\1\233\13\30"+
    "\24\0\3\30\6\0\30\30\3\0\21\30\1\234\6\30"+
    "\24\0\3\30\6\0\30\30\3\0\10\30\1\235\17\30"+
    "\24\0\3\30\6\0\30\30\3\0\4\30\1\236\23\30"+
    "\24\0\3\30\6\0\30\30\3\0\21\30\1\237\6\30"+
    "\24\0\3\30\6\0\30\30\3\0\13\30\1\240\14\30"+
    "\24\0\3\30\6\0\30\30\3\0\2\30\1\241\25\30"+
    "\24\0\3\30\6\0\30\30\3\0\24\30\1\242\3\30"+
    "\24\0\3\30\6\0\30\30\3\0\2\30\1\243\25\30"+
    "\24\0\3\30\6\0\30\30\3\0\17\30\1\244\10\30"+
    "\24\0\3\30\6\0\30\30\3\0\25\30\1\245\2\30"+
    "\24\0\3\30\6\0\30\30\3\0\22\30\1\246\5\30"+
    "\24\0\3\30\6\0\30\30\3\0\16\30\1\247\11\30"+
    "\24\0\3\30\6\0\30\30\3\0\3\30\1\250\24\30"+
    "\21\0\1\251\203\0\1\252\36\0\3\30\6\0\20\30"+
    "\1\253\7\30\3\0\30\30\24\0\3\30\6\0\1\254"+
    "\27\30\3\0\30\30\53\0\1\255\1\0\1\256\2\0"+
    "\1\257\24\0\1\255\1\0\1\256\2\0\1\257\52\0"+
    "\1\260\32\0\1\260\56\0\1\261\32\0\1\261\52\0"+
    "\1\262\13\0\1\263\32\0\1\263\74\0\1\264\1\265"+
    "\30\0\1\264\1\265\60\0\1\266\32\0\1\266\73\0"+
    "\1\267\31\0\1\267\50\0\1\270\1\0\1\271\12\0"+
    "\1\272\15\0\1\270\1\0\1\271\11\0\1\272\52\0"+
    "\1\273\3\0\1\274\26\0\1\273\3\0\1\274\43\0"+
    "\3\30\6\0\2\30\1\275\25\30\3\0\30\30\24\0"+
    "\3\30\6\0\4\30\1\276\23\30\3\0\30\30\24\0"+
    "\3\30\6\0\22\30\1\277\5\30\3\0\30\30\24\0"+
    "\3\30\6\0\22\30\1\300\5\30\3\0\30\30\24\0"+
    "\3\30\6\0\22\30\1\301\5\30\3\0\30\30\24\0"+
    "\3\30\6\0\4\30\1\302\23\30\3\0\30\30\24\0"+
    "\3\30\6\0\10\30\1\303\6\30\1\304\10\30\3\0"+
    "\30\30\24\0\3\30\6\0\30\30\2\0\1\305\30\30"+
    "\50\0\1\306\73\0\3\30\6\0\2\30\1\307\25\30"+
    "\3\0\30\30\24\0\3\30\6\0\4\30\1\310\23\30"+
    "\3\0\30\30\24\0\3\30\6\0\4\30\1\311\23\30"+
    "\3\0\30\30\24\0\3\30\6\0\15\30\1\312\12\30"+
    "\3\0\30\30\24\0\3\30\6\0\13\30\1\313\14\30"+
    "\3\0\30\30\24\0\3\30\6\0\30\30\3\0\11\30"+
    "\1\314\16\30\24\0\3\30\6\0\30\30\3\0\12\30"+
    "\1\315\15\30\24\0\3\30\6\0\30\30\3\0\17\30"+
    "\1\316\10\30\24\0\3\30\6\0\30\30\3\0\20\30"+
    "\1\317\7\30\24\0\3\30\6\0\30\30\3\0\15\30"+
    "\1\320\2\30\1\321\7\30\24\0\3\30\6\0\30\30"+
    "\3\0\10\30\1\322\17\30\24\0\3\30\6\0\30\30"+
    "\3\0\20\30\1\323\7\30\24\0\3\30\6\0\30\30"+
    "\3\0\21\30\1\324\6\30\24\0\3\30\6\0\4\30"+
    "\1\325\23\30\3\0\30\30\24\0\3\30\6\0\30\30"+
    "\3\0\6\30\1\326\21\30\24\0\3\30\6\0\30\30"+
    "\3\0\5\30\1\327\22\30\24\0\3\30\6\0\30\30"+
    "\3\0\4\30\1\330\23\30\24\0\3\30\6\0\30\30"+
    "\3\0\4\30\1\331\23\30\24\0\3\30\6\0\30\30"+
    "\3\0\12\30\1\332\15\30\24\0\3\30\6\0\30\30"+
    "\3\0\20\30\1\333\7\30\24\0\3\30\6\0\30\30"+
    "\3\0\10\30\1\334\17\30\24\0\3\30\6\0\30\30"+
    "\3\0\21\30\1\335\6\30\24\0\3\30\6\0\30\30"+
    "\3\0\4\30\1\336\23\30\24\0\3\30\6\0\30\30"+
    "\3\0\4\30\1\337\23\30\24\0\3\30\6\0\30\30"+
    "\3\0\21\30\1\340\6\30\3\0\16\341\1\342\101\341"+
    "\66\0\1\343\52\0\3\30\6\0\22\30\1\344\5\30"+
    "\3\0\30\30\24\0\3\30\6\0\2\30\1\345\25\30"+
    "\3\0\30\30\40\0\1\346\32\0\1\346\103\0\1\347"+
    "\31\0\1\347\67\0\1\350\31\0\1\350\51\0\1\351"+
    "\32\0\1\351\54\0\1\352\32\0\1\352\72\0\1\353"+
    "\32\0\1\353\75\0\1\354\31\0\1\354\63\0\1\355"+
    "\31\0\1\355\72\0\1\356\31\0\1\356\63\0\1\357"+
    "\31\0\1\357\60\0\1\360\31\0\1\360\52\0\1\361"+
    "\32\0\1\361\112\0\1\362\31\0\1\362\61\0\1\363"+
    "\31\0\1\363\32\0\3\30\6\0\10\30\1\364\17\30"+
    "\3\0\30\30\24\0\3\30\6\0\20\30\1\365\7\30"+
    "\3\0\30\30\24\0\3\30\6\0\14\30\1\366\13\30"+
    "\3\0\30\30\24\0\3\30\6\0\1\367\27\30\3\0"+
    "\30\30\35\0\1\370\135\0\1\371\70\0\3\30\6\0"+
    "\4\30\1\372\23\30\3\0\30\30\24\0\3\30\6\0"+
    "\1\373\27\30\3\0\30\30\24\0\3\30\6\0\20\30"+
    "\1\374\7\30\3\0\30\30\24\0\3\30\6\0\25\30"+
    "\1\375\2\30\3\0\30\30\24\0\3\30\6\0\4\30"+
    "\1\376\23\30\3\0\30\30\24\0\3\30\6\0\30\30"+
    "\3\0\6\30\1\377\21\30\24\0\3\30\6\0\30\30"+
    "\3\0\4\30\1\u0100\23\30\24\0\3\30\6\0\30\30"+
    "\3\0\20\30\1\u0101\7\30\24\0\3\30\6\0\30\30"+
    "\3\0\17\30\1\u0102\10\30\24\0\3\30\6\0\30\30"+
    "\3\0\13\30\1\u0103\14\30\24\0\3\30\6\0\30\30"+
    "\3\0\4\30\1\u0104\23\30\21\0\1\u0105\2\0\3\30"+
    "\6\0\30\30\3\0\30\30\24\0\3\30\6\0\30\30"+
    "\3\0\12\30\1\u0106\15\30\24\0\3\30\6\0\30\30"+
    "\3\0\7\30\1\u0107\20\30\24\0\3\30\6\0\30\30"+
    "\3\0\6\30\1\u0108\21\30\24\0\3\30\6\0\30\30"+
    "\3\0\10\30\1\u0109\17\30\24\0\3\30\6\0\30\30"+
    "\3\0\14\30\1\u010a\13\30\21\0\1\u010b\2\0\3\30"+
    "\6\0\30\30\3\0\30\30\24\0\3\30\6\0\30\30"+
    "\3\0\7\30\1\u010c\20\30\3\0\16\341\1\u010d\101\341"+
    "\16\0\1\342\11\0\1\72\154\0\1\u010e\53\0\3\30"+
    "\6\0\30\30\2\0\1\u010f\30\30\24\0\3\30\6\0"+
    "\22\30\1\u0110\5\30\3\0\30\30\64\0\1\u0111\31\0"+
    "\1\u0111\60\0\1\u0112\31\0\1\u0112\45\0\1\u0113\32\0"+
    "\1\u0113\65\0\1\u0114\32\0\1\u0114\104\0\1\u0115\31\0"+
    "\1\u0115\54\0\1\u0116\31\0\1\u0116\63\0\1\u0117\32\0"+
    "\1\u0117\64\0\1\u0118\32\0\1\u0118\60\0\1\u0119\32\0"+
    "\1\u0119\74\0\1\u011a\31\0\1\u011a\73\0\1\u011b\31\0"+
    "\1\u011b\56\0\1\u011c\31\0\1\u011c\41\0\3\30\6\0"+
    "\13\30\1\u011d\14\30\3\0\30\30\24\0\3\30\6\0"+
    "\22\30\1\u011e\5\30\3\0\30\30\24\0\3\30\6\0"+
    "\17\30\1\u011f\10\30\3\0\30\30\24\0\3\30\6\0"+
    "\20\30\1\u0120\7\30\3\0\30\30\50\0\1\u0121\104\0"+
    "\1\u0122\106\0\3\30\6\0\21\30\1\u0123\6\30\3\0"+
    "\30\30\24\0\3\30\6\0\22\30\1\u0124\5\30\3\0"+
    "\30\30\24\0\3\30\6\0\21\30\1\u0125\6\30\3\0"+
    "\30\30\24\0\3\30\6\0\7\30\1\u0126\20\30\3\0"+
    "\30\30\24\0\3\30\6\0\30\30\3\0\17\30\1\u0127"+
    "\10\30\24\0\3\30\6\0\30\30\3\0\1\u0128\27\30"+
    "\24\0\3\30\6\0\30\30\3\0\1\u0129\27\30\75\0"+
    "\1\u012a\12\0\1\u012b\33\0\3\30\6\0\30\30\3\0"+
    "\4\30\1\u012c\23\30\24\0\3\30\6\0\30\30\3\0"+
    "\21\30\1\u012d\6\30\24\0\3\30\6\0\30\30\3\0"+
    "\4\30\1\u012e\23\30\24\0\3\30\6\0\30\30\3\0"+
    "\2\30\1\u012f\25\30\24\0\3\30\6\0\30\30\3\0"+
    "\6\30\1\u0130\21\30\70\0\1\u0131\32\0\16\341\1\u0132"+
    "\101\341\77\0\1\u0133\62\0\1\u0134\76\0\3\30\6\0"+
    "\4\30\1\u0135\23\30\3\0\30\30\53\0\1\u0136\31\0"+
    "\1\u0136\71\0\1\u0137\31\0\1\u0137\61\0\1\u0138\31\0"+
    "\1\u0138\66\0\1\u0139\31\0\1\u0139\50\0\1\u013a\32\0"+
    "\1\u013a\62\0\1\u013b\32\0\1\u013b\70\0\1\u013c\32\0"+
    "\1\u013c\47\0\3\30\6\0\1\u013d\27\30\3\0\30\30"+
    "\24\0\3\30\6\0\30\30\2\0\1\u013e\30\30\41\0"+
    "\1\u013f\116\0\1\u0140\103\0\3\30\6\0\21\30\1\u0141"+
    "\6\30\3\0\30\30\24\0\3\30\6\0\4\30\1\u0142"+
    "\23\30\3\0\30\30\24\0\3\30\6\0\10\30\1\u0143"+
    "\17\30\3\0\30\30\24\0\3\30\6\0\30\30\3\0"+
    "\15\30\1\u0144\12\30\24\0\3\30\6\0\30\30\3\0"+
    "\14\30\1\u0145\13\30\24\0\3\30\6\0\30\30\3\0"+
    "\12\30\1\u0146\15\30\70\0\1\u0147\127\0\1\u0148\43\0"+
    "\3\30\6\0\30\30\3\0\13\30\1\u0149\14\30\24\0"+
    "\3\30\6\0\30\30\3\0\17\30\1\u014a\10\30\24\0"+
    "\3\30\6\0\30\30\3\0\11\30\1\u014b\16\30\102\0"+
    "\1\u014c\20\0\16\341\1\u0132\11\341\1\72\67\341\47\0"+
    "\1\u014d\71\0\3\30\6\0\20\30\1\u014e\7\30\3\0"+
    "\30\30\52\0\1\u014f\31\0\1\u014f\65\0\1\u0150\31\0"+
    "\1\u0150\72\0\1\u0151\31\0\1\u0151\65\0\1\u0152\31\0"+
    "\1\u0152\63\0\1\u0153\31\0\1\u0153\34\0\3\30\6\0"+
    "\20\30\1\u0154\7\30\3\0\30\30\52\0\1\u0155\102\0"+
    "\1\u0156\106\0\3\30\6\0\30\30\2\0\1\u0157\30\30"+
    "\24\0\3\30\6\0\13\30\1\u0158\14\30\3\0\30\30"+
    "\24\0\3\30\6\0\30\30\3\0\22\30\1\u0159\5\30"+
    "\103\0\1\u015a\133\0\1\u015b\24\0\3\30\6\0\30\30"+
    "\3\0\4\30\1\u015c\23\30\100\0\1\u015d\61\0\1\u015e"+
    "\101\0\3\30\6\0\30\30\2\0\1\u015f\30\30\45\0"+
    "\1\u0160\32\0\1\u0160\60\0\1\u0161\32\0\1\u0161\47\0"+
    "\3\30\6\0\30\30\2\0\1\u0162\30\30\60\0\1\u0163"+
    "\116\0\1\u0164\64\0\3\u0165\6\0\30\u0165\3\0\30\u0165"+
    "\24\0\3\30\6\0\4\30\1\u0166\23\30\3\0\30\30"+
    "\24\0\3\30\6\0\30\30\3\0\14\30\1\u0167\13\30"+
    "\100\0\1\u0168\113\0\1\u0169\47\0\3\30\6\0\30\30"+
    "\3\0\14\30\1\u016a\13\30\76\0\1\u016b\74\0\1\u016c"+
    "\101\0\1\u016d\134\0\1\u016e\31\0\1\u016e\50\0\1\u016f"+
    "\32\0\1\u016f\101\0\1\u0170\116\0\1\u0171\121\0\1\u0172"+
    "\70\0\3\30\6\0\30\30\3\0\3\30\1\u0173\24\30"+
    "\102\0\1\u0174\41\0\3\30\6\0\30\30\3\0\21\30"+
    "\1\u0175\6\30\104\0\1\u0176\63\0\1\u0177\112\0\1\u0178"+
    "\32\0\1\u0178\101\0\1\u0179\114\0\1\u017a\160\0\1\u017b"+
    "\25\0\3\30\6\0\1\30\1\u017c\26\30\3\0\30\30"+
    "\41\0\1\u017d\127\0\1\u017e\113\0\1\u017f\76\0\3\30"+
    "\6\0\30\30\3\0\26\30\1\u0180\1\30\35\0\1\u0181"+
    "\135\0\1\u0182\70\0\3\30\6\0\10\30\1\u0183\17\30"+
    "\3\0\30\30\57\0\1\u0184\64\0\3\30\6\0\30\30"+
    "\3\0\3\30\1\u0185\24\30\53\0\1\u0186\121\0\1\u0187"+
    "\107\0\1\u0188\125\0\1\u0189\47\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24560];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\1\11\2\1\4\11\1\1\1\11"+
    "\2\1\2\11\22\1\2\11\16\1\1\11\1\1\1\11"+
    "\2\1\1\11\1\1\1\11\1\0\1\11\1\0\3\1"+
    "\1\0\3\11\1\0\3\1\1\0\45\1\1\11\1\1"+
    "\2\11\2\0\3\1\7\0\1\11\2\0\11\1\1\0"+
    "\33\1\2\0\2\1\1\0\1\11\3\0\1\11\12\0"+
    "\10\1\2\0\32\1\3\0\2\1\2\0\1\11\2\0"+
    "\1\11\10\0\4\1\2\0\13\1\1\0\5\1\1\0"+
    "\1\1\3\0\1\1\1\11\1\0\2\11\1\0\1\11"+
    "\3\0\1\11\2\0\4\1\2\0\7\1\2\0\5\1"+
    "\2\0\1\11\1\0\1\1\1\0\1\11\4\0\1\11"+
    "\1\1\2\0\1\11\6\1\2\0\3\1\2\0\1\1"+
    "\2\11\1\0\1\11\1\0\1\1\3\0\2\1\2\0"+
    "\1\1\10\0\3\1\1\0\1\11\1\1\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\1\1\0\1\1"+
    "\1\11\1\0\1\11\2\0\1\11\1\1\1\0\1\11"+
    "\1\0\1\1\1\0\1\11\1\1\1\0\1\1\3\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[393];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    /* CODIGO A√ëADIDO */    


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public EtiquetadoLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    /* CODIGO EJECUTADO AL FINAL DEL ANALISIS */
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 98: break;
          case 2:
            { return new Symbol(NOT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 99: break;
          case 3:
            { return new Symbol(IDENTIFICADOR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 100: break;
          case 4:
            { return new Symbol(COM_SIMP, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 101: break;
          case 5:
            { return new Symbol(PARA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 102: break;
          case 6:
            { return new Symbol(PARC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 103: break;
          case 7:
            { return new Symbol(MULTIPLICACION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 104: break;
          case 8:
            { return new Symbol(SUMA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 105: break;
          case 9:
            { return new Symbol(RESTA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 106: break;
          case 10:
            { return new Symbol(DIVISION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 107: break;
          case 11:
            { return new Symbol(D_INTEGER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 108: break;
          case 12:
            { return new Symbol(PUNTOS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 109: break;
          case 13:
            { return new Symbol(PUNTO_COMA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 110: break;
          case 14:
            { return new Symbol(MENOR_QUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 111: break;
          case 15:
            { return new Symbol(IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 112: break;
          case 16:
            { return new Symbol(MAYOR_QUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 113: break;
          case 17:
            { return new Symbol(ALFANUMERICO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 114: break;
          case 18:
            { return new Symbol(CORA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 115: break;
          case 19:
            { return new Symbol(CORC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 116: break;
          case 20:
            { return new Symbol(LLAA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 117: break;
          case 21:
            { return new Symbol(BARRA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 118: break;
          case 22:
            { return new Symbol(LLAC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 119: break;
          case 23:
            { /* IGNORAR */
            }
            // fall through
          case 120: break;
          case 24:
            { return new Symbol(DIFERENTE_IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 121: break;
          case 25:
            { return new Symbol(AND, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 122: break;
          case 26:
            { return new Symbol(D_DECIMAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 123: break;
          case 27:
            { return new Symbol(MENOR_IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 124: break;
          case 28:
            { return new Symbol(IGUAL_IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 125: break;
          case 29:
            { return new Symbol(MAYOR_IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 126: break;
          case 30:
            { return new Symbol(IF, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 127: break;
          case 31:
            { return new Symbol(ID, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 128: break;
          case 32:
            { return new Symbol(OR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 129: break;
          case 33:
            { return new Symbol(TEXTO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 130: break;
          case 34:
            { return new Symbol(D_STRING, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 131: break;
          case 35:
            { return new Symbol(D_CHAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 132: break;
          case 36:
            { return new Symbol(ASC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 133: break;
          case 37:
            { return new Symbol(P, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 134: break;
          case 38:
            { return new Symbol(END, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 135: break;
          case 39:
            { return new Symbol(ALT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 136: break;
          case 40:
            { return new Symbol(SRC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 137: break;
          case 41:
            { return new Symbol(BR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 138: break;
          case 42:
            { return new Symbol(H1, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 139: break;
          case 43:
            { return new Symbol(DESC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 140: break;
          case 44:
            { return new Symbol(ELSE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 141: break;
          case 45:
            { return new Symbol(EXIT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 142: break;
          case 46:
            { return new Symbol(INIT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 143: break;
          case 47:
            { return new Symbol(THEN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 144: break;
          case 48:
            { return new Symbol(CHAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 145: break;
          case 49:
            { return new Symbol(COLS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 146: break;
          case 50:
            { return new Symbol(HREF, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 147: break;
          case 51:
            { return new Symbol(NAME, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 148: break;
          case 52:
            { return new Symbol(ROWS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 149: break;
          case 53:
            { return new Symbol(TRUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 150: break;
          case 54:
            { return new Symbol(TYPE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 151: break;
          case 55:
            { return new Symbol(DIV, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 152: break;
          case 56:
            { return new Symbol(IMG, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 153: break;
          case 57:
            { return new Symbol(WHILE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 154: break;
          case 58:
            { return new Symbol(CLASS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 155: break;
          case 59:
            { return new Symbol(COLOR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 156: break;
          case 60:
            { return new Symbol(FALSE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 157: break;
          case 61:
            { return new Symbol(WIDTH, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 158: break;
          case 62:
            { return new Symbol(BODY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 159: break;
          case 63:
            { return new Symbol(GCIC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 160: break;
          case 64:
            { return new Symbol(HEAD, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 161: break;
          case 65:
            { return new Symbol(LINK, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 162: break;
          case 66:
            { return new Symbol(SPAM, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 163: break;
          case 67:
            { return new Symbol(HUNTIL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 164: break;
          case 68:
            { return new Symbol(INSERT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 165: break;
          case 69:
            { return new Symbol(REPEAT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 166: break;
          case 70:
            { return new Symbol(HEIGHT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 167: break;
          case 71:
            { return new Symbol(STRING, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 168: break;
          case 72:
            { return new Symbol(GLOBAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 169: break;
          case 73:
            { return new Symbol(INPUT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 170: break;
          case 74:
            { return new Symbol(TITLE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 171: break;
          case 75:
            { return new Symbol(ON_LOAD, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 172: break;
          case 76:
            { return new Symbol(REVERSE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 173: break;
          case 77:
            { return new Symbol(BOOLEAN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 174: break;
          case 78:
            { return new Symbol(DECIMAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 175: break;
          case 79:
            { return new Symbol(INTEGER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 176: break;
          case 80:
            { return new Symbol(ONCLICK, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 177: break;
          case 81:
            { return new Symbol(BUTTON, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 178: break;
          case 82:
            { return new Symbol(OPTION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 179: break;
          case 83:
            { return new Symbol(SELECT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 180: break;
          case 84:
            { return new Symbol(PROCESS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 181: break;
          case 85:
            { return new Symbol(THENWHILE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 182: break;
          case 86:
            { return new Symbol(FONTSIZE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 183: break;
          case 87:
            { return new Symbol(ALERT_INFO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 184: break;
          case 88:
            { return new Symbol(TEXTAREA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 185: break;
          case 89:
            { return new Symbol(LETPAR_NUM, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 186: break;
          case 90:
            { return new Symbol(BACKGROUND, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 187: break;
          case 91:
            { return new Symbol(TEXTALIGN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 188: break;
          case 92:
            { return new Symbol(SCRIPTING, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 189: break;
          case 93:
            { return new Symbol(FONTFAMILY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 190: break;
          case 94:
            { return new Symbol(LETIMPAR_NUM, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 191: break;
          case 95:
            { return new Symbol(NUM_ALEATORIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 192: break;
          case 96:
            { return new Symbol(GETBYID, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 193: break;
          case 97:
            { return new Symbol(CARACTER_ALEATORIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 194: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
