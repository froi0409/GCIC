// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: EtiquetadoLexer.jflex

//Secci√≥n de Importaciones
package com.froi.pruebas.gramaticas;
import java_cup.runtime.*;
import static com.froi.pruebas.gramaticas.EtiquetadoParserSym.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class EtiquetadoLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\u10df\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\0\1\20\1\21\1\22\1\23"+
    "\1\24\10\25\1\26\1\27\1\30\1\31\1\32\1\0"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\45\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\45\1\64\1\0\1\65\1\0\1\66"+
    "\1\0\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115"+
    "\1\116\1\117\1\120\1\121\1\122\1\123\103\0\1\45"+
    "\7\0\1\45\3\0\1\45\5\0\1\45\6\0\1\45"+
    "\6\0\1\45\7\0\1\45\3\0\1\45\5\0\1\45"+
    "\6\0\1\45\1\0\1\45\u011b\0\2\13\346\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\2\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\1\16\22\1\23\1\24"+
    "\16\22\1\25\1\26\1\27\1\2\1\30\33\0\1\31"+
    "\1\0\2\14\1\32\1\0\1\33\1\34\1\35\1\0"+
    "\3\22\1\4\5\22\1\36\24\22\1\37\12\22\1\40"+
    "\2\0\1\41\57\0\1\42\36\0\1\43\2\0\1\22"+
    "\1\44\1\22\7\4\1\45\2\4\2\22\1\46\6\22"+
    "\1\4\5\22\1\47\17\22\1\50\5\22\1\51\1\52"+
    "\41\0\1\53\1\54\42\0\2\22\1\4\1\55\3\4"+
    "\1\56\12\4\1\57\1\60\1\61\1\22\1\62\3\22"+
    "\2\4\3\22\1\63\3\22\1\64\2\22\1\65\5\22"+
    "\1\66\1\22\1\67\1\22\1\70\2\22\1\71\1\72"+
    "\1\22\40\0\1\73\26\0\1\74\1\0\1\75\11\0"+
    "\2\22\2\4\1\76\2\4\1\77\10\4\4\22\2\4"+
    "\4\22\1\100\2\22\1\101\1\102\1\22\1\103\1\4"+
    "\5\22\1\4\1\104\41\0\1\105\1\0\1\106\4\0"+
    "\1\107\2\0\1\110\1\111\1\0\1\112\7\0\1\113"+
    "\1\114\4\0\1\4\1\22\1\115\1\4\1\116\1\117"+
    "\1\4\1\120\3\4\1\121\2\4\1\122\1\123\2\22"+
    "\2\4\1\22\1\124\5\22\2\4\1\22\1\125\2\22"+
    "\1\126\1\4\25\0\1\127\3\0\1\130\4\0\1\131"+
    "\3\0\1\132\1\0\1\133\1\134\2\0\1\135\2\0"+
    "\1\136\1\4\1\22\1\4\1\137\4\4\1\140\1\22"+
    "\2\4\1\141\1\22\1\142\2\22\1\143\1\144\2\4"+
    "\1\22\1\145\1\146\1\4\17\0\1\147\1\0\1\150"+
    "\1\0\1\151\2\0\1\152\1\153\1\154\1\0\1\155"+
    "\1\156\1\4\1\22\1\157\1\160\1\4\1\161\1\4"+
    "\1\22\3\4\2\22\2\4\1\22\1\4\6\0\1\162"+
    "\1\163\1\0\1\164\1\165\1\0\7\4\1\166\1\167"+
    "\1\22\1\4\1\170\1\22\1\4\2\0\1\171\1\0"+
    "\1\172\2\4\1\173\1\4\1\174\1\4\1\175\1\4"+
    "\1\22\1\176\2\0\1\4\1\177\2\4\1\200\1\22"+
    "\1\0\1\201\1\4\1\202\1\4\1\22\1\4\1\203"+
    "\1\22\1\4\1\204\3\4\1\205";

  private static int [] zzUnpackAction() {
    int [] result = new int[776];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\124\0\124\0\250\0\374\0\u0150\0\u01a4\0\u01f8"+
    "\0\124\0\124\0\124\0\124\0\u024c\0\124\0\u02a0\0\u02f4"+
    "\0\124\0\124\0\u0348\0\u039c\0\u03f0\0\u0444\0\u0498\0\u04ec"+
    "\0\u0540\0\u0594\0\u05e8\0\u063c\0\u0690\0\u06e4\0\u0738\0\u078c"+
    "\0\u07e0\0\u0834\0\u0888\0\u08dc\0\124\0\124\0\u0930\0\u0984"+
    "\0\u09d8\0\u0a2c\0\u0a80\0\u0ad4\0\u0b28\0\u0b7c\0\u0bd0\0\u0c24"+
    "\0\u0c78\0\u0ccc\0\u0d20\0\u0d74\0\124\0\u0dc8\0\124\0\u0e1c"+
    "\0\124\0\u0e70\0\u0ec4\0\u0f18\0\u0f6c\0\u0fc0\0\u1014\0\u1068"+
    "\0\u10bc\0\u1110\0\u1164\0\u11b8\0\u120c\0\u1260\0\u12b4\0\u1308"+
    "\0\u135c\0\u13b0\0\u1404\0\u1458\0\u14ac\0\u1500\0\u1554\0\u15a8"+
    "\0\u15fc\0\u1650\0\u16a4\0\u16f8\0\124\0\u174c\0\u17a0\0\u17f4"+
    "\0\u1848\0\u189c\0\124\0\124\0\124\0\u18f0\0\u1944\0\u1998"+
    "\0\u19ec\0\u1a40\0\u1a94\0\u1ae8\0\u1b3c\0\u1b90\0\u1be4\0\u04ec"+
    "\0\u1c38\0\u1c8c\0\u1ce0\0\u1d34\0\u1d88\0\u1ddc\0\u1e30\0\u1e84"+
    "\0\u1ed8\0\u1f2c\0\u1f80\0\u1fd4\0\u2028\0\u207c\0\u20d0\0\u2124"+
    "\0\u2178\0\u21cc\0\u2220\0\u2274\0\u04ec\0\u22c8\0\u231c\0\u2370"+
    "\0\u23c4\0\u2418\0\u246c\0\u24c0\0\u2514\0\u2568\0\u25bc\0\124"+
    "\0\u2610\0\u2664\0\124\0\u26b8\0\u270c\0\u2760\0\u27b4\0\u2808"+
    "\0\u285c\0\u28b0\0\u2904\0\u2958\0\u29ac\0\u2a00\0\u2a54\0\u2aa8"+
    "\0\u2afc\0\u2b50\0\u2ba4\0\u2bf8\0\u2c4c\0\u2ca0\0\u2cf4\0\u2d48"+
    "\0\u2d9c\0\u2df0\0\u2e44\0\u2e98\0\u2eec\0\u2f40\0\u2f94\0\u2fe8"+
    "\0\u303c\0\u3090\0\u30e4\0\u3138\0\u318c\0\u31e0\0\u3234\0\u3288"+
    "\0\u32dc\0\u3330\0\u3384\0\u33d8\0\u342c\0\u3480\0\u34d4\0\u3528"+
    "\0\u357c\0\u35d0\0\124\0\u3624\0\u3678\0\u36cc\0\u3720\0\u3774"+
    "\0\u37c8\0\u381c\0\u3870\0\u38c4\0\u3918\0\u396c\0\u39c0\0\u3a14"+
    "\0\u3a68\0\u3abc\0\u3b10\0\u3b64\0\u3bb8\0\u3c0c\0\u3c60\0\u3cb4"+
    "\0\u3d08\0\u3d5c\0\u3db0\0\u3e04\0\u3e58\0\u3eac\0\u3f00\0\u3f54"+
    "\0\u3fa8\0\124\0\u3ffc\0\u4050\0\u40a4\0\u04ec\0\u40f8\0\u414c"+
    "\0\u41a0\0\u41f4\0\u4248\0\u429c\0\u42f0\0\u4344\0\u0150\0\u4398"+
    "\0\u43ec\0\u4440\0\u4494\0\u04ec\0\u44e8\0\u453c\0\u4590\0\u45e4"+
    "\0\u4638\0\u468c\0\u46e0\0\u4734\0\u4788\0\u47dc\0\u4830\0\u4884"+
    "\0\u04ec\0\u48d8\0\u492c\0\u4980\0\u49d4\0\u4a28\0\u4a7c\0\u4ad0"+
    "\0\u4b24\0\u4b78\0\u4bcc\0\u4c20\0\u4c74\0\u4cc8\0\u4d1c\0\u4d70"+
    "\0\u04ec\0\u4dc4\0\u4e18\0\u4e6c\0\u4ec0\0\u4f14\0\124\0\124"+
    "\0\u4f68\0\u4fbc\0\u5010\0\u5064\0\u50b8\0\u510c\0\u5160\0\u51b4"+
    "\0\u5208\0\u525c\0\u52b0\0\u5304\0\u5358\0\u53ac\0\u5400\0\u5454"+
    "\0\u54a8\0\u54fc\0\u5550\0\u55a4\0\u55f8\0\u564c\0\u56a0\0\u56f4"+
    "\0\u5748\0\u579c\0\u57f0\0\u5844\0\u5898\0\u58ec\0\u5940\0\u5994"+
    "\0\u59e8\0\124\0\124\0\u5a3c\0\u5a90\0\u5ae4\0\u5b38\0\u5b8c"+
    "\0\u5be0\0\u5c34\0\u5c88\0\u5cdc\0\u5d30\0\u5d84\0\u5dd8\0\u5e2c"+
    "\0\u5e80\0\u5ed4\0\u5f28\0\u5f7c\0\u5fd0\0\u6024\0\u6078\0\u60cc"+
    "\0\u6120\0\u6174\0\u61c8\0\u621c\0\u6270\0\u62c4\0\u6318\0\u636c"+
    "\0\u63c0\0\u6414\0\u6468\0\u64bc\0\u6510\0\u6564\0\u65b8\0\u660c"+
    "\0\u0150\0\u6660\0\u66b4\0\u6708\0\u0150\0\u675c\0\u67b0\0\u6804"+
    "\0\u6858\0\u68ac\0\u6900\0\u6954\0\u69a8\0\u69fc\0\u6a50\0\u04ec"+
    "\0\u04ec\0\u04ec\0\u6aa4\0\u04ec\0\u6af8\0\u6b4c\0\u6ba0\0\u6bf4"+
    "\0\u6c48\0\u6c9c\0\u6cf0\0\u6d44\0\u6d98\0\u6dec\0\u6e40\0\u6e94"+
    "\0\u04ec\0\u6ee8\0\u6f3c\0\u04ec\0\u6f90\0\u6fe4\0\u7038\0\u708c"+
    "\0\u70e0\0\u04ec\0\u7134\0\u04ec\0\u7188\0\u04ec\0\u71dc\0\u7230"+
    "\0\u04ec\0\u04ec\0\u7284\0\u72d8\0\u732c\0\u7380\0\u73d4\0\u7428"+
    "\0\u747c\0\u74d0\0\u7524\0\u7578\0\u75cc\0\u7620\0\u7674\0\u76c8"+
    "\0\u771c\0\u7770\0\u77c4\0\u7818\0\u786c\0\u78c0\0\u7914\0\u7968"+
    "\0\u79bc\0\u7a10\0\u7a64\0\u7ab8\0\u7b0c\0\u7b60\0\u7bb4\0\u7c08"+
    "\0\u7c5c\0\u7cb0\0\u7d04\0\124\0\u7d58\0\u7dac\0\u7e00\0\u7e54"+
    "\0\u7ea8\0\u7efc\0\u7f50\0\u7fa4\0\u7ff8\0\u804c\0\u80a0\0\u80f4"+
    "\0\u8148\0\u819c\0\u81f0\0\u8244\0\u8298\0\u82ec\0\u8340\0\u8394"+
    "\0\u83e8\0\u843c\0\124\0\u8490\0\124\0\u84e4\0\u8538\0\u858c"+
    "\0\u85e0\0\u8634\0\u8688\0\u86dc\0\u8730\0\u8784\0\u87d8\0\u882c"+
    "\0\u8880\0\u88d4\0\u0150\0\u8928\0\u897c\0\u0150\0\u89d0\0\u8a24"+
    "\0\u8a78\0\u8acc\0\u8b20\0\u8b74\0\u8bc8\0\u8c1c\0\u8c70\0\u8cc4"+
    "\0\u8d18\0\u8d6c\0\u8dc0\0\u8e14\0\u8e68\0\u8ebc\0\u8f10\0\u8f64"+
    "\0\u04ec\0\u8fb8\0\u900c\0\u04ec\0\u04ec\0\u9060\0\u04ec\0\u90b4"+
    "\0\u9108\0\u915c\0\u91b0\0\u9204\0\u9258\0\u92ac\0\u04ec\0\u9300"+
    "\0\u9354\0\u93a8\0\u93fc\0\u9450\0\u94a4\0\u94f8\0\u954c\0\u95a0"+
    "\0\u95f4\0\u9648\0\u969c\0\u96f0\0\u9744\0\u9798\0\u97ec\0\u9840"+
    "\0\u9894\0\u98e8\0\u993c\0\u9990\0\u99e4\0\u9a38\0\u9a8c\0\u9ae0"+
    "\0\u9b34\0\u9b88\0\u9bdc\0\u9c30\0\u9c84\0\u9cd8\0\u9d2c\0\u9d80"+
    "\0\124\0\u9dd4\0\124\0\u9e28\0\u9e7c\0\u9ed0\0\u9f24\0\124"+
    "\0\u9f78\0\u9fcc\0\124\0\124\0\ua020\0\124\0\ua074\0\ua0c8"+
    "\0\ua11c\0\ua170\0\ua1c4\0\ua218\0\ua26c\0\124\0\124\0\ua2c0"+
    "\0\ua314\0\ua368\0\ua3bc\0\ua410\0\ua464\0\u0150\0\ua4b8\0\u0150"+
    "\0\u0150\0\ua50c\0\u0150\0\ua560\0\ua5b4\0\ua608\0\u0150\0\ua65c"+
    "\0\ua6b0\0\u04ec\0\u04ec\0\ua704\0\ua758\0\ua7ac\0\ua800\0\ua854"+
    "\0\u04ec\0\ua8a8\0\ua8fc\0\ua950\0\ua9a4\0\ua9f8\0\uaa4c\0\uaaa0"+
    "\0\uaaf4\0\u04ec\0\uab48\0\uab9c\0\u04ec\0\uabf0\0\uac44\0\uac98"+
    "\0\uacec\0\uad40\0\uad94\0\uade8\0\uae3c\0\uae90\0\uaee4\0\uaf38"+
    "\0\uaf8c\0\uafe0\0\ub034\0\ub088\0\ub0dc\0\ub130\0\ub184\0\ub1d8"+
    "\0\ub22c\0\ub280\0\ub2d4\0\124\0\ub328\0\ub37c\0\ub3d0\0\124"+
    "\0\ub424\0\ub478\0\ub4cc\0\ub520\0\124\0\ub574\0\ub5c8\0\ub61c"+
    "\0\124\0\ub670\0\124\0\124\0\ub6c4\0\ub718\0\124\0\ub76c"+
    "\0\ub7c0\0\124\0\ub814\0\ub868\0\ub8bc\0\u0150\0\ub910\0\ub964"+
    "\0\ub9b8\0\uba0c\0\u0150\0\uba60\0\ubab4\0\ubb08\0\u0150\0\ubb5c"+
    "\0\u04ec\0\ubbb0\0\ubc04\0\u04ec\0\u04ec\0\ubc58\0\ubcac\0\ubd00"+
    "\0\u04ec\0\u04ec\0\ubd54\0\ubda8\0\ubdfc\0\ube50\0\ubea4\0\ubef8"+
    "\0\ubf4c\0\ubfa0\0\ubff4\0\uc048\0\uc09c\0\uc0f0\0\uc144\0\uc198"+
    "\0\uc1ec\0\uc240\0\124\0\uc294\0\124\0\uc2e8\0\124\0\uc33c"+
    "\0\uc390\0\124\0\124\0\124\0\uc3e4\0\124\0\124\0\uc438"+
    "\0\uc48c\0\u0150\0\u0150\0\uc4e0\0\u0150\0\uc534\0\uc588\0\uc5dc"+
    "\0\uc630\0\uc684\0\uc6d8\0\uc72c\0\uc780\0\uc7d4\0\uc828\0\uc87c"+
    "\0\uc8d0\0\uc924\0\uc978\0\uc9cc\0\uca20\0\uca74\0\124\0\124"+
    "\0\ucac8\0\124\0\124\0\ucb1c\0\ucb70\0\ucbc4\0\ucc18\0\ucc6c"+
    "\0\uccc0\0\ucd14\0\ucd68\0\uc684\0\u04ec\0\ucdbc\0\uce10\0\u0150"+
    "\0\uce64\0\uceb8\0\ucf0c\0\ucf60\0\124\0\ucfb4\0\u0150\0\ud008"+
    "\0\ud05c\0\u0150\0\ud0b0\0\u0150\0\ud104\0\u04ec\0\ud158\0\ud1ac"+
    "\0\u0150\0\ud200\0\ud254\0\ud2a8\0\u0150\0\ud2fc\0\ud350\0\u0150"+
    "\0\ud3a4\0\ud3f8\0\124\0\ud44c\0\u0150\0\ud4a0\0\ud4f4\0\ud548"+
    "\0\u0150\0\ud59c\0\ud5f0\0\u04ec\0\ud644\0\ud698\0\ud6ec\0\u0150";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[776];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\4\3\1\4\1\5\1\2\1\6\1\2\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\2\1\16"+
    "\1\17\2\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\2\30\1\34\1\35"+
    "\2\30\1\36\1\30\1\37\1\40\1\41\1\42\1\30"+
    "\1\43\2\30\1\44\2\30\1\45\1\46\1\6\1\47"+
    "\1\50\1\51\1\52\1\30\1\53\1\54\1\55\1\56"+
    "\4\30\1\57\1\60\2\30\1\61\1\62\1\63\2\30"+
    "\1\64\3\30\1\65\1\66\1\67\131\0\1\70\23\0"+
    "\1\71\72\0\1\72\1\73\1\74\1\72\1\75\1\72"+
    "\1\0\1\76\13\72\1\77\2\100\6\72\1\101\1\72"+
    "\1\102\3\72\1\103\15\72\1\104\6\72\1\105\1\106"+
    "\1\107\2\72\1\110\1\111\2\72\1\112\1\72\1\113"+
    "\1\114\1\115\1\116\1\117\1\72\1\120\1\121\1\122"+
    "\2\72\1\123\1\72\1\124\4\72\10\0\1\6\7\0"+
    "\1\6\2\0\3\6\6\0\30\6\2\0\33\6\15\0"+
    "\1\125\111\0\4\126\1\0\6\126\1\0\110\126\10\0"+
    "\1\6\7\0\1\6\2\0\1\127\2\130\6\0\30\6"+
    "\2\0\33\6\13\0\1\6\7\0\1\6\1\131\1\0"+
    "\3\30\6\0\30\30\2\0\1\6\32\30\13\0\1\6"+
    "\7\0\1\6\1\131\1\0\3\20\6\0\30\30\2\0"+
    "\1\6\32\30\10\0\1\132\23\0\1\133\123\0\1\134"+
    "\123\0\1\135\167\0\1\136\36\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\13\30\1\137\5\30\1\140\6\30"+
    "\2\0\1\6\32\30\13\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\30\30\2\0\1\6\32\30\13\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\1\141\27\30\2\0"+
    "\1\142\32\30\13\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\4\30\1\143\23\30\2\0\1\6\32\30\13\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\13\30\1\144"+
    "\1\30\1\145\10\30\1\146\1\30\2\0\1\6\32\30"+
    "\13\0\1\6\7\0\1\6\2\0\3\30\6\0\23\30"+
    "\1\147\4\30\2\0\1\6\32\30\13\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\5\30\1\150\7\30\1\151"+
    "\12\30\2\0\1\6\32\30\13\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\4\30\1\152\23\30\2\0\1\6"+
    "\32\30\13\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\23\30\1\153\4\30\2\0\1\6\32\30\13\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\15\30\1\154\12\30"+
    "\2\0\1\6\32\30\13\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\20\30\1\155\7\30\2\0\1\6\32\30"+
    "\13\0\1\6\7\0\1\6\2\0\3\30\6\0\4\30"+
    "\1\156\23\30\2\0\1\6\32\30\13\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\7\30\1\157\20\30\2\0"+
    "\1\6\32\30\13\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\7\30\1\160\20\30\2\0\1\6\32\30\13\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\30\30\2\0"+
    "\1\6\13\30\1\161\16\30\13\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\30\30\2\0\1\6\1\162\15\30"+
    "\1\163\13\30\13\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\30\30\2\0\1\142\7\30\1\164\3\30\1\165"+
    "\2\30\1\166\13\30\13\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\30\30\2\0\1\6\4\30\1\167\25\30"+
    "\13\0\1\6\7\0\1\6\2\0\3\30\6\0\30\30"+
    "\2\0\1\6\1\170\15\30\1\171\13\30\13\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\30\30\2\0\1\6"+
    "\4\30\1\172\25\30\13\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\30\30\2\0\1\6\4\30\1\173\14\30"+
    "\1\174\10\30\13\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\30\30\2\0\1\6\3\30\1\175\11\30\1\176"+
    "\14\30\13\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\30\30\2\0\1\6\1\177\31\30\13\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\30\30\2\0\1\6\15\30"+
    "\1\200\14\30\13\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\30\30\2\0\1\6\16\30\1\201\13\30\13\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\30\30\2\0"+
    "\1\6\21\30\1\202\1\30\1\203\6\30\13\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\30\30\2\0\1\6"+
    "\4\30\1\204\14\30\1\205\6\30\1\206\1\30\13\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\30\30\2\0"+
    "\1\6\10\30\1\207\21\30\125\0\1\210\1\0\2\70"+
    "\2\0\120\70\2\211\1\212\1\211\1\212\1\211\1\213"+
    "\116\211\1\214\1\212\1\211\1\215\1\211\1\213\1\216"+
    "\13\211\1\77\2\100\6\211\1\217\1\211\1\220\3\211"+
    "\1\221\15\211\1\222\6\211\1\223\1\224\1\225\2\211"+
    "\1\226\1\227\2\211\1\230\1\211\1\231\1\232\1\233"+
    "\1\234\1\235\1\211\1\236\1\237\1\240\2\211\1\241"+
    "\1\211\1\242\4\211\6\212\1\213\116\212\1\215\2\212"+
    "\1\215\1\212\1\213\1\243\13\212\1\244\2\245\6\212"+
    "\1\246\1\212\1\247\3\212\1\250\15\212\1\251\6\212"+
    "\1\252\1\253\1\254\2\212\1\255\1\256\2\212\1\257"+
    "\1\212\1\260\1\261\1\262\1\263\1\264\1\212\1\265"+
    "\1\266\1\267\2\212\1\270\1\212\1\271\4\212\2\211"+
    "\1\212\1\211\1\212\1\211\1\213\14\211\3\272\6\211"+
    "\6\272\25\211\6\272\30\211\1\77\1\212\1\211\1\244"+
    "\1\211\1\273\2\211\1\274\41\211\1\275\32\211\1\275"+
    "\16\211\1\77\1\212\1\211\1\244\1\211\1\273\2\211"+
    "\1\274\11\211\3\100\25\211\1\275\32\211\1\275\17\211"+
    "\1\212\1\211\1\212\1\211\1\213\101\211\1\276\15\211"+
    "\1\212\1\211\1\212\1\211\1\213\76\211\1\277\20\211"+
    "\1\212\1\211\1\212\1\211\1\213\64\211\1\300\32\211"+
    "\1\212\1\211\1\212\1\211\1\213\64\211\1\301\32\211"+
    "\1\212\1\211\1\212\1\211\1\213\100\211\1\302\16\211"+
    "\1\212\1\211\1\212\1\211\1\213\73\211\1\303\23\211"+
    "\1\212\1\211\1\212\1\211\1\213\64\211\1\304\2\211"+
    "\1\305\6\211\1\306\20\211\1\212\1\211\1\212\1\211"+
    "\1\213\104\211\1\307\12\211\1\212\1\211\1\212\1\211"+
    "\1\213\101\211\1\310\15\211\1\212\1\211\1\212\1\211"+
    "\1\213\104\211\1\311\12\211\1\212\1\211\1\212\1\211"+
    "\1\213\64\211\1\312\3\211\1\313\26\211\1\212\1\211"+
    "\1\212\1\211\1\213\60\211\1\314\36\211\1\212\1\211"+
    "\1\212\1\211\1\213\60\211\1\315\23\211\1\316\12\211"+
    "\1\212\1\211\1\212\1\211\1\213\73\211\1\317\23\211"+
    "\1\212\1\211\1\212\1\211\1\213\104\211\1\320\12\211"+
    "\1\212\1\211\1\212\1\211\1\213\60\211\1\321\3\211"+
    "\1\322\3\211\1\323\5\211\1\324\20\211\1\212\1\211"+
    "\1\212\1\211\1\213\60\211\1\325\7\211\1\326\26\211"+
    "\1\212\1\211\1\212\1\211\1\213\64\211\1\327\32\211"+
    "\1\212\1\211\1\212\1\211\1\213\67\211\1\330\27\211"+
    "\1\212\1\211\1\212\1\211\1\213\64\211\1\331\30\211"+
    "\13\0\1\332\120\0\1\6\7\0\1\6\1\131\1\0"+
    "\3\6\6\0\30\6\2\0\33\6\13\0\1\6\7\0"+
    "\1\6\1\131\1\0\3\130\6\0\30\6\2\0\33\6"+
    "\26\0\3\131\116\0\1\333\205\0\1\334\31\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\4\30\1\335\23\30"+
    "\2\0\1\6\32\30\13\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\2\30\1\336\25\30\2\0\1\6\32\30"+
    "\13\0\1\6\7\0\1\6\2\0\3\30\6\0\20\30"+
    "\1\337\7\30\2\0\1\6\32\30\13\0\1\6\7\0"+
    "\1\6\2\0\3\6\6\0\1\6\1\340\1\6\1\341"+
    "\2\6\1\342\1\343\1\344\2\6\1\345\2\6\1\346"+
    "\1\347\1\6\1\350\1\351\5\6\2\0\2\6\1\340"+
    "\1\6\1\341\2\6\1\342\1\343\1\344\2\6\1\345"+
    "\2\6\1\346\1\347\2\6\1\350\1\351\6\6\13\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\21\30\1\352"+
    "\6\30\2\0\1\6\32\30\13\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\21\30\1\353\6\30\2\0\1\6"+
    "\32\30\13\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\3\30\1\354\24\30\2\0\1\6\32\30\13\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\10\30\1\355\17\30"+
    "\2\0\1\6\32\30\13\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\15\30\1\356\12\30\2\0\1\6\32\30"+
    "\13\0\1\6\7\0\1\6\2\0\3\30\6\0\10\30"+
    "\1\357\10\30\1\360\6\30\2\0\1\6\32\30\13\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\22\30\1\361"+
    "\5\30\2\0\1\6\32\30\13\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\14\30\1\362\13\30\2\0\1\6"+
    "\32\30\13\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\30\30\2\0\1\363\32\30\13\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\16\30\1\364\11\30\2\0\1\6"+
    "\32\30\13\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\17\30\1\365\4\30\1\366\3\30\2\0\1\6\32\30"+
    "\13\0\1\6\7\0\1\6\2\0\3\30\6\0\4\30"+
    "\1\367\23\30\2\0\1\6\32\30\13\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\10\30\1\370\17\30\2\0"+
    "\1\6\32\30\13\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\30\30\2\0\1\6\23\30\1\371\6\30\13\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\30\30\2\0"+
    "\1\6\2\30\1\372\27\30\13\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\30\30\2\0\1\6\16\30\1\373"+
    "\13\30\13\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\30\30\2\0\1\6\1\374\31\30\13\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\30\30\2\0\1\6\1\375"+
    "\31\30\13\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\30\30\2\0\1\6\13\30\1\376\16\30\13\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\30\30\2\0\1\6"+
    "\2\30\1\377\27\30\13\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\30\30\2\0\1\6\13\30\1\u0100\16\30"+
    "\13\0\1\6\7\0\1\6\2\0\3\30\6\0\30\30"+
    "\2\0\1\6\15\30\1\u0101\14\30\13\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\30\30\2\0\1\6\23\30"+
    "\1\u0102\6\30\13\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\30\30\2\0\1\6\10\30\1\u0103\21\30\13\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\30\30\2\0"+
    "\1\6\4\30\1\u0104\25\30\13\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\30\30\2\0\1\6\23\30\1\u0105"+
    "\6\30\13\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\30\30\2\0\1\6\14\30\1\u0106\15\30\13\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\30\30\2\0\1\6"+
    "\2\30\1\u0107\27\30\13\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\30\30\2\0\1\6\26\30\1\u0108\3\30"+
    "\13\0\1\6\7\0\1\6\2\0\3\30\6\0\30\30"+
    "\2\0\1\6\2\30\1\u0109\27\30\13\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\30\30\2\0\1\6\21\30"+
    "\1\u010a\10\30\13\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\30\30\2\0\1\6\27\30\1\u010b\2\30\13\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\30\30\2\0"+
    "\1\6\24\30\1\u010c\5\30\13\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\30\30\2\0\1\6\17\30\1\u010d"+
    "\12\30\13\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\30\30\2\0\1\6\3\30\1\u010e\26\30\3\0\2\211"+
    "\1\212\1\211\1\212\1\211\1\u010f\115\211\6\212\1\u0110"+
    "\115\212\1\211\1\214\1\212\1\211\1\215\1\211\1\u010f"+
    "\1\216\13\211\1\77\2\100\6\211\1\217\1\211\1\220"+
    "\3\211\1\221\15\211\1\222\6\211\1\223\1\224\1\225"+
    "\2\211\1\226\1\227\2\211\1\230\1\211\1\231\1\232"+
    "\1\233\1\234\1\235\1\211\1\236\1\237\1\240\2\211"+
    "\1\241\1\211\1\242\4\211\1\212\1\215\2\212\1\215"+
    "\1\212\1\u0110\1\243\13\212\1\244\2\245\6\212\1\246"+
    "\1\212\1\247\3\212\1\250\15\212\1\251\6\212\1\252"+
    "\1\253\1\254\2\212\1\255\1\256\2\212\1\257\1\212"+
    "\1\260\1\261\1\262\1\263\1\264\1\212\1\265\1\266"+
    "\1\267\2\212\1\270\1\212\1\271\4\212\2\211\1\212"+
    "\1\211\1\212\1\211\1\u010f\14\211\3\272\6\211\6\272"+
    "\25\211\6\272\31\211\1\212\1\211\1\212\1\211\1\u010f"+
    "\101\211\1\276\15\211\1\212\1\211\1\212\1\211\1\u010f"+
    "\76\211\1\277\20\211\1\212\1\211\1\212\1\211\1\u010f"+
    "\64\211\1\300\32\211\1\212\1\211\1\212\1\211\1\u010f"+
    "\64\211\1\301\32\211\1\212\1\211\1\212\1\211\1\u010f"+
    "\100\211\1\302\16\211\1\212\1\211\1\212\1\211\1\u010f"+
    "\73\211\1\303\23\211\1\212\1\211\1\212\1\211\1\u010f"+
    "\64\211\1\304\2\211\1\305\6\211\1\306\20\211\1\212"+
    "\1\211\1\212\1\211\1\u010f\104\211\1\307\12\211\1\212"+
    "\1\211\1\212\1\211\1\u010f\101\211\1\310\15\211\1\212"+
    "\1\211\1\212\1\211\1\u010f\104\211\1\311\12\211\1\212"+
    "\1\211\1\212\1\211\1\u010f\64\211\1\312\3\211\1\313"+
    "\26\211\1\212\1\211\1\212\1\211\1\u010f\60\211\1\314"+
    "\36\211\1\212\1\211\1\212\1\211\1\u010f\60\211\1\315"+
    "\23\211\1\316\12\211\1\212\1\211\1\212\1\211\1\u010f"+
    "\73\211\1\317\23\211\1\212\1\211\1\212\1\211\1\u010f"+
    "\104\211\1\320\12\211\1\212\1\211\1\212\1\211\1\u010f"+
    "\60\211\1\321\3\211\1\322\3\211\1\323\5\211\1\324"+
    "\20\211\1\212\1\211\1\212\1\211\1\u010f\60\211\1\325"+
    "\7\211\1\326\26\211\1\212\1\211\1\212\1\211\1\u010f"+
    "\64\211\1\327\32\211\1\212\1\211\1\212\1\211\1\u010f"+
    "\67\211\1\330\27\211\1\212\1\211\1\212\1\211\1\u010f"+
    "\64\211\1\331\30\211\6\212\1\u0110\14\212\3\u0111\6\212"+
    "\6\u0111\25\212\6\u0111\30\212\1\244\2\212\1\244\1\212"+
    "\1\273\2\212\1\u0112\41\212\1\u0113\32\212\1\u0113\16\212"+
    "\1\244\2\212\1\244\1\212\1\273\2\212\1\u0112\11\212"+
    "\3\245\25\212\1\u0113\32\212\1\u0113\23\212\1\u0110\101\212"+
    "\1\u0114\21\212\1\u0110\76\212\1\u0115\24\212\1\u0110\64\212"+
    "\1\u0116\36\212\1\u0110\64\212\1\u0117\36\212\1\u0110\100\212"+
    "\1\u0118\22\212\1\u0110\73\212\1\u0119\27\212\1\u0110\64\212"+
    "\1\u011a\2\212\1\u011b\6\212\1\u011c\24\212\1\u0110\104\212"+
    "\1\u011d\16\212\1\u0110\101\212\1\u011e\21\212\1\u0110\104\212"+
    "\1\u011f\16\212\1\u0110\64\212\1\u0120\3\212\1\u0121\32\212"+
    "\1\u0110\60\212\1\u0122\42\212\1\u0110\60\212\1\u0123\23\212"+
    "\1\u0124\16\212\1\u0110\73\212\1\u0125\27\212\1\u0110\104\212"+
    "\1\u0126\16\212\1\u0110\60\212\1\u0127\3\212\1\u0128\3\212"+
    "\1\u0129\5\212\1\u012a\24\212\1\u0110\60\212\1\u012b\7\212"+
    "\1\u012c\32\212\1\u0110\64\212\1\u012d\36\212\1\u0110\67\212"+
    "\1\u012e\33\212\1\u0110\64\212\1\u012f\30\212\1\211\1\u0130"+
    "\1\212\1\211\1\u0131\1\211\1\u0132\14\211\3\272\6\211"+
    "\6\272\25\211\6\272\30\211\1\274\1\212\1\211\1\u0112"+
    "\1\211\1\u0133\117\211\1\212\1\211\1\212\1\211\1\u010f"+
    "\53\211\1\u0134\33\211\1\u0134\7\211\1\212\1\211\1\212"+
    "\1\211\1\u010f\70\211\1\u0135\26\211\1\212\1\211\1\212"+
    "\1\211\1\u010f\104\211\1\u0136\12\211\1\212\1\211\1\212"+
    "\1\211\1\u010f\75\211\1\u0137\21\211\1\212\1\211\1\212"+
    "\1\211\1\u010f\101\211\1\u0138\15\211\1\212\1\211\1\212"+
    "\1\211\1\u010f\104\211\1\u0139\12\211\1\212\1\211\1\212"+
    "\1\211\1\u010f\60\211\1\u013a\23\211\1\u013b\12\211\1\212"+
    "\1\211\1\212\1\211\1\u010f\75\211\1\u013c\21\211\1\212"+
    "\1\211\1\212\1\211\1\u010f\64\211\1\u013d\32\211\1\212"+
    "\1\211\1\212\1\211\1\u010f\73\211\1\u013e\23\211\1\212"+
    "\1\211\1\212\1\211\1\u010f\62\211\1\u013f\34\211\1\212"+
    "\1\211\1\212\1\211\1\u010f\60\211\1\u0140\3\211\1\u0141"+
    "\32\211\1\212\1\211\1\212\1\211\1\u010f\102\211\1\u0142"+
    "\14\211\1\212\1\211\1\212\1\211\1\u010f\65\211\1\u0143"+
    "\31\211\1\212\1\211\1\212\1\211\1\u010f\74\211\1\u0144"+
    "\22\211\1\212\1\211\1\212\1\211\1\u010f\101\211\1\u0145"+
    "\15\211\1\212\1\211\1\212\1\211\1\u010f\105\211\1\u0146"+
    "\11\211\1\212\1\211\1\212\1\211\1\u010f\74\211\1\u0147"+
    "\22\211\1\212\1\211\1\212\1\211\1\u010f\70\211\1\u0148"+
    "\26\211\1\212\1\211\1\212\1\211\1\u010f\101\211\1\u0149"+
    "\15\211\1\212\1\211\1\212\1\211\1\u010f\63\211\1\u014a"+
    "\33\211\1\212\1\211\1\212\1\211\1\u010f\63\211\1\u014b"+
    "\33\211\1\212\1\211\1\212\1\211\1\u010f\66\211\1\u014c"+
    "\30\211\1\212\1\211\1\212\1\211\1\u010f\106\211\1\u014d"+
    "\10\211\1\212\1\211\1\212\1\211\1\u010f\75\211\1\u014e"+
    "\21\211\1\212\1\211\1\212\1\211\1\u010f\73\211\1\u014f"+
    "\23\211\1\212\1\211\1\212\1\211\1\u010f\60\211\1\u0150"+
    "\26\211\1\u0151\7\211\1\212\1\211\1\212\1\211\1\u010f"+
    "\70\211\1\u0152\26\211\1\212\1\211\1\212\1\211\1\u010f"+
    "\73\211\1\u0153\21\211\20\0\1\u0154\210\0\1\u0155\26\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\20\30\1\u0156"+
    "\7\30\2\0\1\6\32\30\13\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\1\u0157\27\30\2\0\1\6\32\30"+
    "\13\0\1\6\7\0\1\6\2\0\3\6\6\0\16\6"+
    "\1\u0158\1\6\1\u0159\2\6\1\u015a\4\6\2\0\17\6"+
    "\1\u0158\2\6\1\u0159\2\6\1\u015a\5\6\13\0\1\6"+
    "\7\0\1\6\2\0\3\6\6\0\10\6\1\u015b\17\6"+
    "\2\0\11\6\1\u015b\21\6\13\0\1\6\7\0\1\6"+
    "\2\0\3\6\6\0\2\6\1\u015c\25\6\2\0\3\6"+
    "\1\u015c\27\6\13\0\1\6\7\0\1\6\2\0\1\6"+
    "\1\u015d\1\6\6\0\4\6\1\u015e\23\6\2\0\5\6"+
    "\1\u015e\25\6\13\0\1\6\7\0\1\6\2\0\3\6"+
    "\6\0\14\6\1\u015f\1\u0160\12\6\2\0\15\6\1\u015f"+
    "\1\u0160\14\6\13\0\1\6\7\0\1\6\2\0\3\6"+
    "\6\0\10\6\1\u0161\17\6\2\0\11\6\1\u0161\21\6"+
    "\13\0\1\6\7\0\1\6\2\0\3\6\6\0\17\6"+
    "\1\u0162\10\6\2\0\20\6\1\u0162\12\6\13\0\1\6"+
    "\7\0\1\6\2\0\3\6\6\0\2\6\1\u0163\1\6"+
    "\1\u0164\12\6\1\u0165\10\6\2\0\3\6\1\u0163\1\6"+
    "\1\u0164\12\6\1\u0165\12\6\13\0\1\6\7\0\1\6"+
    "\2\0\3\6\6\0\4\6\1\u0166\3\6\1\u0167\17\6"+
    "\2\0\5\6\1\u0166\3\6\1\u0167\21\6\13\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\2\30\1\u0168\25\30"+
    "\2\0\1\6\32\30\13\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\4\30\1\u0169\23\30\2\0\1\6\32\30"+
    "\13\0\1\6\7\0\1\6\2\0\3\30\6\0\22\30"+
    "\1\u016a\5\30\2\0\1\6\32\30\13\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\22\30\1\u016b\5\30\2\0"+
    "\1\6\32\30\13\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\22\30\1\u016c\5\30\2\0\1\6\32\30\13\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\4\30\1\u016d"+
    "\23\30\2\0\1\6\32\30\13\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\10\30\1\u016e\6\30\1\u016f\10\30"+
    "\2\0\1\6\32\30\13\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\30\30\2\0\1\u0170\32\30\13\0\1\6"+
    "\7\0\1\6\2\0\3\6\6\0\13\6\1\u0171\14\6"+
    "\2\0\33\6\13\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\2\30\1\u0172\25\30\2\0\1\6\32\30\13\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\4\30\1\u0173"+
    "\23\30\2\0\1\6\32\30\13\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\4\30\1\u0174\23\30\2\0\1\6"+
    "\32\30\13\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\15\30\1\u0175\12\30\2\0\1\6\32\30\13\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\13\30\1\u0176\14\30"+
    "\2\0\1\6\32\30\13\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\30\30\2\0\1\6\12\30\1\u0177\17\30"+
    "\13\0\1\6\7\0\1\6\2\0\3\30\6\0\30\30"+
    "\2\0\1\6\13\30\1\u0178\16\30\13\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\30\30\2\0\1\6\21\30"+
    "\1\u0179\10\30\13\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\30\30\2\0\1\6\22\30\1\u017a\7\30\13\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\30\30\2\0"+
    "\1\6\16\30\1\u017b\3\30\1\u017c\7\30\13\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\30\30\2\0\1\6"+
    "\10\30\1\u017d\21\30\13\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\30\30\2\0\1\6\22\30\1\u017e\7\30"+
    "\13\0\1\6\7\0\1\6\2\0\3\30\6\0\30\30"+
    "\2\0\1\6\23\30\1\u017f\6\30\13\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\4\30\1\u0180\23\30\2\0"+
    "\1\6\32\30\13\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\30\30\2\0\1\6\6\30\1\u0181\23\30\13\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\30\30\2\0"+
    "\1\6\5\30\1\u0182\24\30\13\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\30\30\2\0\1\6\4\30\1\u0183"+
    "\25\30\13\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\30\30\2\0\1\6\4\30\1\u0184\25\30\13\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\30\30\2\0\1\6"+
    "\13\30\1\u0185\16\30\13\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\30\30\2\0\1\6\22\30\1\u0186\7\30"+
    "\13\0\1\6\7\0\1\6\2\0\3\30\6\0\30\30"+
    "\2\0\1\6\10\30\1\u0187\21\30\13\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\30\30\2\0\1\6\23\30"+
    "\1\u0188\6\30\13\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\30\30\2\0\1\6\4\30\1\u0189\25\30\13\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\30\30\2\0"+
    "\1\6\4\30\1\u018a\25\30\13\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\30\30\2\0\1\6\23\30\1\u018b"+
    "\6\30\3\0\1\212\1\u0131\2\212\1\u0131\1\212\1\u0132"+
    "\14\212\3\u0111\6\212\6\u0111\25\212\6\u0111\30\212\1\u0112"+
    "\2\212\1\u0112\1\212\1\u0133\123\212\1\u0110\53\212\1\u018c"+
    "\33\212\1\u018c\13\212\1\u0110\70\212\1\u018d\32\212\1\u0110"+
    "\104\212\1\u018e\16\212\1\u0110\75\212\1\u018f\25\212\1\u0110"+
    "\101\212\1\u0190\21\212\1\u0110\104\212\1\u0191\16\212\1\u0110"+
    "\60\212\1\u0192\23\212\1\u0193\16\212\1\u0110\75\212\1\u0194"+
    "\25\212\1\u0110\64\212\1\u0195\36\212\1\u0110\73\212\1\u0196"+
    "\27\212\1\u0110\62\212\1\u0197\40\212\1\u0110\60\212\1\u0198"+
    "\3\212\1\u0199\36\212\1\u0110\102\212\1\u019a\20\212\1\u0110"+
    "\65\212\1\u019b\35\212\1\u0110\74\212\1\u019c\26\212\1\u0110"+
    "\101\212\1\u019d\21\212\1\u0110\105\212\1\u019e\15\212\1\u0110"+
    "\74\212\1\u019f\26\212\1\u0110\70\212\1\u01a0\32\212\1\u0110"+
    "\101\212\1\u01a1\21\212\1\u0110\63\212\1\u01a2\37\212\1\u0110"+
    "\63\212\1\u01a3\37\212\1\u0110\66\212\1\u01a4\34\212\1\u0110"+
    "\106\212\1\u01a5\14\212\1\u0110\75\212\1\u01a6\25\212\1\u0110"+
    "\73\212\1\u01a7\27\212\1\u0110\60\212\1\u01a8\26\212\1\u01a9"+
    "\13\212\1\u0110\70\212\1\u01aa\32\212\1\u0110\73\212\1\u01ab"+
    "\21\212\1\211\1\u0130\1\212\1\211\1\u0131\1\211\1\u0132"+
    "\115\211\1\212\1\u0131\2\212\1\u0131\1\212\1\u0132\115\212"+
    "\1\211\1\u0134\1\212\1\211\1\u018c\1\211\1\u01ac\117\211"+
    "\1\212\1\211\1\212\1\211\1\u010f\60\211\1\u01ad\36\211"+
    "\1\212\1\211\1\212\1\211\1\u010f\101\211\1\u01ae\15\211"+
    "\1\212\1\211\1\212\1\211\1\u010f\64\211\1\u01af\32\211"+
    "\1\212\1\211\1\212\1\211\1\u010f\63\211\1\u01b0\33\211"+
    "\1\212\1\211\1\212\1\211\1\u010f\60\211\1\u01b1\36\211"+
    "\1\212\1\211\1\212\1\211\1\u010f\62\211\1\u01b2\34\211"+
    "\1\212\1\211\1\212\1\211\1\u010f\64\211\1\u01b3\32\211"+
    "\1\212\1\211\1\212\1\211\1\u010f\103\211\1\u01b4\13\211"+
    "\1\212\1\211\1\212\1\211\1\u010f\62\211\1\u01b5\34\211"+
    "\1\212\1\211\1\212\1\211\1\u010f\104\211\1\u01b6\12\211"+
    "\1\212\1\211\1\212\1\211\1\u010f\67\211\1\u01b7\27\211"+
    "\1\212\1\211\1\212\1\211\1\u010f\110\211\1\u01b8\6\211"+
    "\1\212\1\211\1\212\1\211\1\u010f\64\211\1\u01b9\32\211"+
    "\1\212\1\211\1\212\1\211\1\u010f\103\211\1\u01ba\13\211"+
    "\1\212\1\211\1\212\1\211\1\u010f\103\211\1\u01bb\13\211"+
    "\1\212\1\211\1\212\1\211\1\u010f\64\211\1\u01bc\32\211"+
    "\1\212\1\211\1\212\1\211\1\u010f\76\211\1\u01bd\20\211"+
    "\1\212\1\211\1\212\1\211\1\u010f\110\211\1\u01be\6\211"+
    "\1\212\1\211\1\212\1\211\1\u010f\61\211\1\u01bf\35\211"+
    "\1\212\1\211\1\212\1\211\1\u010f\105\211\1\u01c0\11\211"+
    "\1\212\1\211\1\212\1\211\1\u010f\77\211\1\u01c1\17\211"+
    "\1\212\1\211\1\212\1\211\1\u010f\70\211\1\u01c2\25\211"+
    "\1\u014b\1\212\1\211\1\u01a3\1\211\1\u01c3\117\211\1\212"+
    "\1\211\1\212\1\211\1\u010f\67\211\1\u01c4\26\211\1\u014d"+
    "\1\212\1\211\1\u01a5\1\211\1\u01c5\117\211\1\212\1\211"+
    "\1\212\1\211\1\u010f\102\211\1\u01c6\14\211\1\212\1\211"+
    "\1\212\1\211\1\u010f\105\211\1\u01c7\11\211\1\212\1\211"+
    "\1\212\1\211\1\u010f\73\211\1\u01c8\23\211\1\212\1\211"+
    "\1\212\1\211\1\u010f\103\211\1\u01c9\13\211\1\212\1\211"+
    "\1\212\1\211\1\u010f\103\211\1\u01ca\13\211\1\212\1\211"+
    "\1\212\1\211\1\u010f\73\211\1\u01cb\21\211\20\u01cc\1\u01cd"+
    "\103\u01cc\70\0\1\u01ce\43\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\22\30\1\u01cf\5\30\2\0\1\6\32\30"+
    "\13\0\1\6\7\0\1\6\2\0\3\30\6\0\2\30"+
    "\1\u01d0\25\30\2\0\1\6\32\30\13\0\1\6\7\0"+
    "\1\6\2\0\3\6\6\0\3\6\1\u01d1\24\6\2\0"+
    "\4\6\1\u01d1\26\6\13\0\1\6\7\0\1\6\2\0"+
    "\3\6\6\0\22\6\1\u01d2\5\6\2\0\24\6\1\u01d2"+
    "\6\6\13\0\1\6\7\0\1\6\2\0\3\6\6\0"+
    "\24\6\1\u01d3\3\6\2\0\26\6\1\u01d3\4\6\13\0"+
    "\1\6\7\0\1\6\2\0\3\6\6\0\10\6\1\u01d4"+
    "\17\6\2\0\11\6\1\u01d4\21\6\13\0\1\6\7\0"+
    "\1\6\2\0\3\6\6\0\1\u01d5\27\6\2\0\1\6"+
    "\1\u01d5\31\6\13\0\1\6\7\0\1\6\2\0\3\6"+
    "\6\0\6\6\1\u01d6\21\6\2\0\7\6\1\u01d6\23\6"+
    "\13\0\1\6\7\0\1\6\2\0\3\6\6\0\17\6"+
    "\1\u01d7\10\6\2\0\20\6\1\u01d7\12\6\13\0\1\6"+
    "\7\0\1\6\2\0\3\6\6\0\15\6\1\u01d8\12\6"+
    "\2\0\16\6\1\u01d8\14\6\13\0\1\6\7\0\1\6"+
    "\2\0\3\6\6\0\22\6\1\u01d9\5\6\2\0\24\6"+
    "\1\u01d9\6\6\13\0\1\6\7\0\1\6\2\0\3\6"+
    "\6\0\20\6\1\u01da\7\6\2\0\22\6\1\u01da\10\6"+
    "\13\0\1\6\7\0\1\6\2\0\3\6\6\0\13\6"+
    "\1\u01db\14\6\2\0\14\6\1\u01db\16\6\13\0\1\6"+
    "\7\0\1\6\2\0\3\6\6\0\1\u01dc\27\6\2\0"+
    "\1\6\1\u01dc\31\6\13\0\1\6\7\0\1\6\2\0"+
    "\3\6\6\0\26\6\1\u01dd\1\6\2\0\30\6\1\u01dd"+
    "\2\6\13\0\1\6\7\0\1\6\2\0\3\6\6\0"+
    "\22\6\1\u01de\5\6\2\0\24\6\1\u01de\6\6\13\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\10\30\1\u01df"+
    "\17\30\2\0\1\6\32\30\13\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\20\30\1\u01e0\7\30\2\0\1\6"+
    "\32\30\13\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\14\30\1\u01e1\13\30\2\0\1\6\32\30\13\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\1\u01e2\27\30\2\0"+
    "\1\6\32\30\13\0\1\6\7\0\1\6\2\0\3\6"+
    "\6\0\1\u01e3\27\6\2\0\33\6\13\0\1\6\7\0"+
    "\1\6\2\0\3\6\6\0\16\6\1\u01e4\11\6\2\0"+
    "\33\6\13\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\4\30\1\u01e5\23\30\2\0\1\6\32\30\13\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\1\u01e6\27\30\2\0"+
    "\1\6\32\30\13\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\20\30\1\u01e7\7\30\2\0\1\6\32\30\13\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\25\30\1\u01e8"+
    "\2\30\2\0\1\6\32\30\13\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\4\30\1\u01e9\23\30\2\0\1\6"+
    "\32\30\13\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\30\30\2\0\1\6\6\30\1\u01ea\23\30\13\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\30\30\2\0\1\6"+
    "\4\30\1\u01eb\25\30\13\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\30\30\2\0\1\6\22\30\1\u01ec\7\30"+
    "\13\0\1\6\7\0\1\6\2\0\3\30\6\0\30\30"+
    "\2\0\1\6\21\30\1\u01ed\10\30\13\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\30\30\2\0\1\6\14\30"+
    "\1\u01ee\15\30\13\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\30\30\2\0\1\6\4\30\1\u01ef\25\30\13\0"+
    "\1\6\7\0\1\u01f0\2\0\3\30\6\0\30\30\2\0"+
    "\1\6\32\30\13\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\30\30\2\0\1\6\13\30\1\u01f1\16\30\13\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\30\30\2\0"+
    "\1\6\23\30\1\u01f2\6\30\13\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\30\30\2\0\1\6\6\30\1\u01f3"+
    "\23\30\13\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\30\30\2\0\1\6\10\30\1\u01f4\21\30\13\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\30\30\2\0\1\6"+
    "\15\30\1\u01f5\14\30\13\0\1\6\7\0\1\u01f6\2\0"+
    "\3\30\6\0\30\30\2\0\1\6\32\30\13\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\30\30\2\0\1\6"+
    "\7\30\1\u01f7\22\30\3\0\1\212\1\u018c\2\212\1\u018c"+
    "\1\212\1\u01ac\123\212\1\u0110\60\212\1\u01f8\42\212\1\u0110"+
    "\101\212\1\u01f9\21\212\1\u0110\64\212\1\u01fa\36\212\1\u0110"+
    "\63\212\1\u01fb\37\212\1\u0110\60\212\1\u01fc\42\212\1\u0110"+
    "\62\212\1\u01fd\40\212\1\u0110\64\212\1\u01fe\36\212\1\u0110"+
    "\103\212\1\u01ff\17\212\1\u0110\62\212\1\u0200\40\212\1\u0110"+
    "\104\212\1\u0201\16\212\1\u0110\67\212\1\u0202\33\212\1\u0110"+
    "\110\212\1\u0203\12\212\1\u0110\64\212\1\u0204\36\212\1\u0110"+
    "\103\212\1\u0205\17\212\1\u0110\103\212\1\u0206\17\212\1\u0110"+
    "\64\212\1\u0207\36\212\1\u0110\76\212\1\u0208\24\212\1\u0110"+
    "\110\212\1\u0209\12\212\1\u0110\61\212\1\u020a\41\212\1\u0110"+
    "\105\212\1\u020b\15\212\1\u0110\77\212\1\u020c\23\212\1\u0110"+
    "\70\212\1\u020d\25\212\1\u01a3\2\212\1\u01a3\1\212\1\u01c3"+
    "\123\212\1\u0110\67\212\1\u020e\26\212\1\u01a5\2\212\1\u01a5"+
    "\1\212\1\u01c5\123\212\1\u0110\102\212\1\u020f\20\212\1\u0110"+
    "\105\212\1\u0210\15\212\1\u0110\73\212\1\u0211\27\212\1\u0110"+
    "\103\212\1\u0212\17\212\1\u0110\103\212\1\u0213\17\212\1\u0110"+
    "\73\212\1\u0214\21\212\2\211\1\212\1\211\1\212\1\211"+
    "\1\u010f\73\211\1\u0215\23\211\1\212\1\211\1\212\1\211"+
    "\1\u010f\70\211\1\u0216\26\211\1\212\1\211\1\212\1\211"+
    "\1\u010f\105\211\1\u0217\11\211\1\212\1\211\1\212\1\211"+
    "\1\u010f\60\211\1\u0218\35\211\1\u01b1\1\212\1\211\1\u01fc"+
    "\1\211\1\u0219\117\211\1\212\1\211\1\212\1\211\1\u010f"+
    "\72\211\1\u021a\23\211\1\u01b3\1\212\1\211\1\u01fe\1\211"+
    "\1\u021b\117\211\1\212\1\211\1\212\1\211\1\u010f\64\211"+
    "\1\u021c\32\211\1\212\1\211\1\212\1\211\1\u010f\72\211"+
    "\1\u021d\24\211\1\212\1\211\1\212\1\211\1\u010f\74\211"+
    "\1\u021e\22\211\1\212\1\211\1\212\1\211\1\u010f\102\211"+
    "\1\u021f\13\211\1\u01b8\1\212\1\211\1\u0203\1\211\1\u0220"+
    "\117\211\1\212\1\211\1\212\1\211\1\u010f\75\211\1\u0221"+
    "\21\211\1\212\1\211\1\212\1\211\1\u010f\70\211\1\u0222"+
    "\25\211\1\u01bb\1\212\1\211\1\u0206\1\211\1\u0223\116\211"+
    "\1\u01bc\1\212\1\211\1\u0207\1\211\1\u0224\117\211\1\212"+
    "\1\211\1\212\1\211\1\u010f\76\211\1\u0225\17\211\1\u01be"+
    "\1\212\1\211\1\u0209\1\211\1\u0226\117\211\1\212\1\211"+
    "\1\212\1\211\1\u010f\64\211\1\u0227\32\211\1\212\1\211"+
    "\1\212\1\211\1\u010f\64\211\1\u0228\32\211\1\212\1\211"+
    "\1\212\1\211\1\u010f\73\211\1\u0229\23\211\1\212\1\211"+
    "\1\212\1\211\1\u010f\76\211\1\u022a\20\211\1\212\1\211"+
    "\1\212\1\211\1\u010f\103\211\1\u022b\13\211\1\212\1\211"+
    "\1\212\1\211\1\u010f\11\211\1\u022c\105\211\1\212\1\211"+
    "\1\212\1\211\1\u010f\64\211\1\u022d\31\211\1\u01c8\1\212"+
    "\1\211\1\u0211\1\211\1\u022e\116\211\1\u01c9\1\212\1\211"+
    "\1\u0212\1\211\1\u022f\117\211\1\212\1\211\1\212\1\211"+
    "\1\u010f\64\211\1\u0230\32\211\1\212\1\211\1\212\1\211"+
    "\1\u010f\76\211\1\u0231\16\211\20\u01cc\1\u0232\103\u01cc\20\0"+
    "\1\u01cd\11\0\1\3\160\0\1\u0233\44\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\30\30\2\0\1\u0234\32\30"+
    "\13\0\1\6\7\0\1\6\2\0\3\30\6\0\22\30"+
    "\1\u0235\5\30\2\0\1\6\32\30\13\0\1\6\7\0"+
    "\1\6\2\0\3\6\6\0\27\6\1\u0236\2\0\31\6"+
    "\1\u0236\1\6\13\0\1\6\7\0\1\6\2\0\3\6"+
    "\6\0\22\6\1\u0237\5\6\2\0\24\6\1\u0237\6\6"+
    "\13\0\1\6\7\0\1\6\2\0\3\6\6\0\2\6"+
    "\1\u0238\25\6\2\0\3\6\1\u0238\27\6\13\0\1\6"+
    "\7\0\1\6\2\0\3\6\6\0\3\6\1\u0239\24\6"+
    "\2\0\4\6\1\u0239\26\6\13\0\1\6\7\0\1\6"+
    "\2\0\3\6\6\0\23\6\1\u023a\4\6\2\0\25\6"+
    "\1\u023a\5\6\13\0\1\6\7\0\1\6\2\0\3\6"+
    "\6\0\12\6\1\u023b\15\6\2\0\13\6\1\u023b\17\6"+
    "\13\0\1\6\7\0\1\6\2\0\3\6\6\0\10\6"+
    "\1\u023c\17\6\2\0\11\6\1\u023c\21\6\13\0\1\6"+
    "\7\0\1\6\2\0\3\6\6\0\10\6\1\u023d\17\6"+
    "\2\0\11\6\1\u023d\21\6\13\0\1\6\7\0\1\6"+
    "\2\0\3\6\6\0\4\6\1\u023e\23\6\2\0\5\6"+
    "\1\u023e\25\6\13\0\1\6\7\0\1\6\2\0\3\6"+
    "\6\0\14\6\1\u023f\13\6\2\0\15\6\1\u023f\15\6"+
    "\13\0\1\6\7\0\1\6\2\0\3\6\6\0\22\6"+
    "\1\u0240\5\6\2\0\24\6\1\u0240\6\6\13\0\1\6"+
    "\7\0\1\6\2\0\3\6\6\0\13\6\1\u0241\14\6"+
    "\2\0\14\6\1\u0241\16\6\13\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\13\30\1\u0242\14\30\2\0\1\6"+
    "\32\30\13\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\22\30\1\u0243\5\30\2\0\1\6\32\30\13\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\17\30\1\u0244\10\30"+
    "\2\0\1\6\32\30\13\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\20\30\1\u0245\7\30\2\0\1\6\32\30"+
    "\13\0\1\6\7\0\1\6\2\0\3\6\6\0\13\6"+
    "\1\u0246\14\6\2\0\33\6\13\0\1\6\7\0\1\6"+
    "\2\0\3\6\6\0\1\u0247\27\6\2\0\33\6\13\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\21\30\1\u0248"+
    "\6\30\2\0\1\6\32\30\13\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\22\30\1\u0249\5\30\2\0\1\6"+
    "\32\30\13\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\21\30\1\u024a\6\30\2\0\1\6\32\30\13\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\7\30\1\u024b\20\30"+
    "\2\0\1\6\32\30\13\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\30\30\2\0\1\6\21\30\1\u024c\10\30"+
    "\13\0\1\6\7\0\1\6\2\0\3\30\6\0\30\30"+
    "\2\0\1\6\1\u024d\31\30\13\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\30\30\2\0\1\6\1\u024e\31\30"+
    "\13\0\1\6\7\0\1\6\2\0\3\6\6\0\30\6"+
    "\2\0\6\6\1\u024f\14\6\1\u0250\7\6\13\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\30\30\2\0\1\6"+
    "\4\30\1\u0251\25\30\13\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\30\30\2\0\1\6\7\30\1\u0252\22\30"+
    "\13\0\1\6\7\0\1\6\2\0\3\30\6\0\30\30"+
    "\2\0\1\6\4\30\1\u0253\25\30\13\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\30\30\2\0\1\6\2\30"+
    "\1\u0254\27\30\13\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\30\30\2\0\1\6\6\30\1\u0255\23\30\13\0"+
    "\1\6\7\0\1\6\2\0\3\6\6\0\30\6\2\0"+
    "\1\6\1\u0256\31\6\3\0\6\212\1\u0110\73\212\1\u0257"+
    "\27\212\1\u0110\70\212\1\u0258\32\212\1\u0110\105\212\1\u0259"+
    "\15\212\1\u0110\60\212\1\u025a\35\212\1\u01fc\2\212\1\u01fc"+
    "\1\212\1\u0219\123\212\1\u0110\72\212\1\u025b\23\212\1\u01fe"+
    "\2\212\1\u01fe\1\212\1\u021b\123\212\1\u0110\64\212\1\u025c"+
    "\36\212\1\u0110\72\212\1\u025d\30\212\1\u0110\74\212\1\u025e"+
    "\26\212\1\u0110\102\212\1\u025f\13\212\1\u0203\2\212\1\u0203"+
    "\1\212\1\u0220\123\212\1\u0110\75\212\1\u0260\25\212\1\u0110"+
    "\70\212\1\u0261\25\212\1\u0206\2\212\1\u0206\1\212\1\u0223"+
    "\116\212\1\u0207\2\212\1\u0207\1\212\1\u0224\123\212\1\u0110"+
    "\76\212\1\u0262\17\212\1\u0209\2\212\1\u0209\1\212\1\u0226"+
    "\123\212\1\u0110\64\212\1\u0263\36\212\1\u0110\64\212\1\u0264"+
    "\36\212\1\u0110\73\212\1\u0265\27\212\1\u0110\76\212\1\u0266"+
    "\24\212\1\u0110\103\212\1\u0267\17\212\1\u0110\11\212\1\u0268"+
    "\111\212\1\u0110\64\212\1\u0269\31\212\1\u0211\2\212\1\u0211"+
    "\1\212\1\u022e\116\212\1\u0212\2\212\1\u0212\1\212\1\u022f"+
    "\123\212\1\u0110\64\212\1\u026a\36\212\1\u0110\76\212\1\u026b"+
    "\16\212\1\211\1\u0215\1\212\1\211\1\u0257\1\211\1\u026c"+
    "\117\211\1\212\1\211\1\212\1\211\1\u010f\64\211\1\u026d"+
    "\32\211\1\212\1\211\1\212\1\211\1\u010f\60\211\1\u026e"+
    "\36\211\1\212\1\211\1\212\1\211\1\u010f\75\211\1\u026f"+
    "\20\211\1\u021a\1\212\1\211\1\u025b\1\211\1\u0270\117\211"+
    "\1\212\1\211\1\212\1\211\1\u010f\101\211\1\u0271\15\211"+
    "\1\212\1\211\1\212\1\211\1\u010f\61\211\1\u0272\35\211"+
    "\1\212\1\211\1\212\1\211\1\u010f\75\211\1\u0273\21\211"+
    "\1\212\1\211\1\212\1\211\1\u010f\70\211\1\u0274\25\211"+
    "\1\u0221\1\212\1\211\1\u0260\1\211\1\u0275\117\211\1\212"+
    "\1\211\1\212\1\211\1\u010f\65\211\1\u0276\31\211\1\212"+
    "\1\211\1\212\1\211\1\u010f\75\211\1\u0277\21\211\1\212"+
    "\1\211\1\212\1\211\1\u010f\101\211\1\u0278\14\211\1\u0228"+
    "\1\212\1\211\1\u0264\1\211\1\u0279\117\211\1\212\1\211"+
    "\1\212\1\211\1\u010f\64\211\1\u027a\31\211\1\u022a\1\212"+
    "\1\211\1\u0266\1\211\1\u027b\116\211\1\u022b\1\212\1\211"+
    "\1\u0267\1\211\1\u027c\117\211\1\212\1\211\1\212\1\211"+
    "\1\u010f\102\211\1\u027d\14\211\1\212\1\211\1\212\1\211"+
    "\1\u010f\101\211\1\u027e\14\211\1\u0230\1\212\1\211\1\u026a"+
    "\1\211\1\u027f\117\211\1\212\1\211\1\212\1\211\1\u010f"+
    "\106\211\1\u0280\6\211\20\u01cc\1\u0281\103\u01cc\102\0\1\u0282"+
    "\31\0\1\6\7\0\1\6\2\0\3\6\6\0\10\6"+
    "\1\u0283\17\6\2\0\33\6\13\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\4\30\1\u0284\23\30\2\0\1\6"+
    "\32\30\13\0\1\6\7\0\1\6\2\0\3\6\6\0"+
    "\16\6\1\u0285\11\6\2\0\17\6\1\u0285\13\6\13\0"+
    "\1\6\7\0\1\6\2\0\3\6\6\0\22\6\1\u0286"+
    "\5\6\2\0\24\6\1\u0286\6\6\13\0\1\6\7\0"+
    "\1\6\2\0\3\6\6\0\16\6\1\u0287\11\6\2\0"+
    "\17\6\1\u0287\13\6\13\0\1\6\7\0\1\6\2\0"+
    "\3\6\6\0\17\6\1\u0288\10\6\2\0\20\6\1\u0288"+
    "\12\6\13\0\1\6\7\0\1\6\2\0\3\6\6\0"+
    "\2\6\1\u0289\25\6\2\0\3\6\1\u0289\27\6\13\0"+
    "\1\6\7\0\1\6\2\0\3\6\6\0\1\u028a\27\6"+
    "\2\0\1\6\1\u028a\31\6\13\0\1\6\7\0\1\6"+
    "\2\0\3\6\6\0\4\6\1\u028b\23\6\2\0\5\6"+
    "\1\u028b\25\6\13\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\1\u028c\27\30\2\0\1\6\32\30\13\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\30\30\2\0\1\u028d"+
    "\32\30\13\0\1\6\7\0\1\6\2\0\3\6\6\0"+
    "\4\6\1\u028e\23\6\2\0\33\6\13\0\1\6\7\0"+
    "\1\6\2\0\3\6\6\0\3\6\1\u028f\24\6\2\0"+
    "\33\6\13\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\21\30\1\u0290\6\30\2\0\1\6\32\30\13\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\4\30\1\u0291\23\30"+
    "\2\0\1\6\32\30\13\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\10\30\1\u0292\17\30\2\0\1\6\32\30"+
    "\13\0\1\6\7\0\1\6\2\0\3\30\6\0\30\30"+
    "\2\0\1\6\16\30\1\u0293\13\30\13\0\1\6\7\0"+
    "\1\6\2\0\3\30\6\0\30\30\2\0\1\6\15\30"+
    "\1\u0294\14\30\13\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\30\30\2\0\1\6\13\30\1\u0295\16\30\13\0"+
    "\1\6\7\0\1\6\2\0\3\6\6\0\30\6\2\0"+
    "\1\6\1\u0296\31\6\13\0\1\6\7\0\1\6\2\0"+
    "\3\6\6\0\30\6\2\0\11\6\1\u0297\21\6\13\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\30\30\2\0"+
    "\1\6\14\30\1\u0298\15\30\13\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\30\30\2\0\1\6\21\30\1\u0299"+
    "\10\30\13\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\30\30\2\0\1\6\12\30\1\u029a\17\30\13\0\1\6"+
    "\7\0\1\6\2\0\3\6\6\0\30\6\2\0\14\6"+
    "\1\u029b\16\6\3\0\1\212\1\u0257\2\212\1\u0257\1\212"+
    "\1\u026c\123\212\1\u0110\64\212\1\u029c\36\212\1\u0110\60\212"+
    "\1\u029d\42\212\1\u0110\75\212\1\u029e\20\212\1\u025b\2\212"+
    "\1\u025b\1\212\1\u0270\123\212\1\u0110\101\212\1\u029f\21\212"+
    "\1\u0110\61\212\1\u02a0\41\212\1\u0110\75\212\1\u02a1\25\212"+
    "\1\u0110\70\212\1\u02a2\25\212\1\u0260\2\212\1\u0260\1\212"+
    "\1\u0275\123\212\1\u0110\65\212\1\u02a3\35\212\1\u0110\75\212"+
    "\1\u02a4\25\212\1\u0110\101\212\1\u02a5\14\212\1\u0264\2\212"+
    "\1\u0264\1\212\1\u0279\123\212\1\u0110\64\212\1\u02a6\31\212"+
    "\1\u0266\2\212\1\u0266\1\212\1\u027b\116\212\1\u0267\2\212"+
    "\1\u0267\1\212\1\u027c\123\212\1\u0110\102\212\1\u02a7\20\212"+
    "\1\u0110\101\212\1\u02a8\14\212\1\u026a\2\212\1\u026a\1\212"+
    "\1\u027f\123\212\1\u0110\106\212\1\u02a9\6\212\2\211\1\212"+
    "\1\211\1\212\1\211\1\u010f\101\211\1\u02aa\14\211\1\u026e"+
    "\1\212\1\211\1\u029d\1\211\1\u02ab\117\211\1\212\1\211"+
    "\1\212\1\211\1\u010f\60\211\1\u02ac\35\211\1\u0271\1\212"+
    "\1\211\1\u029f\1\211\1\u02ad\117\211\1\212\1\211\1\212"+
    "\1\211\1\u010f\76\211\1\u02ae\17\211\1\u0273\1\212\1\211"+
    "\1\u02a1\1\211\1\u02af\117\211\1\212\1\211\1\212\1\211"+
    "\1\u010f\60\211\1\u02b0\36\211\1\212\1\211\1\212\1\211"+
    "\1\u010f\110\211\1\u02b1\5\211\1\u0277\1\212\1\211\1\u02a4"+
    "\1\211\1\u02b2\116\211\1\u0278\1\212\1\211\1\u02a5\1\211"+
    "\1\u02b3\116\211\1\u027a\1\212\1\211\1\u02a6\1\211\1\u02b4"+
    "\117\211\1\212\1\211\1\212\1\211\1\u010f\64\211\1\u02b5"+
    "\31\211\1\u027e\1\212\1\211\1\u02a8\1\211\1\u02b6\116\211"+
    "\1\u0280\1\212\1\211\1\u02a9\1\211\1\u02b7\115\211\20\u01cc"+
    "\1\u0281\11\u01cc\1\3\71\u01cc\10\0\1\6\7\0\1\6"+
    "\2\0\3\6\6\0\15\6\1\u02b8\12\6\2\0\33\6"+
    "\13\0\1\6\7\0\1\6\2\0\3\30\6\0\20\30"+
    "\1\u02b9\7\30\2\0\1\6\32\30\13\0\1\6\7\0"+
    "\1\6\2\0\3\6\6\0\15\6\1\u02ba\12\6\2\0"+
    "\16\6\1\u02ba\14\6\13\0\1\6\7\0\1\6\2\0"+
    "\3\6\6\0\15\6\1\u02bb\12\6\2\0\16\6\1\u02bb"+
    "\14\6\13\0\1\6\7\0\1\6\2\0\3\6\6\0"+
    "\22\6\1\u02bc\5\6\2\0\24\6\1\u02bc\6\6\13\0"+
    "\1\6\7\0\1\6\2\0\3\6\6\0\22\6\1\u02bd"+
    "\5\6\2\0\24\6\1\u02bd\6\6\13\0\1\6\7\0"+
    "\1\6\2\0\3\6\6\0\20\6\1\u02be\7\6\2\0"+
    "\22\6\1\u02be\10\6\13\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\20\30\1\u02bf\7\30\2\0\1\6\32\30"+
    "\13\0\1\6\7\0\1\6\2\0\3\6\6\0\15\6"+
    "\1\u02c0\12\6\2\0\33\6\13\0\1\6\7\0\1\6"+
    "\2\0\3\6\6\0\1\u02c1\27\6\2\0\33\6\13\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\30\30\2\0"+
    "\1\u02c2\32\30\13\0\1\6\7\0\1\6\2\0\3\30"+
    "\6\0\13\30\1\u02c3\14\30\2\0\1\6\32\30\13\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\30\30\2\0"+
    "\1\6\24\30\1\u02c4\5\30\13\0\1\6\7\0\1\6"+
    "\2\0\3\6\6\0\30\6\2\0\15\6\1\u02c5\15\6"+
    "\13\0\1\6\7\0\1\6\2\0\3\6\6\0\30\6"+
    "\2\0\32\6\1\u02c6\13\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\30\30\2\0\1\6\4\30\1\u02c7\25\30"+
    "\13\0\1\6\7\0\1\6\2\0\3\6\6\0\30\6"+
    "\2\0\11\6\1\u02c8\21\6\3\0\6\212\1\u0110\101\212"+
    "\1\u02c9\14\212\1\u029d\2\212\1\u029d\1\212\1\u02ab\123\212"+
    "\1\u0110\60\212\1\u02ca\35\212\1\u029f\2\212\1\u029f\1\212"+
    "\1\u02ad\123\212\1\u0110\76\212\1\u02cb\17\212\1\u02a1\2\212"+
    "\1\u02a1\1\212\1\u02af\123\212\1\u0110\60\212\1\u02cc\42\212"+
    "\1\u0110\110\212\1\u02cd\5\212\1\u02a4\2\212\1\u02a4\1\212"+
    "\1\u02b2\116\212\1\u02a5\2\212\1\u02a5\1\212\1\u02b3\116\212"+
    "\1\u02a6\2\212\1\u02a6\1\212\1\u02b4\123\212\1\u0110\64\212"+
    "\1\u02ce\31\212\1\u02a8\2\212\1\u02a8\1\212\1\u02b6\116\212"+
    "\1\u02a9\2\212\1\u02a9\1\212\1\u02b7\115\212\1\211\1\u02aa"+
    "\1\212\1\211\1\u02c9\1\211\1\u02cf\116\211\1\u02ac\1\212"+
    "\1\211\1\u02ca\1\211\1\u02d0\117\211\1\212\1\211\1\212"+
    "\1\211\1\u010f\107\211\1\u02d1\6\211\1\u02b0\1\212\1\211"+
    "\1\u02cc\1\211\1\u02d2\116\211\1\u02b1\1\212\1\211\1\u02cd"+
    "\1\211\1\u02d3\117\211\1\212\1\211\1\212\1\211\1\u010f"+
    "\101\211\1\u02d4\13\211\10\0\1\6\7\0\1\6\2\0"+
    "\3\6\6\0\5\6\1\u02d5\22\6\2\0\33\6\13\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\30\30\2\0"+
    "\1\u02d6\32\30\13\0\1\6\7\0\1\6\2\0\3\6"+
    "\6\0\10\6\1\u02d7\17\6\2\0\11\6\1\u02d7\21\6"+
    "\13\0\1\6\7\0\1\6\2\0\3\6\6\0\4\6"+
    "\1\u02d8\23\6\2\0\5\6\1\u02d8\25\6\13\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\30\30\2\0\1\u02d9"+
    "\32\30\13\0\1\6\7\0\1\6\2\0\3\6\6\0"+
    "\23\6\1\u02da\4\6\2\0\33\6\13\0\1\6\7\0"+
    "\1\6\2\0\3\6\6\0\22\6\1\u02db\5\6\2\0"+
    "\33\6\13\0\1\6\7\0\1\6\2\0\3\u02dc\6\0"+
    "\30\u02dc\2\0\1\6\32\u02dc\13\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\4\30\1\u02dd\23\30\2\0\1\6"+
    "\32\30\13\0\1\6\7\0\1\6\2\0\3\30\6\0"+
    "\30\30\2\0\1\6\15\30\1\u02de\14\30\13\0\1\6"+
    "\7\0\1\6\2\0\3\6\6\0\30\6\2\0\11\6"+
    "\1\u02df\21\6\13\0\1\6\7\0\1\6\2\0\3\6"+
    "\6\0\30\6\2\0\5\6\1\u02e0\25\6\13\0\1\6"+
    "\7\0\1\6\2\0\3\30\6\0\30\30\2\0\1\6"+
    "\15\30\1\u02e1\14\30\13\0\1\6\7\0\1\6\2\0"+
    "\3\6\6\0\30\6\2\0\7\6\1\u02e2\23\6\3\0"+
    "\1\212\1\u02c9\2\212\1\u02c9\1\212\1\u02cf\116\212\1\u02ca"+
    "\2\212\1\u02ca\1\212\1\u02d0\123\212\1\u0110\107\212\1\u02e3"+
    "\6\212\1\u02cc\2\212\1\u02cc\1\212\1\u02d2\116\212\1\u02cd"+
    "\2\212\1\u02cd\1\212\1\u02d3\123\212\1\u0110\101\212\1\u02e4"+
    "\13\212\1\211\1\u02d1\1\212\1\211\1\u02e3\1\211\1\u02e5"+
    "\117\211\1\212\1\211\1\212\1\211\1\u010f\70\211\1\u02e6"+
    "\24\211\10\0\1\6\7\0\1\6\2\0\3\6\6\0"+
    "\16\6\1\u02e7\11\6\2\0\33\6\13\0\1\6\7\0"+
    "\1\6\2\0\3\6\6\0\1\u02e8\27\6\2\0\33\6"+
    "\13\0\1\6\7\0\1\6\2\0\3\6\6\0\15\6"+
    "\1\u02e9\12\6\2\0\16\6\1\u02e9\14\6\13\0\1\6"+
    "\7\0\1\6\2\0\3\6\6\0\1\u02ea\27\6\2\0"+
    "\1\6\1\u02ea\31\6\13\0\1\6\7\0\1\6\2\0"+
    "\3\6\6\0\15\6\1\u02eb\12\6\2\0\33\6\13\0"+
    "\1\6\7\0\1\6\2\0\3\6\6\0\14\6\1\u02ec"+
    "\13\6\2\0\33\6\13\0\1\6\7\0\1\6\2\0"+
    "\3\6\6\0\16\6\1\u02ed\11\6\2\0\33\6\13\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\30\30\2\0"+
    "\1\6\3\30\1\u02ee\26\30\13\0\1\6\7\0\1\6"+
    "\2\0\3\6\6\0\30\6\2\0\14\6\1\u02ef\16\6"+
    "\13\0\1\6\7\0\1\6\2\0\3\30\6\0\30\30"+
    "\2\0\1\6\23\30\1\u02f0\6\30\13\0\1\6\7\0"+
    "\1\6\2\0\3\6\6\0\30\6\2\0\16\6\1\u02f1"+
    "\14\6\3\0\1\212\1\u02e3\2\212\1\u02e3\1\212\1\u02e5"+
    "\123\212\1\u0110\70\212\1\u02f2\24\212\2\211\1\212\1\211"+
    "\1\212\1\211\1\u010f\65\211\1\u02f3\27\211\10\0\1\6"+
    "\7\0\1\6\2\0\3\6\6\0\13\6\1\u02f4\14\6"+
    "\2\0\33\6\13\0\1\6\7\0\1\6\2\0\3\6"+
    "\6\0\6\6\1\u02f5\21\6\2\0\7\6\1\u02f5\23\6"+
    "\13\0\1\6\7\0\1\6\2\0\3\6\6\0\23\6"+
    "\1\u02f6\4\6\2\0\33\6\13\0\1\6\7\0\1\6"+
    "\2\0\3\6\6\0\20\6\1\u02f7\7\6\2\0\33\6"+
    "\13\0\1\6\7\0\1\6\2\0\3\6\6\0\30\6"+
    "\2\0\31\6\1\u02f8\1\6\13\0\1\6\7\0\1\6"+
    "\2\0\3\30\6\0\1\30\1\u02f9\26\30\2\0\1\6"+
    "\32\30\3\0\6\212\1\u0110\65\212\1\u02fa\27\212\1\211"+
    "\1\u02f3\1\212\1\211\1\u02fa\1\211\1\u02fb\115\211\10\0"+
    "\1\6\7\0\1\6\2\0\3\6\6\0\4\6\1\u02fc"+
    "\23\6\2\0\33\6\13\0\1\6\7\0\1\6\2\0"+
    "\3\6\6\0\14\6\1\u02fd\13\6\2\0\33\6\13\0"+
    "\1\6\7\0\1\6\2\0\3\6\6\0\10\6\1\u02fe"+
    "\17\6\2\0\33\6\13\0\1\6\7\0\1\6\2\0"+
    "\3\30\6\0\30\30\2\0\1\6\30\30\1\u02ff\1\30"+
    "\3\0\1\212\1\u02fa\2\212\1\u02fa\1\212\1\u02fb\115\212"+
    "\10\0\1\6\7\0\1\6\2\0\3\6\6\0\1\u0300"+
    "\27\6\2\0\33\6\13\0\1\6\7\0\1\6\2\0"+
    "\3\6\6\0\16\6\1\u0301\11\6\2\0\33\6\13\0"+
    "\1\6\7\0\1\6\2\0\3\30\6\0\10\30\1\u0302"+
    "\17\30\2\0\1\6\32\30\13\0\1\6\7\0\1\6"+
    "\2\0\3\6\6\0\22\6\1\u0303\5\6\2\0\33\6"+
    "\13\0\1\6\7\0\1\6\2\0\3\30\6\0\30\30"+
    "\2\0\1\6\3\30\1\u0304\26\30\13\0\1\6\7\0"+
    "\1\6\2\0\3\6\6\0\16\6\1\u0305\11\6\2\0"+
    "\33\6\13\0\1\6\7\0\1\6\2\0\3\6\6\0"+
    "\20\6\1\u0306\7\6\2\0\33\6\13\0\1\6\7\0"+
    "\1\6\2\0\3\6\6\0\10\6\1\u0307\17\6\2\0"+
    "\33\6\13\0\1\6\7\0\1\6\2\0\3\6\6\0"+
    "\16\6\1\u0308\11\6\2\0\33\6\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[55104];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\5\1\4\11\1\1\1\11\2\1\2\11"+
    "\22\1\2\11\16\1\1\11\1\1\1\11\1\1\1\11"+
    "\33\0\1\11\1\0\3\1\1\0\3\11\1\0\51\1"+
    "\1\11\2\0\1\11\57\0\1\11\36\0\1\11\2\0"+
    "\62\1\2\11\41\0\2\11\42\0\66\1\40\0\1\11"+
    "\26\0\1\11\1\0\1\11\11\0\51\1\41\0\1\11"+
    "\1\0\1\11\4\0\1\11\2\0\2\11\1\0\1\11"+
    "\7\0\2\11\4\0\43\1\25\0\1\11\3\0\1\11"+
    "\4\0\1\11\3\0\1\11\1\0\2\11\2\0\1\11"+
    "\2\0\1\11\31\1\17\0\1\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\1\0\2\11\21\1\6\0\2\11"+
    "\1\0\2\11\1\0\16\1\2\0\1\11\1\0\13\1"+
    "\2\0\6\1\1\0\1\11\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[776];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    /* CODIGO A√ëADIDO */    


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public EtiquetadoLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    /* CODIGO EJECUTADO AL FINAL DEL ANALISIS */
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 134: break;
          case 2:
            { /* IGNORAR */
            }
            // fall through
          case 135: break;
          case 3:
            { return new Symbol(NOT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 136: break;
          case 4:
            { return new Symbol(IDENTIFICADOR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 137: break;
          case 5:
            { return new Symbol(COM_SIMP, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 138: break;
          case 6:
            { return new Symbol(PARA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 139: break;
          case 7:
            { return new Symbol(PARC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 140: break;
          case 8:
            { return new Symbol(MULTIPLICACION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 141: break;
          case 9:
            { return new Symbol(SUMA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 142: break;
          case 10:
            { return new Symbol(RESTA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 143: break;
          case 11:
            { return new Symbol(DIVISION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 144: break;
          case 12:
            { return new Symbol(D_INTEGER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 145: break;
          case 13:
            { return new Symbol(PUNTOS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 146: break;
          case 14:
            { return new Symbol(PUNTO_COMA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 147: break;
          case 15:
            { return new Symbol(MENOR_QUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 148: break;
          case 16:
            { return new Symbol(IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 149: break;
          case 17:
            { return new Symbol(MAYOR_QUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 150: break;
          case 18:
            { return new Symbol(ALFANUMERICO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 151: break;
          case 19:
            { return new Symbol(CORA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 152: break;
          case 20:
            { return new Symbol(CORC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 153: break;
          case 21:
            { return new Symbol(LLAA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 154: break;
          case 22:
            { return new Symbol(BARRA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 155: break;
          case 23:
            { return new Symbol(LLAC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 156: break;
          case 24:
            { return new Symbol(DIFERENTE_IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 157: break;
          case 25:
            { return new Symbol(AND, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 158: break;
          case 26:
            { return new Symbol(D_DECIMAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 159: break;
          case 27:
            { return new Symbol(MENOR_IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 160: break;
          case 28:
            { return new Symbol(IGUAL_IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 161: break;
          case 29:
            { return new Symbol(MAYOR_IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 162: break;
          case 30:
            { return new Symbol(IF, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 163: break;
          case 31:
            { return new Symbol(ID, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 164: break;
          case 32:
            { return new Symbol(OR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 165: break;
          case 33:
            { return new Symbol(D_STRING, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 166: break;
          case 34:
            { return new Symbol(DIGITO_COM, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 167: break;
          case 35:
            { return new Symbol(D_CHAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 168: break;
          case 36:
            { return new Symbol(ASC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 169: break;
          case 37:
            { return new Symbol(P, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 170: break;
          case 38:
            { return new Symbol(END, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 171: break;
          case 39:
            { return new Symbol(ALT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 172: break;
          case 40:
            { return new Symbol(SRC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 173: break;
          case 41:
            { return new Symbol(ALLCHARNOSPACE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 174: break;
          case 42:
            { return new Symbol(ALLCHAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 175: break;
          case 43:
            { return new Symbol(HEXADECIMAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 176: break;
          case 44:
            { return new Symbol(PORCENTAJE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 177: break;
          case 45:
            { return new Symbol(BR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 178: break;
          case 46:
            { return new Symbol(H1, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 179: break;
          case 47:
            { return new Symbol(DESC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 180: break;
          case 48:
            { return new Symbol(ELSE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 181: break;
          case 49:
            { return new Symbol(EXIT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 182: break;
          case 50:
            { return new Symbol(INIT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 183: break;
          case 51:
            { return new Symbol(THEN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 184: break;
          case 52:
            { return new Symbol(CHAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 185: break;
          case 53:
            { return new Symbol(COLS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 186: break;
          case 54:
            { return new Symbol(HREF, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 187: break;
          case 55:
            { return new Symbol(NAME, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 188: break;
          case 56:
            { return new Symbol(ROWS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 189: break;
          case 57:
            { return new Symbol(TRUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 190: break;
          case 58:
            { return new Symbol(TYPE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 191: break;
          case 59:
            { return new Symbol(PIXELES, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 192: break;
          case 60:
            { return new Symbol(RED, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 193: break;
          case 61:
            { return new Symbol(ROW, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 194: break;
          case 62:
            { return new Symbol(DIV, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 195: break;
          case 63:
            { return new Symbol(IMG, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 196: break;
          case 64:
            { return new Symbol(WHILE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 197: break;
          case 65:
            { return new Symbol(CLASS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 198: break;
          case 66:
            { return new Symbol(COLOR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 199: break;
          case 67:
            { return new Symbol(FALSE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 200: break;
          case 68:
            { return new Symbol(WIDTH, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 201: break;
          case 69:
            { return new Symbol(AQUA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 202: break;
          case 70:
            { return new Symbol(BLUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 203: break;
          case 71:
            { return new Symbol(GRAY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 204: break;
          case 72:
            { return new Symbol(LEFT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 205: break;
          case 73:
            { return new Symbol(LIME, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 206: break;
          case 74:
            { return new Symbol(NAVY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 207: break;
          case 75:
            { return new Symbol(TEAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 208: break;
          case 76:
            { return new Symbol(TEXT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 209: break;
          case 77:
            { return new Symbol(BODY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 210: break;
          case 78:
            { return new Symbol(GCIC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 211: break;
          case 79:
            { return new Symbol(HEAD, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 212: break;
          case 80:
            { return new Symbol(LINK, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 213: break;
          case 81:
            { return new Symbol(SPAM, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 214: break;
          case 82:
            { return new Symbol(HUNTIL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 215: break;
          case 83:
            { return new Symbol(INSERT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 216: break;
          case 84:
            { return new Symbol(REPEAT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 217: break;
          case 85:
            { return new Symbol(HEIGHT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 218: break;
          case 86:
            { return new Symbol(STRING, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 219: break;
          case 87:
            { return new Symbol(ARIAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 220: break;
          case 88:
            { return new Symbol(BLACK, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 221: break;
          case 89:
            { return new Symbol(GREEN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 222: break;
          case 90:
            { return new Symbol(OLIVE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 223: break;
          case 91:
            { return new Symbol(RADIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 224: break;
          case 92:
            { return new Symbol(RIGHT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 225: break;
          case 93:
            { return new Symbol(WHITE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 226: break;
          case 94:
            { return new Symbol(GLOBAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 227: break;
          case 95:
            { return new Symbol(INPUT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 228: break;
          case 96:
            { return new Symbol(TITLE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 229: break;
          case 97:
            { return new Symbol(ON_LOAD, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 230: break;
          case 98:
            { return new Symbol(REVERSE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 231: break;
          case 99:
            { return new Symbol(BOOLEAN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 232: break;
          case 100:
            { return new Symbol(DECIMAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 233: break;
          case 101:
            { return new Symbol(INTEGER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 234: break;
          case 102:
            { return new Symbol(ONCLICK, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 235: break;
          case 103:
            { return new Symbol(GENEVA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 236: break;
          case 104:
            { return new Symbol(CENTER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 237: break;
          case 105:
            { return new Symbol(COLUMN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 238: break;
          case 106:
            { return new Symbol(MAROON, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 239: break;
          case 107:
            { return new Symbol(NUMBER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 240: break;
          case 108:
            { return new Symbol(PURPLE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 241: break;
          case 109:
            { return new Symbol(SILVER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 242: break;
          case 110:
            { return new Symbol(YELLOW, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 243: break;
          case 111:
            { return new Symbol(BUTTON, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 244: break;
          case 112:
            { return new Symbol(OPTION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 245: break;
          case 113:
            { return new Symbol(SELECT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 246: break;
          case 114:
            { return new Symbol(COURIER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 247: break;
          case 115:
            { return new Symbol(VERDANA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 248: break;
          case 116:
            { return new Symbol(FUCHSIA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 249: break;
          case 117:
            { return new Symbol(JUSTIFY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 250: break;
          case 118:
            { return new Symbol(PROCESS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 251: break;
          case 119:
            { return new Symbol(THENWHILE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 252: break;
          case 120:
            { return new Symbol(FONTSIZE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 253: break;
          case 121:
            { return new Symbol(CHECKBOX, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 254: break;
          case 122:
            { return new Symbol(ALERT_INFO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 255: break;
          case 123:
            { return new Symbol(TEXTAREA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 256: break;
          case 124:
            { return new Symbol(LETPAR_NUM, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 257: break;
          case 125:
            { return new Symbol(BACKGROUND, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 258: break;
          case 126:
            { return new Symbol(TEXTALIGN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 259: break;
          case 127:
            { return new Symbol(SCRIPTING, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 260: break;
          case 128:
            { return new Symbol(FONTFAMILY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 261: break;
          case 129:
            { return new Symbol(SANS_SERIF, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 262: break;
          case 130:
            { return new Symbol(LETIMPAR_NUM, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 263: break;
          case 131:
            { return new Symbol(NUM_ALEATORIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 264: break;
          case 132:
            { return new Symbol(GETBYID, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 265: break;
          case 133:
            { return new Symbol(CARACTER_ALEATORIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 266: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
