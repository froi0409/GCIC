package com.froi.pruebas.gramaticas;

import java_cup.runtime.*;

class EtiquetadoParser;

parser code {:

    public EtiquetadoParser(EtiquetadoLexer lexer) {
        super(lexer);
    }
    public void report_error(String message, Object info) {
        System.out.println("reporterror");;
    }
    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal " + info);
    }
    @Override
    public void syntax_error(Symbol s) {
        System.out.println("linea: " + s.left + "   columna: " + s.right + "   token: " + symbl_name_from_id(s.sym) + "     texto: " + s.value);
    }
    protected int error_sync_size() {
        return 1;
    }

:}

//Declaración de símbolos terminales
/* TERMINALES ETIQUETAS GCIC */
terminal GCIC, HEAD, TITLE, LINK, BODY, SPAM, INPUT, TEXTAREA, SELECT, OPTION, DIV, IMG, BR, BUTTON, H1, P, SCRIPTING;
/* PARAMETROS DE ETIQUETAS */
terminal HREF, BACKGROUND, COLOR, FONTSIZE, FONTFAMILY, TEXTALIGN, TYPE, ID, NAME, COLS, ROWS, CLASS, SRC, WIDTH, HEIGHT, ALT, ONCLICK;
/* PALABRAS DE LOS PARAMETROS */
terminal BLACK, OLIVE, TEAL, RED, BLUE, MAROON, NAVY, GRAY, LIME, FUCHSIA, GREEN, WHITE, PURPLE, SILVER, YELLOW, AQUA, HEXADECIMAL;
terminal PIXELES, PORCENTAJE;
terminal COURIER, VERDANA, ARIAL, GENEVA, SANS_SERIF;
terminal LEFT, RIGHT, CENTER, JUSTIFY;
terminal TEXT, NUMBER, RADIO, CHECKBOX, ROW, COLUMN;
/* FUNCIONES ESPECIALES DE CLC */
terminal ASC, DESC, LETPAR_NUM, LETIMPAR_NUM, REVERSE, CARACTER_ALEATORIO, NUM_ALEATORIO, ALERT_INFO, EXIT, GETBYID, INIT, END, IF, THEN, ELSE, REPEAT, HUNTIL, WHILE, THENWHILE, INSERT;
/* LENGUAJE DE ALTO NIVEL EMBEBIDO */
terminal ON_LOAD, PROCESS;
/* TIPOS DE DATOS */
terminal INTEGER, DECIMAL, BOOLEAN, CHAR, STRING, GLOBAL;
/* DEFINICION DE TIPOS DE DATOS */
terminal D_INTEGER, D_DECIMAL, TRUE, FALSE, D_CHAR, D_STRING;
/* OPERADORES RELACIONALES */
terminal IGUAL_IGUAL, DIFERENTE_IGUAL, MENOR_QUE, MENOR_IGUAL, MAYOR_QUE, MAYOR_IGUAL;
/* OPERADORES LOGICOS */
terminal OR, AND, NOT;
/* OPERADORES ARITMETICOS */
terminal SUMA, RESTA, MULTIPLICACION, DIVISION, UNARY;
/* SIMBOLOS ESPECIALES */
terminal IGUAL, BARRA, DIAGONAL, PARA, PARC, CORA, CORC, LLAA, LLAC, PUNTO_COMA, PUNTOS, COM_SIMP, IDENTIFICADOR, COMA;
/* COMODINES */
terminal ALFANUMERICO, TEXTO, ALLCHAR, ALLCHARNOSPACE, DIGITO_COM;

//Declaración de símbolos no terminales
non terminal inicio, cabecera, cuerpo, scripting, inicio_scripting, variables, modo, strings, booleanos;

/* no terminales de cuerpo */
non terminal cuerpo_gcic, cuerpo_cabecera, cuerpo_cuerpo, cuerpo_title;
non terminal etiquetas_cabecera, etiquetas_cuerpo, etiqueta_option;
non terminal texto, texto_comillas_complete, fondos, colores, font_family, alineaciones, clases, tamaños, parametros_textuales, tipos_input, identificadores;

non terminal cuerpo_spam;
non terminal cuerpo_input;
non terminal cuerpo_textarea;
non terminal cuerpo_select;
non terminal cuerpo_div;
non terminal cuerpo_img;
non terminal cuerpo_br;
non terminal cuerpo_button;
non terminal cuerpo_h1;
non terminal cuerpo_p;
non terminal cuerpo_texto;
non terminal cuerpo_scripting;

/* Parametros de etiquetas */
non terminal cuerpo_parametros_gcic, parametros_gcic;
non terminal cuerpo_parametros_link, parametros_link;
non terminal cuerpo_parametros_body, parametros_body;
non terminal cuerpo_parametros_spam, parametros_spam;
non terminal cuerpo_parametros_input, parametros_input;
non terminal cuerpo_parametros_textarea, parametros_textarea;
non terminal cuerpo_parametros_select, parametros_select;
non terminal cuerpo_parametros_div, parametros_div;
non terminal cuerpo_parametros_img, parametros_img;
non terminal cuerpo_parametros_button, parametros_button;
non terminal cuerpo_parametros_h1, parametros_h1;
non terminal cuerpo_parametros_p, parametros_p;
non terminal cuerpo_parametros_proceso, parametros_proceso, parametros_proceso_simples;

non terminal parametros_scripting;
non terminal cuerpo_process, parametros_process;
non terminal cuerpo_onload, parametros_onload;

/* NO TERMINALES ESPECIALES DEL SCRIPTING */
non terminal condicion_if;

non terminal ciclo_repeat;
non terminal repetir_declaracion, repetir_limite, igual_repeat;

non terminal ciclo_while;
non terminal condicion_else_if, parametros_else_if;
non terminal condicion_else;
non terminal asignacion_valor;

non terminal condicion;
non terminal valor_condicion;


non terminal valores_de_asignacion;
non terminal igual_integer;
non terminal igual_string;
non terminal igual_boolean;
non terminal igual_char;
non terminal igual_decimal;
non terminal Double expresion_aritmetica;
non terminal valor_numerico;

non terminal cuerpo_identificadores;

//Precedencia
precedence left SUMA, RESTA;
precedence left MULTIPLICACION, DIVISION;
precedence right UNARY;
precedence left IGUAL_IGUAL, DIFERENTE_IGUAL, MENOR_QUE, MAYOR_QUE, MENOR_IGUAL, MAYOR_IGUAL;
precedence left OR;
precedence left AND;
precedence left NOT;

//Símbolo inicial de la gramática
start with inicio;

//Reglas de Producción
inicio ::=  MENOR_QUE GCIC cuerpo_parametros_gcic MAYOR_QUE cuerpo_gcic MENOR_QUE DIVISION GCIC MAYOR_QUE              {:System.out.println("Se ha llegado al final del reconocimiento");:}
            ;

cuerpo_gcic ::= cabecera cuerpo
                /*| scripting cabecera cuerpo
                | cabecera scripting cuerpo
                | cabecera cuerpo scripting*/
                ;

cabecera ::=    MENOR_QUE HEAD MAYOR_QUE cuerpo_cabecera MENOR_QUE DIVISION HEAD MAYOR_QUE
                ;

cuerpo ::=  MENOR_QUE BODY cuerpo_parametros_body MAYOR_QUE cuerpo_cuerpo MENOR_QUE DIVISION BODY MAYOR_QUE
            ;

cuerpo_cabecera ::= cuerpo_cabecera etiquetas_cabecera 
                    | etiquetas_cabecera
                    ;

etiquetas_cabecera ::=  MENOR_QUE LINK cuerpo_parametros_link MAYOR_QUE MENOR_QUE DIVISION LINK MAYOR_QUE
                        | MENOR_QUE TITLE MAYOR_QUE cuerpo_title:ct MENOR_QUE DIVISION TITLE MAYOR_QUE      {:System.out.println("El titulo es: " + ct.toString().trim());:}
                        | MENOR_QUE SCRIPTING MAYOR_QUE cuerpo_scripting MENOR_QUE DIVISION SCRIPTING MAYOR_QUE
                        ;

cuerpo_title ::=    cuerpo_title:ct texto:ent   {:RESULT= ct.toString() + " " + ent.toString();:}
                    |                           {:RESULT="";:}
                    ;

texto ::=   ALFANUMERICO:ent        {:RESULT=ent.toString();:}
            | IDENTIFICADOR:ent     {:RESULT=ent.toString();:}
            ;

cuerpo_cuerpo ::=   cuerpo_cuerpo etiquetas_cuerpo
                    | etiquetas_cuerpo
                    ;

etiquetas_cuerpo ::=    MENOR_QUE SPAM cuerpo_parametros_spam MAYOR_QUE cuerpo_texto MENOR_QUE DIVISION SPAM MAYOR_QUE
                        | MENOR_QUE INPUT cuerpo_parametros_input MAYOR_QUE cuerpo_texto MENOR_QUE DIVISION INPUT MAYOR_QUE
                        | MENOR_QUE TEXTAREA cuerpo_parametros_textarea MAYOR_QUE cuerpo_texto MENOR_QUE DIVISION TEXTAREA MAYOR_QUE
                        | MENOR_QUE SELECT cuerpo_parametros_select MAYOR_QUE cuerpo_select MENOR_QUE DIVISION SELECT MAYOR_QUE
                        | MENOR_QUE DIV cuerpo_parametros_div MAYOR_QUE cuerpo_div MENOR_QUE DIVISION DIV MAYOR_QUE
                        | MENOR_QUE IMG cuerpo_parametros_img MAYOR_QUE MENOR_QUE DIVISION IMG MAYOR_QUE
                        | MENOR_QUE BR MAYOR_QUE
                        | MENOR_QUE BUTTON cuerpo_parametros_button MAYOR_QUE cuerpo_texto MENOR_QUE DIVISION BUTTON MAYOR_QUE
                        | MENOR_QUE H1 cuerpo_parametros_h1 MAYOR_QUE cuerpo_texto MENOR_QUE DIVISION H1 MAYOR_QUE
                        | MENOR_QUE P cuerpo_parametros_p MAYOR_QUE cuerpo_p MENOR_QUE DIVISION P MAYOR_QUE
                        | MENOR_QUE SCRIPTING MAYOR_QUE cuerpo_scripting MENOR_QUE DIVISION SCRIPTING MAYOR_QUE
                        ;

cuerpo_select ::=   cuerpo_select etiqueta_option
                    | etiqueta_option
                    ;

etiqueta_option ::=     MENOR_QUE OPTION MAYOR_QUE cuerpo_texto MENOR_QUE DIVISION OPTION MAYOR_QUE
                        ;

cuerpo_texto ::=    cuerpo_texto texto
                    |
                    ;

cuerpo_div ::=      cuerpo_div etiquetas_cuerpo
                    |
                    ;

cuerpo_h1 ::=       ;

cuerpo_p ::=        ;

/* Parametros de etiquetas */
cuerpo_parametros_gcic ::=  cuerpo_parametros_gcic parametros_gcic
                            |
                            ;

parametros_gcic ::= CORA ID IGUAL ALLCHARNOSPACE CORC
                    | CORA NAME IGUAL texto_comillas_complete CORC
                    ;

cuerpo_parametros_link ::=  cuerpo_parametros_link parametros_link
                            |
                            ;

parametros_link ::=     CORA HREF IGUAL ALLCHARNOSPACE CORC
                        ;

texto_comillas_complete ::= ALLCHAR
                            | ALLCHARNOSPACE
                            ;

cuerpo_parametros_body ::=  cuerpo_parametros_body parametros_body
                            |
                            ;

parametros_body ::= CORA BACKGROUND IGUAL colores CORC
                    ;

cuerpo_parametros_spam ::=  cuerpo_parametros_spam parametros_spam
                            |
                            ;

parametros_spam ::= parametros_textuales
                    ;

cuerpo_parametros_input ::= cuerpo_parametros_input parametros_input
                            |
                            ;

parametros_input ::=    CORA TYPE IGUAL tipos_input CORC
                        | parametros_textuales
                        ;

cuerpo_parametros_textarea ::=  cuerpo_parametros_textarea parametros_textarea
                                |
                                ;

parametros_textarea ::= CORA FONTSIZE IGUAL PIXELES CORC
                        | CORA FONTFAMILY IGUAL font_family CORC
                        | CORA TEXTALIGN IGUAL alineaciones CORC
                        | CORA ID IGUAL ALLCHARNOSPACE CORC
                        | CORA COLS IGUAL DIGITO_COM CORC
                        | CORA ROWS IGUAL DIGITO_COM CORC
                        ;

cuerpo_parametros_select ::=    cuerpo_parametros_select parametros_select
                                |
                                ;

parametros_select ::=   parametros_textuales
                        ;

cuerpo_parametros_div ::=   cuerpo_parametros_div parametros_div
                            |
                            ;

parametros_div ::=  parametros_textuales
                    | CORA CLASS IGUAL clases CORC
                    | CORA BACKGROUND IGUAL colores CORC
                    ;

cuerpo_parametros_img ::=   cuerpo_parametros_img parametros_img
                            |
                            ;

parametros_img ::=  CORA SRC IGUAL ALLCHARNOSPACE CORC
                    | CORA WIDTH IGUAL tamaños CORC
                    | CORA HEIGHT IGUAL tamaños CORC
                    | CORA ALT IGUAL texto_comillas_complete CORC
                    | CORA ID IGUAL ALLCHARNOSPACE CORC
                    ;

cuerpo_parametros_button ::=    cuerpo_parametros_button parametros_button 
                                |
                                ;

parametros_button ::=   parametros_textuales
                        ;

cuerpo_parametros_h1 ::=    cuerpo_parametros_h1 parametros_h1
                            |
                            ;

parametros_h1 ::=   parametros_textuales
                    ;

cuerpo_parametros_p ::= cuerpo_parametros_p parametros_p
                        |
                        ;

parametros_p ::=    parametros_textuales
                    ;



parametros_textuales ::=    CORA FONTSIZE IGUAL PIXELES CORC
                            | CORA FONTFAMILY IGUAL font_family CORC
                            | CORA TEXTALIGN IGUAL alineaciones CORC
                            | CORA ID IGUAL ALLCHARNOSPACE CORC
                            | CORA COLOR IGUAL colores CORC
                            ;

/* COMODINES */
colores ::=  BLACK
            | OLIVE
            | TEAL
            | RED
            | BLUE
            | MAROON
            | NAVY
            | GRAY
            | LIME
            | FUCHSIA
            | GREEN
            | WHITE
            | PURPLE
            | SILVER
            | YELLOW
            | AQUA
            | HEXADECIMAL
            ;

font_family ::= COURIER
                | VERDANA
                | ARIAL
                | GENEVA
                | SANS_SERIF
                ;

alineaciones ::=    LEFT
                    | RIGHT
                    | CENTER
                    | JUSTIFY
                    ;

clases ::=  ROW
            | COLUMN
            ;

tamaños ::= PIXELES
            | PORCENTAJE
            ;



/* SCRIPTING */
scripting ::=   MENOR_QUE SCRIPTING MAYOR_QUE cuerpo_scripting MENOR_QUE DIVISION SCRIPTING MAYOR_QUE
                ;

cuerpo_scripting ::=    cuerpo_scripting parametros_scripting
                        |
                        ;

parametros_scripting ::=    PROCESS PARA PARC CORA cuerpo_parametros_proceso CORC
                            | ON_LOAD PARA PARC CORA cuerpo_parametros_proceso CORC
                            ;             

cuerpo_parametros_proceso ::=   cuerpo_parametros_proceso parametros_proceso
                                |
                                ;

parametros_proceso ::=  variables PUNTO_COMA
                        | parametros_proceso_simples
                        | condicion_if 
                        | ciclo_repeat 
                        | ciclo_while
                        ;

parametros_proceso_simples ::=  asignacion_valor PUNTO_COMA
                                ;

/* ASIGNACION DE VALORES A VARIABLES */
variables ::=   INTEGER modo cuerpo_identificadores igual_integer
                | DECIMAL modo cuerpo_identificadores igual_decimal
                | STRING modo cuerpo_identificadores igual_string
                | BOOLEAN modo cuerpo_identificadores igual_boolean
                | CHAR modo cuerpo_identificadores igual_char
                ;

cuerpo_identificadores ::=  cuerpo_identificadores COMA identificadores
                            | identificadores
                            ;

identificadores ::= IDENTIFICADOR
                    | ALFANUMERICO
                    ;

modo ::=    GLOBAL
            |
            ;

igual_integer ::=   IGUAL expresion_aritmetica
                    |
                    ;

igual_decimal ::=   IGUAL D_DECIMAL
                    |
                    ;

igual_string ::=    IGUAL strings   
                    |
                    ;

igual_boolean ::=   IGUAL booleanos
                    |
                    ;

igual_char ::=  IGUAL D_CHAR
                |
                ;

booleanos ::=   TRUE
                | FALSE
                ;

strings ::= ALLCHAR
            | ALLCHARNOSPACE
            | D_STRING
            ;

/* ASIGNACION DE VALORES */
asignacion_valor ::=    cuerpo_identificadores IGUAL valores_de_asignacion
                        ;

valores_de_asignacion ::=   expresion_aritmetica
                            //| D_DECIMAL
                            | D_CHAR
                            | TRUE
                            | FALSE
                            | ALLCHAR
                            | ALLCHARNOSPACE
                            | D_STRING
                            ;

/* CONDICION IF */
condicion_if ::=    IF PARA condicion PARC THEN INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END condicion_else_if condicion_else
                    | IF PARA condicion PARC THEN parametros_proceso_simples condicion_else_if condicion_else
                    ;

condicion_else_if ::=   condicion_else_if parametros_else_if
                        | 
                        ;

parametros_else_if ::=  ELSE IF PARA condicion PARC THEN INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END
                        | ELSE IF PARA condicion PARC THEN parametros_proceso_simples
                        ;

condicion_else ::=  ELSE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END                        
                    | ELSE parametros_proceso_simples
                    |
                    ;

/* CICLO REPEAT */
ciclo_repeat ::=    REPEAT PARA repetir_declaracion PARC HUNTIL PARA repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END
                    ;

repetir_declaracion ::= INTEGER identificadores IGUAL igual_repeat
                        | identificadores IGUAL igual_repeat
                        ;

repetir_limite ::=  D_INTEGER
                    | identificadores
                    ;

igual_repeat ::=    D_INTEGER
                    ;

/* CICLO WHILE */
ciclo_while ::=     WHILE PARA condicion PARC THENWHILE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END
                        ;

/* CONDICION */
condicion ::=   condicion       IGUAL_IGUAL         condicion
                | condicion     DIFERENTE_IGUAL     condicion
                | condicion     MENOR_QUE           condicion
                | condicion     MENOR_IGUAL         condicion
                | condicion     MAYOR_QUE           condicion
                | condicion     MAYOR_IGUAL         condicion
                | NOT           condicion
                | condicion     AND                 condicion
                | condicion     OR                  condicion
                | RESTA         condicion
                | condicion     SUMA                condicion
                | condicion     RESTA               condicion
                | condicion     MULTIPLICACION      condicion
                | condicion     DIVISION            condicion
                | valor_condicion
                | PARA condicion PARC
                ;

valor_condicion ::= valor_numerico
                    ;

/* EXPRESIONES ARITMETICAS */
expresion_aritmetica ::=    RESTA                           expresion_aritmetica:va1                            {:RESULT=va1*-1;:}%prec UNARY
                            | expresion_aritmetica:va1      SUMA                    expresion_aritmetica:va2    {:RESULT=va1+va2;:}
                            | expresion_aritmetica:va1      RESTA                   expresion_aritmetica:va2    {:RESULT=va1-va2;:}
                            | expresion_aritmetica:va1      MULTIPLICACION          expresion_aritmetica:va2    {:RESULT=va1*va2;:}
                            | expresion_aritmetica:va1      DIVISION                expresion_aritmetica:va2    {:RESULT=va1/va2;:} //AGREGAR ERROR DE DIVISIÓN ENTRE 0
                            | valor_numerico:va1                                                                {:RESULT = new Double(va1.toString());:}
                            | PARA expresion_aritmetica:va1 PARC                                                {:RESULT = new Double(va1.toString());:}
                            ;

valor_numerico ::=  D_INTEGER:val       {:RESULT = val;:}
                    | D_DECIMAL:val     {:RESULT = val;:}
                    | IDENTIFICADOR:val {:RESULT = 1;:}
                    | ALFANUMERICO:val  {:RESULT = 1;:}
                    //| D_CHAR:val        {:RESULT = new Double(val);:}
                    ;

 