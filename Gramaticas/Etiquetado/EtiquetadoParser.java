
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.froi.pruebas.gramaticas;

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class EtiquetadoParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return EtiquetadoParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public EtiquetadoParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public EtiquetadoParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public EtiquetadoParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u016e\000\002\002\004\000\002\002\004\000\002\144" +
    "\006\000\002\144\003\000\002\014\005\000\002\014\006" +
    "\000\002\014\006\000\002\014\006\000\002\014\007\000" +
    "\002\014\007\000\002\014\007\000\002\014\010\000\002" +
    "\046\005\000\002\003\005\000\002\145\005\000\002\202" +
    "\005\000\002\004\005\000\002\146\006\000\002\146\003" +
    "\000\002\203\005\000\002\015\004\000\002\015\002\000" +
    "\002\015\004\000\002\020\004\000\002\020\005\000\002" +
    "\020\005\000\002\150\006\000\002\151\005\000\002\152" +
    "\005\000\002\204\005\000\002\204\003\000\002\205\005" +
    "\000\002\205\003\000\002\206\005\000\002\206\003\000" +
    "\002\017\004\000\002\017\002\000\002\023\003\000\002" +
    "\023\003\000\002\016\004\000\002\016\002\000\002\016" +
    "\004\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\004\000" +
    "\002\021\003\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\153\006\000\002\154" +
    "\006\000\002\155\006\000\002\156\006\000\002\157\006" +
    "\000\002\160\006\000\002\161\005\000\002\162\006\000" +
    "\002\163\006\000\002\164\006\000\002\165\005\000\002" +
    "\166\005\000\002\167\005\000\002\170\005\000\002\171" +
    "\005\000\002\172\005\000\002\174\005\000\002\175\005" +
    "\000\002\176\005\000\002\036\004\000\002\036\003\000" +
    "\002\022\011\000\002\044\004\000\002\044\002\000\002" +
    "\037\004\000\002\037\002\000\002\111\004\000\002\111" +
    "\002\000\002\112\003\000\002\112\003\000\002\112\005" +
    "\000\002\112\005\000\002\112\005\000\002\047\004\000" +
    "\002\047\002\000\002\047\004\000\002\050\007\000\002" +
    "\050\007\000\002\051\004\000\002\051\002\000\002\051" +
    "\004\000\002\052\007\000\002\024\003\000\002\024\003" +
    "\000\002\053\004\000\002\053\002\000\002\053\004\000" +
    "\002\054\007\000\002\055\004\000\002\055\002\000\002" +
    "\055\004\000\002\056\003\000\002\057\004\000\002\057" +
    "\002\000\002\057\004\000\002\060\007\000\002\060\003" +
    "\000\002\061\004\000\002\061\002\000\002\061\004\000" +
    "\002\062\007\000\002\062\007\000\002\062\007\000\002" +
    "\062\007\000\002\062\007\000\002\062\007\000\002\063" +
    "\004\000\002\063\002\000\002\063\004\000\002\064\003" +
    "\000\002\065\004\000\002\065\002\000\002\065\004\000" +
    "\002\066\003\000\002\066\007\000\002\066\007\000\002" +
    "\067\004\000\002\067\002\000\002\067\004\000\002\070" +
    "\007\000\002\070\007\000\002\070\007\000\002\070\007" +
    "\000\002\070\007\000\002\071\004\000\002\071\002\000" +
    "\002\071\004\000\002\072\003\000\002\073\004\000\002" +
    "\073\002\000\002\073\004\000\002\074\003\000\002\075" +
    "\004\000\002\075\002\000\002\075\004\000\002\076\003" +
    "\000\002\033\007\000\002\033\007\000\002\033\007\000" +
    "\002\033\007\000\002\033\007\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\031\003\000\002" +
    "\031\003\000\002\032\003\000\002\032\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\005\011\000\002\045\004\000\002\045\002\000" +
    "\002\102\006\000\002\102\010\000\002\102\010\000\002" +
    "\102\010\000\002\102\010\000\002\201\005\000\002\201" +
    "\005\000\002\077\004\000\002\077\002\000\002\077\004" +
    "\000\002\100\003\000\002\100\003\000\002\100\003\000" +
    "\002\100\003\000\002\100\004\000\002\101\004\000\002" +
    "\101\004\000\002\101\004\000\002\113\003\000\002\113" +
    "\005\000\002\113\005\000\002\113\006\000\002\113\005" +
    "\000\002\113\006\000\002\107\005\000\002\107\003\000" +
    "\002\110\003\000\002\110\003\000\002\110\003\000\002" +
    "\114\006\000\002\114\006\000\002\114\006\000\002\114" +
    "\006\000\002\114\006\000\002\013\006\000\002\132\003" +
    "\000\002\132\003\000\002\132\003\000\002\132\003\000" +
    "\002\132\003\000\002\133\004\000\002\133\002\000\002" +
    "\143\005\000\002\143\003\000\002\143\004\000\002\143" +
    "\005\000\002\035\003\000\002\035\003\000\002\007\003" +
    "\000\002\007\002\000\002\134\004\000\002\134\002\000" +
    "\002\140\004\000\002\140\002\000\002\135\004\000\002" +
    "\135\002\000\002\011\005\000\002\011\003\000\002\011" +
    "\004\000\002\136\004\000\002\136\002\000\002\137\004" +
    "\000\002\137\002\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\126\005\000\002\115\011" +
    "\000\002\115\006\000\002\200\012\000\002\200\012\000" +
    "\002\200\012\000\002\200\012\000\002\200\012\000\002" +
    "\200\012\000\002\200\012\000\002\200\012\000\002\200" +
    "\012\000\002\177\007\000\002\123\004\000\002\123\002" +
    "\000\002\124\017\000\002\124\011\000\002\124\017\000" +
    "\002\124\017\000\002\124\017\000\002\124\017\000\002" +
    "\124\017\000\002\124\017\000\002\124\017\000\002\124" +
    "\017\000\002\124\017\000\002\124\017\000\002\124\017" +
    "\000\002\124\011\000\002\124\011\000\002\124\011\000" +
    "\002\124\011\000\002\124\011\000\002\125\012\000\002" +
    "\125\004\000\002\125\002\000\002\125\012\000\002\125" +
    "\012\000\002\125\012\000\002\125\012\000\002\125\012" +
    "\000\002\125\012\000\002\116\021\000\002\116\021\000" +
    "\002\116\021\000\002\116\021\000\002\116\021\000\002" +
    "\116\021\000\002\116\021\000\002\116\021\000\002\116" +
    "\021\000\002\116\021\000\002\116\021\000\002\116\021" +
    "\000\002\116\021\000\002\116\021\000\002\116\021\000" +
    "\002\117\006\000\002\117\005\000\002\120\003\000\002" +
    "\120\003\000\002\121\003\000\002\122\016\000\002\122" +
    "\016\000\002\122\016\000\002\122\016\000\002\122\016" +
    "\000\002\122\016\000\002\122\016\000\002\122\016\000" +
    "\002\122\016\000\002\122\016\000\002\122\016\000\002" +
    "\122\016\000\002\127\005\000\002\127\005\000\002\127" +
    "\005\000\002\127\005\000\002\127\005\000\002\127\005" +
    "\000\002\127\004\000\002\127\005\000\002\127\005\000" +
    "\002\127\004\000\002\127\005\000\002\127\005\000\002" +
    "\127\005\000\002\127\005\000\002\127\003\000\002\127" +
    "\005\000\002\130\003\000\002\142\003\000\002\142\003" +
    "\000\002\142\003\000\002\142\003\000\002\142\003\000" +
    "\002\142\003\000\002\142\003\000\002\142\003\000\002" +
    "\142\003\000\002\142\003\000\002\142\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u03ad\000\006\003\004\154\005\001\002\000\004\154" +
    "\ufffe\001\002\000\004\004\u03a2\001\002\000\004\154\014" +
    "\001\002\000\004\002\010\001\002\000\004\002\001\001" +
    "\002\000\004\002\000\001\002\000\010\003\uffec\154\uffec" +
    "\163\uffec\001\002\000\004\154\u0372\001\002\000\006\005" +
    "\u0370\024\u0366\001\002\000\006\003\020\154\017\001\002" +
    "\000\006\154\u035f\163\u0362\001\002\000\006\010\u0355\024" +
    "\u0366\001\002\000\010\003\uffef\154\uffef\163\uffef\001\002" +
    "\000\006\003\020\154\u0354\001\002\000\010\003\uffd9\154" +
    "\uffd9\163\uffd9\001\002\000\010\003\035\154\032\163\026" +
    "\001\002\000\010\003\uffd1\154\uffd1\163\uffd1\001\002\000" +
    "\004\163\u0350\001\002\000\004\010\u034d\001\002\000\010" +
    "\163\uffb5\205\uffb5\210\uffb5\001\002\000\006\154\ufff1\163" +
    "\ufff1\001\002\000\010\003\uffda\154\uffda\163\uffda\001\002" +
    "\000\030\011\u0285\012\u02df\013\u02e3\014\u02e2\016\u02e1\017" +
    "\u02e4\020\u0286\021\u02de\022\u0287\023\u0288\024\u02e0\001\002" +
    "\000\010\163\uffb5\205\uffb5\210\uffb5\001\002\000\010\163" +
    "\uffb5\205\uffb5\210\uffb5\001\002\000\010\003\uffd8\154\uffd8" +
    "\163\uffd8\001\002\000\006\154\uffb3\163\uffb3\001\002\000" +
    "\012\154\uffb1\163\uffb1\205\uffb1\210\uffb1\001\002\000\012" +
    "\154\uffb1\163\uffb1\205\uffb1\210\uffb1\001\002\000\012\154" +
    "\uffb1\163\uffb1\205\uffb1\210\uffb1\001\002\000\012\003\uff43" +
    "\134\uff43\135\uff43\163\uff43\001\002\000\004\154\045\001" +
    "\002\000\006\154\045\163\061\001\002\000\004\015\047" +
    "\001\002\000\006\154\uffb8\163\uffb8\001\002\000\004\156" +
    "\050\001\002\000\010\163\uffb5\205\uffb5\210\uffb5\001\002" +
    "\000\010\163\055\205\054\210\053\001\002\000\010\163" +
    "\uffb6\205\uffb6\210\uffb6\001\002\000\014\003\uffdc\154\uffdc" +
    "\163\uffdc\205\uffdc\210\uffdc\001\002\000\014\003\uffdb\154" +
    "\uffdb\163\uffdb\205\uffdb\210\uffdb\001\002\000\004\015\056" +
    "\001\002\000\004\156\057\001\002\000\006\154\uffb7\163" +
    "\uffb7\001\002\000\006\154\uffb9\163\uffb9\001\002\000\004" +
    "\014\063\001\002\000\010\003\uffd4\154\uffd4\163\uffd4\001" +
    "\002\000\004\156\064\001\002\000\010\003\uffbf\154\uffbf" +
    "\163\uffbf\001\002\000\012\003\071\134\067\135\072\163" +
    "\074\001\002\000\004\176\u026c\001\002\000\004\174\u026a" +
    "\001\002\000\010\003\uffcd\154\uffcd\163\uffcd\001\002\000" +
    "\012\003\uffdf\154\uffdf\163\uffdf\174\u0265\001\002\000\006" +
    "\003\077\174\100\001\002\000\012\003\uff44\134\uff44\135" +
    "\uff44\163\uff44\001\002\000\004\024\075\001\002\000\004" +
    "\156\076\001\002\000\010\003\uffe0\154\uffe0\163\uffe0\001" +
    "\002\000\004\175\u0261\001\002\000\006\003\102\175\101" +
    "\001\002\000\006\003\u025e\176\uff3d\001\002\000\004\176" +
    "\103\001\002\000\056\003\uff3a\110\uff3a\111\uff3a\112\uff3a" +
    "\113\uff3a\114\uff3a\115\uff3a\116\uff3a\117\uff3a\120\uff3a\124" +
    "\uff3a\127\uff3a\131\uff3a\133\uff3a\136\uff3a\137\uff3a\140\uff3a" +
    "\141\uff3a\142\uff3a\177\uff3a\205\uff3a\210\uff3a\001\002\000" +
    "\056\003\137\110\142\111\112\112\133\113\125\114\120" +
    "\115\117\116\131\117\107\120\126\124\127\127\116\131" +
    "\144\133\145\136\115\137\135\140\134\141\106\142\147" +
    "\177\150\205\122\210\110\001\002\000\060\003\uff38\110" +
    "\uff38\111\uff38\112\uff38\113\uff38\114\uff38\115\uff38\116\uff38" +
    "\117\uff38\120\uff38\124\uff38\127\uff38\131\uff38\133\uff38\136" +
    "\uff38\137\uff38\140\uff38\141\uff38\142\uff38\177\uff38\203\uff38" +
    "\205\uff38\210\uff38\001\002\000\010\143\uff1b\205\uff1b\210" +
    "\uff1b\001\002\000\004\174\u025b\001\002\000\014\003\uff13" +
    "\171\uff13\175\uff13\202\uff13\206\uff13\001\002\000\004\202" +
    "\u025a\001\002\000\004\174\u0257\001\002\000\010\143\u0251" +
    "\205\uff11\210\uff11\001\002\000\056\003\uff3a\110\uff3a\111" +
    "\uff3a\112\uff3a\113\uff3a\114\uff3a\115\uff3a\116\uff3a\117\uff3a" +
    "\120\uff3a\124\uff3a\127\uff3a\131\uff3a\133\uff3a\136\uff3a\137" +
    "\uff3a\140\uff3a\141\uff3a\142\uff3a\203\uff3a\205\uff3a\210\uff3a" +
    "\001\002\000\010\143\uff1f\205\uff1f\210\uff1f\001\002\000" +
    "\006\003\u01d8\174\u01d9\001\002\000\004\174\u01d6\001\002" +
    "\000\004\174\u01d3\001\002\000\060\003\uff36\110\uff36\111" +
    "\uff36\112\uff36\113\uff36\114\uff36\115\uff36\116\uff36\117\uff36" +
    "\120\uff36\124\uff36\127\uff36\131\uff36\133\uff36\136\uff36\137" +
    "\uff36\140\uff36\141\uff36\142\uff36\177\uff36\203\uff36\205\uff36" +
    "\210\uff36\001\002\000\014\003\uff14\171\uff14\175\uff14\202" +
    "\uff14\206\uff14\001\002\000\004\202\u01d2\001\002\000\060" +
    "\003\uff37\110\uff37\111\uff37\112\uff37\113\uff37\114\uff37\115" +
    "\uff37\116\uff37\117\uff37\120\uff37\124\uff37\127\uff37\131\uff37" +
    "\133\uff37\136\uff37\137\uff37\140\uff37\141\uff37\142\uff37\177" +
    "\uff37\203\uff37\205\uff37\210\uff37\001\002\000\004\174\u01cf" +
    "\001\002\000\004\174\u01cd\001\002\000\006\003\u01aa\174" +
    "\u01ab\001\002\000\060\003\uff3b\110\uff3b\111\uff3b\112\uff3b" +
    "\113\uff3b\114\uff3b\115\uff3b\116\uff3b\117\uff3b\120\uff3b\124" +
    "\uff3b\127\uff3b\131\uff3b\133\uff3b\136\uff3b\137\uff3b\140\uff3b" +
    "\141\uff3b\142\uff3b\177\uff3b\203\uff3b\205\uff3b\210\uff3b\001" +
    "\002\000\004\174\u01a8\001\002\000\012\003\uff17\171\uff17" +
    "\202\uff17\206\uff17\001\002\000\004\174\u01a5\001\002\000" +
    "\010\143\uff1c\205\uff1c\210\uff1c\001\002\000\010\143\uff1e" +
    "\205\uff1e\210\uff1e\001\002\000\044\110\142\111\112\112" +
    "\133\113\125\114\120\115\117\116\131\117\107\120\126" +
    "\133\145\136\115\137\135\140\134\141\106\142\147\205" +
    "\122\210\110\001\002\000\064\003\uff39\110\uff39\111\uff39" +
    "\112\uff39\113\uff39\114\uff39\115\uff39\116\uff39\117\uff39\120" +
    "\uff39\124\uff39\127\uff39\131\uff39\133\uff39\136\uff39\137\uff39" +
    "\140\uff39\141\uff39\142\uff39\174\304\177\uff39\202\303\203" +
    "\uff39\205\uff39\210\uff39\001\002\000\060\003\uff35\110\uff35" +
    "\111\uff35\112\uff35\113\uff35\114\uff35\115\uff35\116\uff35\117" +
    "\uff35\120\uff35\124\uff35\127\uff35\131\uff35\133\uff35\136\uff35" +
    "\137\uff35\140\uff35\141\uff35\142\uff35\177\uff35\203\uff35\205" +
    "\uff35\210\uff35\001\002\000\004\202\uff30\001\002\000\004" +
    "\174\u0117\001\002\000\010\003\u0112\171\u0113\206\u0111\001" +
    "\002\000\006\003\163\174\164\001\002\000\004\174\152" +
    "\001\002\000\004\202\151\001\002\000\010\143\uff1d\205" +
    "\uff1d\210\uff1d\001\002\000\012\003\uff3f\134\uff3f\135\uff3f" +
    "\163\uff3f\001\002\000\062\003\uff32\110\uff32\111\uff32\112" +
    "\uff32\113\uff32\114\uff32\115\uff32\116\uff32\117\uff32\120\uff32" +
    "\124\uff32\126\uff32\127\uff32\131\uff32\133\uff32\136\uff32\137" +
    "\uff32\140\uff32\141\uff32\142\uff32\177\uff32\203\uff32\205\uff32" +
    "\210\uff32\001\002\000\010\205\156\210\155\212\153\001" +
    "\002\000\006\175\uff28\206\uff28\001\002\000\006\175\uff29" +
    "\206\uff29\001\002\000\006\175\uff27\206\uff27\001\002\000" +
    "\006\175\uff26\206\uff26\001\002\000\006\175\161\206\160" +
    "\001\002\000\010\205\156\210\155\212\153\001\002\000" +
    "\004\202\uff2b\001\002\000\006\175\uff2a\206\uff2a\001\002" +
    "\000\036\144\175\145\173\146\171\147\201\150\176\151" +
    "\172\162\170\165\206\174\174\205\205\207\202\210\203" +
    "\213\165\214\200\001\002\000\040\003\204\144\175\145" +
    "\173\146\171\147\201\150\176\151\172\162\170\165\206" +
    "\174\174\205\205\207\202\210\203\213\165\214\200\001" +
    "\002\000\040\003\ufe99\152\ufe99\153\ufe99\154\ufe99\155\ufe99" +
    "\156\ufe99\157\ufe99\160\ufe99\161\ufe99\164\ufe99\165\ufe99\166" +
    "\ufe99\167\ufe99\175\ufe99\202\ufe99\001\002\000\040\003\ufea1" +
    "\152\ufea1\153\ufea1\154\ufea1\155\ufea1\156\ufea1\157\ufea1\160" +
    "\ufea1\161\ufea1\164\ufea1\165\ufea1\166\ufea1\167\ufea1\175\ufea1" +
    "\202\ufea1\001\002\000\036\003\254\152\213\153\220\154" +
    "\216\155\223\156\211\157\214\160\222\161\210\164\212" +
    "\165\221\166\215\167\217\175\255\001\002\000\036\144" +
    "\175\145\173\146\171\147\201\150\176\151\172\162\170" +
    "\165\206\174\174\205\205\207\202\210\203\213\165\214" +
    "\200\001\002\000\040\003\ufe95\152\ufe95\153\ufe95\154\ufe95" +
    "\155\ufe95\156\ufe95\157\ufe95\160\ufe95\161\ufe95\164\ufe95\165" +
    "\ufe95\166\ufe95\167\ufe95\175\ufe95\202\ufe95\001\002\000\040" +
    "\003\ufe97\152\ufe97\153\ufe97\154\ufe97\155\ufe97\156\ufe97\157" +
    "\ufe97\160\ufe97\161\ufe97\164\ufe97\165\ufe97\166\ufe97\167\ufe97" +
    "\175\ufe97\202\ufe97\001\002\000\040\003\ufe9d\152\ufe9d\153" +
    "\ufe9d\154\ufe9d\155\ufe9d\156\ufe9d\157\ufe9d\160\ufe9d\161\ufe9d" +
    "\164\ufe9d\165\ufe9d\166\ufe9d\167\ufe9d\175\ufe9d\202\ufe9d\001" +
    "\002\000\036\144\175\145\173\146\171\147\201\150\176" +
    "\151\172\162\170\165\206\174\174\205\205\207\202\210" +
    "\203\213\165\214\200\001\002\000\040\003\ufe9e\152\ufe9e" +
    "\153\ufe9e\154\ufe9e\155\ufe9e\156\ufe9e\157\ufe9e\160\ufe9e\161" +
    "\ufe9e\164\ufe9e\165\ufe9e\166\ufe9e\167\ufe9e\175\ufe9e\202\ufe9e" +
    "\001\002\000\040\003\ufe9a\152\ufe9a\153\ufe9a\154\ufe9a\155" +
    "\ufe9a\156\ufe9a\157\ufe9a\160\ufe9a\161\ufe9a\164\ufe9a\165\ufe9a" +
    "\166\ufe9a\167\ufe9a\175\ufe9a\202\ufe9a\001\002\000\040\003" +
    "\ufe9f\152\ufe9f\153\ufe9f\154\ufe9f\155\ufe9f\156\ufe9f\157\ufe9f" +
    "\160\ufe9f\161\ufe9f\164\ufe9f\165\ufe9f\166\ufe9f\167\ufe9f\175" +
    "\ufe9f\202\ufe9f\001\002\000\040\003\ufe98\152\ufe98\153\ufe98" +
    "\154\ufe98\155\ufe98\156\ufe98\157\ufe98\160\ufe98\161\ufe98\164" +
    "\ufe98\165\ufe98\166\ufe98\167\ufe98\175\ufe98\202\ufe98\001\002" +
    "\000\040\003\ufe94\152\ufe94\153\ufe94\154\ufe94\155\ufe94\156" +
    "\ufe94\157\ufe94\160\ufe94\161\ufe94\164\ufe94\165\ufe94\166\ufe94" +
    "\167\ufe94\175\ufe94\202\ufe94\001\002\000\040\003\ufe96\152" +
    "\ufe96\153\ufe96\154\ufe96\155\ufe96\156\ufe96\157\ufe96\160\ufe96" +
    "\161\ufe96\164\ufe96\165\ufe96\166\ufe96\167\ufe96\175\ufe96\202" +
    "\ufe96\001\002\000\040\003\ufe9b\152\ufe9b\153\ufe9b\154\ufe9b" +
    "\155\ufe9b\156\ufe9b\157\ufe9b\160\ufe9b\161\ufe9b\164\ufe9b\165" +
    "\ufe9b\166\ufe9b\167\ufe9b\175\ufe9b\202\ufe9b\001\002\000\004" +
    "\175\240\001\002\000\040\003\ufe9c\152\ufe9c\153\ufe9c\154" +
    "\ufe9c\155\ufe9c\156\ufe9c\157\ufe9c\160\ufe9c\161\ufe9c\164\ufe9c" +
    "\165\ufe9c\166\ufe9c\167\ufe9c\175\ufe9c\202\ufe9c\001\002\000" +
    "\036\144\175\145\173\146\171\147\201\150\176\151\172" +
    "\162\170\165\206\174\174\205\205\207\202\210\203\213" +
    "\165\214\200\001\002\000\040\003\ufea6\152\213\153\220" +
    "\154\216\155\223\156\211\157\214\160\222\161\210\164" +
    "\ufea6\165\ufea6\166\ufea6\167\ufea6\175\ufea6\202\ufea6\001\002" +
    "\000\036\144\175\145\173\146\171\147\201\150\176\151" +
    "\172\162\170\165\206\174\174\205\205\207\202\210\203" +
    "\213\165\214\200\001\002\000\036\144\175\145\173\146" +
    "\171\147\201\150\176\151\172\162\170\165\206\174\174" +
    "\205\205\207\202\210\203\213\165\214\200\001\002\000" +
    "\036\144\175\145\173\146\171\147\201\150\176\151\172" +
    "\162\170\165\206\174\174\205\205\207\202\210\203\213" +
    "\165\214\200\001\002\000\036\144\175\145\173\146\171" +
    "\147\201\150\176\151\172\162\170\165\206\174\174\205" +
    "\205\207\202\210\203\213\165\214\200\001\002\000\036" +
    "\144\175\145\173\146\171\147\201\150\176\151\172\162" +
    "\170\165\206\174\174\205\205\207\202\210\203\213\165" +
    "\214\200\001\002\000\036\144\175\145\173\146\171\147" +
    "\201\150\176\151\172\162\170\165\206\174\174\205\205" +
    "\207\202\210\203\213\165\214\200\001\002\000\036\144" +
    "\175\145\173\146\171\147\201\150\176\151\172\162\170" +
    "\165\206\174\174\205\205\207\202\210\203\213\165\214" +
    "\200\001\002\000\036\144\175\145\173\146\171\147\201" +
    "\150\176\151\172\162\170\165\206\174\174\205\205\207" +
    "\202\210\203\213\165\214\200\001\002\000\036\144\175" +
    "\145\173\146\171\147\201\150\176\151\172\162\170\165" +
    "\206\174\174\205\205\207\202\210\203\213\165\214\200" +
    "\001\002\000\036\144\175\145\173\146\171\147\201\150" +
    "\176\151\172\162\170\165\206\174\174\205\205\207\202" +
    "\210\203\213\165\214\200\001\002\000\036\144\175\145" +
    "\173\146\171\147\201\150\176\151\172\162\170\165\206" +
    "\174\174\205\205\207\202\210\203\213\165\214\200\001" +
    "\002\000\036\144\175\145\173\146\171\147\201\150\176" +
    "\151\172\162\170\165\206\174\174\205\205\207\202\210" +
    "\203\213\165\214\200\001\002\000\040\003\ufeac\152\ufeac" +
    "\153\ufeac\154\ufeac\155\ufeac\156\ufeac\157\ufeac\160\222\161" +
    "\210\164\ufeac\165\ufeac\166\ufeac\167\ufeac\175\ufeac\202\ufeac" +
    "\001\002\000\040\003\ufea7\152\ufea7\153\ufea7\154\ufea7\155" +
    "\ufea7\156\ufea7\157\ufea7\160\ufea7\161\210\164\ufea7\165\ufea7" +
    "\166\ufea7\167\ufea7\175\ufea7\202\ufea7\001\002\000\040\003" +
    "\ufea4\152\213\153\220\154\216\155\223\156\211\157\214" +
    "\160\222\161\210\164\ufea4\165\ufea4\166\215\167\217\175" +
    "\ufea4\202\ufea4\001\002\000\040\003\ufeae\152\ufeae\153\ufeae" +
    "\154\ufeae\155\ufeae\156\ufeae\157\ufeae\160\222\161\210\164" +
    "\ufeae\165\ufeae\166\ufeae\167\ufeae\175\ufeae\202\ufeae\001\002" +
    "\000\040\003\ufea2\152\213\153\220\154\216\155\223\156" +
    "\211\157\214\160\222\161\210\164\ufea2\165\ufea2\166\ufea2" +
    "\167\ufea2\175\ufea2\202\ufea2\001\002\000\040\003\ufead\152" +
    "\ufead\153\ufead\154\ufead\155\ufead\156\ufead\157\ufead\160\222" +
    "\161\210\164\ufead\165\ufead\166\ufead\167\ufead\175\ufead\202" +
    "\ufead\001\002\000\040\003\ufea3\152\213\153\220\154\216" +
    "\155\223\156\211\157\214\160\222\161\210\164\ufea3\165" +
    "\ufea3\166\ufea3\167\ufea3\175\ufea3\202\ufea3\001\002\000\040" +
    "\003\ufeaa\152\ufeaa\153\ufeaa\154\ufeaa\155\ufeaa\156\ufeaa\157" +
    "\ufeaa\160\222\161\210\164\ufeaa\165\ufeaa\166\ufeaa\167\ufeaa" +
    "\175\ufeaa\202\ufeaa\001\002\000\040\003\ufeaf\152\ufeaf\153" +
    "\ufeaf\154\ufeaf\155\ufeaf\156\ufeaf\157\ufeaf\160\222\161\210" +
    "\164\ufeaf\165\ufeaf\166\ufeaf\167\ufeaf\175\ufeaf\202\ufeaf\001" +
    "\002\000\040\003\ufea5\152\213\153\220\154\216\155\223" +
    "\156\211\157\214\160\222\161\210\164\ufea5\165\ufea5\166" +
    "\215\167\217\175\ufea5\202\ufea5\001\002\000\040\003\ufeab" +
    "\152\ufeab\153\ufeab\154\ufeab\155\ufeab\156\ufeab\157\ufeab\160" +
    "\222\161\210\164\ufeab\165\ufeab\166\ufeab\167\ufeab\175\ufeab" +
    "\202\ufeab\001\002\000\040\003\ufea8\152\ufea8\153\ufea8\154" +
    "\ufea8\155\ufea8\156\ufea8\157\ufea8\160\ufea8\161\ufea8\164\ufea8" +
    "\165\ufea8\166\ufea8\167\ufea8\175\ufea8\202\ufea8\001\002\000" +
    "\004\132\241\001\002\000\004\122\242\001\002\000\004" +
    "\200\243\001\002\000\004\203\244\001\002\000\056\003" +
    "\uff3a\110\uff3a\111\uff3a\112\uff3a\113\uff3a\114\uff3a\115\uff3a" +
    "\116\uff3a\117\uff3a\120\uff3a\124\uff3a\127\uff3a\131\uff3a\133" +
    "\uff3a\136\uff3a\137\uff3a\140\uff3a\141\uff3a\142\uff3a\203\uff3a" +
    "\205\uff3a\210\uff3a\001\002\000\056\003\137\110\142\111" +
    "\112\112\133\113\125\114\120\115\117\116\131\117\107" +
    "\120\126\124\127\127\116\131\144\133\145\136\115\137" +
    "\135\140\134\141\106\142\147\203\246\205\122\210\110" +
    "\001\002\000\004\201\247\001\002\000\004\123\250\001" +
    "\002\000\060\003\ufeb8\110\ufeb8\111\ufeb8\112\ufeb8\113\ufeb8" +
    "\114\ufeb8\115\ufeb8\116\ufeb8\117\ufeb8\120\ufeb8\124\ufeb8\127" +
    "\ufeb8\131\ufeb8\133\ufeb8\136\ufeb8\137\ufeb8\140\ufeb8\141\ufeb8" +
    "\142\ufeb8\177\ufeb8\203\ufeb8\205\ufeb8\210\ufeb8\001\002\000" +
    "\034\152\213\153\220\154\216\155\223\156\211\157\214" +
    "\160\222\161\210\164\212\165\221\166\215\167\217\175" +
    "\252\001\002\000\040\003\ufea0\152\ufea0\153\ufea0\154\ufea0" +
    "\155\ufea0\156\ufea0\157\ufea0\160\ufea0\161\ufea0\164\ufea0\165" +
    "\ufea0\166\ufea0\167\ufea0\175\ufea0\202\ufea0\001\002\000\040" +
    "\003\ufea9\152\ufea9\153\ufea9\154\ufea9\155\ufea9\156\ufea9\157" +
    "\ufea9\160\ufea9\161\ufea9\164\ufea9\165\ufea9\166\ufea9\167\ufea9" +
    "\175\ufea9\202\ufea9\001\002\000\004\132\377\001\002\000" +
    "\006\003\256\132\257\001\002\000\004\122\370\001\002" +
    "\000\006\003\260\122\261\001\002\000\004\200\362\001" +
    "\002\000\006\003\262\200\263\001\002\000\004\203\355" +
    "\001\002\000\006\003\265\203\264\001\002\000\056\003" +
    "\uff3a\110\uff3a\111\uff3a\112\uff3a\113\uff3a\114\uff3a\115\uff3a" +
    "\116\uff3a\117\uff3a\120\uff3a\124\uff3a\127\uff3a\131\uff3a\133" +
    "\uff3a\136\uff3a\137\uff3a\140\uff3a\141\uff3a\142\uff3a\203\uff3a" +
    "\205\uff3a\210\uff3a\001\002\000\056\003\uff3a\110\uff3a\111" +
    "\uff3a\112\uff3a\113\uff3a\114\uff3a\115\uff3a\116\uff3a\117\uff3a" +
    "\120\uff3a\124\uff3a\127\uff3a\131\uff3a\133\uff3a\136\uff3a\137" +
    "\uff3a\140\uff3a\141\uff3a\142\uff3a\203\uff3a\205\uff3a\210\uff3a" +
    "\001\002\000\056\003\137\110\142\111\112\112\133\113" +
    "\125\114\120\115\117\116\131\117\107\120\126\124\127" +
    "\127\116\131\144\133\145\136\115\137\135\140\134\141" +
    "\106\142\147\203\267\205\122\210\110\001\002\000\004" +
    "\201\270\001\002\000\004\123\271\001\002\000\060\003" +
    "\ufeb3\110\ufeb3\111\ufeb3\112\ufeb3\113\ufeb3\114\ufeb3\115\ufeb3" +
    "\116\ufeb3\117\ufeb3\120\ufeb3\124\ufeb3\127\ufeb3\131\ufeb3\133" +
    "\ufeb3\136\ufeb3\137\ufeb3\140\ufeb3\141\ufeb3\142\ufeb3\177\ufeb3" +
    "\203\ufeb3\205\ufeb3\210\ufeb3\001\002\000\056\003\273\110" +
    "\142\111\112\112\133\113\125\114\120\115\117\116\131" +
    "\117\107\120\126\124\127\127\116\131\144\133\145\136" +
    "\115\137\135\140\134\141\106\142\147\203\274\205\122" +
    "\210\110\001\002\000\064\003\uff39\110\uff39\111\uff39\112" +
    "\uff39\113\uff39\114\uff39\115\uff39\116\uff39\117\uff39\120\uff39" +
    "\124\uff39\127\uff39\131\uff39\133\uff39\136\uff39\137\uff39\140" +
    "\uff39\141\uff39\142\uff39\174\304\201\302\202\303\203\uff39" +
    "\205\uff39\210\uff39\001\002\000\006\003\275\201\276\001" +
    "\002\000\004\123\301\001\002\000\006\003\277\123\300" +
    "\001\002\000\060\003\ufeb0\110\ufeb0\111\ufeb0\112\ufeb0\113" +
    "\ufeb0\114\ufeb0\115\ufeb0\116\ufeb0\117\ufeb0\120\ufeb0\124\ufeb0" +
    "\127\ufeb0\131\ufeb0\133\ufeb0\136\ufeb0\137\ufeb0\140\ufeb0\141" +
    "\ufeb0\142\ufeb0\177\ufeb0\203\ufeb0\205\ufeb0\210\ufeb0\001\002" +
    "\000\060\003\ufebb\110\ufebb\111\ufebb\112\ufebb\113\ufebb\114" +
    "\ufebb\115\ufebb\116\ufebb\117\ufebb\120\ufebb\124\ufebb\127\ufebb" +
    "\131\ufebb\133\ufebb\136\ufebb\137\ufebb\140\ufebb\141\ufebb\142" +
    "\ufebb\177\ufebb\203\ufebb\205\ufebb\210\ufebb\001\002\000\060" +
    "\003\ufeb1\110\ufeb1\111\ufeb1\112\ufeb1\113\ufeb1\114\ufeb1\115" +
    "\ufeb1\116\ufeb1\117\ufeb1\120\ufeb1\124\ufeb1\127\ufeb1\131\ufeb1" +
    "\133\ufeb1\136\ufeb1\137\ufeb1\140\ufeb1\141\ufeb1\142\ufeb1\177" +
    "\ufeb1\203\ufeb1\205\ufeb1\210\ufeb1\001\002\000\004\123\354" +
    "\001\002\000\060\003\uff34\110\uff34\111\uff34\112\uff34\113" +
    "\uff34\114\uff34\115\uff34\116\uff34\117\uff34\120\uff34\124\uff34" +
    "\127\uff34\131\uff34\133\uff34\136\uff34\137\uff34\140\uff34\141" +
    "\uff34\142\uff34\177\uff34\203\uff34\205\uff34\210\uff34\001\002" +
    "\000\040\136\310\144\175\145\173\146\171\147\201\150" +
    "\176\151\172\162\170\165\206\174\174\205\307\207\202" +
    "\210\306\213\165\214\200\001\002\000\034\152\213\153" +
    "\220\154\216\155\223\156\211\157\214\160\222\161\210" +
    "\164\212\165\221\166\215\167\217\175\337\001\002\000" +
    "\036\152\ufe9b\153\ufe9b\154\ufe9b\155\ufe9b\156\ufe9b\157\ufe9b" +
    "\160\ufe9b\161\ufe9b\164\ufe9b\165\ufe9b\166\ufe9b\167\ufe9b\171" +
    "\uff13\175\ufe9b\001\002\000\036\152\ufe9c\153\ufe9c\154\ufe9c" +
    "\155\ufe9c\156\ufe9c\157\ufe9c\160\ufe9c\161\ufe9c\164\ufe9c\165" +
    "\ufe9c\166\ufe9c\167\ufe9c\171\uff14\175\ufe9c\001\002\000\006" +
    "\205\122\210\110\001\002\000\004\175\316\001\002\000" +
    "\004\171\313\001\002\000\004\144\314\001\002\000\006" +
    "\003\ufebc\175\ufebc\001\002\000\006\003\ufebf\175\ufebf\001" +
    "\002\000\004\130\317\001\002\000\004\174\320\001\002" +
    "\000\010\144\322\205\122\210\110\001\002\000\004\175" +
    "\324\001\002\000\006\003\ufebe\175\ufebe\001\002\000\006" +
    "\003\ufebd\175\ufebd\001\002\000\004\122\325\001\002\000" +
    "\004\200\326\001\002\000\004\203\327\001\002\000\056" +
    "\003\uff3a\110\uff3a\111\uff3a\112\uff3a\113\uff3a\114\uff3a\115" +
    "\uff3a\116\uff3a\117\uff3a\120\uff3a\124\uff3a\127\uff3a\131\uff3a" +
    "\133\uff3a\136\uff3a\137\uff3a\140\uff3a\141\uff3a\142\uff3a\203" +
    "\uff3a\205\uff3a\210\uff3a\001\002\000\056\003\137\110\142" +
    "\111\112\112\133\113\125\114\120\115\117\116\131\117" +
    "\107\120\126\124\127\127\116\131\144\133\145\136\115" +
    "\137\135\140\134\141\106\142\147\203\331\205\122\210" +
    "\110\001\002\000\004\201\332\001\002\000\004\123\333" +
    "\001\002\000\060\003\ufece\110\ufece\111\ufece\112\ufece\113" +
    "\ufece\114\ufece\115\ufece\116\ufece\117\ufece\120\ufece\124\ufece" +
    "\127\ufece\131\ufece\133\ufece\136\ufece\137\ufece\140\ufece\141" +
    "\ufece\142\ufece\177\ufece\203\ufece\205\ufece\210\ufece\001\002" +
    "\000\004\171\335\001\002\000\004\144\314\001\002\000" +
    "\006\003\ufec0\175\ufec0\001\002\000\006\125\340\132\341" +
    "\001\002\000\004\122\351\001\002\000\004\122\342\001" +
    "\002\000\004\200\343\001\002\000\004\203\344\001\002" +
    "\000\056\003\uff3a\110\uff3a\111\uff3a\112\uff3a\113\uff3a\114" +
    "\uff3a\115\uff3a\116\uff3a\117\uff3a\120\uff3a\124\uff3a\127\uff3a" +
    "\131\uff3a\133\uff3a\136\uff3a\137\uff3a\140\uff3a\141\uff3a\142" +
    "\uff3a\203\uff3a\205\uff3a\210\uff3a\001\002\000\056\003\137" +
    "\110\142\111\112\112\133\113\125\114\120\115\117\116" +
    "\131\117\107\120\126\124\127\127\116\131\144\133\145" +
    "\136\115\137\135\140\134\141\106\142\147\203\346\205" +
    "\122\210\110\001\002\000\004\201\347\001\002\000\004" +
    "\123\350\001\002\000\060\003\ufeba\110\ufeba\111\ufeba\112" +
    "\ufeba\113\ufeba\114\ufeba\115\ufeba\116\ufeba\117\ufeba\120\ufeba" +
    "\124\ufeba\127\ufeba\131\ufeba\133\ufeba\136\ufeba\137\ufeba\140" +
    "\ufeba\141\ufeba\142\ufeba\177\ufeba\203\ufeba\205\ufeba\210\ufeba" +
    "\001\002\000\004\200\352\001\002\000\004\203\353\001" +
    "\002\000\056\003\ufef4\110\ufef4\111\ufef4\112\ufef4\113\ufef4" +
    "\114\ufef4\115\ufef4\116\ufef4\117\ufef4\120\ufef4\124\ufef4\127" +
    "\ufef4\131\ufef4\133\ufef4\136\ufef4\137\ufef4\140\ufef4\141\ufef4" +
    "\142\ufef4\203\ufef4\205\ufef4\210\ufef4\001\002\000\060\003" +
    "\ufeb2\110\ufeb2\111\ufeb2\112\ufeb2\113\ufeb2\114\ufeb2\115\ufeb2" +
    "\116\ufeb2\117\ufeb2\120\ufeb2\124\ufeb2\127\ufeb2\131\ufeb2\133" +
    "\ufeb2\136\ufeb2\137\ufeb2\140\ufeb2\141\ufeb2\142\ufeb2\177\ufeb2" +
    "\203\ufeb2\205\ufeb2\210\ufeb2\001\002\000\056\003\uff3a\110" +
    "\uff3a\111\uff3a\112\uff3a\113\uff3a\114\uff3a\115\uff3a\116\uff3a" +
    "\117\uff3a\120\uff3a\124\uff3a\127\uff3a\131\uff3a\133\uff3a\136" +
    "\uff3a\137\uff3a\140\uff3a\141\uff3a\142\uff3a\203\uff3a\205\uff3a" +
    "\210\uff3a\001\002\000\056\003\137\110\142\111\112\112" +
    "\133\113\125\114\120\115\117\116\131\117\107\120\126" +
    "\124\127\127\116\131\144\133\145\136\115\137\135\140" +
    "\134\141\106\142\147\203\357\205\122\210\110\001\002" +
    "\000\004\201\360\001\002\000\004\123\361\001\002\000" +
    "\060\003\ufeb4\110\ufeb4\111\ufeb4\112\ufeb4\113\ufeb4\114\ufeb4" +
    "\115\ufeb4\116\ufeb4\117\ufeb4\120\ufeb4\124\ufeb4\127\ufeb4\131" +
    "\ufeb4\133\ufeb4\136\ufeb4\137\ufeb4\140\ufeb4\141\ufeb4\142\ufeb4" +
    "\177\ufeb4\203\ufeb4\205\ufeb4\210\ufeb4\001\002\000\004\203" +
    "\363\001\002\000\056\003\uff3a\110\uff3a\111\uff3a\112\uff3a" +
    "\113\uff3a\114\uff3a\115\uff3a\116\uff3a\117\uff3a\120\uff3a\124" +
    "\uff3a\127\uff3a\131\uff3a\133\uff3a\136\uff3a\137\uff3a\140\uff3a" +
    "\141\uff3a\142\uff3a\203\uff3a\205\uff3a\210\uff3a\001\002\000" +
    "\056\003\137\110\142\111\112\112\133\113\125\114\120" +
    "\115\117\116\131\117\107\120\126\124\127\127\116\131" +
    "\144\133\145\136\115\137\135\140\134\141\106\142\147" +
    "\203\365\205\122\210\110\001\002\000\004\201\366\001" +
    "\002\000\004\123\367\001\002\000\060\003\ufeb5\110\ufeb5" +
    "\111\ufeb5\112\ufeb5\113\ufeb5\114\ufeb5\115\ufeb5\116\ufeb5\117" +
    "\ufeb5\120\ufeb5\124\ufeb5\127\ufeb5\131\ufeb5\133\ufeb5\136\ufeb5" +
    "\137\ufeb5\140\ufeb5\141\ufeb5\142\ufeb5\177\ufeb5\203\ufeb5\205" +
    "\ufeb5\210\ufeb5\001\002\000\004\200\371\001\002\000\004" +
    "\203\372\001\002\000\056\003\uff3a\110\uff3a\111\uff3a\112" +
    "\uff3a\113\uff3a\114\uff3a\115\uff3a\116\uff3a\117\uff3a\120\uff3a" +
    "\124\uff3a\127\uff3a\131\uff3a\133\uff3a\136\uff3a\137\uff3a\140" +
    "\uff3a\141\uff3a\142\uff3a\203\uff3a\205\uff3a\210\uff3a\001\002" +
    "\000\056\003\137\110\142\111\112\112\133\113\125\114" +
    "\120\115\117\116\131\117\107\120\126\124\127\127\116" +
    "\131\144\133\145\136\115\137\135\140\134\141\106\142" +
    "\147\203\374\205\122\210\110\001\002\000\004\201\375" +
    "\001\002\000\004\123\376\001\002\000\060\003\ufeb6\110" +
    "\ufeb6\111\ufeb6\112\ufeb6\113\ufeb6\114\ufeb6\115\ufeb6\116\ufeb6" +
    "\117\ufeb6\120\ufeb6\124\ufeb6\127\ufeb6\131\ufeb6\133\ufeb6\136" +
    "\ufeb6\137\ufeb6\140\ufeb6\141\ufeb6\142\ufeb6\177\ufeb6\203\ufeb6" +
    "\205\ufeb6\210\ufeb6\001\002\000\004\122\u0100\001\002\000" +
    "\004\200\u0101\001\002\000\004\203\u0102\001\002\000\056" +
    "\003\uff3a\110\uff3a\111\uff3a\112\uff3a\113\uff3a\114\uff3a\115" +
    "\uff3a\116\uff3a\117\uff3a\120\uff3a\124\uff3a\127\uff3a\131\uff3a" +
    "\133\uff3a\136\uff3a\137\uff3a\140\uff3a\141\uff3a\142\uff3a\203" +
    "\uff3a\205\uff3a\210\uff3a\001\002\000\056\003\137\110\142" +
    "\111\112\112\133\113\125\114\120\115\117\116\131\117" +
    "\107\120\126\124\127\127\116\131\144\133\145\136\115" +
    "\137\135\140\134\141\106\142\147\203\u0104\205\122\210" +
    "\110\001\002\000\004\201\u0105\001\002\000\004\123\u0106" +
    "\001\002\000\060\003\ufeb7\110\ufeb7\111\ufeb7\112\ufeb7\113" +
    "\ufeb7\114\ufeb7\115\ufeb7\116\ufeb7\117\ufeb7\120\ufeb7\124\ufeb7" +
    "\127\ufeb7\131\ufeb7\133\ufeb7\136\ufeb7\137\ufeb7\140\ufeb7\141" +
    "\ufeb7\142\ufeb7\177\ufeb7\203\ufeb7\205\ufeb7\210\ufeb7\001\002" +
    "\000\034\152\213\153\220\154\216\155\223\156\211\157" +
    "\214\160\222\161\210\164\212\165\221\166\215\167\217" +
    "\175\u0108\001\002\000\004\132\u0109\001\002\000\004\122" +
    "\u010a\001\002\000\004\200\u010b\001\002\000\004\203\u010c" +
    "\001\002\000\056\003\uff3a\110\uff3a\111\uff3a\112\uff3a\113" +
    "\uff3a\114\uff3a\115\uff3a\116\uff3a\117\uff3a\120\uff3a\124\uff3a" +
    "\127\uff3a\131\uff3a\133\uff3a\136\uff3a\137\uff3a\140\uff3a\141" +
    "\uff3a\142\uff3a\203\uff3a\205\uff3a\210\uff3a\001\002\000\056" +
    "\003\137\110\142\111\112\112\133\113\125\114\120\115" +
    "\117\116\131\117\107\120\126\124\127\127\116\131\144" +
    "\133\145\136\115\137\135\140\134\141\106\142\147\203" +
    "\u010e\205\122\210\110\001\002\000\004\201\u010f\001\002" +
    "\000\004\123\u0110\001\002\000\060\003\ufeb9\110\ufeb9\111" +
    "\ufeb9\112\ufeb9\113\ufeb9\114\ufeb9\115\ufeb9\116\ufeb9\117\ufeb9" +
    "\120\ufeb9\124\ufeb9\127\ufeb9\131\ufeb9\133\ufeb9\136\ufeb9\137" +
    "\ufeb9\140\ufeb9\141\ufeb9\142\ufeb9\177\ufeb9\203\ufeb9\205\ufeb9" +
    "\210\ufeb9\001\002\000\010\003\u0115\205\122\210\110\001" +
    "\002\000\012\003\uff16\171\uff16\202\uff16\206\uff16\001\002" +
    "\000\036\144\175\145\173\146\171\147\201\150\176\151" +
    "\172\162\170\165\206\174\174\205\205\207\202\210\203" +
    "\213\165\214\200\001\002\000\034\152\213\153\220\154" +
    "\216\155\223\156\211\157\214\160\222\161\210\164\212" +
    "\165\221\166\215\167\217\202\ufef9\001\002\000\012\003" +
    "\uff15\171\uff15\202\uff15\206\uff15\001\002\000\012\003\uff18" +
    "\171\uff18\202\uff18\206\uff18\001\002\000\030\003\u011c\110" +
    "\142\111\112\112\133\113\125\114\120\151\u011b\205\u0120" +
    "\207\u0118\213\u011e\214\u011a\001\002\000\010\003\ufefd\164" +
    "\ufefd\175\ufefd\001\002\000\010\003\u0122\164\u0123\175\u0121" +
    "\001\002\000\010\003\ufeff\164\ufeff\175\ufeff\001\002\000" +
    "\010\003\ufefe\164\ufefe\175\ufefe\001\002\000\010\003\ufefa" +
    "\164\ufefa\175\ufefa\001\002\000\010\003\ufefb\164\ufefb\175" +
    "\ufefb\001\002\000\010\003\uff00\164\uff00\175\uff00\001\002" +
    "\000\010\003\uff09\164\uff09\175\uff09\001\002\000\010\003" +
    "\ufefc\164\ufefc\175\ufefc\001\002\000\012\003\uff25\164\uff25" +
    "\175\uff25\202\uff25\001\002\000\010\003\uff08\164\uff08\175" +
    "\uff08\001\002\000\030\003\u011c\110\142\111\112\112\133" +
    "\113\125\114\120\151\u011b\205\u0120\207\u0118\213\u011e\214" +
    "\u011a\001\002\000\010\003\uff0a\164\uff0a\175\uff0a\001\002" +
    "\000\062\003\ufeeb\110\ufeeb\111\ufeeb\112\ufeeb\113\ufeeb\114" +
    "\ufeeb\115\ufeeb\116\ufeeb\117\ufeeb\120\ufeeb\124\ufeeb\126\ufeeb" +
    "\127\ufeeb\131\ufeeb\133\ufeeb\136\ufeeb\137\ufeeb\140\ufeeb\141" +
    "\ufeeb\142\ufeeb\177\ufeeb\203\ufeeb\205\ufeeb\210\ufeeb\001\002" +
    "\000\062\003\ufed6\110\ufed6\111\ufed6\112\ufed6\113\ufed6\114" +
    "\ufed6\115\ufed6\116\ufed6\117\ufed6\120\ufed6\124\ufed6\126\u0128" +
    "\127\ufed6\131\ufed6\133\ufed6\136\ufed6\137\ufed6\140\ufed6\141" +
    "\ufed6\142\ufed6\177\ufed6\203\ufed6\205\ufed6\210\ufed6\001\002" +
    "\000\062\003\ufeec\110\ufeec\111\ufeec\112\ufeec\113\ufeec\114" +
    "\ufeec\115\ufeec\116\ufeec\117\ufeec\120\ufeec\124\ufeec\126\ufeec" +
    "\127\ufeec\131\ufeec\133\ufeec\136\ufeec\137\ufeec\140\ufeec\141" +
    "\ufeec\142\ufeec\177\ufeec\203\ufeec\205\ufeec\210\ufeec\001\002" +
    "\000\052\003\u012d\110\142\111\112\112\133\113\125\114" +
    "\120\115\117\116\131\117\107\120\126\122\u012a\124\u012c" +
    "\133\145\136\115\137\135\140\134\141\106\142\147\205" +
    "\122\210\110\001\002\000\060\003\ufef7\110\ufef7\111\ufef7" +
    "\112\ufef7\113\ufef7\114\ufef7\115\ufef7\116\ufef7\117\ufef7\120" +
    "\ufef7\124\ufef7\127\ufef7\131\ufef7\133\ufef7\136\ufef7\137\ufef7" +
    "\140\ufef7\141\ufef7\142\ufef7\177\ufef7\203\ufef7\205\ufef7\210" +
    "\ufef7\001\002\000\006\003\u018e\200\u018f\001\002\000\060" +
    "\003\ufed7\110\ufed7\111\ufed7\112\ufed7\113\ufed7\114\ufed7\115" +
    "\ufed7\116\ufed7\117\ufed7\120\ufed7\124\ufed7\127\ufed7\131\ufed7" +
    "\133\ufed7\136\ufed7\137\ufed7\140\ufed7\141\ufed7\142\ufed7\177" +
    "\ufed7\203\ufed7\205\ufed7\210\ufed7\001\002\000\006\003\u0140" +
    "\174\u0141\001\002\000\006\174\u012f\200\u012e\001\002\000" +
    "\004\203\u013b\001\002\000\036\144\175\145\173\146\171" +
    "\147\201\150\176\151\172\162\170\165\206\174\174\205" +
    "\205\207\202\210\203\213\165\214\200\001\002\000\034" +
    "\152\213\153\220\154\216\155\223\156\211\157\214\160" +
    "\222\161\210\164\212\165\221\166\215\167\217\175\u0131" +
    "\001\002\000\004\125\u0132\001\002\000\046\110\142\111" +
    "\112\112\133\113\125\114\120\115\117\116\131\117\107" +
    "\120\126\122\u0133\133\145\136\115\137\135\140\134\141" +
    "\106\142\147\205\122\210\110\001\002\000\004\200\u0135" +
    "\001\002\000\062\003\ufedd\110\ufedd\111\ufedd\112\ufedd\113" +
    "\ufedd\114\ufedd\115\ufedd\116\ufedd\117\ufedd\120\ufedd\124\ufedd" +
    "\126\ufedd\127\ufedd\131\ufedd\133\ufedd\136\ufedd\137\ufedd\140" +
    "\ufedd\141\ufedd\142\ufedd\177\ufedd\203\ufedd\205\ufedd\210\ufedd" +
    "\001\002\000\004\203\u0136\001\002\000\056\003\uff3a\110" +
    "\uff3a\111\uff3a\112\uff3a\113\uff3a\114\uff3a\115\uff3a\116\uff3a" +
    "\117\uff3a\120\uff3a\124\uff3a\127\uff3a\131\uff3a\133\uff3a\136" +
    "\uff3a\137\uff3a\140\uff3a\141\uff3a\142\uff3a\203\uff3a\205\uff3a" +
    "\210\uff3a\001\002\000\056\003\137\110\142\111\112\112" +
    "\133\113\125\114\120\115\117\116\131\117\107\120\126" +
    "\124\127\127\116\131\144\133\145\136\115\137\135\140" +
    "\134\141\106\142\147\203\u0138\205\122\210\110\001\002" +
    "\000\004\201\u0139\001\002\000\004\123\u013a\001\002\000" +
    "\062\003\ufee8\110\ufee8\111\ufee8\112\ufee8\113\ufee8\114\ufee8" +
    "\115\ufee8\116\ufee8\117\ufee8\120\ufee8\124\ufee8\126\ufee8\127" +
    "\ufee8\131\ufee8\133\ufee8\136\ufee8\137\ufee8\140\ufee8\141\ufee8" +
    "\142\ufee8\177\ufee8\203\ufee8\205\ufee8\210\ufee8\001\002\000" +
    "\056\003\uff3a\110\uff3a\111\uff3a\112\uff3a\113\uff3a\114\uff3a" +
    "\115\uff3a\116\uff3a\117\uff3a\120\uff3a\124\uff3a\127\uff3a\131" +
    "\uff3a\133\uff3a\136\uff3a\137\uff3a\140\uff3a\141\uff3a\142\uff3a" +
    "\203\uff3a\205\uff3a\210\uff3a\001\002\000\056\003\137\110" +
    "\142\111\112\112\133\113\125\114\120\115\117\116\131" +
    "\117\107\120\126\124\127\127\116\131\144\133\145\136" +
    "\115\137\135\140\134\141\106\142\147\203\u013d\205\122" +
    "\210\110\001\002\000\004\201\u013e\001\002\000\004\123" +
    "\u013f\001\002\000\060\003\ufed5\110\ufed5\111\ufed5\112\ufed5" +
    "\113\ufed5\114\ufed5\115\ufed5\116\ufed5\117\ufed5\120\ufed5\124" +
    "\ufed5\127\ufed5\131\ufed5\133\ufed5\136\ufed5\137\ufed5\140\ufed5" +
    "\141\ufed5\142\ufed5\177\ufed5\203\ufed5\205\ufed5\210\ufed5\001" +
    "\002\000\036\144\175\145\173\146\171\147\201\150\176" +
    "\151\172\162\170\165\206\174\174\205\205\207\202\210" +
    "\203\213\165\214\200\001\002\000\040\003\u0143\144\175" +
    "\145\173\146\171\147\201\150\176\151\172\162\170\165" +
    "\206\174\174\205\205\207\202\210\203\213\165\214\200" +
    "\001\002\000\036\003\u014e\152\213\153\220\154\216\155" +
    "\223\156\211\157\214\160\222\161\210\164\212\165\221" +
    "\166\215\167\217\175\u014f\001\002\000\004\175\u0144\001" +
    "\002\000\004\125\u0145\001\002\000\046\110\142\111\112" +
    "\112\133\113\125\114\120\115\117\116\131\117\107\120" +
    "\126\122\u0146\133\145\136\115\137\135\140\134\141\106" +
    "\142\147\205\122\210\110\001\002\000\004\200\u0148\001" +
    "\002\000\062\003\ufedb\110\ufedb\111\ufedb\112\ufedb\113\ufedb" +
    "\114\ufedb\115\ufedb\116\ufedb\117\ufedb\120\ufedb\124\ufedb\126" +
    "\ufedb\127\ufedb\131\ufedb\133\ufedb\136\ufedb\137\ufedb\140\ufedb" +
    "\141\ufedb\142\ufedb\177\ufedb\203\ufedb\205\ufedb\210\ufedb\001" +
    "\002\000\004\203\u0149\001\002\000\056\003\uff3a\110\uff3a" +
    "\111\uff3a\112\uff3a\113\uff3a\114\uff3a\115\uff3a\116\uff3a\117" +
    "\uff3a\120\uff3a\124\uff3a\127\uff3a\131\uff3a\133\uff3a\136\uff3a" +
    "\137\uff3a\140\uff3a\141\uff3a\142\uff3a\203\uff3a\205\uff3a\210" +
    "\uff3a\001\002\000\056\003\137\110\142\111\112\112\133" +
    "\113\125\114\120\115\117\116\131\117\107\120\126\124" +
    "\127\127\116\131\144\133\145\136\115\137\135\140\134" +
    "\141\106\142\147\203\u014b\205\122\210\110\001\002\000" +
    "\004\201\u014c\001\002\000\004\123\u014d\001\002\000\062" +
    "\003\ufee6\110\ufee6\111\ufee6\112\ufee6\113\ufee6\114\ufee6\115" +
    "\ufee6\116\ufee6\117\ufee6\120\ufee6\124\ufee6\126\ufee6\127\ufee6" +
    "\131\ufee6\133\ufee6\136\ufee6\137\ufee6\140\ufee6\141\ufee6\142" +
    "\ufee6\177\ufee6\203\ufee6\205\ufee6\210\ufee6\001\002\000\004" +
    "\125\u017a\001\002\000\006\003\u0150\125\u0151\001\002\000" +
    "\046\110\142\111\112\112\133\113\125\114\120\115\117" +
    "\116\131\117\107\120\126\122\u0172\133\145\136\115\137" +
    "\135\140\134\141\106\142\147\205\122\210\110\001\002" +
    "\000\050\003\u0154\110\142\111\112\112\133\113\125\114" +
    "\120\115\117\116\131\117\107\120\126\122\u0152\133\145" +
    "\136\115\137\135\140\134\141\106\142\147\205\122\210" +
    "\110\001\002\000\006\003\u015b\200\u015c\001\002\000\062" +
    "\003\ufee9\110\ufee9\111\ufee9\112\ufee9\113\ufee9\114\ufee9\115" +
    "\ufee9\116\ufee9\117\ufee9\120\ufee9\124\ufee9\126\ufee9\127\ufee9" +
    "\131\ufee9\133\ufee9\136\ufee9\137\ufee9\140\ufee9\141\ufee9\142" +
    "\ufee9\177\ufee9\203\ufee9\205\ufee9\210\ufee9\001\002\000\004" +
    "\200\u0155\001\002\000\004\203\u0156\001\002\000\056\003" +
    "\uff3a\110\uff3a\111\uff3a\112\uff3a\113\uff3a\114\uff3a\115\uff3a" +
    "\116\uff3a\117\uff3a\120\uff3a\124\uff3a\127\uff3a\131\uff3a\133" +
    "\uff3a\136\uff3a\137\uff3a\140\uff3a\141\uff3a\142\uff3a\203\uff3a" +
    "\205\uff3a\210\uff3a\001\002\000\056\003\137\110\142\111" +
    "\112\112\133\113\125\114\120\115\117\116\131\117\107" +
    "\120\126\124\127\127\116\131\144\133\145\136\115\137" +
    "\135\140\134\141\106\142\147\203\u0158\205\122\210\110" +
    "\001\002\000\004\201\u0159\001\002\000\004\123\u015a\001" +
    "\002\000\062\003\ufee3\110\ufee3\111\ufee3\112\ufee3\113\ufee3" +
    "\114\ufee3\115\ufee3\116\ufee3\117\ufee3\120\ufee3\124\ufee3\126" +
    "\ufee3\127\ufee3\131\ufee3\133\ufee3\136\ufee3\137\ufee3\140\ufee3" +
    "\141\ufee3\142\ufee3\177\ufee3\203\ufee3\205\ufee3\210\ufee3\001" +
    "\002\000\004\203\u016d\001\002\000\006\003\u015e\203\u015d" +
    "\001\002\000\056\003\uff3a\110\uff3a\111\uff3a\112\uff3a\113" +
    "\uff3a\114\uff3a\115\uff3a\116\uff3a\117\uff3a\120\uff3a\124\uff3a" +
    "\127\uff3a\131\uff3a\133\uff3a\136\uff3a\137\uff3a\140\uff3a\141" +
    "\uff3a\142\uff3a\203\uff3a\205\uff3a\210\uff3a\001\002\000\056" +
    "\003\uff3a\110\uff3a\111\uff3a\112\uff3a\113\uff3a\114\uff3a\115" +
    "\uff3a\116\uff3a\117\uff3a\120\uff3a\124\uff3a\127\uff3a\131\uff3a" +
    "\133\uff3a\136\uff3a\137\uff3a\140\uff3a\141\uff3a\142\uff3a\203" +
    "\uff3a\205\uff3a\210\uff3a\001\002\000\056\003\137\110\142" +
    "\111\112\112\133\113\125\114\120\115\117\116\131\117" +
    "\107\120\126\124\127\127\116\131\144\133\145\136\115" +
    "\137\135\140\134\141\106\142\147\203\u0160\205\122\210" +
    "\110\001\002\000\004\201\u0161\001\002\000\004\123\u0162" +
    "\001\002\000\062\003\ufee1\110\ufee1\111\ufee1\112\ufee1\113" +
    "\ufee1\114\ufee1\115\ufee1\116\ufee1\117\ufee1\120\ufee1\124\ufee1" +
    "\126\ufee1\127\ufee1\131\ufee1\133\ufee1\136\ufee1\137\ufee1\140" +
    "\ufee1\141\ufee1\142\ufee1\177\ufee1\203\ufee1\205\ufee1\210\ufee1" +
    "\001\002\000\056\003\u0164\110\142\111\112\112\133\113" +
    "\125\114\120\115\117\116\131\117\107\120\126\124\127" +
    "\127\116\131\144\133\145\136\115\137\135\140\134\141" +
    "\106\142\147\203\u0165\205\122\210\110\001\002\000\064" +
    "\003\uff39\110\uff39\111\uff39\112\uff39\113\uff39\114\uff39\115" +
    "\uff39\116\uff39\117\uff39\120\uff39\124\uff39\127\uff39\131\uff39" +
    "\133\uff39\136\uff39\137\uff39\140\uff39\141\uff39\142\uff39\174" +
    "\304\201\u016b\202\303\203\uff39\205\uff39\210\uff39\001\002" +
    "\000\006\003\u0166\201\u0167\001\002\000\004\123\u016a\001" +
    "\002\000\006\003\u0168\123\u0169\001\002\000\062\003\ufede" +
    "\110\ufede\111\ufede\112\ufede\113\ufede\114\ufede\115\ufede\116" +
    "\ufede\117\ufede\120\ufede\124\ufede\126\ufede\127\ufede\131\ufede" +
    "\133\ufede\136\ufede\137\ufede\140\ufede\141\ufede\142\ufede\177" +
    "\ufede\203\ufede\205\ufede\210\ufede\001\002\000\062\003\ufeea" +
    "\110\ufeea\111\ufeea\112\ufeea\113\ufeea\114\ufeea\115\ufeea\116" +
    "\ufeea\117\ufeea\120\ufeea\124\ufeea\126\ufeea\127\ufeea\131\ufeea" +
    "\133\ufeea\136\ufeea\137\ufeea\140\ufeea\141\ufeea\142\ufeea\177" +
    "\ufeea\203\ufeea\205\ufeea\210\ufeea\001\002\000\062\003\ufedf" +
    "\110\ufedf\111\ufedf\112\ufedf\113\ufedf\114\ufedf\115\ufedf\116" +
    "\ufedf\117\ufedf\120\ufedf\124\ufedf\126\ufedf\127\ufedf\131\ufedf" +
    "\133\ufedf\136\ufedf\137\ufedf\140\ufedf\141\ufedf\142\ufedf\177" +
    "\ufedf\203\ufedf\205\ufedf\210\ufedf\001\002\000\004\123\u016c" +
    "\001\002\000\062\003\ufee0\110\ufee0\111\ufee0\112\ufee0\113" +
    "\ufee0\114\ufee0\115\ufee0\116\ufee0\117\ufee0\120\ufee0\124\ufee0" +
    "\126\ufee0\127\ufee0\131\ufee0\133\ufee0\136\ufee0\137\ufee0\140" +
    "\ufee0\141\ufee0\142\ufee0\177\ufee0\203\ufee0\205\ufee0\210\ufee0" +
    "\001\002\000\056\003\uff3a\110\uff3a\111\uff3a\112\uff3a\113" +
    "\uff3a\114\uff3a\115\uff3a\116\uff3a\117\uff3a\120\uff3a\124\uff3a" +
    "\127\uff3a\131\uff3a\133\uff3a\136\uff3a\137\uff3a\140\uff3a\141" +
    "\uff3a\142\uff3a\203\uff3a\205\uff3a\210\uff3a\001\002\000\056" +
    "\003\137\110\142\111\112\112\133\113\125\114\120\115" +
    "\117\116\131\117\107\120\126\124\127\127\116\131\144" +
    "\133\145\136\115\137\135\140\134\141\106\142\147\203" +
    "\u016f\205\122\210\110\001\002\000\004\201\u0170\001\002" +
    "\000\004\123\u0171\001\002\000\062\003\ufee2\110\ufee2\111" +
    "\ufee2\112\ufee2\113\ufee2\114\ufee2\115\ufee2\116\ufee2\117\ufee2" +
    "\120\ufee2\124\ufee2\126\ufee2\127\ufee2\131\ufee2\133\ufee2\136" +
    "\ufee2\137\ufee2\140\ufee2\141\ufee2\142\ufee2\177\ufee2\203\ufee2" +
    "\205\ufee2\210\ufee2\001\002\000\004\200\u0174\001\002\000" +
    "\062\003\ufed9\110\ufed9\111\ufed9\112\ufed9\113\ufed9\114\ufed9" +
    "\115\ufed9\116\ufed9\117\ufed9\120\ufed9\124\ufed9\126\ufed9\127" +
    "\ufed9\131\ufed9\133\ufed9\136\ufed9\137\ufed9\140\ufed9\141\ufed9" +
    "\142\ufed9\177\ufed9\203\ufed9\205\ufed9\210\ufed9\001\002\000" +
    "\004\203\u0175\001\002\000\056\003\uff3a\110\uff3a\111\uff3a" +
    "\112\uff3a\113\uff3a\114\uff3a\115\uff3a\116\uff3a\117\uff3a\120" +
    "\uff3a\124\uff3a\127\uff3a\131\uff3a\133\uff3a\136\uff3a\137\uff3a" +
    "\140\uff3a\141\uff3a\142\uff3a\203\uff3a\205\uff3a\210\uff3a\001" +
    "\002\000\056\003\137\110\142\111\112\112\133\113\125" +
    "\114\120\115\117\116\131\117\107\120\126\124\127\127" +
    "\116\131\144\133\145\136\115\137\135\140\134\141\106" +
    "\142\147\203\u0177\205\122\210\110\001\002\000\004\201" +
    "\u0178\001\002\000\004\123\u0179\001\002\000\062\003\ufee4" +
    "\110\ufee4\111\ufee4\112\ufee4\113\ufee4\114\ufee4\115\ufee4\116" +
    "\ufee4\117\ufee4\120\ufee4\124\ufee4\126\ufee4\127\ufee4\131\ufee4" +
    "\133\ufee4\136\ufee4\137\ufee4\140\ufee4\141\ufee4\142\ufee4\177" +
    "\ufee4\203\ufee4\205\ufee4\210\ufee4\001\002\000\046\110\142" +
    "\111\112\112\133\113\125\114\120\115\117\116\131\117" +
    "\107\120\126\122\u017b\133\145\136\115\137\135\140\134" +
    "\141\106\142\147\205\122\210\110\001\002\000\004\200" +
    "\u017d\001\002\000\062\003\ufeda\110\ufeda\111\ufeda\112\ufeda" +
    "\113\ufeda\114\ufeda\115\ufeda\116\ufeda\117\ufeda\120\ufeda\124" +
    "\ufeda\126\ufeda\127\ufeda\131\ufeda\133\ufeda\136\ufeda\137\ufeda" +
    "\140\ufeda\141\ufeda\142\ufeda\177\ufeda\203\ufeda\205\ufeda\210" +
    "\ufeda\001\002\000\004\203\u017e\001\002\000\056\003\uff3a" +
    "\110\uff3a\111\uff3a\112\uff3a\113\uff3a\114\uff3a\115\uff3a\116" +
    "\uff3a\117\uff3a\120\uff3a\124\uff3a\127\uff3a\131\uff3a\133\uff3a" +
    "\136\uff3a\137\uff3a\140\uff3a\141\uff3a\142\uff3a\203\uff3a\205" +
    "\uff3a\210\uff3a\001\002\000\056\003\137\110\142\111\112" +
    "\112\133\113\125\114\120\115\117\116\131\117\107\120" +
    "\126\124\127\127\116\131\144\133\145\136\115\137\135" +
    "\140\134\141\106\142\147\203\u0180\205\122\210\110\001" +
    "\002\000\004\201\u0181\001\002\000\004\123\u0182\001\002" +
    "\000\062\003\ufee5\110\ufee5\111\ufee5\112\ufee5\113\ufee5\114" +
    "\ufee5\115\ufee5\116\ufee5\117\ufee5\120\ufee5\124\ufee5\126\ufee5" +
    "\127\ufee5\131\ufee5\133\ufee5\136\ufee5\137\ufee5\140\ufee5\141" +
    "\ufee5\142\ufee5\177\ufee5\203\ufee5\205\ufee5\210\ufee5\001\002" +
    "\000\034\152\213\153\220\154\216\155\223\156\211\157" +
    "\214\160\222\161\210\164\212\165\221\166\215\167\217" +
    "\175\u0184\001\002\000\004\125\u0185\001\002\000\046\110" +
    "\142\111\112\112\133\113\125\114\120\115\117\116\131" +
    "\117\107\120\126\122\u0186\133\145\136\115\137\135\140" +
    "\134\141\106\142\147\205\122\210\110\001\002\000\004" +
    "\200\u0188\001\002\000\062\003\ufedc\110\ufedc\111\ufedc\112" +
    "\ufedc\113\ufedc\114\ufedc\115\ufedc\116\ufedc\117\ufedc\120\ufedc" +
    "\124\ufedc\126\ufedc\127\ufedc\131\ufedc\133\ufedc\136\ufedc\137" +
    "\ufedc\140\ufedc\141\ufedc\142\ufedc\177\ufedc\203\ufedc\205\ufedc" +
    "\210\ufedc\001\002\000\004\203\u0189\001\002\000\056\003" +
    "\uff3a\110\uff3a\111\uff3a\112\uff3a\113\uff3a\114\uff3a\115\uff3a" +
    "\116\uff3a\117\uff3a\120\uff3a\124\uff3a\127\uff3a\131\uff3a\133" +
    "\uff3a\136\uff3a\137\uff3a\140\uff3a\141\uff3a\142\uff3a\203\uff3a" +
    "\205\uff3a\210\uff3a\001\002\000\056\003\137\110\142\111" +
    "\112\112\133\113\125\114\120\115\117\116\131\117\107" +
    "\120\126\124\127\127\116\131\144\133\145\136\115\137" +
    "\135\140\134\141\106\142\147\203\u018b\205\122\210\110" +
    "\001\002\000\004\201\u018c\001\002\000\004\123\u018d\001" +
    "\002\000\062\003\ufee7\110\ufee7\111\ufee7\112\ufee7\113\ufee7" +
    "\114\ufee7\115\ufee7\116\ufee7\117\ufee7\120\ufee7\124\ufee7\126" +
    "\ufee7\127\ufee7\131\ufee7\133\ufee7\136\ufee7\137\ufee7\140\ufee7" +
    "\141\ufee7\142\ufee7\177\ufee7\203\ufee7\205\ufee7\210\ufee7\001" +
    "\002\000\004\203\u01a0\001\002\000\006\003\u0191\203\u0190" +
    "\001\002\000\056\003\uff3a\110\uff3a\111\uff3a\112\uff3a\113" +
    "\uff3a\114\uff3a\115\uff3a\116\uff3a\117\uff3a\120\uff3a\124\uff3a" +
    "\127\uff3a\131\uff3a\133\uff3a\136\uff3a\137\uff3a\140\uff3a\141" +
    "\uff3a\142\uff3a\203\uff3a\205\uff3a\210\uff3a\001\002\000\056" +
    "\003\uff3a\110\uff3a\111\uff3a\112\uff3a\113\uff3a\114\uff3a\115" +
    "\uff3a\116\uff3a\117\uff3a\120\uff3a\124\uff3a\127\uff3a\131\uff3a" +
    "\133\uff3a\136\uff3a\137\uff3a\140\uff3a\141\uff3a\142\uff3a\203" +
    "\uff3a\205\uff3a\210\uff3a\001\002\000\056\003\137\110\142" +
    "\111\112\112\133\113\125\114\120\115\117\116\131\117" +
    "\107\120\126\124\127\127\116\131\144\133\145\136\115" +
    "\137\135\140\134\141\106\142\147\203\u0193\205\122\210" +
    "\110\001\002\000\004\201\u0194\001\002\000\004\123\u0195" +
    "\001\002\000\060\003\ufed3\110\ufed3\111\ufed3\112\ufed3\113" +
    "\ufed3\114\ufed3\115\ufed3\116\ufed3\117\ufed3\120\ufed3\124\ufed3" +
    "\127\ufed3\131\ufed3\133\ufed3\136\ufed3\137\ufed3\140\ufed3\141" +
    "\ufed3\142\ufed3\177\ufed3\203\ufed3\205\ufed3\210\ufed3\001\002" +
    "\000\056\003\u0197\110\142\111\112\112\133\113\125\114" +
    "\120\115\117\116\131\117\107\120\126\124\127\127\116" +
    "\131\144\133\145\136\115\137\135\140\134\141\106\142" +
    "\147\203\u0198\205\122\210\110\001\002\000\064\003\uff39" +
    "\110\uff39\111\uff39\112\uff39\113\uff39\114\uff39\115\uff39\116" +
    "\uff39\117\uff39\120\uff39\124\uff39\127\uff39\131\uff39\133\uff39" +
    "\136\uff39\137\uff39\140\uff39\141\uff39\142\uff39\174\304\201" +
    "\u019e\202\303\203\uff39\205\uff39\210\uff39\001\002\000\006" +
    "\003\u0199\201\u019a\001\002\000\004\123\u019d\001\002\000" +
    "\006\003\u019b\123\u019c\001\002\000\060\003\ufed0\110\ufed0" +
    "\111\ufed0\112\ufed0\113\ufed0\114\ufed0\115\ufed0\116\ufed0\117" +
    "\ufed0\120\ufed0\124\ufed0\127\ufed0\131\ufed0\133\ufed0\136\ufed0" +
    "\137\ufed0\140\ufed0\141\ufed0\142\ufed0\177\ufed0\203\ufed0\205" +
    "\ufed0\210\ufed0\001\002\000\060\003\ufed8\110\ufed8\111\ufed8" +
    "\112\ufed8\113\ufed8\114\ufed8\115\ufed8\116\ufed8\117\ufed8\120" +
    "\ufed8\124\ufed8\127\ufed8\131\ufed8\133\ufed8\136\ufed8\137\ufed8" +
    "\140\ufed8\141\ufed8\142\ufed8\177\ufed8\203\ufed8\205\ufed8\210" +
    "\ufed8\001\002\000\060\003\ufed1\110\ufed1\111\ufed1\112\ufed1" +
    "\113\ufed1\114\ufed1\115\ufed1\116\ufed1\117\ufed1\120\ufed1\124" +
    "\ufed1\127\ufed1\131\ufed1\133\ufed1\136\ufed1\137\ufed1\140\ufed1" +
    "\141\ufed1\142\ufed1\177\ufed1\203\ufed1\205\ufed1\210\ufed1\001" +
    "\002\000\004\123\u019f\001\002\000\060\003\ufed2\110\ufed2" +
    "\111\ufed2\112\ufed2\113\ufed2\114\ufed2\115\ufed2\116\ufed2\117" +
    "\ufed2\120\ufed2\124\ufed2\127\ufed2\131\ufed2\133\ufed2\136\ufed2" +
    "\137\ufed2\140\ufed2\141\ufed2\142\ufed2\177\ufed2\203\ufed2\205" +
    "\ufed2\210\ufed2\001\002\000\056\003\uff3a\110\uff3a\111\uff3a" +
    "\112\uff3a\113\uff3a\114\uff3a\115\uff3a\116\uff3a\117\uff3a\120" +
    "\uff3a\124\uff3a\127\uff3a\131\uff3a\133\uff3a\136\uff3a\137\uff3a" +
    "\140\uff3a\141\uff3a\142\uff3a\203\uff3a\205\uff3a\210\uff3a\001" +
    "\002\000\056\003\137\110\142\111\112\112\133\113\125" +
    "\114\120\115\117\116\131\117\107\120\126\124\127\127" +
    "\116\131\144\133\145\136\115\137\135\140\134\141\106" +
    "\142\147\203\u01a2\205\122\210\110\001\002\000\004\201" +
    "\u01a3\001\002\000\004\123\u01a4\001\002\000\060\003\ufed4" +
    "\110\ufed4\111\ufed4\112\ufed4\113\ufed4\114\ufed4\115\ufed4\116" +
    "\ufed4\117\ufed4\120\ufed4\124\ufed4\127\ufed4\131\ufed4\133\ufed4" +
    "\136\ufed4\137\ufed4\140\ufed4\141\ufed4\142\ufed4\177\ufed4\203" +
    "\ufed4\205\ufed4\210\ufed4\001\002\000\030\003\u011c\110\142" +
    "\111\112\112\133\113\125\114\120\151\u011b\205\u0120\207" +
    "\u0118\213\u011e\214\u011a\001\002\000\010\003\u0122\164\u0123" +
    "\175\u01a7\001\002\000\012\003\uff23\164\uff23\175\uff23\202" +
    "\uff23\001\002\000\004\175\u01a9\001\002\000\004\202\uff2e" +
    "\001\002\000\036\144\175\145\173\146\171\147\201\150" +
    "\176\151\172\162\170\165\206\174\174\205\205\207\202" +
    "\210\203\213\165\214\200\001\002\000\040\003\u01ad\144" +
    "\175\145\173\146\171\147\201\150\176\151\172\162\170" +
    "\165\206\174\174\205\205\207\202\210\203\213\165\214" +
    "\200\001\002\000\036\003\u01b3\152\213\153\220\154\216" +
    "\155\223\156\211\157\214\160\222\161\210\164\212\165" +
    "\221\166\215\167\217\175\u01b4\001\002\000\004\175\u01ae" +
    "\001\002\000\004\125\u01af\001\002\000\004\122\u01b0\001" +
    "\002\000\004\200\u01b1\001\002\000\004\203\u01b2\001\002" +
    "\000\056\003\ufef5\110\ufef5\111\ufef5\112\ufef5\113\ufef5\114" +
    "\ufef5\115\ufef5\116\ufef5\117\ufef5\120\ufef5\124\ufef5\127\ufef5" +
    "\131\ufef5\133\ufef5\136\ufef5\137\ufef5\140\ufef5\141\ufef5\142" +
    "\ufef5\203\ufef5\205\ufef5\210\ufef5\001\002\000\004\125\u01c3" +
    "\001\002\000\006\003\u01b5\125\u01b6\001\002\000\004\122" +
    "\u01c0\001\002\000\050\003\u01b8\110\ufeed\111\ufeed\112\ufeed" +
    "\113\ufeed\114\ufeed\115\ufeed\116\ufeed\117\ufeed\120\ufeed\122" +
    "\u01b7\133\ufeed\136\ufeed\137\ufeed\140\ufeed\141\ufeed\142\ufeed" +
    "\205\ufeed\210\ufeed\001\002\000\006\003\u01bb\200\u01bc\001" +
    "\002\000\004\200\u01b9\001\002\000\004\203\u01ba\001\002" +
    "\000\056\003\ufef0\110\ufef0\111\ufef0\112\ufef0\113\ufef0\114" +
    "\ufef0\115\ufef0\116\ufef0\117\ufef0\120\ufef0\124\ufef0\127\ufef0" +
    "\131\ufef0\133\ufef0\136\ufef0\137\ufef0\140\ufef0\141\ufef0\142" +
    "\ufef0\203\ufef0\205\ufef0\210\ufef0\001\002\000\004\203\u01bf" +
    "\001\002\000\006\003\u01be\203\u01bd\001\002\000\056\003" +
    "\ufef6\110\ufef6\111\ufef6\112\ufef6\113\ufef6\114\ufef6\115\ufef6" +
    "\116\ufef6\117\ufef6\120\ufef6\124\ufef6\127\ufef6\131\ufef6\133" +
    "\ufef6\136\ufef6\137\ufef6\140\ufef6\141\ufef6\142\ufef6\203\ufef6" +
    "\205\ufef6\210\ufef6\001\002\000\056\003\ufeee\110\ufeee\111" +
    "\ufeee\112\ufeee\113\ufeee\114\ufeee\115\ufeee\116\ufeee\117\ufeee" +
    "\120\ufeee\124\ufeee\127\ufeee\131\ufeee\133\ufeee\136\ufeee\137" +
    "\ufeee\140\ufeee\141\ufeee\142\ufeee\203\ufeee\205\ufeee\210\ufeee" +
    "\001\002\000\056\003\ufeef\110\ufeef\111\ufeef\112\ufeef\113" +
    "\ufeef\114\ufeef\115\ufeef\116\ufeef\117\ufeef\120\ufeef\124\ufeef" +
    "\127\ufeef\131\ufeef\133\ufeef\136\ufeef\137\ufeef\140\ufeef\141" +
    "\ufeef\142\ufeef\203\ufeef\205\ufeef\210\ufeef\001\002\000\004" +
    "\200\u01c1\001\002\000\004\203\u01c2\001\002\000\056\003" +
    "\ufef1\110\ufef1\111\ufef1\112\ufef1\113\ufef1\114\ufef1\115\ufef1" +
    "\116\ufef1\117\ufef1\120\ufef1\124\ufef1\127\ufef1\131\ufef1\133" +
    "\ufef1\136\ufef1\137\ufef1\140\ufef1\141\ufef1\142\ufef1\203\ufef1" +
    "\205\ufef1\210\ufef1\001\002\000\004\122\u01c4\001\002\000" +
    "\004\200\u01c5\001\002\000\004\203\u01c6\001\002\000\056" +
    "\003\ufef2\110\ufef2\111\ufef2\112\ufef2\113\ufef2\114\ufef2\115" +
    "\ufef2\116\ufef2\117\ufef2\120\ufef2\124\ufef2\127\ufef2\131\ufef2" +
    "\133\ufef2\136\ufef2\137\ufef2\140\ufef2\141\ufef2\142\ufef2\203" +
    "\ufef2\205\ufef2\210\ufef2\001\002\000\034\152\213\153\220" +
    "\154\216\155\223\156\211\157\214\160\222\161\210\164" +
    "\212\165\221\166\215\167\217\175\u01c8\001\002\000\004" +
    "\125\u01c9\001\002\000\004\122\u01ca\001\002\000\004\200" +
    "\u01cb\001\002\000\004\203\u01cc\001\002\000\056\003\ufef3" +
    "\110\ufef3\111\ufef3\112\ufef3\113\ufef3\114\ufef3\115\ufef3\116" +
    "\ufef3\117\ufef3\120\ufef3\124\ufef3\127\ufef3\131\ufef3\133\ufef3" +
    "\136\ufef3\137\ufef3\140\ufef3\141\ufef3\142\ufef3\203\ufef3\205" +
    "\ufef3\210\ufef3\001\002\000\004\175\u01ce\001\002\000\004" +
    "\202\uff2c\001\002\000\030\003\u011c\110\142\111\112\112" +
    "\133\113\125\114\120\151\u011b\205\u0120\207\u0118\213\u011e" +
    "\214\u011a\001\002\000\010\003\u0122\164\u0123\175\u01d1\001" +
    "\002\000\012\003\uff22\164\uff22\175\uff22\202\uff22\001\002" +
    "\000\062\003\uff33\110\uff33\111\uff33\112\uff33\113\uff33\114" +
    "\uff33\115\uff33\116\uff33\117\uff33\120\uff33\124\uff33\126\uff33" +
    "\127\uff33\131\uff33\133\uff33\136\uff33\137\uff33\140\uff33\141" +
    "\uff33\142\uff33\177\uff33\203\uff33\205\uff33\210\uff33\001\002" +
    "\000\030\003\u011c\110\142\111\112\112\133\113\125\114" +
    "\120\151\u011b\205\u0120\207\u0118\213\u011e\214\u011a\001\002" +
    "\000\010\003\u0122\164\u0123\175\u01d5\001\002\000\012\003" +
    "\uff21\164\uff21\175\uff21\202\uff21\001\002\000\004\175\u01d7" +
    "\001\002\000\004\202\uff2f\001\002\000\010\136\310\205" +
    "\122\210\110\001\002\000\012\003\u01db\136\310\205\122" +
    "\210\110\001\002\000\006\003\u01e9\175\u01e8\001\002\000" +
    "\004\175\u01dc\001\002\000\004\130\u01dd\001\002\000\004" +
    "\174\u01de\001\002\000\010\144\322\205\122\210\110\001" +
    "\002\000\004\175\u01e0\001\002\000\004\122\u01e1\001\002" +
    "\000\004\200\u01e2\001\002\000\004\203\u01e3\001\002\000" +
    "\056\003\uff3a\110\uff3a\111\uff3a\112\uff3a\113\uff3a\114\uff3a" +
    "\115\uff3a\116\uff3a\117\uff3a\120\uff3a\124\uff3a\127\uff3a\131" +
    "\uff3a\133\uff3a\136\uff3a\137\uff3a\140\uff3a\141\uff3a\142\uff3a" +
    "\203\uff3a\205\uff3a\210\uff3a\001\002\000\056\003\137\110" +
    "\142\111\112\112\133\113\125\114\120\115\117\116\131" +
    "\117\107\120\126\124\127\127\116\131\144\133\145\136" +
    "\115\137\135\140\134\141\106\142\147\203\u01e5\205\122" +
    "\210\110\001\002\000\004\201\u01e6\001\002\000\004\123" +
    "\u01e7\001\002\000\060\003\ufecc\110\ufecc\111\ufecc\112\ufecc" +
    "\113\ufecc\114\ufecc\115\ufecc\116\ufecc\117\ufecc\120\ufecc\124" +
    "\ufecc\127\ufecc\131\ufecc\133\ufecc\136\ufecc\137\ufecc\140\ufecc" +
    "\141\ufecc\142\ufecc\177\ufecc\203\ufecc\205\ufecc\210\ufecc\001" +
    "\002\000\006\003\u01f5\130\u01f6\001\002\000\004\130\u01ea" +
    "\001\002\000\004\174\u01eb\001\002\000\010\144\322\205" +
    "\122\210\110\001\002\000\004\175\u01ed\001\002\000\004" +
    "\122\u01ee\001\002\000\004\200\u01ef\001\002\000\004\203" +
    "\u01f0\001\002\000\056\003\uff3a\110\uff3a\111\uff3a\112\uff3a" +
    "\113\uff3a\114\uff3a\115\uff3a\116\uff3a\117\uff3a\120\uff3a\124" +
    "\uff3a\127\uff3a\131\uff3a\133\uff3a\136\uff3a\137\uff3a\140\uff3a" +
    "\141\uff3a\142\uff3a\203\uff3a\205\uff3a\210\uff3a\001\002\000" +
    "\056\003\137\110\142\111\112\112\133\113\125\114\120" +
    "\115\117\116\131\117\107\120\126\124\127\127\116\131" +
    "\144\133\145\136\115\137\135\140\134\141\106\142\147" +
    "\203\u01f2\205\122\210\110\001\002\000\004\201\u01f3\001" +
    "\002\000\004\123\u01f4\001\002\000\060\003\ufecb\110\ufecb" +
    "\111\ufecb\112\ufecb\113\ufecb\114\ufecb\115\ufecb\116\ufecb\117" +
    "\ufecb\120\ufecb\124\ufecb\127\ufecb\131\ufecb\133\ufecb\136\ufecb" +
    "\137\ufecb\140\ufecb\141\ufecb\142\ufecb\177\ufecb\203\ufecb\205" +
    "\ufecb\210\ufecb\001\002\000\004\174\u0234\001\002\000\006" +
    "\003\u01f7\174\u01f8\001\002\000\010\144\322\205\122\210" +
    "\110\001\002\000\012\003\u01f9\144\322\205\122\210\110" +
    "\001\002\000\004\175\u0223\001\002\000\006\003\u01fb\175" +
    "\u01fc\001\002\000\004\122\u021c\001\002\000\006\003\u01fd" +
    "\122\u01fe\001\002\000\004\200\u0216\001\002\000\006\003" +
    "\u01ff\200\u0200\001\002\000\004\203\u0211\001\002\000\006" +
    "\003\u0202\203\u0201\001\002\000\056\003\uff3a\110\uff3a\111" +
    "\uff3a\112\uff3a\113\uff3a\114\uff3a\115\uff3a\116\uff3a\117\uff3a" +
    "\120\uff3a\124\uff3a\127\uff3a\131\uff3a\133\uff3a\136\uff3a\137" +
    "\uff3a\140\uff3a\141\uff3a\142\uff3a\203\uff3a\205\uff3a\210\uff3a" +
    "\001\002\000\056\003\uff3a\110\uff3a\111\uff3a\112\uff3a\113" +
    "\uff3a\114\uff3a\115\uff3a\116\uff3a\117\uff3a\120\uff3a\124\uff3a" +
    "\127\uff3a\131\uff3a\133\uff3a\136\uff3a\137\uff3a\140\uff3a\141" +
    "\uff3a\142\uff3a\203\uff3a\205\uff3a\210\uff3a\001\002\000\056" +
    "\003\137\110\142\111\112\112\133\113\125\114\120\115" +
    "\117\116\131\117\107\120\126\124\127\127\116\131\144" +
    "\133\145\136\115\137\135\140\134\141\106\142\147\203" +
    "\u0204\205\122\210\110\001\002\000\004\201\u0205\001\002" +
    "\000\004\123\u0206\001\002\000\060\003\ufec4\110\ufec4\111" +
    "\ufec4\112\ufec4\113\ufec4\114\ufec4\115\ufec4\116\ufec4\117\ufec4" +
    "\120\ufec4\124\ufec4\127\ufec4\131\ufec4\133\ufec4\136\ufec4\137" +
    "\ufec4\140\ufec4\141\ufec4\142\ufec4\177\ufec4\203\ufec4\205\ufec4" +
    "\210\ufec4\001\002\000\056\003\u0208\110\142\111\112\112" +
    "\133\113\125\114\120\115\117\116\131\117\107\120\126" +
    "\124\127\127\116\131\144\133\145\136\115\137\135\140" +
    "\134\141\106\142\147\203\u0209\205\122\210\110\001\002" +
    "\000\064\003\uff39\110\uff39\111\uff39\112\uff39\113\uff39\114" +
    "\uff39\115\uff39\116\uff39\117\uff39\120\uff39\124\uff39\127\uff39" +
    "\131\uff39\133\uff39\136\uff39\137\uff39\140\uff39\141\uff39\142" +
    "\uff39\174\304\201\u020f\202\303\203\uff39\205\uff39\210\uff39" +
    "\001\002\000\006\003\u020a\201\u020b\001\002\000\004\123" +
    "\u020e\001\002\000\006\003\u020c\123\u020d\001\002\000\060" +
    "\003\ufec1\110\ufec1\111\ufec1\112\ufec1\113\ufec1\114\ufec1\115" +
    "\ufec1\116\ufec1\117\ufec1\120\ufec1\124\ufec1\127\ufec1\131\ufec1" +
    "\133\ufec1\136\ufec1\137\ufec1\140\ufec1\141\ufec1\142\ufec1\177" +
    "\ufec1\203\ufec1\205\ufec1\210\ufec1\001\002\000\060\003\ufecf" +
    "\110\ufecf\111\ufecf\112\ufecf\113\ufecf\114\ufecf\115\ufecf\116" +
    "\ufecf\117\ufecf\120\ufecf\124\ufecf\127\ufecf\131\ufecf\133\ufecf" +
    "\136\ufecf\137\ufecf\140\ufecf\141\ufecf\142\ufecf\177\ufecf\203" +
    "\ufecf\205\ufecf\210\ufecf\001\002\000\060\003\ufec2\110\ufec2" +
    "\111\ufec2\112\ufec2\113\ufec2\114\ufec2\115\ufec2\116\ufec2\117" +
    "\ufec2\120\ufec2\124\ufec2\127\ufec2\131\ufec2\133\ufec2\136\ufec2" +
    "\137\ufec2\140\ufec2\141\ufec2\142\ufec2\177\ufec2\203\ufec2\205" +
    "\ufec2\210\ufec2\001\002\000\004\123\u0210\001\002\000\060" +
    "\003\ufec3\110\ufec3\111\ufec3\112\ufec3\113\ufec3\114\ufec3\115" +
    "\ufec3\116\ufec3\117\ufec3\120\ufec3\124\ufec3\127\ufec3\131\ufec3" +
    "\133\ufec3\136\ufec3\137\ufec3\140\ufec3\141\ufec3\142\ufec3\177" +
    "\ufec3\203\ufec3\205\ufec3\210\ufec3\001\002\000\056\003\uff3a" +
    "\110\uff3a\111\uff3a\112\uff3a\113\uff3a\114\uff3a\115\uff3a\116" +
    "\uff3a\117\uff3a\120\uff3a\124\uff3a\127\uff3a\131\uff3a\133\uff3a" +
    "\136\uff3a\137\uff3a\140\uff3a\141\uff3a\142\uff3a\203\uff3a\205" +
    "\uff3a\210\uff3a\001\002\000\056\003\137\110\142\111\112" +
    "\112\133\113\125\114\120\115\117\116\131\117\107\120" +
    "\126\124\127\127\116\131\144\133\145\136\115\137\135" +
    "\140\134\141\106\142\147\203\u0213\205\122\210\110\001" +
    "\002\000\004\201\u0214\001\002\000\004\123\u0215\001\002" +
    "\000\060\003\ufec5\110\ufec5\111\ufec5\112\ufec5\113\ufec5\114" +
    "\ufec5\115\ufec5\116\ufec5\117\ufec5\120\ufec5\124\ufec5\127\ufec5" +
    "\131\ufec5\133\ufec5\136\ufec5\137\ufec5\140\ufec5\141\ufec5\142" +
    "\ufec5\177\ufec5\203\ufec5\205\ufec5\210\ufec5\001\002\000\004" +
    "\203\u0217\001\002\000\056\003\uff3a\110\uff3a\111\uff3a\112" +
    "\uff3a\113\uff3a\114\uff3a\115\uff3a\116\uff3a\117\uff3a\120\uff3a" +
    "\124\uff3a\127\uff3a\131\uff3a\133\uff3a\136\uff3a\137\uff3a\140" +
    "\uff3a\141\uff3a\142\uff3a\203\uff3a\205\uff3a\210\uff3a\001\002" +
    "\000\056\003\137\110\142\111\112\112\133\113\125\114" +
    "\120\115\117\116\131\117\107\120\126\124\127\127\116" +
    "\131\144\133\145\136\115\137\135\140\134\141\106\142" +
    "\147\203\u0219\205\122\210\110\001\002\000\004\201\u021a" +
    "\001\002\000\004\123\u021b\001\002\000\060\003\ufec6\110" +
    "\ufec6\111\ufec6\112\ufec6\113\ufec6\114\ufec6\115\ufec6\116\ufec6" +
    "\117\ufec6\120\ufec6\124\ufec6\127\ufec6\131\ufec6\133\ufec6\136" +
    "\ufec6\137\ufec6\140\ufec6\141\ufec6\142\ufec6\177\ufec6\203\ufec6" +
    "\205\ufec6\210\ufec6\001\002\000\004\200\u021d\001\002\000" +
    "\004\203\u021e\001\002\000\056\003\uff3a\110\uff3a\111\uff3a" +
    "\112\uff3a\113\uff3a\114\uff3a\115\uff3a\116\uff3a\117\uff3a\120" +
    "\uff3a\124\uff3a\127\uff3a\131\uff3a\133\uff3a\136\uff3a\137\uff3a" +
    "\140\uff3a\141\uff3a\142\uff3a\203\uff3a\205\uff3a\210\uff3a\001" +
    "\002\000\056\003\137\110\142\111\112\112\133\113\125" +
    "\114\120\115\117\116\131\117\107\120\126\124\127\127" +
    "\116\131\144\133\145\136\115\137\135\140\134\141\106" +
    "\142\147\203\u0220\205\122\210\110\001\002\000\004\201" +
    "\u0221\001\002\000\004\123\u0222\001\002\000\060\003\ufec7" +
    "\110\ufec7\111\ufec7\112\ufec7\113\ufec7\114\ufec7\115\ufec7\116" +
    "\ufec7\117\ufec7\120\ufec7\124\ufec7\127\ufec7\131\ufec7\133\ufec7" +
    "\136\ufec7\137\ufec7\140\ufec7\141\ufec7\142\ufec7\177\ufec7\203" +
    "\ufec7\205\ufec7\210\ufec7\001\002\000\004\122\u0224\001\002" +
    "\000\004\200\u0225\001\002\000\004\203\u0226\001\002\000" +
    "\056\003\uff3a\110\uff3a\111\uff3a\112\uff3a\113\uff3a\114\uff3a" +
    "\115\uff3a\116\uff3a\117\uff3a\120\uff3a\124\uff3a\127\uff3a\131" +
    "\uff3a\133\uff3a\136\uff3a\137\uff3a\140\uff3a\141\uff3a\142\uff3a" +
    "\203\uff3a\205\uff3a\210\uff3a\001\002\000\056\003\137\110" +
    "\142\111\112\112\133\113\125\114\120\115\117\116\131" +
    "\117\107\120\126\124\127\127\116\131\144\133\145\136" +
    "\115\137\135\140\134\141\106\142\147\203\u0228\205\122" +
    "\210\110\001\002\000\004\201\u0229\001\002\000\004\123" +
    "\u022a\001\002\000\060\003\ufec8\110\ufec8\111\ufec8\112\ufec8" +
    "\113\ufec8\114\ufec8\115\ufec8\116\ufec8\117\ufec8\120\ufec8\124" +
    "\ufec8\127\ufec8\131\ufec8\133\ufec8\136\ufec8\137\ufec8\140\ufec8" +
    "\141\ufec8\142\ufec8\177\ufec8\203\ufec8\205\ufec8\210\ufec8\001" +
    "\002\000\004\175\u022c\001\002\000\004\122\u022d\001\002" +
    "\000\004\200\u022e\001\002\000\004\203\u022f\001\002\000" +
    "\056\003\uff3a\110\uff3a\111\uff3a\112\uff3a\113\uff3a\114\uff3a" +
    "\115\uff3a\116\uff3a\117\uff3a\120\uff3a\124\uff3a\127\uff3a\131" +
    "\uff3a\133\uff3a\136\uff3a\137\uff3a\140\uff3a\141\uff3a\142\uff3a" +
    "\203\uff3a\205\uff3a\210\uff3a\001\002\000\056\003\137\110" +
    "\142\111\112\112\133\113\125\114\120\115\117\116\131" +
    "\117\107\120\126\124\127\127\116\131\144\133\145\136" +
    "\115\137\135\140\134\141\106\142\147\203\u0231\205\122" +
    "\210\110\001\002\000\004\201\u0232\001\002\000\004\123" +
    "\u0233\001\002\000\060\003\ufec9\110\ufec9\111\ufec9\112\ufec9" +
    "\113\ufec9\114\ufec9\115\ufec9\116\ufec9\117\ufec9\120\ufec9\124" +
    "\ufec9\127\ufec9\131\ufec9\133\ufec9\136\ufec9\137\ufec9\140\ufec9" +
    "\141\ufec9\142\ufec9\177\ufec9\203\ufec9\205\ufec9\210\ufec9\001" +
    "\002\000\010\144\322\205\122\210\110\001\002\000\004" +
    "\175\u0236\001\002\000\004\122\u0237\001\002\000\004\200" +
    "\u0238\001\002\000\004\203\u0239\001\002\000\056\003\uff3a" +
    "\110\uff3a\111\uff3a\112\uff3a\113\uff3a\114\uff3a\115\uff3a\116" +
    "\uff3a\117\uff3a\120\uff3a\124\uff3a\127\uff3a\131\uff3a\133\uff3a" +
    "\136\uff3a\137\uff3a\140\uff3a\141\uff3a\142\uff3a\203\uff3a\205" +
    "\uff3a\210\uff3a\001\002\000\056\003\137\110\142\111\112" +
    "\112\133\113\125\114\120\115\117\116\131\117\107\120" +
    "\126\124\127\127\116\131\144\133\145\136\115\137\135" +
    "\140\134\141\106\142\147\203\u023b\205\122\210\110\001" +
    "\002\000\004\201\u023c\001\002\000\004\123\u023d\001\002" +
    "\000\060\003\ufeca\110\ufeca\111\ufeca\112\ufeca\113\ufeca\114" +
    "\ufeca\115\ufeca\116\ufeca\117\ufeca\120\ufeca\124\ufeca\127\ufeca" +
    "\131\ufeca\133\ufeca\136\ufeca\137\ufeca\140\ufeca\141\ufeca\142" +
    "\ufeca\177\ufeca\203\ufeca\205\ufeca\210\ufeca\001\002\000\004" +
    "\175\u023f\001\002\000\004\130\u0240\001\002\000\004\174" +
    "\u0241\001\002\000\010\144\322\205\122\210\110\001\002" +
    "\000\004\175\u0243\001\002\000\004\122\u0244\001\002\000" +
    "\004\200\u0245\001\002\000\004\203\u0246\001\002\000\056" +
    "\003\uff3a\110\uff3a\111\uff3a\112\uff3a\113\uff3a\114\uff3a\115" +
    "\uff3a\116\uff3a\117\uff3a\120\uff3a\124\uff3a\127\uff3a\131\uff3a" +
    "\133\uff3a\136\uff3a\137\uff3a\140\uff3a\141\uff3a\142\uff3a\203" +
    "\uff3a\205\uff3a\210\uff3a\001\002\000\056\003\137\110\142" +
    "\111\112\112\133\113\125\114\120\115\117\116\131\117" +
    "\107\120\126\124\127\127\116\131\144\133\145\136\115" +
    "\137\135\140\134\141\106\142\147\203\u0248\205\122\210" +
    "\110\001\002\000\004\201\u0249\001\002\000\004\123\u024a" +
    "\001\002\000\060\003\ufecd\110\ufecd\111\ufecd\112\ufecd\113" +
    "\ufecd\114\ufecd\115\ufecd\116\ufecd\117\ufecd\120\ufecd\124\ufecd" +
    "\127\ufecd\131\ufecd\133\ufecd\136\ufecd\137\ufecd\140\ufecd\141" +
    "\ufecd\142\ufecd\177\ufecd\203\ufecd\205\ufecd\210\ufecd\001\002" +
    "\000\056\003\137\110\142\111\112\112\133\113\125\114" +
    "\120\115\117\116\131\117\107\120\126\124\127\127\116" +
    "\131\144\133\145\136\115\137\135\140\134\141\106\142" +
    "\147\203\u024c\205\122\210\110\001\002\000\004\201\u024d" +
    "\001\002\000\004\123\u024e\001\002\000\062\003\ufeeb\110" +
    "\ufeeb\111\ufeeb\112\ufeeb\113\ufeeb\114\ufeeb\115\ufeeb\116\ufeeb" +
    "\117\ufeeb\120\ufeeb\124\ufeeb\126\ufeeb\127\ufeeb\131\ufeeb\133" +
    "\ufeeb\136\ufeeb\137\ufeeb\140\ufeeb\141\ufeeb\142\ufeeb\177\ufeeb" +
    "\203\ufeeb\205\ufeeb\210\ufeeb\001\002\000\062\003\ufed6\110" +
    "\ufed6\111\ufed6\112\ufed6\113\ufed6\114\ufed6\115\ufed6\116\ufed6" +
    "\117\ufed6\120\ufed6\124\ufed6\126\u0128\127\ufed6\131\ufed6\133" +
    "\ufed6\136\ufed6\137\ufed6\140\ufed6\141\ufed6\142\ufed6\177\ufed6" +
    "\203\ufed6\205\ufed6\210\ufed6\001\002\000\060\003\ufef8\110" +
    "\ufef8\111\ufef8\112\ufef8\113\ufef8\114\ufef8\115\ufef8\116\ufef8" +
    "\117\ufef8\120\ufef8\124\ufef8\127\ufef8\131\ufef8\133\ufef8\136" +
    "\ufef8\137\ufef8\140\ufef8\141\ufef8\142\ufef8\177\ufef8\203\ufef8" +
    "\205\ufef8\210\ufef8\001\002\000\006\205\uff12\210\uff12\001" +
    "\002\000\006\205\122\210\110\001\002\000\012\003\u0112" +
    "\171\u0255\202\uff19\206\u0111\001\002\000\004\202\uff20\001" +
    "\002\000\036\144\175\145\173\146\171\147\201\150\176" +
    "\151\172\162\170\165\206\174\174\205\205\207\202\210" +
    "\203\213\165\214\200\001\002\000\034\152\213\153\220" +
    "\154\216\155\223\156\211\157\214\160\222\161\210\164" +
    "\212\165\221\166\215\167\217\202\uff1a\001\002\000\030" +
    "\003\u011c\110\142\111\112\112\133\113\125\114\120\151" +
    "\u011b\205\u0120\207\u0118\213\u011e\214\u011a\001\002\000\010" +
    "\003\u0122\164\u0123\175\u0259\001\002\000\012\003\uff24\164" +
    "\uff24\175\uff24\202\uff24\001\002\000\062\003\uff31\110\uff31" +
    "\111\uff31\112\uff31\113\uff31\114\uff31\115\uff31\116\uff31\117" +
    "\uff31\120\uff31\124\uff31\126\uff31\127\uff31\131\uff31\133\uff31" +
    "\136\uff31\137\uff31\140\uff31\141\uff31\142\uff31\177\uff31\203" +
    "\uff31\205\uff31\210\uff31\001\002\000\030\003\u011c\110\142" +
    "\111\112\112\133\113\125\114\120\151\u011b\205\u0120\207" +
    "\u0118\213\u011e\214\u011a\001\002\000\010\003\u0122\164\u0123" +
    "\175\u025d\001\002\000\004\202\uff2d\001\002\000\056\003" +
    "\uff3a\110\uff3a\111\uff3a\112\uff3a\113\uff3a\114\uff3a\115\uff3a" +
    "\116\uff3a\117\uff3a\120\uff3a\124\uff3a\127\uff3a\131\uff3a\133" +
    "\uff3a\136\uff3a\137\uff3a\140\uff3a\141\uff3a\142\uff3a\177\uff3a" +
    "\205\uff3a\210\uff3a\001\002\000\056\003\137\110\142\111" +
    "\112\112\133\113\125\114\120\115\117\116\131\117\107" +
    "\120\126\124\127\127\116\131\144\133\145\136\115\137" +
    "\135\140\134\141\106\142\147\177\u0260\205\122\210\110" +
    "\001\002\000\012\003\uff3e\134\uff3e\135\uff3e\163\uff3e\001" +
    "\002\000\004\176\u0262\001\002\000\056\003\uff3a\110\uff3a" +
    "\111\uff3a\112\uff3a\113\uff3a\114\uff3a\115\uff3a\116\uff3a\117" +
    "\uff3a\120\uff3a\124\uff3a\127\uff3a\131\uff3a\133\uff3a\136\uff3a" +
    "\137\uff3a\140\uff3a\141\uff3a\142\uff3a\177\uff3a\205\uff3a\210" +
    "\uff3a\001\002\000\056\003\137\110\142\111\112\112\133" +
    "\113\125\114\120\115\117\116\131\117\107\120\126\124" +
    "\127\127\116\131\144\133\145\136\115\137\135\140\134" +
    "\141\106\142\147\177\u0264\205\122\210\110\001\002\000" +
    "\012\003\uff40\134\uff40\135\uff40\163\uff40\001\002\000\004" +
    "\175\u0266\001\002\000\004\176\u0267\001\002\000\056\003" +
    "\uff3a\110\uff3a\111\uff3a\112\uff3a\113\uff3a\114\uff3a\115\uff3a" +
    "\116\uff3a\117\uff3a\120\uff3a\124\uff3a\127\uff3a\131\uff3a\133" +
    "\uff3a\136\uff3a\137\uff3a\140\uff3a\141\uff3a\142\uff3a\177\uff3a" +
    "\205\uff3a\210\uff3a\001\002\000\056\003\137\110\142\111" +
    "\112\112\133\113\125\114\120\115\117\116\131\117\107" +
    "\120\126\124\127\127\116\131\144\133\145\136\115\137" +
    "\135\140\134\141\106\142\147\177\u0269\205\122\210\110" +
    "\001\002\000\012\003\uff41\134\uff41\135\uff41\163\uff41\001" +
    "\002\000\004\175\u026b\001\002\000\004\176\uff3c\001\002" +
    "\000\056\003\uff3a\110\uff3a\111\uff3a\112\uff3a\113\uff3a\114" +
    "\uff3a\115\uff3a\116\uff3a\117\uff3a\120\uff3a\124\uff3a\127\uff3a" +
    "\131\uff3a\133\uff3a\136\uff3a\137\uff3a\140\uff3a\141\uff3a\142" +
    "\uff3a\177\uff3a\205\uff3a\210\uff3a\001\002\000\056\003\137" +
    "\110\142\111\112\112\133\113\125\114\120\115\117\116" +
    "\131\117\107\120\126\124\127\127\116\131\144\133\145" +
    "\136\115\137\135\140\134\141\106\142\147\177\u026e\205" +
    "\122\210\110\001\002\000\012\003\uff42\134\uff42\135\uff42" +
    "\163\uff42\001\002\000\012\154\u0275\163\u0274\205\054\210" +
    "\053\001\002\000\012\154\uffaf\163\uffaf\205\uffaf\210\uffaf" +
    "\001\002\000\012\154\uffb2\163\uffb2\205\uffb2\210\uffb2\001" +
    "\002\000\010\003\uffd7\154\uffd7\163\uffd7\001\002\000\012" +
    "\154\uffb0\163\uffb0\205\uffb0\210\uffb0\001\002\000\004\011" +
    "\u02c8\001\002\000\012\011\u0285\020\u0286\022\u0287\023\u0288" +
    "\001\002\000\012\154\uffb1\163\uffb1\205\uffb1\210\uffb1\001" +
    "\002\000\012\154\uffb1\163\uffb1\205\uffb1\210\uffb1\001\002" +
    "\000\012\154\uffb1\163\uffb1\205\uffb1\210\uffb1\001\002\000" +
    "\012\154\u0275\163\u0274\205\054\210\053\001\002\000\012" +
    "\154\uffac\163\uffac\205\uffac\210\uffac\001\002\000\012\154" +
    "\u0275\163\u027c\205\054\210\053\001\002\000\004\023\u027e" +
    "\001\002\000\012\154\uffad\163\uffad\205\uffad\210\uffad\001" +
    "\002\000\004\156\u027f\001\002\000\014\003\uffba\154\uffba" +
    "\163\uffba\205\uffba\210\uffba\001\002\000\012\154\u0275\163" +
    "\u0282\205\054\210\053\001\002\000\012\154\uffae\163\uffae" +
    "\205\uffae\210\uffae\001\002\000\004\022\u0283\001\002\000" +
    "\004\156\u0284\001\002\000\014\003\uffbb\154\uffbb\163\uffbb" +
    "\205\uffbb\210\uffbb\001\002\000\010\003\uff9b\156\uff9b\176" +
    "\uff9b\001\002\000\004\156\u02c2\001\002\000\010\003\uff73" +
    "\156\uff73\176\uff73\001\002\000\010\003\uff6f\156\uff6f\176" +
    "\uff6f\001\002\000\010\003\u028b\156\u028a\176\u028e\001\002" +
    "\000\012\154\uffc3\163\uffc3\205\uffc3\210\uffc3\001\002\000" +
    "\010\003\uff6e\156\uff6e\176\uff6e\001\002\000\010\003\uff6d" +
    "\156\uff6d\176\uff6d\001\002\000\010\003\uff70\156\uff70\176" +
    "\uff70\001\002\000\014\027\u0290\030\u0292\031\u0293\032\u0291" +
    "\034\u028f\001\002\000\004\171\u02ba\001\002\000\004\171" +
    "\u02a6\001\002\000\004\171\u029f\001\002\000\004\171\u029c" +
    "\001\002\000\004\171\u0294\001\002\000\014\071\u0298\072" +
    "\u0299\073\u0296\074\u0297\075\u029a\001\002\000\004\177\u029b" +
    "\001\002\000\004\177\uff54\001\002\000\004\177\uff53\001" +
    "\002\000\004\177\uff56\001\002\000\004\177\uff55\001\002" +
    "\000\004\177\uff52\001\002\000\010\003\uff6b\156\uff6b\176" +
    "\uff6b\001\002\000\004\067\u029d\001\002\000\004\177\u029e" +
    "\001\002\000\010\003\uff6c\156\uff6c\176\uff6c\001\002\000" +
    "\012\076\u02a0\077\u02a2\100\u02a4\101\u02a3\001\002\000\004" +
    "\177\uff51\001\002\000\004\177\u02a5\001\002\000\004\177" +
    "\uff50\001\002\000\004\177\uff4e\001\002\000\004\177\uff4f" +
    "\001\002\000\010\003\uff6a\156\uff6a\176\uff6a\001\002\000" +
    "\044\046\u02ab\047\u02ac\050\u02aa\051\u02ae\052\u02ad\053\u02b0" +
    "\054\u02b7\055\u02a9\056\u02af\057\u02b2\060\u02a7\061\u02b6\062" +
    "\u02b8\063\u02b1\064\u02b3\065\u02a8\066\u02b4\001\002\000\004" +
    "\177\uff5d\001\002\000\004\177\uff58\001\002\000\004\177" +
    "\uff60\001\002\000\004\177\uff65\001\002\000\004\177\uff67" +
    "\001\002\000\004\177\uff66\001\002\000\004\177\uff63\001" +
    "\002\000\004\177\uff64\001\002\000\004\177\uff5f\001\002" +
    "\000\004\177\uff62\001\002\000\004\177\uff5a\001\002\000" +
    "\004\177\uff5e\001\002\000\004\177\uff59\001\002\000\004" +
    "\177\uff57\001\002\000\004\177\u02b9\001\002\000\004\177" +
    "\uff5c\001\002\000\004\177\uff61\001\002\000\004\177\uff5b" +
    "\001\002\000\010\003\uff68\156\uff68\176\uff68\001\002\000" +
    "\004\207\u02bb\001\002\000\004\177\u02bc\001\002\000\010" +
    "\003\uff69\156\uff69\176\uff69\001\002\000\010\003\u02bf\156" +
    "\u02be\176\u028e\001\002\000\012\154\uffc4\163\uffc4\205\uffc4" +
    "\210\uffc4\001\002\000\010\003\uff72\156\uff72\176\uff72\001" +
    "\002\000\010\003\uff71\156\uff71\176\uff71\001\002\000\010" +
    "\003\uff74\156\uff74\176\uff74\001\002\000\014\003\uffc6\154" +
    "\uffc6\163\uffc6\205\uffc6\210\uffc6\001\002\000\010\003\u02c6" +
    "\156\u02c5\176\u028e\001\002\000\010\003\uff9c\156\uff9c\176" +
    "\uff9c\001\002\000\012\154\uffcc\163\uffcc\205\uffcc\210\uffcc" +
    "\001\002\000\010\003\uff9a\156\uff9a\176\uff9a\001\002\000" +
    "\010\003\uff99\156\uff99\176\uff99\001\002\000\004\156\u02c9" +
    "\001\002\000\014\003\uffc2\154\uffc2\163\uffc2\205\uffc2\210" +
    "\uffc2\001\002\000\012\154\u0275\163\u027c\205\054\210\053" +
    "\001\002\000\010\003\uffce\154\uffce\163\uffce\001\002\000" +
    "\012\154\u0275\163\u0282\205\054\210\053\001\002\000\010" +
    "\003\uffcf\154\uffcf\163\uffcf\001\002\000\006\154\032\163" +
    "\u02cf\001\002\000\004\016\u02d2\001\002\000\006\154\uffb4" +
    "\163\uffb4\001\002\000\010\003\uffd3\154\uffd3\163\uffd3\001" +
    "\002\000\004\156\u02d3\001\002\000\010\003\uffbe\154\uffbe" +
    "\163\uffbe\001\002\000\010\163\u02d6\205\054\210\053\001" +
    "\002\000\010\003\uffd5\154\uffd5\163\uffd5\001\002\000\004" +
    "\013\u02d7\001\002\000\004\156\u02d8\001\002\000\010\003" +
    "\uffc0\154\uffc0\163\uffc0\001\002\000\010\163\u02db\205\054" +
    "\210\053\001\002\000\010\003\uffd0\154\uffd0\163\uffd0\001" +
    "\002\000\004\021\u02dc\001\002\000\004\156\u02dd\001\002" +
    "\000\010\003\uffbc\154\uffbc\163\uffbc\001\002\000\010\003" +
    "\uff77\156\uff77\176\uff77\001\002\000\010\003\uff97\156\uff97" +
    "\176\uff97\001\002\000\004\156\u0334\001\002\000\010\003" +
    "\uff85\156\uff85\176\uff85\001\002\000\010\003\uff89\156\uff89" +
    "\176\uff89\001\002\000\010\003\uff92\156\uff92\176\uff92\001" +
    "\002\000\010\003\uff7f\156\uff7f\176\uff7f\001\002\000\010" +
    "\003\u02e7\156\u02e6\176\u02e9\001\002\000\004\163\uffc7\001" +
    "\002\000\010\003\uff7e\156\uff7e\176\uff7e\001\002\000\010" +
    "\003\uff80\156\uff80\176\uff80\001\002\000\014\034\u02ea\041" +
    "\u02ed\042\u02ec\043\u02ee\044\u02eb\001\002\000\004\171\u02ff" +
    "\001\002\000\004\171\u02fa\001\002\000\004\171\u02f7\001" +
    "\002\000\004\171\u02f4\001\002\000\004\171\u02ef\001\002" +
    "\000\006\067\u02f2\070\u02f1\001\002\000\004\177\u02f3\001" +
    "\002\000\004\177\uff4a\001\002\000\004\177\uff4b\001\002" +
    "\000\010\003\uff7b\156\uff7b\176\uff7b\001\002\000\004\214" +
    "\u02f5\001\002\000\004\177\u02f6\001\002\000\010\003\uff7d" +
    "\156\uff7d\176\uff7d\001\002\000\006\067\u02f2\070\u02f1\001" +
    "\002\000\004\177\u02f9\001\002\000\010\003\uff7c\156\uff7c" +
    "\176\uff7c\001\002\000\006\213\u02fc\214\u02fd\001\002\000" +
    "\004\177\u02fe\001\002\000\004\177\uffa2\001\002\000\004" +
    "\177\uffa1\001\002\000\010\003\uff7a\156\uff7a\176\uff7a\001" +
    "\002\000\004\207\u0300\001\002\000\004\177\u0301\001\002" +
    "\000\010\003\uff79\156\uff79\176\uff79\001\002\000\010\003" +
    "\u0304\156\u0303\176\u0306\001\002\000\010\163\uffca\205\uffca" +
    "\210\uffca\001\002\000\010\003\uff91\156\uff91\176\uff91\001" +
    "\002\000\010\003\uff93\156\uff93\176\uff93\001\002\000\016" +
    "\030\u030b\031\u030c\032\u030a\034\u0307\036\u0309\037\u0308\001" +
    "\002\000\004\171\u031c\001\002\000\004\171\u0319\001\002" +
    "\000\004\171\u0316\001\002\000\004\171\u0313\001\002\000" +
    "\004\171\u0310\001\002\000\004\171\u030d\001\002\000\014" +
    "\071\u0298\072\u0299\073\u0296\074\u0297\075\u029a\001\002\000" +
    "\004\177\u030f\001\002\000\010\003\uff8f\156\uff8f\176\uff8f" +
    "\001\002\000\004\067\u0311\001\002\000\004\177\u0312\001" +
    "\002\000\010\003\uff90\156\uff90\176\uff90\001\002\000\012" +
    "\076\u02a0\077\u02a2\100\u02a4\101\u02a3\001\002\000\004\177" +
    "\u0315\001\002\000\010\003\uff8e\156\uff8e\176\uff8e\001\002" +
    "\000\004\215\u0317\001\002\000\004\177\u0318\001\002\000" +
    "\010\003\uff8c\156\uff8c\176\uff8c\001\002\000\004\215\u031a" +
    "\001\002\000\004\177\u031b\001\002\000\010\003\uff8b\156" +
    "\uff8b\176\uff8b\001\002\000\004\207\u031d\001\002\000\004" +
    "\177\u031e\001\002\000\010\003\uff8d\156\uff8d\176\uff8d\001" +
    "\002\000\010\003\u0321\156\u0320\176\u028e\001\002\000\004" +
    "\154\uffc9\001\002\000\010\003\uff88\156\uff88\176\uff88\001" +
    "\002\000\010\003\uff87\156\uff87\176\uff87\001\002\000\010" +
    "\003\uff8a\156\uff8a\176\uff8a\001\002\000\010\003\u0326\156" +
    "\u0325\176\u0329\001\002\000\006\154\uffc8\163\uffc8\001\002" +
    "\000\010\003\uff84\156\uff84\176\uff84\001\002\000\010\003" +
    "\uff83\156\uff83\176\uff83\001\002\000\010\003\uff86\156\uff86" +
    "\176\uff86\001\002\000\020\026\u032b\027\u0290\030\u0292\031" +
    "\u0293\032\u0291\034\u028f\040\u032a\001\002\000\004\171\u032f" +
    "\001\002\000\004\171\u032c\001\002\000\044\046\u02ab\047" +
    "\u02ac\050\u02aa\051\u02ae\052\u02ad\053\u02b0\054\u02b7\055\u02a9" +
    "\056\u02af\057\u02b2\060\u02a7\061\u02b6\062\u02b8\063\u02b1\064" +
    "\u02b3\065\u02a8\066\u02b4\001\002\000\004\177\u032e\001\002" +
    "\000\010\003\uff81\156\uff81\176\uff81\001\002\000\006\106" +
    "\u0331\107\u0330\001\002\000\004\177\uff4c\001\002\000\004" +
    "\177\uff4d\001\002\000\004\177\u0333\001\002\000\010\003" +
    "\uff82\156\uff82\176\uff82\001\002\000\012\003\uffe5\134\uffe5" +
    "\135\uffe5\163\uffe5\001\002\000\010\003\u0338\156\u0337\176" +
    "\u033a\001\002\000\010\003\uff98\156\uff98\176\uff98\001\002" +
    "\000\010\163\uffcb\205\uffcb\210\uffcb\001\002\000\010\003" +
    "\uff96\156\uff96\176\uff96\001\002\000\010\003\uff94\156\uff94" +
    "\176\uff94\001\002\000\016\027\u0290\030\u0292\031\u0293\032" +
    "\u0291\033\u033b\034\u028f\001\002\000\004\171\u033c\001\002" +
    "\000\012\102\u033f\103\u0341\104\u033e\105\u0340\001\002\000" +
    "\004\177\u0342\001\002\000\004\177\uff47\001\002\000\004" +
    "\177\uff49\001\002\000\004\177\uff46\001\002\000\004\177" +
    "\uff48\001\002\000\010\003\uff95\156\uff95\176\uff95\001\002" +
    "\000\010\003\u0345\156\u0344\176\u028e\001\002\000\010\163" +
    "\uffc5\205\uffc5\210\uffc5\001\002\000\010\003\uff76\156\uff76" +
    "\176\uff76\001\002\000\010\003\uff75\156\uff75\176\uff75\001" +
    "\002\000\010\003\uff78\156\uff78\176\uff78\001\002\000\010" +
    "\163\u034a\205\054\210\053\001\002\000\010\003\uffd6\154" +
    "\uffd6\163\uffd6\001\002\000\004\012\u034b\001\002\000\004" +
    "\156\u034c\001\002\000\010\003\uffc1\154\uffc1\163\uffc1\001" +
    "\002\000\004\156\u034e\001\002\000\006\154\uffee\163\uffee" +
    "\001\002\000\010\003\uffd2\154\uffd2\163\uffd2\001\002\000" +
    "\004\017\u0351\001\002\000\004\156\u0352\001\002\000\010" +
    "\003\uffbd\154\uffbd\163\uffbd\001\002\000\006\154\u035f\163" +
    "\u0362\001\002\000\004\010\u0355\001\002\000\010\003\uff9f" +
    "\156\uff9f\176\uff9f\001\002\000\010\003\u0358\156\u0357\176" +
    "\u035a\001\002\000\010\003\ufff0\154\ufff0\163\ufff0\001\002" +
    "\000\010\003\uff9e\156\uff9e\176\uff9e\001\002\000\010\003" +
    "\uffa0\156\uffa0\176\uffa0\001\002\000\004\026\u035b\001\002" +
    "\000\004\171\u035c\001\002\000\044\046\u02ab\047\u02ac\050" +
    "\u02aa\051\u02ae\052\u02ad\053\u02b0\054\u02b7\055\u02a9\056\u02af" +
    "\057\u02b2\060\u02a7\061\u02b6\062\u02b8\063\u02b1\064\u02b3\065" +
    "\u02a8\066\u02b4\001\002\000\004\177\u035e\001\002\000\010" +
    "\003\uff9d\156\uff9d\176\uff9d\001\002\000\004\024\u0366\001" +
    "\002\000\004\163\u0362\001\002\000\004\002\ufffb\001\002" +
    "\000\004\004\u0363\001\002\000\004\156\u0364\001\002\000" +
    "\004\002\ufff5\001\002\000\004\002\ufff7\001\002\000\004" +
    "\156\u0367\001\002\000\012\003\uff43\134\uff43\135\uff43\163" +
    "\uff43\001\002\000\012\003\u0369\134\067\135\072\163\u036a" +
    "\001\002\000\004\174\u0265\001\002\000\004\024\u036b\001" +
    "\002\000\004\156\u036c\001\002\000\010\003\uff45\154\uff45" +
    "\163\uff45\001\002\000\004\163\u0362\001\002\000\004\002" +
    "\ufffd\001\002\000\004\002\ufffa\001\002\000\004\156\u0371" +
    "\001\002\000\010\003\ufff3\154\ufff3\163\ufff3\001\002\000" +
    "\004\005\u0370\001\002\000\006\003\020\154\017\001\002" +
    "\000\006\154\u035f\163\u0362\001\002\000\006\003\020\154" +
    "\u0354\001\002\000\006\154\u035f\163\u0362\001\002\000\004" +
    "\163\u0362\001\002\000\004\002\ufff9\001\002\000\004\002" +
    "\ufff6\001\002\000\004\163\u0362\001\002\000\004\002\ufffc" +
    "\001\002\000\004\002\ufff8\001\002\000\010\003\u037f\154" +
    "\u0380\163\u0384\001\002\000\006\003\u039e\163\u039f\001\002" +
    "\000\010\003\uffeb\154\uffeb\163\uffeb\001\002\000\010\006" +
    "\u0392\007\u0391\024\u02e0\001\002\000\012\003\uffdd\163\uffdd" +
    "\205\uffdd\210\uffdd\001\002\000\010\003\uffed\154\uffed\163" +
    "\uffed\001\002\000\006\003\ufff4\154\ufff4\001\002\000\004" +
    "\005\u0388\001\002\000\012\003\uff43\134\uff43\135\uff43\163" +
    "\uff43\001\002\000\012\003\071\134\067\135\072\163\074" +
    "\001\002\000\010\003\uffe8\154\uffe8\163\uffe8\001\002\000" +
    "\004\156\u0389\001\002\000\006\003\ufff2\154\ufff2\001\002" +
    "\000\012\003\u038c\163\u038e\205\054\210\053\001\002\000" +
    "\012\003\uffde\163\uffde\205\uffde\210\uffde\001\002\000\010" +
    "\003\uffe1\154\uffe1\163\uffe1\001\002\000\010\003\uffe9\154" +
    "\uffe9\163\uffe9\001\002\000\004\006\u038f\001\002\000\004" +
    "\156\u0390\001\002\000\010\003\uffe2\154\uffe2\163\uffe2\001" +
    "\002\000\010\003\uffa5\156\uffa5\176\uffa5\001\002\000\004" +
    "\156\u0393\001\002\000\012\003\uffe6\163\uffe6\205\uffe6\210" +
    "\uffe6\001\002\000\010\003\u0397\156\u0396\176\u0398\001\002" +
    "\000\010\003\uffa6\156\uffa6\176\uffa6\001\002\000\006\003" +
    "\uffe7\163\uffe7\001\002\000\010\003\uffa4\156\uffa4\176\uffa4" +
    "\001\002\000\004\025\u0399\001\002\000\004\171\u039a\001" +
    "\002\000\004\214\u039b\001\002\000\004\177\u039c\001\002" +
    "\000\010\003\uffa3\156\uffa3\176\uffa3\001\002\000\010\003" +
    "\uffea\154\uffea\163\uffea\001\002\000\010\003\uffe3\154\uffe3" +
    "\163\uffe3\001\002\000\004\007\u03a0\001\002\000\004\156" +
    "\u03a1\001\002\000\010\003\uffe4\154\uffe4\163\uffe4\001\002" +
    "\000\010\003\uffaa\156\uffaa\176\uffaa\001\002\000\010\003" +
    "\u03a5\156\u03a4\176\u03a7\001\002\000\004\154\uffff\001\002" +
    "\000\010\003\uffa9\156\uffa9\176\uffa9\001\002\000\010\003" +
    "\uffab\156\uffab\176\uffab\001\002\000\006\034\u03a8\035\u03a9" +
    "\001\002\000\004\171\u03ad\001\002\000\004\171\u03aa\001" +
    "\002\000\006\213\u02fc\214\u02fd\001\002\000\004\177\u03ac" +
    "\001\002\000\010\003\uffa7\156\uffa7\176\uffa7\001\002\000" +
    "\004\207\u03ae\001\002\000\004\177\u03af\001\002\000\010" +
    "\003\uffa8\156\uffa8\176\uffa8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u03ad\000\006\002\006\144\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\014\005\012\014\010" +
    "\145\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u037c\001\001\000\006\003\u0372" +
    "\145\011\001\001\000\002\001\001\000\010\004\015\005" +
    "\020\146\021\001\001\000\006\005\u036c\046\u036d\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\u0352\146" +
    "\021\001\001\000\004\016\022\001\001\000\034\021\030" +
    "\152\041\153\040\154\026\155\033\156\042\157\035\160" +
    "\024\161\023\162\032\163\036\164\037\203\027\001\001" +
    "\000\002\001\001\000\004\172\u034e\001\001\000\002\001" +
    "\001\000\004\044\u0347\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\u02d8\001\001\000" +
    "\004\044\u02d3\001\001\000\002\001\001\000\004\037\u02cd" +
    "\001\001\000\004\111\u02cb\001\001\000\004\111\u02c9\001" +
    "\001\000\004\111\u026e\001\001\000\004\045\064\001\001" +
    "\000\006\022\045\036\043\001\001\000\006\022\057\170" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\050\001\001\000\004\023\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\102\072\201\065\206" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\077\103\001\001\000\036\013\122" +
    "\035\131\100\127\101\104\113\110\114\140\115\123\116" +
    "\120\122\137\126\145\132\112\143\142\177\135\200\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\u0251\001\001\000\004\077\u024a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\013\122\035\131\101\u0124\113\110\114" +
    "\140\126\145\132\112\143\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\107\156\110\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\110\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\127\u0106\130\165\142\176\001" +
    "\001\000\010\127\166\130\165\142\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\127" +
    "\252\130\165\142\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\127\250\130\165\142" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\127\206\130\165\142\176\001\001\000\002\001" +
    "\001\000\010\127\236\130\165\142\176\001\001\000\010" +
    "\127\235\130\165\142\176\001\001\000\010\127\234\130" +
    "\165\142\176\001\001\000\010\127\233\130\165\142\176" +
    "\001\001\000\010\127\232\130\165\142\176\001\001\000" +
    "\010\127\231\130\165\142\176\001\001\000\010\127\230" +
    "\130\165\142\176\001\001\000\010\127\227\130\165\142" +
    "\176\001\001\000\010\127\226\130\165\142\176\001\001" +
    "\000\010\127\225\130\165\142\176\001\001\000\010\127" +
    "\224\130\165\142\176\001\001\000\010\127\223\130\165" +
    "\142\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\077\244\001\001\000\036\013\122" +
    "\035\131\100\127\101\104\113\110\114\140\115\123\116" +
    "\120\122\137\126\145\132\112\143\142\177\135\200\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\077\271\001\001\000" +
    "\004\077\265\001\001\000\036\013\122\035\131\100\127" +
    "\101\104\113\110\114\140\115\123\116\120\122\137\126" +
    "\145\132\112\143\142\177\135\200\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\013" +
    "\122\035\131\100\127\101\104\113\110\114\140\115\123" +
    "\116\120\122\137\126\145\132\112\143\142\177\135\200" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\035\311\117\310\127\304\130\165\142\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\333\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\314\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\035" +
    "\322\120\320\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\077\327\001\001\000\036\013\122" +
    "\035\131\100\127\101\104\113\110\114\140\115\123\116" +
    "\120\122\137\126\145\132\112\143\142\177\135\200\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\121\335\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\077\344" +
    "\001\001\000\036\013\122\035\131\100\127\101\104\113" +
    "\110\114\140\115\123\116\120\122\137\126\145\132\112" +
    "\143\142\177\135\200\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\077" +
    "\355\001\001\000\036\013\122\035\131\100\127\101\104" +
    "\113\110\114\140\115\123\116\120\122\137\126\145\132" +
    "\112\143\142\177\135\200\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\077\363\001\001\000\036\013\122\035\131\100\127" +
    "\101\104\113\110\114\140\115\123\116\120\122\137\126" +
    "\145\132\112\143\142\177\135\200\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\077\372\001\001\000\036" +
    "\013\122\035\131\100\127\101\104\113\110\114\140\115" +
    "\123\116\120\122\137\126\145\132\112\143\142\177\135" +
    "\200\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\077\u0102\001\001\000\036\013\122\035" +
    "\131\100\127\101\104\113\110\114\140\115\123\116\120" +
    "\122\137\126\145\132\112\143\142\177\135\200\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\077\u010c\001\001" +
    "\000\036\013\122\035\131\100\127\101\104\113\110\114" +
    "\140\115\123\116\120\122\137\126\145\132\112\143\142" +
    "\177\135\200\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\u0115\001\001\000\002" +
    "\001\001\000\010\127\u0113\130\165\142\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\u011e\011\u0118\114\u011c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\u0123\114\u011c\001\001\000\002\001\001\000" +
    "\004\123\u0125\001\001\000\006\124\u0126\125\u0128\001\001" +
    "\000\002\001\001\000\022\013\122\035\131\101\u012a\113" +
    "\110\114\140\126\145\132\112\143\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\127\u012f" +
    "\130\165\142\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\013\122\035\131\101\u0133\113\110\114\140" +
    "\126\145\132\112\143\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\077\u0136\001\001" +
    "\000\036\013\122\035\131\100\127\101\104\113\110\114" +
    "\140\115\123\116\120\122\137\126\145\132\112\143\142" +
    "\177\135\200\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\077\u013b\001\001\000\036" +
    "\013\122\035\131\100\127\101\104\113\110\114\140\115" +
    "\123\116\120\122\137\126\145\132\112\143\142\177\135" +
    "\200\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\127\u0182\130\165\142\176\001\001" +
    "\000\010\127\u0141\130\165\142\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\013\122" +
    "\035\131\101\u0146\113\110\114\140\126\145\132\112\143" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\077\u0149\001\001\000\036\013\122\035" +
    "\131\100\127\101\104\113\110\114\140\115\123\116\120" +
    "\122\137\126\145\132\112\143\142\177\135\200\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\013\122\035" +
    "\131\101\u0172\113\110\114\140\126\145\132\112\143\142" +
    "\001\001\000\022\013\122\035\131\101\u0152\113\110\114" +
    "\140\126\145\132\112\143\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\077\u0156\001\001\000\036\013\122\035\131\100\127" +
    "\101\104\113\110\114\140\115\123\116\120\122\137\126" +
    "\145\132\112\143\142\177\135\200\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\077\u0162\001\001\000\004" +
    "\077\u015e\001\001\000\036\013\122\035\131\100\127\101" +
    "\104\113\110\114\140\115\123\116\120\122\137\126\145" +
    "\132\112\143\142\177\135\200\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\013\122" +
    "\035\131\100\127\101\104\113\110\114\140\115\123\116" +
    "\120\122\137\126\145\132\112\143\142\177\135\200\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\077\u016d\001\001\000\036\013\122\035\131\100\127" +
    "\101\104\113\110\114\140\115\123\116\120\122\137\126" +
    "\145\132\112\143\142\177\135\200\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\077\u0175" +
    "\001\001\000\036\013\122\035\131\100\127\101\104\113" +
    "\110\114\140\115\123\116\120\122\137\126\145\132\112" +
    "\143\142\177\135\200\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\013\122\035\131" +
    "\101\u017b\113\110\114\140\126\145\132\112\143\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\077\u017e\001\001\000\036\013\122\035\131\100" +
    "\127\101\104\113\110\114\140\115\123\116\120\122\137" +
    "\126\145\132\112\143\142\177\135\200\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\013\122\035\131\101" +
    "\u0186\113\110\114\140\126\145\132\112\143\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\077\u0189\001\001\000\036\013\122\035\131\100\127" +
    "\101\104\113\110\114\140\115\123\116\120\122\137\126" +
    "\145\132\112\143\142\177\135\200\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\077\u0195\001\001\000\004" +
    "\077\u0191\001\001\000\036\013\122\035\131\100\127\101" +
    "\104\113\110\114\140\115\123\116\120\122\137\126\145" +
    "\132\112\143\142\177\135\200\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\013\122" +
    "\035\131\100\127\101\104\113\110\114\140\115\123\116" +
    "\120\122\137\126\145\132\112\143\142\177\135\200\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\077\u01a0\001\001\000\036\013\122\035\131\100\127" +
    "\101\104\113\110\114\140\115\123\116\120\122\137\126" +
    "\145\132\112\143\142\177\135\200\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\u011e\011\u01a5\114\u011c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\127" +
    "\u01c6\130\165\142\176\001\001\000\010\127\u01ab\130\165" +
    "\142\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\u011e\011\u01cf\114\u011c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\u011e\011\u01d3\114\u011c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\035" +
    "\311\117\u023d\001\001\000\006\035\311\117\u01d9\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\035\322\120\u01de\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\077\u01e3\001\001\000\036\013\122\035\131" +
    "\100\127\101\104\113\110\114\140\115\123\116\120\122" +
    "\137\126\145\132\112\143\142\177\135\200\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\035\322\120\u01eb\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\077\u01f0" +
    "\001\001\000\036\013\122\035\131\100\127\101\104\113" +
    "\110\114\140\115\123\116\120\122\137\126\145\132\112" +
    "\143\142\177\135\200\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\035\322\120\u022a\001\001\000\006\035" +
    "\322\120\u01f9\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\077\u0206\001\001\000\004\077\u0202\001\001\000\036\013" +
    "\122\035\131\100\127\101\104\113\110\114\140\115\123" +
    "\116\120\122\137\126\145\132\112\143\142\177\135\200" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\013\122\035\131\100\127\101\104\113" +
    "\110\114\140\115\123\116\120\122\137\126\145\132\112" +
    "\143\142\177\135\200\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\077\u0211\001\001\000\036" +
    "\013\122\035\131\100\127\101\104\113\110\114\140\115" +
    "\123\116\120\122\137\126\145\132\112\143\142\177\135" +
    "\200\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\077\u0217\001\001" +
    "\000\036\013\122\035\131\100\127\101\104\113\110\114" +
    "\140\115\123\116\120\122\137\126\145\132\112\143\142" +
    "\177\135\200\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\077\u021e\001\001\000\036\013\122\035\131\100" +
    "\127\101\104\113\110\114\140\115\123\116\120\122\137" +
    "\126\145\132\112\143\142\177\135\200\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\077" +
    "\u0226\001\001\000\036\013\122\035\131\100\127\101\104" +
    "\113\110\114\140\115\123\116\120\122\137\126\145\132" +
    "\112\143\142\177\135\200\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\077\u022f\001\001\000\036\013\122\035\131\100\127\101" +
    "\104\113\110\114\140\115\123\116\120\122\137\126\145" +
    "\132\112\143\142\177\135\200\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\035\322" +
    "\120\u0234\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\077\u0239\001\001" +
    "\000\036\013\122\035\131\100\127\101\104\113\110\114" +
    "\140\115\123\116\120\122\137\126\145\132\112\143\142" +
    "\177\135\200\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\035\322\120\u0241\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\077\u0246\001\001\000\036\013\122\035" +
    "\131\100\127\101\104\113\110\114\140\115\123\116\120" +
    "\122\137\126\145\132\112\143\142\177\135\200\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\013\122\035\131\100\127\101\104\113\110\114" +
    "\140\115\123\116\120\122\137\126\145\132\112\143\142" +
    "\177\135\200\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\123\u024e\001\001\000\006\124\u0126\125\u024f" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\035" +
    "\131\143\u0252\001\001\000\004\133\u0253\001\001\000\002" +
    "\001\001\000\010\127\u0255\130\165\142\176\001\001\000" +
    "\002\001\001\000\010\010\u011e\011\u0257\114\u011c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\u011e\011\u025b\114\u011c\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\077\u025e\001\001\000\036\013" +
    "\122\035\131\100\127\101\104\113\110\114\140\115\123" +
    "\116\120\122\137\126\145\132\112\143\142\177\135\200" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\077\u0262\001\001\000\036\013\122\035\131\100\127\101" +
    "\104\113\110\114\140\115\123\116\120\122\137\126\145" +
    "\132\112\143\142\177\135\200\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\077\u0267" +
    "\001\001\000\036\013\122\035\131\100\127\101\104\113" +
    "\110\114\140\115\123\116\120\122\137\126\145\132\112" +
    "\143\142\177\135\200\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\077\u026c\001\001" +
    "\000\036\013\122\035\131\100\127\101\104\113\110\114" +
    "\140\115\123\116\120\122\137\126\145\132\112\143\142" +
    "\177\135\200\113\001\001\000\002\001\001\000\020\023" +
    "\u0272\112\u0270\153\u0277\161\u026f\163\u0275\164\u0276\165\u0271" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\111\u027f\001\001\000\004\111\u027a\001\001\000" +
    "\004\111\u0278\001\001\000\020\023\u0272\112\u0270\153\u0277" +
    "\161\u026f\163\u0275\164\u0276\165\u0279\001\001\000\002\001" +
    "\001\000\020\023\u0272\112\u0270\153\u0277\161\u026f\163\u0275" +
    "\164\u0276\176\u027c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\023\u0272" +
    "\112\u0270\153\u0277\161\u026f\163\u0275\164\u0276\175\u0280\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\u02c2\001\001\000\002\001" +
    "\001\000\004\073\u02bc\001\001\000\004\075\u0288\001\001" +
    "\000\006\033\u028b\076\u028c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\u0294" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\u02a0\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\u02b4\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\033" +
    "\u02bf\074\u02c0\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\u02c6\056\u02c3\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\023\u0272\112\u0270\153\u0277" +
    "\161\u026f\163\u0275\164\u0276\176\u02ca\001\001\000\002\001" +
    "\001\000\020\023\u0272\112\u0270\153\u0277\161\u026f\163\u0275" +
    "\164\u0276\175\u02cc\001\001\000\002\001\001\000\034\021" +
    "\u02cf\152\041\153\040\154\026\155\033\156\042\157\035" +
    "\160\024\161\023\162\032\163\036\164\037\171\u02d0\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\051\167" +
    "\u02d4\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\051\174\u02d9\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\071\u0342\001\001\000\004\057" +
    "\u0334\001\001\000\002\001\001\000\004\065\u0323\001\001" +
    "\000\004\063\u031e\001\001\000\004\061\u0301\001\001\000" +
    "\004\067\u02e4\001\001\000\004\070\u02e7\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\u02ef\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\u02f7\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\u02fa\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\062\u0304\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\u030d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\u0313\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\033\u0321\064\u0322\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\033\u0326\066\u0327\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\u032c\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\u0331\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\033\u0338\060\u0335\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\u033c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\033" +
    "\u0345\072\u0346\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\051\166" +
    "\u0348\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\u035f\046\u0360\001\001\000" +
    "\002\001\001\000\004\053\u0355\001\001\000\004\054\u0358" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\u035c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\u0364\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\u0367\001\001\000\006" +
    "\102\072\201\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\u036e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\u0373" +
    "\005\u0374\146\021\001\001\000\006\005\u0379\046\u037a\001" +
    "\001\000\006\004\u0375\146\021\001\001\000\006\005\u0376" +
    "\046\u0377\001\001\000\004\046\u0378\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\u037b\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\u0381\150\u037d\151" +
    "\u0380\152\u0384\202\u0382\001\001\000\004\204\u039c\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\u0389\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\u0385\001\001\000\010\102\072\201\065\206" +
    "\u0386\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\u038a\205\u038c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\u0393\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\u0394" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\u03a2\001\001\000\004\050\u03a5\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\u03aa\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$EtiquetadoParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$EtiquetadoParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$EtiquetadoParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ArrayList<Advertencia> listaErrores;
    private Captcha captchaSolicitado;
    private TablaDeSimbolos tablaSimbolos;
    private TablasDeOperaciones tablaOperaciones;
    private OperacionesBooleanas operacionesBooleanas;

    private String integer = TipoDeDato.INTEGER;
    private String string = TipoDeDato.STRING;
    private String decimal = TipoDeDato.DECIMAL;
    private String character = TipoDeDato.CHAR;
    private String booleano = TipoDeDato.BOOLEAN;
    private String error = TipoDeDato.ERROR;

    private String procesoActual;

    public EtiquetadoParser(EtiquetadoLexer lexer, ArrayList<Advertencia> listaErrores) {
        super(lexer);
        this.listaErrores = listaErrores;
        this.captchaSolicitado = new Captcha();
        this.tablaOperaciones = new TablasDeOperaciones();
        this.operacionesBooleanas = new OperacionesBooleanas();
        this.procesoActual = "";
        this.tablaSimbolos = captchaSolicitado.getTablaSimbolos();
    }
    public void report_error(String message, Object info) {
        System.out.println("reporterror");;
    }
    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal " + info);
    }
    @Override
    public void syntax_error(Symbol s) {
        Advertencia errorNuevo = new Advertencia("Sintactico");
        //System.out.println("linea: " + s.left + "   columna: " + s.right + "   token: " + symbl_name_from_id(s.sym) + "     texto: " + s.value);
        errorNuevo.setLinea(s.left);
        errorNuevo.setColumna(s.right);
        errorNuevo.setToken(symbl_name_from_id(s.sym)); //Se cambiará por uno de la tabla
        errorNuevo.setTexto(s.value.toString());
        //Agregamos los simbolos que se esperan
        String solucion = "";
        for(int i = 0; i < expected_token_ids().size(); i++) {
            if(i != 0) {
                solucion += ",";
            }
            solucion += " " + symbl_name_from_id(expected_token_ids().get(i));
        }
        errorNuevo.setSolucion(solucion);
        listaErrores.add(errorNuevo);
    }
    protected int error_sync_size() {
        return 1;
    }

    public void agregarErrorSemantico(String mensaje) {
        Advertencia errorNuevo = new Advertencia("Semantico");
        errorNuevo.setMensaje(mensaje);
        listaErrores.add(errorNuevo);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$EtiquetadoParser$actions {
  private final EtiquetadoParser parser;

  /** Constructor */
  CUP$EtiquetadoParser$actions(EtiquetadoParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$EtiquetadoParser$do_action_part00000000(
    int                        CUP$EtiquetadoParser$act_num,
    java_cup.runtime.lr_parser CUP$EtiquetadoParser$parser,
    java.util.Stack            CUP$EtiquetadoParser$stack,
    int                        CUP$EtiquetadoParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$EtiquetadoParser$result;

      /* select the action based on the action number */
      switch (CUP$EtiquetadoParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		RESULT = start_val;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$EtiquetadoParser$parser.done_parsing();
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= apertura_gcic cuerpo_gcic 
            {
              Object RESULT =null;
		
                                                    System.out.println("Se ha llegado al final del reconocimiento. Los simbolos encontrados son: ");
                                                    for(Simbolo simb: tablaSimbolos.getTablaSimbolos()) {
                                                        System.out.println(simb);
                                                    }
                                                    System.out.println(" \n\n");
                                                
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // apertura_gcic ::= MENOR_QUE GCIC cuerpo_parametros_gcic MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_gcic",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // apertura_gcic ::= error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_gcic",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cuerpo_gcic ::= cabecera cuerpo cierre_gcic 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_gcic",10, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cuerpo_gcic ::= scripting cabecera cuerpo cierre_gcic 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_gcic",10, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpo_gcic ::= cabecera scripting cuerpo cierre_gcic 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_gcic",10, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpo_gcic ::= cabecera cuerpo scripting cierre_gcic 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_gcic",10, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpo_gcic ::= scripting cabecera scripting cuerpo cierre_gcic 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_gcic",10, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cuerpo_gcic ::= scripting cabecera cuerpo scripting cierre_gcic 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_gcic",10, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cuerpo_gcic ::= cabecera scripting cuerpo scripting cierre_gcic 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_gcic",10, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo_gcic ::= scripting cabecera scripting cuerpo scripting cierre_gcic 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_gcic",10, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-5)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cierre_gcic ::= MENOR_CIERRE GCIC MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cierre_gcic",36, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cabecera ::= apertura_cabecera cuerpo_cabecera cierre_cabecera 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cabecera",1, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // apertura_cabecera ::= MENOR_QUE HEAD MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_cabecera",99, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cierre_cabecera ::= MENOR_CIERRE HEAD MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cierre_cabecera",128, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cuerpo ::= apertura_body cuerpo_cuerpo cierre_body 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // apertura_body ::= MENOR_QUE BODY cuerpo_parametros_body MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_body",100, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // apertura_body ::= error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_body",100, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cierre_body ::= MENOR_CIERRE BODY MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cierre_body",129, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cuerpo_cabecera ::= cuerpo_cabecera etiquetas_cabecera 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cabecera",11, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cuerpo_cabecera ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cabecera",11, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cuerpo_cabecera ::= cuerpo_cabecera error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cabecera",11, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // etiquetas_cabecera ::= apertura_link cierre_link 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cabecera",14, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // etiquetas_cabecera ::= apertura_title cuerpo_title cierre_title 
            {
              Object RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Object ct = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cabecera",14, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // etiquetas_cabecera ::= apertura_scripting cuerpo_scripting cierre_scripting 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cabecera",14, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // apertura_link ::= MENOR_QUE LINK cuerpo_parametros_link MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_link",102, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // apertura_title ::= MENOR_QUE TITLE MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_title",103, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // apertura_scripting ::= MENOR_QUE SCRIPTING MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_scripting",104, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cierre_link ::= MENOR_CIERRE LINK MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cierre_link",130, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cierre_link ::= error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cierre_link",130, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cierre_title ::= MENOR_CIERRE TITLE MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cierre_title",131, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cierre_title ::= error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cierre_title",131, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cierre_scripting ::= MENOR_CIERRE SCRIPTING MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cierre_scripting",132, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cierre_scripting ::= error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cierre_scripting",132, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cuerpo_title ::= cuerpo_title texto 
            {
              Object RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Object ct = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int entleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT= ct.toString() + " " + ent.toString();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_title",13, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cuerpo_title ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_title",13, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // texto ::= ALFANUMERICO 
            {
              String RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT=ent.toString();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("texto",17, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // texto ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT=ent.toString();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("texto",17, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cuerpo_cuerpo ::= cuerpo_cuerpo etiquetas_cuerpo 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cuerpo",12, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cuerpo_cuerpo ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cuerpo",12, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cuerpo_cuerpo ::= cuerpo_cuerpo error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cuerpo",12, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // etiquetas_cuerpo ::= apertura_spam parametros_etiquetas_texuales cerradura_spam 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // etiquetas_cuerpo ::= apertura_input cuerpo_texto cerradura_input 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // etiquetas_cuerpo ::= apertura_textarea cuerpo_texto cerradura_textarea 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // etiquetas_cuerpo ::= apertura_select cuerpo_select cerradura_select 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // etiquetas_cuerpo ::= apertura_div cuerpo_div cerradura_div 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // etiquetas_cuerpo ::= apertura_img cerradura_img 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // etiquetas_cuerpo ::= apertura_br 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // etiquetas_cuerpo ::= apertura_button cuerpo_texto cerradura_button 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // etiquetas_cuerpo ::= apertura_h1 parametros_etiquetas_texuales cerradura_h1 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // etiquetas_cuerpo ::= apertura_p parametros_etiquetas_texuales cerradura_p 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // etiquetas_cuerpo ::= apertura_scripting cuerpo_scripting cierre_scripting 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // apertura_spam ::= MENOR_QUE SPAM cuerpo_parametros_spam MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_spam",105, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // apertura_input ::= MENOR_QUE INPUT cuerpo_parametros_input MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_input",106, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // apertura_textarea ::= MENOR_QUE TEXTAREA cuerpo_parametros_textarea MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_textarea",107, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // apertura_select ::= MENOR_QUE SELECT cuerpo_parametros_select MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_select",108, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // apertura_div ::= MENOR_QUE DIV cuerpo_parametros_div MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_div",109, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // apertura_img ::= MENOR_QUE IMG cuerpo_parametros_img MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_img",110, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // apertura_br ::= MENOR_QUE BR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_br",111, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // apertura_button ::= MENOR_QUE BUTTON cuerpo_parametros_button MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_button",112, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // apertura_h1 ::= MENOR_QUE H1 cuerpo_parametros_h1 MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_h1",113, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // apertura_p ::= MENOR_QUE P cuerpo_parametros_p MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_p",114, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cerradura_spam ::= MENOR_CIERRE SPAM MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cerradura_spam",115, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cerradura_input ::= MENOR_CIERRE INPUT MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cerradura_input",116, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // cerradura_textarea ::= MENOR_CIERRE TEXTAREA MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cerradura_textarea",117, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // cerradura_select ::= MENOR_CIERRE SELECT MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cerradura_select",118, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cerradura_div ::= MENOR_CIERRE DIV MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cerradura_div",119, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cerradura_img ::= MENOR_CIERRE IMG MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cerradura_img",120, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cerradura_button ::= MENOR_CIERRE BUTTON MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cerradura_button",122, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cerradura_h1 ::= MENOR_CIERRE H1 MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cerradura_h1",123, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cerradura_p ::= MENOR_CIERRE P MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cerradura_p",124, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cuerpo_select ::= cuerpo_select etiqueta_option 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_select",28, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cuerpo_select ::= etiqueta_option 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_select",28, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // etiqueta_option ::= MENOR_QUE OPTION MAYOR_QUE cuerpo_texto MENOR_CIERRE OPTION MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiqueta_option",16, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-6)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cuerpo_texto ::= cuerpo_texto texto 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_texto",34, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cuerpo_texto ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_texto",34, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cuerpo_div ::= cuerpo_div etiquetas_cuerpo 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_div",29, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cuerpo_div ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_div",29, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // parametros_etiquetas_texuales ::= parametros_etiquetas_texuales parametros_etiquetas_texuales_p 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas_texuales",71, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // parametros_etiquetas_texuales ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas_texuales",71, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // parametros_etiquetas_texuales_p ::= texto 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas_texuales_p",72, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parametros_etiquetas_texuales_p ::= apertura_br 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas_texuales_p",72, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parametros_etiquetas_texuales_p ::= apertura_h1 parametros_etiquetas_texuales cerradura_h1 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas_texuales_p",72, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parametros_etiquetas_texuales_p ::= apertura_p parametros_etiquetas_texuales cerradura_p 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas_texuales_p",72, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parametros_etiquetas_texuales_p ::= apertura_spam parametros_etiquetas_texuales cerradura_spam 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas_texuales_p",72, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cuerpo_parametros_gcic ::= cuerpo_parametros_gcic parametros_gcic 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_gcic",37, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cuerpo_parametros_gcic ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_gcic",37, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // cuerpo_parametros_gcic ::= cuerpo_parametros_gcic error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_gcic",37, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // parametros_gcic ::= CORA ID IGUAL ID_ETIQUETA CORC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_gcic",38, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parametros_gcic ::= CORA NAME IGUAL texto_comillas_complete CORC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_gcic",38, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // cuerpo_parametros_link ::= cuerpo_parametros_link parametros_link 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_link",39, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // cuerpo_parametros_link ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_link",39, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // cuerpo_parametros_link ::= cuerpo_parametros_link error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_link",39, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // parametros_link ::= CORA HREF IGUAL ALLCHARNOSPACE CORC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_link",40, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // texto_comillas_complete ::= ALLCHAR 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("texto_comillas_complete",18, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // texto_comillas_complete ::= ALLCHARNOSPACE 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("texto_comillas_complete",18, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cuerpo_parametros_body ::= cuerpo_parametros_body parametros_body 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_body",41, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // cuerpo_parametros_body ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_body",41, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // cuerpo_parametros_body ::= cuerpo_parametros_body error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_body",41, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parametros_body ::= CORA BACKGROUND IGUAL colores CORC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_body",42, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cuerpo_parametros_spam ::= cuerpo_parametros_spam parametros_spam 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_spam",43, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // cuerpo_parametros_spam ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_spam",43, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // cuerpo_parametros_spam ::= cuerpo_parametros_spam error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_spam",43, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parametros_spam ::= parametros_textuales 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_spam",44, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // cuerpo_parametros_input ::= cuerpo_parametros_input parametros_input 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_input",45, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // cuerpo_parametros_input ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_input",45, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // cuerpo_parametros_input ::= cuerpo_parametros_input error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_input",45, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // parametros_input ::= CORA TYPE IGUAL tipos_input CORC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_input",46, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // parametros_input ::= parametros_textuales 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_input",46, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // cuerpo_parametros_textarea ::= cuerpo_parametros_textarea parametros_textarea 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_textarea",47, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // cuerpo_parametros_textarea ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_textarea",47, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // cuerpo_parametros_textarea ::= cuerpo_parametros_textarea error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_textarea",47, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // parametros_textarea ::= CORA FONTSIZE IGUAL PIXELES CORC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textarea",48, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // parametros_textarea ::= CORA FONTFAMILY IGUAL font_family CORC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textarea",48, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // parametros_textarea ::= CORA TEXTALIGN IGUAL alineaciones CORC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textarea",48, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // parametros_textarea ::= CORA ID IGUAL ID_ETIQUETA CORC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textarea",48, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // parametros_textarea ::= CORA COLS IGUAL DIGITO_COM CORC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textarea",48, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // parametros_textarea ::= CORA ROWS IGUAL DIGITO_COM CORC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textarea",48, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // cuerpo_parametros_select ::= cuerpo_parametros_select parametros_select 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_select",49, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // cuerpo_parametros_select ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_select",49, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // cuerpo_parametros_select ::= cuerpo_parametros_select error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_select",49, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // parametros_select ::= parametros_textuales 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_select",50, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // cuerpo_parametros_div ::= cuerpo_parametros_div parametros_div 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_div",51, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // cuerpo_parametros_div ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_div",51, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // cuerpo_parametros_div ::= cuerpo_parametros_div error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_div",51, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // parametros_div ::= parametros_textuales 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_div",52, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // parametros_div ::= CORA CLASS IGUAL clases CORC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_div",52, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // parametros_div ::= CORA BACKGROUND IGUAL colores CORC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_div",52, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // cuerpo_parametros_img ::= cuerpo_parametros_img parametros_img 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_img",53, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // cuerpo_parametros_img ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_img",53, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // cuerpo_parametros_img ::= cuerpo_parametros_img error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_img",53, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // parametros_img ::= CORA SRC IGUAL ALLCHARNOSPACE CORC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_img",54, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // parametros_img ::= CORA WIDTH IGUAL tamaños CORC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_img",54, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // parametros_img ::= CORA HEIGHT IGUAL tamaños CORC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_img",54, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // parametros_img ::= CORA ALT IGUAL texto_comillas_complete CORC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_img",54, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // parametros_img ::= CORA ID IGUAL ID_ETIQUETA CORC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_img",54, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // cuerpo_parametros_button ::= cuerpo_parametros_button parametros_button 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_button",55, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // cuerpo_parametros_button ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_button",55, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // cuerpo_parametros_button ::= cuerpo_parametros_button error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_button",55, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // parametros_button ::= parametros_textuales 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_button",56, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // cuerpo_parametros_h1 ::= cuerpo_parametros_h1 parametros_h1 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_h1",57, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // cuerpo_parametros_h1 ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_h1",57, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // cuerpo_parametros_h1 ::= cuerpo_parametros_h1 error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_h1",57, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // parametros_h1 ::= parametros_textuales 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_h1",58, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // cuerpo_parametros_p ::= cuerpo_parametros_p parametros_p 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_p",59, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // cuerpo_parametros_p ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_p",59, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // cuerpo_parametros_p ::= cuerpo_parametros_p error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_p",59, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // parametros_p ::= parametros_textuales 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_p",60, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // parametros_textuales ::= CORA FONTSIZE IGUAL PIXELES CORC 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textuales",25, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // parametros_textuales ::= CORA FONTFAMILY IGUAL font_family CORC 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textuales",25, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // parametros_textuales ::= CORA TEXTALIGN IGUAL alineaciones CORC 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textuales",25, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // parametros_textuales ::= CORA ID IGUAL ID_ETIQUETA CORC 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textuales",25, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // parametros_textuales ::= CORA COLOR IGUAL colores CORC 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textuales",25, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // colores ::= BLACK 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // colores ::= OLIVE 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // colores ::= TEAL 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // colores ::= RED 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // colores ::= BLUE 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // colores ::= MAROON 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // colores ::= NAVY 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // colores ::= GRAY 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // colores ::= LIME 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // colores ::= FUCHSIA 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // colores ::= GREEN 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // colores ::= WHITE 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // colores ::= PURPLE 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // colores ::= SILVER 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // colores ::= YELLOW 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // colores ::= AQUA 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // colores ::= HEXADECIMAL 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // font_family ::= COURIER 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("font_family",21, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // font_family ::= VERDANA 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("font_family",21, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // font_family ::= ARIAL 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("font_family",21, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // font_family ::= GENEVA 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("font_family",21, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // font_family ::= SANS_SERIF 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("font_family",21, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // alineaciones ::= LEFT 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("alineaciones",22, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // alineaciones ::= RIGHT 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("alineaciones",22, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // alineaciones ::= CENTER 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("alineaciones",22, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // alineaciones ::= JUSTIFY 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("alineaciones",22, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // clases ::= ROW 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("clases",23, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // clases ::= COLUMN 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("clases",23, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // tamaños ::= PIXELES 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tamaños",24, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // tamaños ::= PORCENTAJE 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tamaños",24, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // tipos_input ::= TEXT 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tipos_input",26, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // tipos_input ::= NUMBER 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tipos_input",26, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // tipos_input ::= RADIO 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tipos_input",26, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // tipos_input ::= CHECKBOX 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tipos_input",26, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // scripting ::= MENOR_QUE SCRIPTING MAYOR_QUE cuerpo_scripting MENOR_CIERRE SCRIPTING MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("scripting",3, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-6)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // cuerpo_scripting ::= cuerpo_scripting parametros_scripting 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_scripting",35, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // cuerpo_scripting ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_scripting",35, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // parametros_scripting ::= apertura_proceso CORA cuerpo_parametros_proceso CORC 
            {
              Object RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		String proc = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int simright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Simbolo> sim = (ArrayList<Simbolo>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                                                /*if(sim != null) {
                                                                                                    for(Simbolo simb: sim) {
                                                                                                        simb.setProcedimiento(proc.toString());
                                                                                                        if(tablaSimbolos.insertarSimbolo(simb)) {
                                                                                                            System.out.println("Simbolo: " + simb.getIdentificador() + ". Se ha ingresado con éxito.");
                                                                                                        } else {
                                                                                                            Advertencia errorNuevo = new Advertencia("Semantico");
                                                                                                            errorNuevo.setMensaje("El simbolo " + simb.getIdentificador() + " ya existe en el procedimiento " + proc.toString());
                                                                                                            listaErrores.add(errorNuevo);
                                                                                                        }
                                                                                                    }
                                                                                                }*/
                                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_scripting",64, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // parametros_scripting ::= error PARA PARC CORA cuerpo_parametros_proceso CORC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_scripting",64, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-5)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // parametros_scripting ::= PROCESS error PARC CORA cuerpo_parametros_proceso CORC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_scripting",64, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-5)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // parametros_scripting ::= PROCESS PARA error CORA cuerpo_parametros_proceso CORC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_scripting",64, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-5)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // parametros_scripting ::= PROCESS PARA PARC error cuerpo_parametros_proceso CORC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_scripting",64, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-5)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // apertura_proceso ::= PROCESS PARA PARC 
            {
              String RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		
                                                        procesoActual = proc.toString();
                                                        RESULT = proc.toString();
                                                    
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_proceso",127, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // apertura_proceso ::= ON_LOAD PARA PARC 
            {
              String RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		
                                                        procesoActual = proc.toString();
                                                        RESULT = proc.toString();
                                                    
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_proceso",127, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // cuerpo_parametros_proceso ::= cuerpo_parametros_proceso parametros_proceso 
            {
              ArrayList<Simbolo> RESULT =null;
		int listaSimbleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int listaSimbright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Simbolo> listaSimb = (ArrayList<Simbolo>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int listaSecondleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int listaSecondright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		ArrayList<Simbolo> listaSecond = (ArrayList<Simbolo>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                                        if(listaSecond != null) {
                                                                                                            for(Simbolo simb: listaSecond) {
                                                                                                                listaSimb.add(simb);
                                                                                                            }
                                                                                                        }
                                                                                                        RESULT = listaSimb;
                                                                                                    
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_proceso",61, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // cuerpo_parametros_proceso ::= 
            {
              ArrayList<Simbolo> RESULT =null;
		RESULT = new ArrayList<Simbolo>();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_proceso",61, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // cuerpo_parametros_proceso ::= cuerpo_parametros_proceso error 
            {
              ArrayList<Simbolo> RESULT =null;
		System.out.println("Se ha encontrado un error de prueba");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_proceso",61, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // parametros_proceso ::= parametros_proceso_simples 
            {
              ArrayList<Simbolo> RESULT =null;
		int listaSimbleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int listaSimbright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		ArrayList<Simbolo> listaSimb = (ArrayList<Simbolo>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                    RESULT = listaSimb;
                                                                
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_proceso",62, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // parametros_proceso ::= condicion_if 
            {
              ArrayList<Simbolo> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_proceso",62, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // parametros_proceso ::= ciclo_repeat 
            {
              ArrayList<Simbolo> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_proceso",62, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // parametros_proceso ::= ciclo_while 
            {
              ArrayList<Simbolo> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_proceso",62, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // parametros_proceso ::= error PUNTO_COMA 
            {
              ArrayList<Simbolo> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_proceso",62, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // parametros_proceso_simples ::= variables PUNTO_COMA 
            {
              ArrayList<Simbolo> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Simbolo> var = (ArrayList<Simbolo>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		RESULT = var;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_proceso_simples",63, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // parametros_proceso_simples ::= asignacion_valor PUNTO_COMA 
            {
              ArrayList<Simbolo> RESULT =null;
		
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_proceso_simples",63, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // parametros_proceso_simples ::= funciones_especiales PUNTO_COMA 
            {
              ArrayList<Simbolo> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_proceso_simples",63, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // funciones_especiales ::= funciones_strings 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_especiales",73, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // funciones_especiales ::= CARACTER_ALEATORIO PARA PARC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_especiales",73, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // funciones_especiales ::= NUM_ALEATORIO PARA PARC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_especiales",73, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // funciones_especiales ::= ALERT_INFO PARA strings_concatenados PARC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_especiales",73, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // funciones_especiales ::= EXIT PARA PARC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_especiales",73, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // funciones_especiales ::= INSERT PARA cuerpo_insert PARC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_especiales",73, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // cuerpo_insert ::= cuerpo_insert COMA parametros_insert 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_insert",69, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // cuerpo_insert ::= parametros_insert 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_insert",69, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // parametros_insert ::= ALLCHAR_COMSIMP 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_insert",70, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // parametros_insert ::= ALFANUMERICO 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_insert",70, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // parametros_insert ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_insert",70, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // funciones_strings ::= ASC PARA strings_concatenados PARC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_strings",74, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // funciones_strings ::= DESC PARA strings_concatenados PARC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_strings",74, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // funciones_strings ::= LETPAR_NUM PARA strings_concatenados PARC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_strings",74, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // funciones_strings ::= LETIMPAR_NUM PARA strings_concatenados PARC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_strings",74, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // funciones_strings ::= REVERSE PARA strings_concatenados PARC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_strings",74, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // variables ::= tipos_variables modo cuerpo_identificadores igual_variable 
            {
              ArrayList<Simbolo> RESULT =null;
		int tipoVarleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int tipoVarright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		String tipoVar = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int modeleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Object mode = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<String> ids = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato valor = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                                        ArrayList<Simbolo> listaSimbolosNuevos = new ArrayList<>();
                                                                                                        for(String id: ids) {
                                                                                                            if(valor.getValor() != null && valor.getTipo().equals(error) && valor.getValor().equals("vacio")){
                                                                                                                tablaSimbolos.insertarSimbolo(new Simbolo(id, tipoVar, null, mode.toString(), procesoActual));
                                                                                                            } else if(valor.getTipo().equals(error)) {
                                                                                                                agregarErrorSemantico(valor.getValor() + ".\nConflicto en la Linea: " + tipoVarleft + " - Columna: " + tipoVarright);
                                                                                                            } else {
                                                                                                                if(tipoVar.equals(valor.getTipo())) {
                                                                                                                    tablaSimbolos.insertarSimbolo(new Simbolo(id, tipoVar, valor.getValor(), mode.toString(), procesoActual));
                                                                                                                } else {
                                                                                                                    agregarErrorSemantico("El valor asignado a la(s) variable(s) no es compatible. Conflicto en Linea " + tipoVarleft + " - Columna " + tipoVarright);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        RESULT = listaSimbolosNuevos;
                                                                                                    
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("variables",9, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // tipos_variables ::= INTEGER 
            {
              String RESULT =null;
		RESULT = integer;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tipos_variables",88, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // tipos_variables ::= DECIMAL 
            {
              String RESULT =null;
		RESULT = decimal;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tipos_variables",88, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // tipos_variables ::= STRING 
            {
              String RESULT =null;
		RESULT = string;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tipos_variables",88, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // tipos_variables ::= BOOLEAN 
            {
              String RESULT =null;
		RESULT = booleano;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tipos_variables",88, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // tipos_variables ::= CHAR 
            {
              String RESULT =null;
		RESULT = character;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tipos_variables",88, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // igual_variable ::= IGUAL condicion 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato val = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("igual_variable",89, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // igual_variable ::= 
            {
              Dato RESULT =null;
		RESULT = new Dato(error, "vacio");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("igual_variable",89, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // cuerpo_identificadores ::= cuerpo_identificadores COMA identificadores 
            {
              ArrayList<String> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		ArrayList<String> ids = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		ids.add(id); RESULT = ids;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_identificadores",97, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // cuerpo_identificadores ::= identificadores 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		ArrayList<String> identificadoresNuevos = new ArrayList<>(); identificadoresNuevos.add(id); RESULT = identificadoresNuevos;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_identificadores",97, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // cuerpo_identificadores ::= cuerpo_identificadores error 
            {
              ArrayList<String> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_identificadores",97, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // cuerpo_identificadores ::= cuerpo_identificadores COMA error 
            {
              ArrayList<String> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_identificadores",97, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // identificadores ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = id.toString();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("identificadores",27, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // identificadores ::= ALFANUMERICO 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = id.toString();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("identificadores",27, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // modo ::= GLOBAL 
            {
              Object RESULT =null;
		RESULT = "@global";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("modo",5, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // modo ::= 
            {
              Object RESULT =null;
		RESULT = "-";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("modo",5, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // igual_integer ::= IGUAL expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("igual_integer",90, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // igual_integer ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("igual_integer",90, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // igual_decimal ::= IGUAL expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("igual_decimal",94, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // igual_decimal ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("igual_decimal",94, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // igual_string ::= IGUAL strings_concatenados 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("igual_string",91, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // igual_string ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("igual_string",91, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // strings_concatenados ::= strings_concatenados SUMA strings 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("strings_concatenados",7, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // strings_concatenados ::= strings 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("strings_concatenados",7, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // strings_concatenados ::= strings_concatenados error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("strings_concatenados",7, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // igual_boolean ::= IGUAL booleanos 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("igual_boolean",92, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // igual_boolean ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("igual_boolean",92, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // igual_char ::= IGUAL expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("igual_char",93, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // igual_char ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("igual_char",93, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // booleanos ::= TRUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("booleanos",8, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // booleanos ::= FALSE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("booleanos",8, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // booleanos ::= error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("booleanos",8, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // strings ::= ALLCHAR 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("strings",6, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // strings ::= ALLCHARNOSPACE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("strings",6, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // strings ::= D_STRING 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("strings",6, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // strings ::= ID_ETIQUETA 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("strings",6, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // strings ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("strings",6, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // strings ::= funciones_strings 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("strings",6, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // strings ::= error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("strings",6, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // asignacion_valor ::= cuerpo_identificadores IGUAL condicion 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("asignacion_valor",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // condicion_if ::= apertura_if_complete cuerpo_parametros_proceso PUNTOS LLAC END condicion_else_if condicion_else 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_if",75, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-6)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // condicion_if ::= apertura_if parametros_proceso_simples condicion_else_if condicion_else 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_if",75, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // apertura_if_complete ::= IF PARA condicion PARC THEN INIT LLAA PUNTOS 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_if_complete",126, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // apertura_if_complete ::= IF PARA error PARC THEN INIT LLAA PUNTOS 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_if_complete",126, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // apertura_if_complete ::= error PARA condicion PARC THEN INIT LLAA PUNTOS 
            {
              Object RESULT =null;
		listaErrores.get(listaErrores.size()-1).setSolucion("IF");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_if_complete",126, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // apertura_if_complete ::= IF error condicion PARC THEN INIT LLAA PUNTOS 
            {
              Object RESULT =null;
		listaErrores.get(listaErrores.size()-1).setSolucion("(");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_if_complete",126, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // apertura_if_complete ::= IF PARA condicion error THEN INIT LLAA PUNTOS 
            {
              Object RESULT =null;
		listaErrores.get(listaErrores.size()-1).setSolucion(")");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_if_complete",126, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // apertura_if_complete ::= IF PARA condicion PARC error INIT LLAA PUNTOS 
            {
              Object RESULT =null;
		listaErrores.get(listaErrores.size()-1).setSolucion("THEN");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_if_complete",126, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // apertura_if_complete ::= IF PARA condicion PARC THEN error LLAA PUNTOS 
            {
              Object RESULT =null;
		listaErrores.get(listaErrores.size()-1).setSolucion("INIT");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_if_complete",126, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // apertura_if_complete ::= IF PARA condicion PARC THEN INIT error PUNTOS 
            {
              Object RESULT =null;
		listaErrores.get(listaErrores.size()-1).setSolucion("{");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_if_complete",126, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // apertura_if_complete ::= IF PARA condicion PARC THEN INIT LLAA error 
            {
              Object RESULT =null;
		listaErrores.get(listaErrores.size()-1).setSolucion(":");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_if_complete",126, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // apertura_if ::= IF PARA condicion PARC THEN 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_if",125, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // condicion_else_if ::= condicion_else_if parametros_else_if 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else_if",81, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // condicion_else_if ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else_if",81, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // parametros_else_if ::= ELSE IF PARA condicion PARC THEN INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // parametros_else_if ::= ELSE IF PARA condicion PARC THEN parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-6)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // parametros_else_if ::= ELSE error PARA condicion PARC THEN INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // parametros_else_if ::= ELSE IF error condicion PARC THEN INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // parametros_else_if ::= ELSE IF PARA error PARC THEN INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // parametros_else_if ::= ELSE IF PARA condicion error THEN INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // parametros_else_if ::= ELSE IF PARA condicion PARC error INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // parametros_else_if ::= ELSE IF PARA condicion PARC THEN error LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // parametros_else_if ::= ELSE IF PARA condicion PARC THEN INIT error PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // parametros_else_if ::= ELSE IF PARA condicion PARC THEN INIT LLAA error cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // parametros_else_if ::= ELSE IF PARA condicion PARC THEN INIT LLAA PUNTOS cuerpo_parametros_proceso error LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // parametros_else_if ::= ELSE IF PARA condicion PARC THEN INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS error END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // parametros_else_if ::= ELSE IF PARA condicion PARC THEN INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // parametros_else_if ::= ELSE error PARA condicion PARC THEN parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-6)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // parametros_else_if ::= ELSE IF error condicion PARC THEN parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-6)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // parametros_else_if ::= ELSE IF PARA error PARC THEN parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-6)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // parametros_else_if ::= ELSE IF PARA condicion error THEN parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-6)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // parametros_else_if ::= ELSE IF PARA condicion PARC error parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-6)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // condicion_else ::= ELSE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else",83, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // condicion_else ::= ELSE parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else",83, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // condicion_else ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else",83, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$EtiquetadoParser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$EtiquetadoParser$do_action_part00000001(
    int                        CUP$EtiquetadoParser$act_num,
    java_cup.runtime.lr_parser CUP$EtiquetadoParser$parser,
    java.util.Stack            CUP$EtiquetadoParser$stack,
    int                        CUP$EtiquetadoParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$EtiquetadoParser$result;

      /* select the action based on the action number */
      switch (CUP$EtiquetadoParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // condicion_else ::= ELSE error LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else",83, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // condicion_else ::= ELSE INIT error PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else",83, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // condicion_else ::= ELSE INIT LLAA error cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else",83, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // condicion_else ::= ELSE INIT LLAA PUNTOS cuerpo_parametros_proceso error LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else",83, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // condicion_else ::= ELSE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS error END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else",83, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // condicion_else ::= ELSE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else",83, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",76, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // ciclo_repeat ::= error PARA repetir_declaracion PARC HUNTIL PARA repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",76, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // ciclo_repeat ::= REPEAT error repetir_declaracion PARC HUNTIL PARA repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",76, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // ciclo_repeat ::= REPEAT PARA error PARC HUNTIL PARA repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",76, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // ciclo_repeat ::= REPEAT PARA repetir_declaracion error HUNTIL PARA repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",76, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC error PARA repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",76, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL error repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",76, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA error PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",76, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA repetir_limite error INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",76, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA repetir_limite PARC error LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",76, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA repetir_limite PARC INIT error PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",76, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA repetir_limite PARC INIT LLAA error cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",76, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso error LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",76, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS error END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",76, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",76, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // repetir_declaracion ::= INTEGER identificadores IGUAL igual_repeat 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("repetir_declaracion",77, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // repetir_declaracion ::= identificadores IGUAL igual_repeat 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("repetir_declaracion",77, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // repetir_limite ::= D_INTEGER 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("repetir_limite",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // repetir_limite ::= identificadores 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("repetir_limite",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // igual_repeat ::= D_INTEGER 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("igual_repeat",79, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // ciclo_while ::= WHILE PARA condicion PARC THENWHILE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",80, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // ciclo_while ::= error PARA condicion PARC THENWHILE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",80, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // ciclo_while ::= WHILE error condicion PARC THENWHILE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",80, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // ciclo_while ::= WHILE PARA error PARC THENWHILE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",80, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // ciclo_while ::= WHILE PARA condicion error THENWHILE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",80, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // ciclo_while ::= WHILE PARA condicion PARC error INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",80, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // ciclo_while ::= WHILE PARA condicion PARC THENWHILE error LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",80, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // ciclo_while ::= WHILE PARA condicion PARC THENWHILE INIT error PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",80, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // ciclo_while ::= WHILE PARA condicion PARC THENWHILE INIT LLAA error cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",80, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // ciclo_while ::= WHILE PARA condicion PARC THENWHILE INIT LLAA PUNTOS cuerpo_parametros_proceso error LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",80, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // ciclo_while ::= WHILE PARA condicion PARC THENWHILE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS error END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",80, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // ciclo_while ::= WHILE PARA condicion PARC THENWHILE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",80, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // condicion ::= condicion IGUAL_IGUAL condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoCondicionado = operacionesBooleanas.igualIgual(dato1, dato2);
                                                                                if(datoCondicionado.equals(error)) {
                                                                                    agregarErrorSemantico(datoCondicionado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                }
                                                                                RESULT = datoCondicionado;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // condicion ::= condicion DIFERENTE_IGUAL condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoCondicionado = operacionesBooleanas.diferenteIgual(dato1, dato2);
                                                                                if(datoCondicionado.equals(error)) {
                                                                                    agregarErrorSemantico(datoCondicionado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                }
                                                                                RESULT = datoCondicionado;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // condicion ::= condicion MENOR_QUE condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoCondicionado = operacionesBooleanas.menorQue(dato1, dato2);
                                                                                if(datoCondicionado.equals(error)) {
                                                                                    agregarErrorSemantico(datoCondicionado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                }
                                                                                RESULT = datoCondicionado;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // condicion ::= condicion MENOR_IGUAL condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoCondicionado = operacionesBooleanas.menorIgual(dato1, dato2);
                                                                                if(datoCondicionado.equals(error)) {
                                                                                    agregarErrorSemantico(datoCondicionado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                }
                                                                                RESULT = datoCondicionado;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // condicion ::= condicion MAYOR_QUE condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoCondicionado = operacionesBooleanas.mayorQue(dato1, dato2);
                                                                                if(datoCondicionado.equals(error)) {
                                                                                    agregarErrorSemantico(datoCondicionado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                }
                                                                                RESULT = datoCondicionado;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // condicion ::= condicion MAYOR_IGUAL condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoCondicionado = operacionesBooleanas.mayorIgual(dato1, dato2);
                                                                                if(datoCondicionado.equals(error)) {
                                                                                    agregarErrorSemantico(datoCondicionado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                }
                                                                                RESULT = datoCondicionado;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // condicion ::= NOT condicion 
            {
              Dato RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoCondicionado = operacionesBooleanas.not(dato);
                                                                                if(datoCondicionado.equals(error)) {
                                                                                    agregarErrorSemantico(datoCondicionado.getValor() + ".\nConflicto en Linea " + datoleft + " - Columna " + datoright);
                                                                                }
                                                                                RESULT = datoCondicionado;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // condicion ::= condicion AND condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoCondicionado = operacionesBooleanas.and(dato1, dato2);
                                                                                if(datoCondicionado.equals(error)) {
                                                                                    agregarErrorSemantico(datoCondicionado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                }
                                                                                RESULT = datoCondicionado;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // condicion ::= condicion OR condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoCondicionado = operacionesBooleanas.or(dato1, dato2);
                                                                                if(datoCondicionado.equals(error)) {
                                                                                    agregarErrorSemantico(datoCondicionado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                }
                                                                                RESULT = datoCondicionado;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // condicion ::= RESTA condicion 
            {
              Dato RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoMultiplicado = tablaOperaciones.menosUnario(dato);
                                                                                if(datoMultiplicado.getTipo().equals(error)) {
                                                                                    if(datoMultiplicado.getValor() != null) {
                                                                                        agregarErrorSemantico("El dato " + dato.getValor() + " no es compatible para operar de manera unaria.\nConflicto en Linea " + datoleft + " - Columna " + datoright);
                                                                                    } else {
                                                                                        agregarErrorSemantico(datoMultiplicado.getValor() + ".\nConflicto en Linea " + datoleft + " - Columna " + datoright);
                                                                                    }
                                                                                    RESULT = datoMultiplicado;
                                                                                } else {
                                                                                    RESULT = datoMultiplicado;
                                                                                }
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // condicion ::= condicion SUMA condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoSumado = tablaOperaciones.sumar(dato1, dato2);
                                                                                if(datoSumado.getTipo().equals(error)) {
                                                                                    if(datoSumado.getValor() != null) {
                                                                                        agregarErrorSemantico("Los datos " + dato1.getValor() + " y " + dato2.getValor() + " no son compatibles para sumar.\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                    } else {
                                                                                        agregarErrorSemantico(datoSumado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                    }
                                                                                    RESULT = datoSumado;
                                                                                } else {
                                                                                    RESULT = datoSumado;
                                                                                }
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // condicion ::= condicion RESTA condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoRestado = tablaOperaciones.restar(dato1, dato2);
                                                                                if(datoRestado.getTipo().equals(error)) {
                                                                                    if(datoRestado.getValor() != null) {
                                                                                        agregarErrorSemantico("Los datos " + dato1.getValor() + " y " + dato2.getValor() + " no son compatibles para restar.\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                    } else {
                                                                                        agregarErrorSemantico(datoRestado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                    }
                                                                                    RESULT = datoRestado;
                                                                                } else {
                                                                                    RESULT = datoRestado;
                                                                                }
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // condicion ::= condicion MULTIPLICACION condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoMultiplicado = tablaOperaciones.multiplicar(dato1, dato2);
                                                                                if(datoMultiplicado.getTipo().equals(error)) {
                                                                                    if(datoMultiplicado.getValor() != null) {
                                                                                        agregarErrorSemantico("Los datos " + dato1.getValor() + " y " + dato2.getValor() + " no son compatibles para multiplicar.\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                    } else {
                                                                                        agregarErrorSemantico(datoMultiplicado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                    }
                                                                                    RESULT = datoMultiplicado;
                                                                                } else {
                                                                                    RESULT = datoMultiplicado;
                                                                                }
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // condicion ::= condicion DIVISION condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoDividido = tablaOperaciones.dividir(dato1, dato2);
                                                                                if(datoDividido.getTipo().equals(error)) {
                                                                                    if(datoDividido.getValor() != null) {
                                                                                        agregarErrorSemantico("Los datos " + dato1.getValor() + " y " + dato2.getValor() + " no son compatibles para dividir.\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                    } else {
                                                                                        agregarErrorSemantico(datoDividido.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                    }
                                                                                    RESULT = datoDividido;
                                                                                } else {
                                                                                    RESULT = datoDividido;
                                                                                }
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // condicion ::= valor_condicion 
            {
              Dato RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = dato;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // condicion ::= PARA condicion PARC 
            {
              Dato RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		RESULT = dato;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // valor_condicion ::= valor_numerico 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato val = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_condicion",86, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // valor_numerico ::= D_INTEGER 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = new Dato(integer, val.toString());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",96, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // valor_numerico ::= D_DECIMAL 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = new Dato(decimal, val.toString());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",96, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // valor_numerico ::= IDENTIFICADOR 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                Dato nuevoDato = tablaSimbolos.obtenerDato(val.toString(), procesoActual);
                                                if(nuevoDato.getTipo().equals(error)) {
                                                    agregarErrorSemantico(nuevoDato.getValor() + ".\nConflicto en Linea: " + valleft + " - Columna: " + valright);
                                                }
                                                RESULT = nuevoDato;
                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",96, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // valor_numerico ::= ALFANUMERICO 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                Dato nuevoDato = tablaSimbolos.obtenerDato(val.toString(), procesoActual);
                                                if(nuevoDato.getTipo().equals(error)) {
                                                    agregarErrorSemantico(nuevoDato.getValor() + ".\nConflicto en Linea: " + valleft + " - Columna: " + valright);
                                                }
                                                RESULT = nuevoDato;
                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",96, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // valor_numerico ::= D_CHAR 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		String caracterSt = val.toString().substring(1,2); RESULT = new Dato(character, caracterSt);
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",96, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // valor_numerico ::= ALLCHAR 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = new Dato(string, val.toString().replace("\"", ""));
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",96, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // valor_numerico ::= ALLCHARNOSPACE 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = new Dato(string, val.toString().replace("\"", ""));
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",96, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // valor_numerico ::= D_STRING 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = new Dato(string, val.toString().replace("\"", ""));
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",96, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // valor_numerico ::= ID_ETIQUETA 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = new Dato(string, val.toString().replace("\"", ""));
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",96, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // valor_numerico ::= TRUE 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = new Dato(booleano, "true");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",96, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // valor_numerico ::= FALSE 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = new Dato(booleano, "false");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",96, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$EtiquetadoParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$EtiquetadoParser$do_action(
    int                        CUP$EtiquetadoParser$act_num,
    java_cup.runtime.lr_parser CUP$EtiquetadoParser$parser,
    java.util.Stack            CUP$EtiquetadoParser$stack,
    int                        CUP$EtiquetadoParser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$EtiquetadoParser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$EtiquetadoParser$do_action_part00000000(
                               CUP$EtiquetadoParser$act_num,
                               CUP$EtiquetadoParser$parser,
                               CUP$EtiquetadoParser$stack,
                               CUP$EtiquetadoParser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$EtiquetadoParser$do_action_part00000001(
                               CUP$EtiquetadoParser$act_num,
                               CUP$EtiquetadoParser$parser,
                               CUP$EtiquetadoParser$stack,
                               CUP$EtiquetadoParser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
