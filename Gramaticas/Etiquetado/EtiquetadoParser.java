
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.froi.gcic.gramaticas.etiquetado;

import com.froi.gcic.entidades.Advertencia;
import com.froi.gcic.entidades.Captcha;
import com.froi.gcic.entidades.Identificador;
import com.froi.gcic.entidades.Parametro;
import com.froi.gcic.manejodesimbolos.Dato;
import com.froi.gcic.manejodesimbolos.OperacionesBooleanas;
import com.froi.gcic.manejodesimbolos.Simbolo;
import com.froi.gcic.manejodesimbolos.TablaDeSimbolos;
import com.froi.gcic.manejodesimbolos.TablasDeOperaciones;
import com.froi.gcic.manejodesimbolos.TipoDeDato;
import com.froi.gcic.etiquetas.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class EtiquetadoParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return EtiquetadoParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public EtiquetadoParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public EtiquetadoParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public EtiquetadoParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0183\000\002\002\004\000\002\002\004\000\002\146" +
    "\006\000\002\146\003\000\002\014\005\000\002\014\006" +
    "\000\002\014\006\000\002\014\006\000\002\014\007\000" +
    "\002\014\007\000\002\014\007\000\002\014\010\000\002" +
    "\046\005\000\002\003\005\000\002\147\005\000\002\204" +
    "\005\000\002\004\005\000\002\150\006\000\002\150\003" +
    "\000\002\205\005\000\002\015\004\000\002\015\002\000" +
    "\002\015\004\000\002\020\004\000\002\020\005\000\002" +
    "\020\005\000\002\152\006\000\002\153\005\000\002\154" +
    "\005\000\002\206\005\000\002\206\003\000\002\207\005" +
    "\000\002\207\003\000\002\210\005\000\002\210\003\000" +
    "\002\017\004\000\002\017\002\000\002\100\004\000\002" +
    "\100\003\000\002\023\003\000\002\023\003\000\002\016" +
    "\004\000\002\016\002\000\002\016\004\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\004\000\002\021\003\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\003\000\002\155\006\000\002\156\006" +
    "\000\002\157\006\000\002\160\006\000\002\161\006\000" +
    "\002\162\006\000\002\163\005\000\002\164\006\000\002" +
    "\165\006\000\002\166\006\000\002\167\005\000\002\170" +
    "\005\000\002\171\005\000\002\172\005\000\002\173\005" +
    "\000\002\174\005\000\002\176\005\000\002\177\005\000" +
    "\002\200\005\000\002\035\004\000\002\035\002\000\002" +
    "\022\011\000\002\042\004\000\002\042\002\000\002\044" +
    "\004\000\002\044\002\000\002\045\005\000\002\045\005" +
    "\000\002\045\005\000\002\045\005\000\002\045\005\000" +
    "\002\045\004\000\002\045\003\000\002\045\005\000\002" +
    "\045\005\000\002\045\005\000\002\045\005\000\002\045" +
    "\003\000\002\113\004\000\002\113\002\000\002\114\003" +
    "\000\002\114\003\000\002\114\005\000\002\114\005\000" +
    "\002\114\005\000\002\050\004\000\002\050\002\000\002" +
    "\050\004\000\002\051\007\000\002\051\007\000\002\052" +
    "\004\000\002\052\002\000\002\052\004\000\002\053\007" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\054\004\000\002\054\002\000\002\054\004\000\002" +
    "\055\007\000\002\056\004\000\002\056\002\000\002\056" +
    "\004\000\002\057\003\000\002\060\004\000\002\060\002" +
    "\000\002\060\004\000\002\061\007\000\002\061\003\000" +
    "\002\062\004\000\002\062\002\000\002\062\004\000\002" +
    "\063\007\000\002\063\007\000\002\063\007\000\002\063" +
    "\007\000\002\063\007\000\002\063\007\000\002\064\004" +
    "\000\002\064\002\000\002\064\004\000\002\065\003\000" +
    "\002\066\004\000\002\066\002\000\002\066\004\000\002" +
    "\067\003\000\002\067\007\000\002\067\007\000\002\070" +
    "\004\000\002\070\002\000\002\070\004\000\002\071\007" +
    "\000\002\071\007\000\002\071\007\000\002\071\007\000" +
    "\002\071\007\000\002\072\004\000\002\072\002\000\002" +
    "\072\004\000\002\073\003\000\002\073\007\000\002\073" +
    "\007\000\002\074\004\000\002\074\002\000\002\074\004" +
    "\000\002\075\003\000\002\076\004\000\002\076\002\000" +
    "\002\076\004\000\002\077\003\000\002\047\007\000\002" +
    "\047\007\000\002\047\007\000\002\047\007\000\002\047" +
    "\007\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\031\003\000\002\031\003\000\002\032\003" +
    "\000\002\032\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\005\007\000\002" +
    "\043\004\000\002\043\002\000\002\104\006\000\002\104" +
    "\010\000\002\104\010\000\002\104\010\000\002\104\010" +
    "\000\002\203\005\000\002\203\005\000\002\101\004\000" +
    "\002\101\002\000\002\101\004\000\002\102\003\000\002" +
    "\102\003\000\002\102\003\000\002\102\003\000\002\102" +
    "\004\000\002\103\004\000\002\103\004\000\002\103\004" +
    "\000\002\115\003\000\002\115\005\000\002\115\005\000" +
    "\002\115\006\000\002\115\005\000\002\115\006\000\002" +
    "\111\005\000\002\111\003\000\002\112\003\000\002\112" +
    "\003\000\002\112\003\000\002\116\006\000\002\116\006" +
    "\000\002\116\006\000\002\116\006\000\002\116\006\000" +
    "\002\013\006\000\002\134\003\000\002\134\003\000\002" +
    "\134\003\000\002\134\003\000\002\134\003\000\002\135" +
    "\004\000\002\135\002\000\002\145\005\000\002\145\003" +
    "\000\002\145\004\000\002\145\005\000\002\034\003\000" +
    "\002\034\003\000\002\007\003\000\002\007\002\000\002" +
    "\011\005\000\002\011\003\000\002\011\004\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\130\005\000\002\117\011\000\002\117\006\000\002\202" +
    "\012\000\002\202\012\000\002\202\012\000\002\202\012" +
    "\000\002\202\012\000\002\202\012\000\002\202\012\000" +
    "\002\202\012\000\002\202\012\000\002\201\007\000\002" +
    "\125\004\000\002\125\002\000\002\126\017\000\002\126" +
    "\011\000\002\126\017\000\002\126\017\000\002\126\017" +
    "\000\002\126\017\000\002\126\017\000\002\126\017\000" +
    "\002\126\017\000\002\126\017\000\002\126\017\000\002" +
    "\126\017\000\002\126\017\000\002\126\011\000\002\126" +
    "\011\000\002\126\011\000\002\126\011\000\002\126\011" +
    "\000\002\127\012\000\002\127\004\000\002\127\002\000" +
    "\002\127\012\000\002\127\012\000\002\127\012\000\002" +
    "\127\012\000\002\127\012\000\002\127\012\000\002\120" +
    "\021\000\002\120\013\000\002\120\021\000\002\120\021" +
    "\000\002\120\021\000\002\120\021\000\002\120\021\000" +
    "\002\120\021\000\002\120\021\000\002\120\021\000\002" +
    "\120\021\000\002\120\021\000\002\120\021\000\002\120" +
    "\021\000\002\120\021\000\002\120\021\000\002\120\013" +
    "\000\002\120\013\000\002\120\013\000\002\120\013\000" +
    "\002\120\013\000\002\120\013\000\002\120\013\000\002" +
    "\121\006\000\002\121\005\000\002\122\003\000\002\122" +
    "\003\000\002\123\003\000\002\124\016\000\002\124\010" +
    "\000\002\124\016\000\002\124\016\000\002\124\016\000" +
    "\002\124\016\000\002\124\016\000\002\124\016\000\002" +
    "\124\016\000\002\124\016\000\002\124\016\000\002\124" +
    "\016\000\002\124\016\000\002\124\010\000\002\124\010" +
    "\000\002\124\010\000\002\124\010\000\002\131\005\000" +
    "\002\131\005\000\002\131\005\000\002\131\005\000\002" +
    "\131\005\000\002\131\005\000\002\131\004\000\002\131" +
    "\005\000\002\131\005\000\002\131\004\000\002\131\005" +
    "\000\002\131\005\000\002\131\005\000\002\131\005\000" +
    "\002\131\003\000\002\131\005\000\002\132\003\000\002" +
    "\144\003\000\002\144\003\000\002\144\003\000\002\144" +
    "\003\000\002\144\003\000\002\144\003\000\002\144\003" +
    "\000\002\144\003\000\002\144\003\000\002\144\003\000" +
    "\002\144\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u03d6\000\006\003\004\154\005\001\002\000\004\154" +
    "\ufffe\001\002\000\004\004\u03cb\001\002\000\004\154\014" +
    "\001\002\000\004\002\010\001\002\000\004\002\001\001" +
    "\002\000\004\002\000\001\002\000\010\003\uffec\154\uffec" +
    "\163\uffec\001\002\000\004\154\u039b\001\002\000\006\005" +
    "\u0399\024\u02cc\001\002\000\012\003\uff31\134\uff31\135\uff31" +
    "\163\uff31\001\002\000\006\003\020\154\022\001\002\000" +
    "\006\154\u038a\163\u038d\001\002\000\014\003\uffef\154\uffef" +
    "\163\uffef\205\uffef\210\uffef\001\002\000\006\003\020\154" +
    "\u0389\001\002\000\006\010\u037e\024\u02cc\001\002\000\014" +
    "\003\uffd7\154\uffd7\163\uffd7\205\uffd7\210\uffd7\001\002\000" +
    "\014\003\043\154\035\163\033\205\046\210\042\001\002" +
    "\000\014\003\uffca\154\uffca\163\uffca\205\uffca\210\uffca\001" +
    "\002\000\012\154\uffa2\163\uffa2\205\uffa2\210\uffa2\001\002" +
    "\000\006\154\uffb5\163\uffb5\001\002\000\010\163\uffb2\205" +
    "\uffb2\210\uffb2\001\002\000\014\003\uffcf\154\uffcf\163\uffcf" +
    "\205\uffcf\210\uffcf\001\002\000\012\154\uffb0\163\uffb0\205" +
    "\uffb0\210\uffb0\001\002\000\004\010\u0343\001\002\000\010" +
    "\163\uffb2\205\uffb2\210\uffb2\001\002\000\030\011\u027d\012" +
    "\u02cb\013\u02cf\014\u02ce\016\u02cd\017\u02d0\020\u027e\021\u02ca" +
    "\022\u027f\023\u0280\024\u02cc\001\002\000\010\163\uffb2\205" +
    "\uffb2\210\uffb2\001\002\000\012\154\uffa2\163\uffa2\205\uffa2" +
    "\210\uffa2\001\002\000\006\154\ufff1\163\ufff1\001\002\000" +
    "\012\154\uffa2\163\uffa2\205\uffa2\210\uffa2\001\002\000\014" +
    "\003\uffda\154\uffda\163\uffda\205\uffda\210\uffda\001\002\000" +
    "\014\003\uffd6\154\uffd6\163\uffd6\205\uffd6\210\uffd6\001\002" +
    "\000\004\163\u0264\001\002\000\012\003\uff31\134\uff31\135" +
    "\uff31\163\uff31\001\002\000\014\003\uffd9\154\uffd9\163\uffd9" +
    "\205\uffd9\210\uffd9\001\002\000\014\003\uffd8\154\uffd8\163" +
    "\uffd8\205\uffd8\210\uffd8\001\002\000\012\003\053\134\052" +
    "\135\055\163\057\001\002\000\004\176\u0260\001\002\000" +
    "\004\174\u025e\001\002\000\016\003\uffdf\154\uffdf\163\uffdf" +
    "\174\u0259\205\uffdf\210\uffdf\001\002\000\014\003\uffcb\154" +
    "\uffcb\163\uffcb\205\uffcb\210\uffcb\001\002\000\006\003\062" +
    "\174\063\001\002\000\012\003\uff32\134\uff32\135\uff32\163" +
    "\uff32\001\002\000\004\024\060\001\002\000\004\156\061" +
    "\001\002\000\014\003\uffe0\154\uffe0\163\uffe0\205\uffe0\210" +
    "\uffe0\001\002\000\004\175\u0255\001\002\000\006\003\064" +
    "\175\065\001\002\000\004\176\u0252\001\002\000\006\003" +
    "\066\176\uff2b\001\002\000\056\003\uff28\110\uff28\111\uff28" +
    "\112\uff28\113\uff28\114\uff28\115\uff28\116\uff28\117\uff28\120" +
    "\uff28\124\uff28\127\uff28\131\uff28\133\uff28\136\uff28\137\uff28" +
    "\140\uff28\141\uff28\142\uff28\177\uff28\205\uff28\210\uff28\001" +
    "\002\000\056\003\122\110\125\111\075\112\116\113\110" +
    "\114\103\115\102\116\114\117\072\120\111\124\112\127" +
    "\101\131\127\133\130\136\100\137\120\140\117\141\071" +
    "\142\132\177\133\205\105\210\073\001\002\000\060\003" +
    "\uff26\110\uff26\111\uff26\112\uff26\113\uff26\114\uff26\115\uff26" +
    "\116\uff26\117\uff26\120\uff26\124\uff26\127\uff26\131\uff26\133" +
    "\uff26\136\uff26\137\uff26\140\uff26\141\uff26\142\uff26\177\uff26" +
    "\203\uff26\205\uff26\210\uff26\001\002\000\010\143\uff09\205" +
    "\uff09\210\uff09\001\002\000\004\174\u024f\001\002\000\014" +
    "\003\uff01\171\uff01\175\uff01\202\uff01\206\uff01\001\002\000" +
    "\004\202\u024e\001\002\000\004\174\u024b\001\002\000\010" +
    "\143\u0245\205\ufeff\210\ufeff\001\002\000\056\003\uff28\110" +
    "\uff28\111\uff28\112\uff28\113\uff28\114\uff28\115\uff28\116\uff28" +
    "\117\uff28\120\uff28\124\uff28\127\uff28\131\uff28\133\uff28\136" +
    "\uff28\137\uff28\140\uff28\141\uff28\142\uff28\203\uff28\205\uff28" +
    "\210\uff28\001\002\000\010\143\uff0d\205\uff0d\210\uff0d\001" +
    "\002\000\006\003\u01c4\174\u01c5\001\002\000\004\174\u01c2" +
    "\001\002\000\004\174\u01bf\001\002\000\060\003\uff24\110" +
    "\uff24\111\uff24\112\uff24\113\uff24\114\uff24\115\uff24\116\uff24" +
    "\117\uff24\120\uff24\124\uff24\127\uff24\131\uff24\133\uff24\136" +
    "\uff24\137\uff24\140\uff24\141\uff24\142\uff24\177\uff24\203\uff24" +
    "\205\uff24\210\uff24\001\002\000\014\003\uff02\171\uff02\175" +
    "\uff02\202\uff02\206\uff02\001\002\000\004\202\u01be\001\002" +
    "\000\060\003\uff25\110\uff25\111\uff25\112\uff25\113\uff25\114" +
    "\uff25\115\uff25\116\uff25\117\uff25\120\uff25\124\uff25\127\uff25" +
    "\131\uff25\133\uff25\136\uff25\137\uff25\140\uff25\141\uff25\142" +
    "\uff25\177\uff25\203\uff25\205\uff25\210\uff25\001\002\000\004" +
    "\174\u01bb\001\002\000\004\174\u01b9\001\002\000\006\003" +
    "\u0196\174\u0197\001\002\000\060\003\uff29\110\uff29\111\uff29" +
    "\112\uff29\113\uff29\114\uff29\115\uff29\116\uff29\117\uff29\120" +
    "\uff29\124\uff29\127\uff29\131\uff29\133\uff29\136\uff29\137\uff29" +
    "\140\uff29\141\uff29\142\uff29\177\uff29\203\uff29\205\uff29\210" +
    "\uff29\001\002\000\004\174\u0194\001\002\000\012\003\uff05" +
    "\171\uff05\202\uff05\206\uff05\001\002\000\004\174\u0191\001" +
    "\002\000\010\143\uff0a\205\uff0a\210\uff0a\001\002\000\010" +
    "\143\uff0c\205\uff0c\210\uff0c\001\002\000\044\110\125\111" +
    "\075\112\116\113\110\114\103\115\102\116\114\117\072" +
    "\120\111\133\130\136\100\137\120\140\117\141\071\142" +
    "\132\205\105\210\073\001\002\000\064\003\uff27\110\uff27" +
    "\111\uff27\112\uff27\113\uff27\114\uff27\115\uff27\116\uff27\117" +
    "\uff27\120\uff27\124\uff27\127\uff27\131\uff27\133\uff27\136\uff27" +
    "\137\uff27\140\uff27\141\uff27\142\uff27\174\277\177\uff27\202" +
    "\276\203\uff27\205\uff27\210\uff27\001\002\000\060\003\uff23" +
    "\110\uff23\111\uff23\112\uff23\113\uff23\114\uff23\115\uff23\116" +
    "\uff23\117\uff23\120\uff23\124\uff23\127\uff23\131\uff23\133\uff23" +
    "\136\uff23\137\uff23\140\uff23\141\uff23\142\uff23\177\uff23\203" +
    "\uff23\205\uff23\210\uff23\001\002\000\004\202\uff1e\001\002" +
    "\000\004\174\u010e\001\002\000\010\003\u0109\171\u010a\206" +
    "\u0108\001\002\000\006\003\146\174\147\001\002\000\004" +
    "\174\135\001\002\000\004\202\134\001\002\000\010\143" +
    "\uff0b\205\uff0b\210\uff0b\001\002\000\012\003\uff2c\134\uff2c" +
    "\135\uff2c\163\uff2c\001\002\000\062\003\uff20\110\uff20\111" +
    "\uff20\112\uff20\113\uff20\114\uff20\115\uff20\116\uff20\117\uff20" +
    "\120\uff20\124\uff20\126\uff20\127\uff20\131\uff20\133\uff20\136" +
    "\uff20\137\uff20\140\uff20\141\uff20\142\uff20\177\uff20\203\uff20" +
    "\205\uff20\210\uff20\001\002\000\010\205\140\210\141\212" +
    "\136\001\002\000\006\175\uff16\206\uff16\001\002\000\006" +
    "\175\uff17\206\uff17\001\002\000\006\175\uff14\206\uff14\001" +
    "\002\000\006\175\uff15\206\uff15\001\002\000\006\175\144" +
    "\206\143\001\002\000\010\205\140\210\141\212\136\001" +
    "\002\000\004\202\uff19\001\002\000\006\175\uff18\206\uff18" +
    "\001\002\000\036\144\160\145\156\146\154\147\164\150" +
    "\161\151\155\162\153\165\171\174\157\205\170\207\165" +
    "\210\166\213\150\214\163\001\002\000\040\003\167\144" +
    "\160\145\156\146\154\147\164\150\161\151\155\162\153" +
    "\165\171\174\157\205\170\207\165\210\166\213\150\214" +
    "\163\001\002\000\040\003\ufe84\152\ufe84\153\ufe84\154\ufe84" +
    "\155\ufe84\156\ufe84\157\ufe84\160\ufe84\161\ufe84\164\ufe84\165" +
    "\ufe84\166\ufe84\167\ufe84\175\ufe84\202\ufe84\001\002\000\040" +
    "\003\ufe8c\152\ufe8c\153\ufe8c\154\ufe8c\155\ufe8c\156\ufe8c\157" +
    "\ufe8c\160\ufe8c\161\ufe8c\164\ufe8c\165\ufe8c\166\ufe8c\167\ufe8c" +
    "\175\ufe8c\202\ufe8c\001\002\000\036\003\240\152\176\153" +
    "\203\154\201\155\206\156\174\157\177\160\205\161\173" +
    "\164\175\165\204\166\200\167\202\175\241\001\002\000" +
    "\036\144\160\145\156\146\154\147\164\150\161\151\155" +
    "\162\153\165\171\174\157\205\170\207\165\210\166\213" +
    "\150\214\163\001\002\000\040\003\ufe80\152\ufe80\153\ufe80" +
    "\154\ufe80\155\ufe80\156\ufe80\157\ufe80\160\ufe80\161\ufe80\164" +
    "\ufe80\165\ufe80\166\ufe80\167\ufe80\175\ufe80\202\ufe80\001\002" +
    "\000\040\003\ufe82\152\ufe82\153\ufe82\154\ufe82\155\ufe82\156" +
    "\ufe82\157\ufe82\160\ufe82\161\ufe82\164\ufe82\165\ufe82\166\ufe82" +
    "\167\ufe82\175\ufe82\202\ufe82\001\002\000\040\003\ufe88\152" +
    "\ufe88\153\ufe88\154\ufe88\155\ufe88\156\ufe88\157\ufe88\160\ufe88" +
    "\161\ufe88\164\ufe88\165\ufe88\166\ufe88\167\ufe88\175\ufe88\202" +
    "\ufe88\001\002\000\036\144\160\145\156\146\154\147\164" +
    "\150\161\151\155\162\153\165\171\174\157\205\170\207" +
    "\165\210\166\213\150\214\163\001\002\000\040\003\ufe89" +
    "\152\ufe89\153\ufe89\154\ufe89\155\ufe89\156\ufe89\157\ufe89\160" +
    "\ufe89\161\ufe89\164\ufe89\165\ufe89\166\ufe89\167\ufe89\175\ufe89" +
    "\202\ufe89\001\002\000\040\003\ufe85\152\ufe85\153\ufe85\154" +
    "\ufe85\155\ufe85\156\ufe85\157\ufe85\160\ufe85\161\ufe85\164\ufe85" +
    "\165\ufe85\166\ufe85\167\ufe85\175\ufe85\202\ufe85\001\002\000" +
    "\040\003\ufe8a\152\ufe8a\153\ufe8a\154\ufe8a\155\ufe8a\156\ufe8a" +
    "\157\ufe8a\160\ufe8a\161\ufe8a\164\ufe8a\165\ufe8a\166\ufe8a\167" +
    "\ufe8a\175\ufe8a\202\ufe8a\001\002\000\040\003\ufe83\152\ufe83" +
    "\153\ufe83\154\ufe83\155\ufe83\156\ufe83\157\ufe83\160\ufe83\161" +
    "\ufe83\164\ufe83\165\ufe83\166\ufe83\167\ufe83\175\ufe83\202\ufe83" +
    "\001\002\000\040\003\ufe7f\152\ufe7f\153\ufe7f\154\ufe7f\155" +
    "\ufe7f\156\ufe7f\157\ufe7f\160\ufe7f\161\ufe7f\164\ufe7f\165\ufe7f" +
    "\166\ufe7f\167\ufe7f\175\ufe7f\202\ufe7f\001\002\000\040\003" +
    "\ufe81\152\ufe81\153\ufe81\154\ufe81\155\ufe81\156\ufe81\157\ufe81" +
    "\160\ufe81\161\ufe81\164\ufe81\165\ufe81\166\ufe81\167\ufe81\175" +
    "\ufe81\202\ufe81\001\002\000\040\003\ufe86\152\ufe86\153\ufe86" +
    "\154\ufe86\155\ufe86\156\ufe86\157\ufe86\160\ufe86\161\ufe86\164" +
    "\ufe86\165\ufe86\166\ufe86\167\ufe86\175\ufe86\202\ufe86\001\002" +
    "\000\004\175\223\001\002\000\040\003\ufe87\152\ufe87\153" +
    "\ufe87\154\ufe87\155\ufe87\156\ufe87\157\ufe87\160\ufe87\161\ufe87" +
    "\164\ufe87\165\ufe87\166\ufe87\167\ufe87\175\ufe87\202\ufe87\001" +
    "\002\000\036\144\160\145\156\146\154\147\164\150\161" +
    "\151\155\162\153\165\171\174\157\205\170\207\165\210" +
    "\166\213\150\214\163\001\002\000\040\003\ufe91\152\176" +
    "\153\203\154\201\155\206\156\174\157\177\160\205\161" +
    "\173\164\ufe91\165\ufe91\166\ufe91\167\ufe91\175\ufe91\202\ufe91" +
    "\001\002\000\036\144\160\145\156\146\154\147\164\150" +
    "\161\151\155\162\153\165\171\174\157\205\170\207\165" +
    "\210\166\213\150\214\163\001\002\000\036\144\160\145" +
    "\156\146\154\147\164\150\161\151\155\162\153\165\171" +
    "\174\157\205\170\207\165\210\166\213\150\214\163\001" +
    "\002\000\036\144\160\145\156\146\154\147\164\150\161" +
    "\151\155\162\153\165\171\174\157\205\170\207\165\210" +
    "\166\213\150\214\163\001\002\000\036\144\160\145\156" +
    "\146\154\147\164\150\161\151\155\162\153\165\171\174" +
    "\157\205\170\207\165\210\166\213\150\214\163\001\002" +
    "\000\036\144\160\145\156\146\154\147\164\150\161\151" +
    "\155\162\153\165\171\174\157\205\170\207\165\210\166" +
    "\213\150\214\163\001\002\000\036\144\160\145\156\146" +
    "\154\147\164\150\161\151\155\162\153\165\171\174\157" +
    "\205\170\207\165\210\166\213\150\214\163\001\002\000" +
    "\036\144\160\145\156\146\154\147\164\150\161\151\155" +
    "\162\153\165\171\174\157\205\170\207\165\210\166\213" +
    "\150\214\163\001\002\000\036\144\160\145\156\146\154" +
    "\147\164\150\161\151\155\162\153\165\171\174\157\205" +
    "\170\207\165\210\166\213\150\214\163\001\002\000\036" +
    "\144\160\145\156\146\154\147\164\150\161\151\155\162" +
    "\153\165\171\174\157\205\170\207\165\210\166\213\150" +
    "\214\163\001\002\000\036\144\160\145\156\146\154\147" +
    "\164\150\161\151\155\162\153\165\171\174\157\205\170" +
    "\207\165\210\166\213\150\214\163\001\002\000\036\144" +
    "\160\145\156\146\154\147\164\150\161\151\155\162\153" +
    "\165\171\174\157\205\170\207\165\210\166\213\150\214" +
    "\163\001\002\000\036\144\160\145\156\146\154\147\164" +
    "\150\161\151\155\162\153\165\171\174\157\205\170\207" +
    "\165\210\166\213\150\214\163\001\002\000\040\003\ufe97" +
    "\152\ufe97\153\ufe97\154\ufe97\155\ufe97\156\ufe97\157\ufe97\160" +
    "\205\161\173\164\ufe97\165\ufe97\166\ufe97\167\ufe97\175\ufe97" +
    "\202\ufe97\001\002\000\040\003\ufe92\152\ufe92\153\ufe92\154" +
    "\ufe92\155\ufe92\156\ufe92\157\ufe92\160\ufe92\161\173\164\ufe92" +
    "\165\ufe92\166\ufe92\167\ufe92\175\ufe92\202\ufe92\001\002\000" +
    "\040\003\ufe8f\152\176\153\203\154\201\155\206\156\174" +
    "\157\177\160\205\161\173\164\ufe8f\165\ufe8f\166\200\167" +
    "\202\175\ufe8f\202\ufe8f\001\002\000\040\003\ufe99\152\ufe99" +
    "\153\ufe99\154\ufe99\155\ufe99\156\ufe99\157\ufe99\160\205\161" +
    "\173\164\ufe99\165\ufe99\166\ufe99\167\ufe99\175\ufe99\202\ufe99" +
    "\001\002\000\040\003\ufe8d\152\176\153\203\154\201\155" +
    "\206\156\174\157\177\160\205\161\173\164\ufe8d\165\ufe8d" +
    "\166\ufe8d\167\ufe8d\175\ufe8d\202\ufe8d\001\002\000\040\003" +
    "\ufe98\152\ufe98\153\ufe98\154\ufe98\155\ufe98\156\ufe98\157\ufe98" +
    "\160\205\161\173\164\ufe98\165\ufe98\166\ufe98\167\ufe98\175" +
    "\ufe98\202\ufe98\001\002\000\040\003\ufe8e\152\176\153\203" +
    "\154\201\155\206\156\174\157\177\160\205\161\173\164" +
    "\ufe8e\165\ufe8e\166\ufe8e\167\ufe8e\175\ufe8e\202\ufe8e\001\002" +
    "\000\040\003\ufe95\152\ufe95\153\ufe95\154\ufe95\155\ufe95\156" +
    "\ufe95\157\ufe95\160\205\161\173\164\ufe95\165\ufe95\166\ufe95" +
    "\167\ufe95\175\ufe95\202\ufe95\001\002\000\040\003\ufe9a\152" +
    "\ufe9a\153\ufe9a\154\ufe9a\155\ufe9a\156\ufe9a\157\ufe9a\160\205" +
    "\161\173\164\ufe9a\165\ufe9a\166\ufe9a\167\ufe9a\175\ufe9a\202" +
    "\ufe9a\001\002\000\040\003\ufe90\152\176\153\203\154\201" +
    "\155\206\156\174\157\177\160\205\161\173\164\ufe90\165" +
    "\ufe90\166\200\167\202\175\ufe90\202\ufe90\001\002\000\040" +
    "\003\ufe96\152\ufe96\153\ufe96\154\ufe96\155\ufe96\156\ufe96\157" +
    "\ufe96\160\205\161\173\164\ufe96\165\ufe96\166\ufe96\167\ufe96" +
    "\175\ufe96\202\ufe96\001\002\000\040\003\ufe93\152\ufe93\153" +
    "\ufe93\154\ufe93\155\ufe93\156\ufe93\157\ufe93\160\ufe93\161\ufe93" +
    "\164\ufe93\165\ufe93\166\ufe93\167\ufe93\175\ufe93\202\ufe93\001" +
    "\002\000\004\132\224\001\002\000\046\110\125\111\075" +
    "\112\116\113\110\114\103\115\102\116\114\117\072\120" +
    "\111\122\225\133\130\136\100\137\120\140\117\141\071" +
    "\142\132\205\105\210\073\001\002\000\004\200\227\001" +
    "\002\000\060\003\ufe9d\110\ufe9d\111\ufe9d\112\ufe9d\113\ufe9d" +
    "\114\ufe9d\115\ufe9d\116\ufe9d\117\ufe9d\120\ufe9d\124\ufe9d\127" +
    "\ufe9d\131\ufe9d\133\ufe9d\136\ufe9d\137\ufe9d\140\ufe9d\141\ufe9d" +
    "\142\ufe9d\177\ufe9d\203\ufe9d\205\ufe9d\210\ufe9d\001\002\000" +
    "\004\203\230\001\002\000\056\003\uff28\110\uff28\111\uff28" +
    "\112\uff28\113\uff28\114\uff28\115\uff28\116\uff28\117\uff28\120" +
    "\uff28\124\uff28\127\uff28\131\uff28\133\uff28\136\uff28\137\uff28" +
    "\140\uff28\141\uff28\142\uff28\203\uff28\205\uff28\210\uff28\001" +
    "\002\000\056\003\122\110\125\111\075\112\116\113\110" +
    "\114\103\115\102\116\114\117\072\120\111\124\112\127" +
    "\101\131\127\133\130\136\100\137\120\140\117\141\071" +
    "\142\132\203\232\205\105\210\073\001\002\000\004\201" +
    "\233\001\002\000\004\123\234\001\002\000\060\003\ufea7" +
    "\110\ufea7\111\ufea7\112\ufea7\113\ufea7\114\ufea7\115\ufea7\116" +
    "\ufea7\117\ufea7\120\ufea7\124\ufea7\127\ufea7\131\ufea7\133\ufea7" +
    "\136\ufea7\137\ufea7\140\ufea7\141\ufea7\142\ufea7\177\ufea7\203" +
    "\ufea7\205\ufea7\210\ufea7\001\002\000\034\152\176\153\203" +
    "\154\201\155\206\156\174\157\177\160\205\161\173\164" +
    "\175\165\204\166\200\167\202\175\236\001\002\000\040" +
    "\003\ufe8b\152\ufe8b\153\ufe8b\154\ufe8b\155\ufe8b\156\ufe8b\157" +
    "\ufe8b\160\ufe8b\161\ufe8b\164\ufe8b\165\ufe8b\166\ufe8b\167\ufe8b" +
    "\175\ufe8b\202\ufe8b\001\002\000\040\003\ufe94\152\ufe94\153" +
    "\ufe94\154\ufe94\155\ufe94\156\ufe94\157\ufe94\160\ufe94\161\ufe94" +
    "\164\ufe94\165\ufe94\166\ufe94\167\ufe94\175\ufe94\202\ufe94\001" +
    "\002\000\004\132\364\001\002\000\006\003\242\132\243" +
    "\001\002\000\046\110\125\111\075\112\116\113\110\114" +
    "\103\115\102\116\114\117\072\120\111\122\354\133\130" +
    "\136\100\137\120\140\117\141\071\142\132\205\105\210" +
    "\073\001\002\000\050\003\246\110\125\111\075\112\116" +
    "\113\110\114\103\115\102\116\114\117\072\120\111\122" +
    "\244\133\130\136\100\137\120\140\117\141\071\142\132" +
    "\205\105\210\073\001\002\000\006\003\255\200\256\001" +
    "\002\000\060\003\ufeaa\110\ufeaa\111\ufeaa\112\ufeaa\113\ufeaa" +
    "\114\ufeaa\115\ufeaa\116\ufeaa\117\ufeaa\120\ufeaa\124\ufeaa\127" +
    "\ufeaa\131\ufeaa\133\ufeaa\136\ufeaa\137\ufeaa\140\ufeaa\141\ufeaa" +
    "\142\ufeaa\177\ufeaa\203\ufeaa\205\ufeaa\210\ufeaa\001\002\000" +
    "\004\200\247\001\002\000\004\203\250\001\002\000\056" +
    "\003\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114\uff28\115" +
    "\uff28\116\uff28\117\uff28\120\uff28\124\uff28\127\uff28\131\uff28" +
    "\133\uff28\136\uff28\137\uff28\140\uff28\141\uff28\142\uff28\203" +
    "\uff28\205\uff28\210\uff28\001\002\000\056\003\122\110\125" +
    "\111\075\112\116\113\110\114\103\115\102\116\114\117" +
    "\072\120\111\124\112\127\101\131\127\133\130\136\100" +
    "\137\120\140\117\141\071\142\132\203\252\205\105\210" +
    "\073\001\002\000\004\201\253\001\002\000\004\123\254" +
    "\001\002\000\060\003\ufea4\110\ufea4\111\ufea4\112\ufea4\113" +
    "\ufea4\114\ufea4\115\ufea4\116\ufea4\117\ufea4\120\ufea4\124\ufea4" +
    "\127\ufea4\131\ufea4\133\ufea4\136\ufea4\137\ufea4\140\ufea4\141" +
    "\ufea4\142\ufea4\177\ufea4\203\ufea4\205\ufea4\210\ufea4\001\002" +
    "\000\004\203\347\001\002\000\006\003\260\203\257\001" +
    "\002\000\056\003\uff28\110\uff28\111\uff28\112\uff28\113\uff28" +
    "\114\uff28\115\uff28\116\uff28\117\uff28\120\uff28\124\uff28\127" +
    "\uff28\131\uff28\133\uff28\136\uff28\137\uff28\140\uff28\141\uff28" +
    "\142\uff28\203\uff28\205\uff28\210\uff28\001\002\000\056\003" +
    "\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114\uff28\115\uff28" +
    "\116\uff28\117\uff28\120\uff28\124\uff28\127\uff28\131\uff28\133" +
    "\uff28\136\uff28\137\uff28\140\uff28\141\uff28\142\uff28\203\uff28" +
    "\205\uff28\210\uff28\001\002\000\056\003\122\110\125\111" +
    "\075\112\116\113\110\114\103\115\102\116\114\117\072" +
    "\120\111\124\112\127\101\131\127\133\130\136\100\137" +
    "\120\140\117\141\071\142\132\203\262\205\105\210\073" +
    "\001\002\000\004\201\263\001\002\000\004\123\264\001" +
    "\002\000\060\003\ufea2\110\ufea2\111\ufea2\112\ufea2\113\ufea2" +
    "\114\ufea2\115\ufea2\116\ufea2\117\ufea2\120\ufea2\124\ufea2\127" +
    "\ufea2\131\ufea2\133\ufea2\136\ufea2\137\ufea2\140\ufea2\141\ufea2" +
    "\142\ufea2\177\ufea2\203\ufea2\205\ufea2\210\ufea2\001\002\000" +
    "\056\003\266\110\125\111\075\112\116\113\110\114\103" +
    "\115\102\116\114\117\072\120\111\124\112\127\101\131" +
    "\127\133\130\136\100\137\120\140\117\141\071\142\132" +
    "\203\267\205\105\210\073\001\002\000\064\003\uff27\110" +
    "\uff27\111\uff27\112\uff27\113\uff27\114\uff27\115\uff27\116\uff27" +
    "\117\uff27\120\uff27\124\uff27\127\uff27\131\uff27\133\uff27\136" +
    "\uff27\137\uff27\140\uff27\141\uff27\142\uff27\174\277\201\275" +
    "\202\276\203\uff27\205\uff27\210\uff27\001\002\000\006\003" +
    "\270\201\271\001\002\000\004\123\274\001\002\000\006" +
    "\003\272\123\273\001\002\000\060\003\ufe9f\110\ufe9f\111" +
    "\ufe9f\112\ufe9f\113\ufe9f\114\ufe9f\115\ufe9f\116\ufe9f\117\ufe9f" +
    "\120\ufe9f\124\ufe9f\127\ufe9f\131\ufe9f\133\ufe9f\136\ufe9f\137" +
    "\ufe9f\140\ufe9f\141\ufe9f\142\ufe9f\177\ufe9f\203\ufe9f\205\ufe9f" +
    "\210\ufe9f\001\002\000\060\003\ufeab\110\ufeab\111\ufeab\112" +
    "\ufeab\113\ufeab\114\ufeab\115\ufeab\116\ufeab\117\ufeab\120\ufeab" +
    "\124\ufeab\127\ufeab\131\ufeab\133\ufeab\136\ufeab\137\ufeab\140" +
    "\ufeab\141\ufeab\142\ufeab\177\ufeab\203\ufeab\205\ufeab\210\ufeab" +
    "\001\002\000\060\003\ufea0\110\ufea0\111\ufea0\112\ufea0\113" +
    "\ufea0\114\ufea0\115\ufea0\116\ufea0\117\ufea0\120\ufea0\124\ufea0" +
    "\127\ufea0\131\ufea0\133\ufea0\136\ufea0\137\ufea0\140\ufea0\141" +
    "\ufea0\142\ufea0\177\ufea0\203\ufea0\205\ufea0\210\ufea0\001\002" +
    "\000\004\123\346\001\002\000\060\003\uff22\110\uff22\111" +
    "\uff22\112\uff22\113\uff22\114\uff22\115\uff22\116\uff22\117\uff22" +
    "\120\uff22\124\uff22\127\uff22\131\uff22\133\uff22\136\uff22\137" +
    "\uff22\140\uff22\141\uff22\142\uff22\177\uff22\203\uff22\205\uff22" +
    "\210\uff22\001\002\000\040\136\303\144\160\145\156\146" +
    "\154\147\164\150\161\151\155\162\153\165\171\174\157" +
    "\205\302\207\165\210\301\213\150\214\163\001\002\000" +
    "\034\152\176\153\203\154\201\155\206\156\174\157\177" +
    "\160\205\161\173\164\175\165\204\166\200\167\202\175" +
    "\331\001\002\000\036\152\ufe86\153\ufe86\154\ufe86\155\ufe86" +
    "\156\ufe86\157\ufe86\160\ufe86\161\ufe86\164\ufe86\165\ufe86\166" +
    "\ufe86\167\ufe86\171\uff01\175\ufe86\001\002\000\036\152\ufe87" +
    "\153\ufe87\154\ufe87\155\ufe87\156\ufe87\157\ufe87\160\ufe87\161" +
    "\ufe87\164\ufe87\165\ufe87\166\ufe87\167\ufe87\171\uff02\175\ufe87" +
    "\001\002\000\006\205\105\210\073\001\002\000\004\175" +
    "\310\001\002\000\004\171\306\001\002\000\036\144\160" +
    "\145\156\146\154\147\164\150\161\151\155\162\153\165" +
    "\171\174\157\205\170\207\165\210\166\213\150\214\163" +
    "\001\002\000\036\003\ufeaf\152\176\153\203\154\201\155" +
    "\206\156\174\157\177\160\205\161\173\164\175\165\204" +
    "\166\200\167\202\175\ufeaf\001\002\000\004\130\311\001" +
    "\002\000\004\174\312\001\002\000\010\144\314\205\105" +
    "\210\073\001\002\000\004\175\316\001\002\000\006\003" +
    "\ufeae\175\ufeae\001\002\000\006\003\ufead\175\ufead\001\002" +
    "\000\004\122\317\001\002\000\004\200\320\001\002\000" +
    "\004\203\321\001\002\000\056\003\uff28\110\uff28\111\uff28" +
    "\112\uff28\113\uff28\114\uff28\115\uff28\116\uff28\117\uff28\120" +
    "\uff28\124\uff28\127\uff28\131\uff28\133\uff28\136\uff28\137\uff28" +
    "\140\uff28\141\uff28\142\uff28\203\uff28\205\uff28\210\uff28\001" +
    "\002\000\056\003\122\110\125\111\075\112\116\113\110" +
    "\114\103\115\102\116\114\117\072\120\111\124\112\127" +
    "\101\131\127\133\130\136\100\137\120\140\117\141\071" +
    "\142\132\203\323\205\105\210\073\001\002\000\004\201" +
    "\324\001\002\000\004\123\325\001\002\000\060\003\ufec5" +
    "\110\ufec5\111\ufec5\112\ufec5\113\ufec5\114\ufec5\115\ufec5\116" +
    "\ufec5\117\ufec5\120\ufec5\124\ufec5\127\ufec5\131\ufec5\133\ufec5" +
    "\136\ufec5\137\ufec5\140\ufec5\141\ufec5\142\ufec5\177\ufec5\203" +
    "\ufec5\205\ufec5\210\ufec5\001\002\000\004\171\327\001\002" +
    "\000\036\144\160\145\156\146\154\147\164\150\161\151" +
    "\155\162\153\165\171\174\157\205\170\207\165\210\166" +
    "\213\150\214\163\001\002\000\036\003\ufeb0\152\176\153" +
    "\203\154\201\155\206\156\174\157\177\160\205\161\173" +
    "\164\175\165\204\166\200\167\202\175\ufeb0\001\002\000" +
    "\006\125\332\132\333\001\002\000\004\122\343\001\002" +
    "\000\004\122\334\001\002\000\004\200\335\001\002\000" +
    "\004\203\336\001\002\000\056\003\uff28\110\uff28\111\uff28" +
    "\112\uff28\113\uff28\114\uff28\115\uff28\116\uff28\117\uff28\120" +
    "\uff28\124\uff28\127\uff28\131\uff28\133\uff28\136\uff28\137\uff28" +
    "\140\uff28\141\uff28\142\uff28\203\uff28\205\uff28\210\uff28\001" +
    "\002\000\056\003\122\110\125\111\075\112\116\113\110" +
    "\114\103\115\102\116\114\117\072\120\111\124\112\127" +
    "\101\131\127\133\130\136\100\137\120\140\117\141\071" +
    "\142\132\203\340\205\105\210\073\001\002\000\004\201" +
    "\341\001\002\000\004\123\342\001\002\000\060\003\ufea9" +
    "\110\ufea9\111\ufea9\112\ufea9\113\ufea9\114\ufea9\115\ufea9\116" +
    "\ufea9\117\ufea9\120\ufea9\124\ufea9\127\ufea9\131\ufea9\133\ufea9" +
    "\136\ufea9\137\ufea9\140\ufea9\141\ufea9\142\ufea9\177\ufea9\203" +
    "\ufea9\205\ufea9\210\ufea9\001\002\000\004\200\344\001\002" +
    "\000\004\203\345\001\002\000\056\003\ufeec\110\ufeec\111" +
    "\ufeec\112\ufeec\113\ufeec\114\ufeec\115\ufeec\116\ufeec\117\ufeec" +
    "\120\ufeec\124\ufeec\127\ufeec\131\ufeec\133\ufeec\136\ufeec\137" +
    "\ufeec\140\ufeec\141\ufeec\142\ufeec\203\ufeec\205\ufeec\210\ufeec" +
    "\001\002\000\060\003\ufea1\110\ufea1\111\ufea1\112\ufea1\113" +
    "\ufea1\114\ufea1\115\ufea1\116\ufea1\117\ufea1\120\ufea1\124\ufea1" +
    "\127\ufea1\131\ufea1\133\ufea1\136\ufea1\137\ufea1\140\ufea1\141" +
    "\ufea1\142\ufea1\177\ufea1\203\ufea1\205\ufea1\210\ufea1\001\002" +
    "\000\056\003\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114" +
    "\uff28\115\uff28\116\uff28\117\uff28\120\uff28\124\uff28\127\uff28" +
    "\131\uff28\133\uff28\136\uff28\137\uff28\140\uff28\141\uff28\142" +
    "\uff28\203\uff28\205\uff28\210\uff28\001\002\000\056\003\122" +
    "\110\125\111\075\112\116\113\110\114\103\115\102\116" +
    "\114\117\072\120\111\124\112\127\101\131\127\133\130" +
    "\136\100\137\120\140\117\141\071\142\132\203\351\205" +
    "\105\210\073\001\002\000\004\201\352\001\002\000\004" +
    "\123\353\001\002\000\060\003\ufea3\110\ufea3\111\ufea3\112" +
    "\ufea3\113\ufea3\114\ufea3\115\ufea3\116\ufea3\117\ufea3\120\ufea3" +
    "\124\ufea3\127\ufea3\131\ufea3\133\ufea3\136\ufea3\137\ufea3\140" +
    "\ufea3\141\ufea3\142\ufea3\177\ufea3\203\ufea3\205\ufea3\210\ufea3" +
    "\001\002\000\004\200\356\001\002\000\060\003\ufe9b\110" +
    "\ufe9b\111\ufe9b\112\ufe9b\113\ufe9b\114\ufe9b\115\ufe9b\116\ufe9b" +
    "\117\ufe9b\120\ufe9b\124\ufe9b\127\ufe9b\131\ufe9b\133\ufe9b\136" +
    "\ufe9b\137\ufe9b\140\ufe9b\141\ufe9b\142\ufe9b\177\ufe9b\203\ufe9b" +
    "\205\ufe9b\210\ufe9b\001\002\000\004\203\357\001\002\000" +
    "\056\003\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114\uff28" +
    "\115\uff28\116\uff28\117\uff28\120\uff28\124\uff28\127\uff28\131" +
    "\uff28\133\uff28\136\uff28\137\uff28\140\uff28\141\uff28\142\uff28" +
    "\203\uff28\205\uff28\210\uff28\001\002\000\056\003\122\110" +
    "\125\111\075\112\116\113\110\114\103\115\102\116\114" +
    "\117\072\120\111\124\112\127\101\131\127\133\130\136" +
    "\100\137\120\140\117\141\071\142\132\203\361\205\105" +
    "\210\073\001\002\000\004\201\362\001\002\000\004\123" +
    "\363\001\002\000\060\003\ufea5\110\ufea5\111\ufea5\112\ufea5" +
    "\113\ufea5\114\ufea5\115\ufea5\116\ufea5\117\ufea5\120\ufea5\124" +
    "\ufea5\127\ufea5\131\ufea5\133\ufea5\136\ufea5\137\ufea5\140\ufea5" +
    "\141\ufea5\142\ufea5\177\ufea5\203\ufea5\205\ufea5\210\ufea5\001" +
    "\002\000\046\110\125\111\075\112\116\113\110\114\103" +
    "\115\102\116\114\117\072\120\111\122\365\133\130\136" +
    "\100\137\120\140\117\141\071\142\132\205\105\210\073" +
    "\001\002\000\004\200\367\001\002\000\060\003\ufe9c\110" +
    "\ufe9c\111\ufe9c\112\ufe9c\113\ufe9c\114\ufe9c\115\ufe9c\116\ufe9c" +
    "\117\ufe9c\120\ufe9c\124\ufe9c\127\ufe9c\131\ufe9c\133\ufe9c\136" +
    "\ufe9c\137\ufe9c\140\ufe9c\141\ufe9c\142\ufe9c\177\ufe9c\203\ufe9c" +
    "\205\ufe9c\210\ufe9c\001\002\000\004\203\370\001\002\000" +
    "\056\003\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114\uff28" +
    "\115\uff28\116\uff28\117\uff28\120\uff28\124\uff28\127\uff28\131" +
    "\uff28\133\uff28\136\uff28\137\uff28\140\uff28\141\uff28\142\uff28" +
    "\203\uff28\205\uff28\210\uff28\001\002\000\056\003\122\110" +
    "\125\111\075\112\116\113\110\114\103\115\102\116\114" +
    "\117\072\120\111\124\112\127\101\131\127\133\130\136" +
    "\100\137\120\140\117\141\071\142\132\203\372\205\105" +
    "\210\073\001\002\000\004\201\373\001\002\000\004\123" +
    "\374\001\002\000\060\003\ufea6\110\ufea6\111\ufea6\112\ufea6" +
    "\113\ufea6\114\ufea6\115\ufea6\116\ufea6\117\ufea6\120\ufea6\124" +
    "\ufea6\127\ufea6\131\ufea6\133\ufea6\136\ufea6\137\ufea6\140\ufea6" +
    "\141\ufea6\142\ufea6\177\ufea6\203\ufea6\205\ufea6\210\ufea6\001" +
    "\002\000\034\152\176\153\203\154\201\155\206\156\174" +
    "\157\177\160\205\161\173\164\175\165\204\166\200\167" +
    "\202\175\376\001\002\000\004\132\377\001\002\000\046" +
    "\110\125\111\075\112\116\113\110\114\103\115\102\116" +
    "\114\117\072\120\111\122\u0100\133\130\136\100\137\120" +
    "\140\117\141\071\142\132\205\105\210\073\001\002\000" +
    "\004\200\u0102\001\002\000\060\003\ufe9e\110\ufe9e\111\ufe9e" +
    "\112\ufe9e\113\ufe9e\114\ufe9e\115\ufe9e\116\ufe9e\117\ufe9e\120" +
    "\ufe9e\124\ufe9e\127\ufe9e\131\ufe9e\133\ufe9e\136\ufe9e\137\ufe9e" +
    "\140\ufe9e\141\ufe9e\142\ufe9e\177\ufe9e\203\ufe9e\205\ufe9e\210" +
    "\ufe9e\001\002\000\004\203\u0103\001\002\000\056\003\uff28" +
    "\110\uff28\111\uff28\112\uff28\113\uff28\114\uff28\115\uff28\116" +
    "\uff28\117\uff28\120\uff28\124\uff28\127\uff28\131\uff28\133\uff28" +
    "\136\uff28\137\uff28\140\uff28\141\uff28\142\uff28\203\uff28\205" +
    "\uff28\210\uff28\001\002\000\056\003\122\110\125\111\075" +
    "\112\116\113\110\114\103\115\102\116\114\117\072\120" +
    "\111\124\112\127\101\131\127\133\130\136\100\137\120" +
    "\140\117\141\071\142\132\203\u0105\205\105\210\073\001" +
    "\002\000\004\201\u0106\001\002\000\004\123\u0107\001\002" +
    "\000\060\003\ufea8\110\ufea8\111\ufea8\112\ufea8\113\ufea8\114" +
    "\ufea8\115\ufea8\116\ufea8\117\ufea8\120\ufea8\124\ufea8\127\ufea8" +
    "\131\ufea8\133\ufea8\136\ufea8\137\ufea8\140\ufea8\141\ufea8\142" +
    "\ufea8\177\ufea8\203\ufea8\205\ufea8\210\ufea8\001\002\000\010" +
    "\003\u010c\205\105\210\073\001\002\000\012\003\uff04\171" +
    "\uff04\202\uff04\206\uff04\001\002\000\036\144\160\145\156" +
    "\146\154\147\164\150\161\151\155\162\153\165\171\174" +
    "\157\205\170\207\165\210\166\213\150\214\163\001\002" +
    "\000\034\152\176\153\203\154\201\155\206\156\174\157" +
    "\177\160\205\161\173\164\175\165\204\166\200\167\202" +
    "\202\ufef1\001\002\000\012\003\uff03\171\uff03\202\uff03\206" +
    "\uff03\001\002\000\012\003\uff06\171\uff06\202\uff06\206\uff06" +
    "\001\002\000\036\144\160\145\156\146\154\147\164\150" +
    "\161\151\155\162\153\165\171\174\157\205\170\207\165" +
    "\210\166\213\150\214\163\001\002\000\034\152\176\153" +
    "\203\154\201\155\206\156\174\157\177\160\205\161\173" +
    "\164\175\165\204\166\200\167\202\175\u0110\001\002\000" +
    "\004\202\uff13\001\002\000\062\003\ufee3\110\ufee3\111\ufee3" +
    "\112\ufee3\113\ufee3\114\ufee3\115\ufee3\116\ufee3\117\ufee3\120" +
    "\ufee3\124\ufee3\126\ufee3\127\ufee3\131\ufee3\133\ufee3\136\ufee3" +
    "\137\ufee3\140\ufee3\141\ufee3\142\ufee3\177\ufee3\203\ufee3\205" +
    "\ufee3\210\ufee3\001\002\000\062\003\ufece\110\ufece\111\ufece" +
    "\112\ufece\113\ufece\114\ufece\115\ufece\116\ufece\117\ufece\120" +
    "\ufece\124\ufece\126\u0114\127\ufece\131\ufece\133\ufece\136\ufece" +
    "\137\ufece\140\ufece\141\ufece\142\ufece\177\ufece\203\ufece\205" +
    "\ufece\210\ufece\001\002\000\062\003\ufee4\110\ufee4\111\ufee4" +
    "\112\ufee4\113\ufee4\114\ufee4\115\ufee4\116\ufee4\117\ufee4\120" +
    "\ufee4\124\ufee4\126\ufee4\127\ufee4\131\ufee4\133\ufee4\136\ufee4" +
    "\137\ufee4\140\ufee4\141\ufee4\142\ufee4\177\ufee4\203\ufee4\205" +
    "\ufee4\210\ufee4\001\002\000\052\003\u0119\110\125\111\075" +
    "\112\116\113\110\114\103\115\102\116\114\117\072\120" +
    "\111\122\u0116\124\u0118\133\130\136\100\137\120\140\117" +
    "\141\071\142\132\205\105\210\073\001\002\000\060\003" +
    "\ufeef\110\ufeef\111\ufeef\112\ufeef\113\ufeef\114\ufeef\115\ufeef" +
    "\116\ufeef\117\ufeef\120\ufeef\124\ufeef\127\ufeef\131\ufeef\133" +
    "\ufeef\136\ufeef\137\ufeef\140\ufeef\141\ufeef\142\ufeef\177\ufeef" +
    "\203\ufeef\205\ufeef\210\ufeef\001\002\000\006\003\u017a\200" +
    "\u017b\001\002\000\060\003\ufecf\110\ufecf\111\ufecf\112\ufecf" +
    "\113\ufecf\114\ufecf\115\ufecf\116\ufecf\117\ufecf\120\ufecf\124" +
    "\ufecf\127\ufecf\131\ufecf\133\ufecf\136\ufecf\137\ufecf\140\ufecf" +
    "\141\ufecf\142\ufecf\177\ufecf\203\ufecf\205\ufecf\210\ufecf\001" +
    "\002\000\006\003\u012c\174\u012d\001\002\000\006\174\u011b" +
    "\200\u011a\001\002\000\004\203\u0127\001\002\000\036\144" +
    "\160\145\156\146\154\147\164\150\161\151\155\162\153" +
    "\165\171\174\157\205\170\207\165\210\166\213\150\214" +
    "\163\001\002\000\034\152\176\153\203\154\201\155\206" +
    "\156\174\157\177\160\205\161\173\164\175\165\204\166" +
    "\200\167\202\175\u011d\001\002\000\004\125\u011e\001\002" +
    "\000\046\110\125\111\075\112\116\113\110\114\103\115" +
    "\102\116\114\117\072\120\111\122\u011f\133\130\136\100" +
    "\137\120\140\117\141\071\142\132\205\105\210\073\001" +
    "\002\000\004\200\u0121\001\002\000\062\003\ufed5\110\ufed5" +
    "\111\ufed5\112\ufed5\113\ufed5\114\ufed5\115\ufed5\116\ufed5\117" +
    "\ufed5\120\ufed5\124\ufed5\126\ufed5\127\ufed5\131\ufed5\133\ufed5" +
    "\136\ufed5\137\ufed5\140\ufed5\141\ufed5\142\ufed5\177\ufed5\203" +
    "\ufed5\205\ufed5\210\ufed5\001\002\000\004\203\u0122\001\002" +
    "\000\056\003\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114" +
    "\uff28\115\uff28\116\uff28\117\uff28\120\uff28\124\uff28\127\uff28" +
    "\131\uff28\133\uff28\136\uff28\137\uff28\140\uff28\141\uff28\142" +
    "\uff28\203\uff28\205\uff28\210\uff28\001\002\000\056\003\122" +
    "\110\125\111\075\112\116\113\110\114\103\115\102\116" +
    "\114\117\072\120\111\124\112\127\101\131\127\133\130" +
    "\136\100\137\120\140\117\141\071\142\132\203\u0124\205" +
    "\105\210\073\001\002\000\004\201\u0125\001\002\000\004" +
    "\123\u0126\001\002\000\062\003\ufee0\110\ufee0\111\ufee0\112" +
    "\ufee0\113\ufee0\114\ufee0\115\ufee0\116\ufee0\117\ufee0\120\ufee0" +
    "\124\ufee0\126\ufee0\127\ufee0\131\ufee0\133\ufee0\136\ufee0\137" +
    "\ufee0\140\ufee0\141\ufee0\142\ufee0\177\ufee0\203\ufee0\205\ufee0" +
    "\210\ufee0\001\002\000\056\003\uff28\110\uff28\111\uff28\112" +
    "\uff28\113\uff28\114\uff28\115\uff28\116\uff28\117\uff28\120\uff28" +
    "\124\uff28\127\uff28\131\uff28\133\uff28\136\uff28\137\uff28\140" +
    "\uff28\141\uff28\142\uff28\203\uff28\205\uff28\210\uff28\001\002" +
    "\000\056\003\122\110\125\111\075\112\116\113\110\114" +
    "\103\115\102\116\114\117\072\120\111\124\112\127\101" +
    "\131\127\133\130\136\100\137\120\140\117\141\071\142" +
    "\132\203\u0129\205\105\210\073\001\002\000\004\201\u012a" +
    "\001\002\000\004\123\u012b\001\002\000\060\003\ufecd\110" +
    "\ufecd\111\ufecd\112\ufecd\113\ufecd\114\ufecd\115\ufecd\116\ufecd" +
    "\117\ufecd\120\ufecd\124\ufecd\127\ufecd\131\ufecd\133\ufecd\136" +
    "\ufecd\137\ufecd\140\ufecd\141\ufecd\142\ufecd\177\ufecd\203\ufecd" +
    "\205\ufecd\210\ufecd\001\002\000\036\144\160\145\156\146" +
    "\154\147\164\150\161\151\155\162\153\165\171\174\157" +
    "\205\170\207\165\210\166\213\150\214\163\001\002\000" +
    "\040\003\u012f\144\160\145\156\146\154\147\164\150\161" +
    "\151\155\162\153\165\171\174\157\205\170\207\165\210" +
    "\166\213\150\214\163\001\002\000\036\003\u013a\152\176" +
    "\153\203\154\201\155\206\156\174\157\177\160\205\161" +
    "\173\164\175\165\204\166\200\167\202\175\u013b\001\002" +
    "\000\004\175\u0130\001\002\000\004\125\u0131\001\002\000" +
    "\046\110\125\111\075\112\116\113\110\114\103\115\102" +
    "\116\114\117\072\120\111\122\u0132\133\130\136\100\137" +
    "\120\140\117\141\071\142\132\205\105\210\073\001\002" +
    "\000\004\200\u0134\001\002\000\062\003\ufed3\110\ufed3\111" +
    "\ufed3\112\ufed3\113\ufed3\114\ufed3\115\ufed3\116\ufed3\117\ufed3" +
    "\120\ufed3\124\ufed3\126\ufed3\127\ufed3\131\ufed3\133\ufed3\136" +
    "\ufed3\137\ufed3\140\ufed3\141\ufed3\142\ufed3\177\ufed3\203\ufed3" +
    "\205\ufed3\210\ufed3\001\002\000\004\203\u0135\001\002\000" +
    "\056\003\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114\uff28" +
    "\115\uff28\116\uff28\117\uff28\120\uff28\124\uff28\127\uff28\131" +
    "\uff28\133\uff28\136\uff28\137\uff28\140\uff28\141\uff28\142\uff28" +
    "\203\uff28\205\uff28\210\uff28\001\002\000\056\003\122\110" +
    "\125\111\075\112\116\113\110\114\103\115\102\116\114" +
    "\117\072\120\111\124\112\127\101\131\127\133\130\136" +
    "\100\137\120\140\117\141\071\142\132\203\u0137\205\105" +
    "\210\073\001\002\000\004\201\u0138\001\002\000\004\123" +
    "\u0139\001\002\000\062\003\ufede\110\ufede\111\ufede\112\ufede" +
    "\113\ufede\114\ufede\115\ufede\116\ufede\117\ufede\120\ufede\124" +
    "\ufede\126\ufede\127\ufede\131\ufede\133\ufede\136\ufede\137\ufede" +
    "\140\ufede\141\ufede\142\ufede\177\ufede\203\ufede\205\ufede\210" +
    "\ufede\001\002\000\004\125\u0166\001\002\000\006\003\u013d" +
    "\125\u013c\001\002\000\050\003\u0148\110\125\111\075\112" +
    "\116\113\110\114\103\115\102\116\114\117\072\120\111" +
    "\122\u0146\133\130\136\100\137\120\140\117\141\071\142" +
    "\132\205\105\210\073\001\002\000\046\110\125\111\075" +
    "\112\116\113\110\114\103\115\102\116\114\117\072\120" +
    "\111\122\u013e\133\130\136\100\137\120\140\117\141\071" +
    "\142\132\205\105\210\073\001\002\000\004\200\u0140\001" +
    "\002\000\062\003\ufed1\110\ufed1\111\ufed1\112\ufed1\113\ufed1" +
    "\114\ufed1\115\ufed1\116\ufed1\117\ufed1\120\ufed1\124\ufed1\126" +
    "\ufed1\127\ufed1\131\ufed1\133\ufed1\136\ufed1\137\ufed1\140\ufed1" +
    "\141\ufed1\142\ufed1\177\ufed1\203\ufed1\205\ufed1\210\ufed1\001" +
    "\002\000\004\203\u0141\001\002\000\056\003\uff28\110\uff28" +
    "\111\uff28\112\uff28\113\uff28\114\uff28\115\uff28\116\uff28\117" +
    "\uff28\120\uff28\124\uff28\127\uff28\131\uff28\133\uff28\136\uff28" +
    "\137\uff28\140\uff28\141\uff28\142\uff28\203\uff28\205\uff28\210" +
    "\uff28\001\002\000\056\003\122\110\125\111\075\112\116" +
    "\113\110\114\103\115\102\116\114\117\072\120\111\124" +
    "\112\127\101\131\127\133\130\136\100\137\120\140\117" +
    "\141\071\142\132\203\u0143\205\105\210\073\001\002\000" +
    "\004\201\u0144\001\002\000\004\123\u0145\001\002\000\062" +
    "\003\ufedc\110\ufedc\111\ufedc\112\ufedc\113\ufedc\114\ufedc\115" +
    "\ufedc\116\ufedc\117\ufedc\120\ufedc\124\ufedc\126\ufedc\127\ufedc" +
    "\131\ufedc\133\ufedc\136\ufedc\137\ufedc\140\ufedc\141\ufedc\142" +
    "\ufedc\177\ufedc\203\ufedc\205\ufedc\210\ufedc\001\002\000\006" +
    "\003\u014f\200\u0150\001\002\000\062\003\ufee1\110\ufee1\111" +
    "\ufee1\112\ufee1\113\ufee1\114\ufee1\115\ufee1\116\ufee1\117\ufee1" +
    "\120\ufee1\124\ufee1\126\ufee1\127\ufee1\131\ufee1\133\ufee1\136" +
    "\ufee1\137\ufee1\140\ufee1\141\ufee1\142\ufee1\177\ufee1\203\ufee1" +
    "\205\ufee1\210\ufee1\001\002\000\004\200\u0149\001\002\000" +
    "\004\203\u014a\001\002\000\056\003\uff28\110\uff28\111\uff28" +
    "\112\uff28\113\uff28\114\uff28\115\uff28\116\uff28\117\uff28\120" +
    "\uff28\124\uff28\127\uff28\131\uff28\133\uff28\136\uff28\137\uff28" +
    "\140\uff28\141\uff28\142\uff28\203\uff28\205\uff28\210\uff28\001" +
    "\002\000\056\003\122\110\125\111\075\112\116\113\110" +
    "\114\103\115\102\116\114\117\072\120\111\124\112\127" +
    "\101\131\127\133\130\136\100\137\120\140\117\141\071" +
    "\142\132\203\u014c\205\105\210\073\001\002\000\004\201" +
    "\u014d\001\002\000\004\123\u014e\001\002\000\062\003\ufedb" +
    "\110\ufedb\111\ufedb\112\ufedb\113\ufedb\114\ufedb\115\ufedb\116" +
    "\ufedb\117\ufedb\120\ufedb\124\ufedb\126\ufedb\127\ufedb\131\ufedb" +
    "\133\ufedb\136\ufedb\137\ufedb\140\ufedb\141\ufedb\142\ufedb\177" +
    "\ufedb\203\ufedb\205\ufedb\210\ufedb\001\002\000\004\203\u0161" +
    "\001\002\000\006\003\u0152\203\u0151\001\002\000\056\003" +
    "\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114\uff28\115\uff28" +
    "\116\uff28\117\uff28\120\uff28\124\uff28\127\uff28\131\uff28\133" +
    "\uff28\136\uff28\137\uff28\140\uff28\141\uff28\142\uff28\203\uff28" +
    "\205\uff28\210\uff28\001\002\000\056\003\uff28\110\uff28\111" +
    "\uff28\112\uff28\113\uff28\114\uff28\115\uff28\116\uff28\117\uff28" +
    "\120\uff28\124\uff28\127\uff28\131\uff28\133\uff28\136\uff28\137" +
    "\uff28\140\uff28\141\uff28\142\uff28\203\uff28\205\uff28\210\uff28" +
    "\001\002\000\056\003\122\110\125\111\075\112\116\113" +
    "\110\114\103\115\102\116\114\117\072\120\111\124\112" +
    "\127\101\131\127\133\130\136\100\137\120\140\117\141" +
    "\071\142\132\203\u0154\205\105\210\073\001\002\000\004" +
    "\201\u0155\001\002\000\004\123\u0156\001\002\000\062\003" +
    "\ufed9\110\ufed9\111\ufed9\112\ufed9\113\ufed9\114\ufed9\115\ufed9" +
    "\116\ufed9\117\ufed9\120\ufed9\124\ufed9\126\ufed9\127\ufed9\131" +
    "\ufed9\133\ufed9\136\ufed9\137\ufed9\140\ufed9\141\ufed9\142\ufed9" +
    "\177\ufed9\203\ufed9\205\ufed9\210\ufed9\001\002\000\056\003" +
    "\u0158\110\125\111\075\112\116\113\110\114\103\115\102" +
    "\116\114\117\072\120\111\124\112\127\101\131\127\133" +
    "\130\136\100\137\120\140\117\141\071\142\132\203\u0159" +
    "\205\105\210\073\001\002\000\064\003\uff27\110\uff27\111" +
    "\uff27\112\uff27\113\uff27\114\uff27\115\uff27\116\uff27\117\uff27" +
    "\120\uff27\124\uff27\127\uff27\131\uff27\133\uff27\136\uff27\137" +
    "\uff27\140\uff27\141\uff27\142\uff27\174\277\201\u015f\202\276" +
    "\203\uff27\205\uff27\210\uff27\001\002\000\006\003\u015a\201" +
    "\u015b\001\002\000\004\123\u015e\001\002\000\006\003\u015c" +
    "\123\u015d\001\002\000\062\003\ufed6\110\ufed6\111\ufed6\112" +
    "\ufed6\113\ufed6\114\ufed6\115\ufed6\116\ufed6\117\ufed6\120\ufed6" +
    "\124\ufed6\126\ufed6\127\ufed6\131\ufed6\133\ufed6\136\ufed6\137" +
    "\ufed6\140\ufed6\141\ufed6\142\ufed6\177\ufed6\203\ufed6\205\ufed6" +
    "\210\ufed6\001\002\000\062\003\ufee2\110\ufee2\111\ufee2\112" +
    "\ufee2\113\ufee2\114\ufee2\115\ufee2\116\ufee2\117\ufee2\120\ufee2" +
    "\124\ufee2\126\ufee2\127\ufee2\131\ufee2\133\ufee2\136\ufee2\137" +
    "\ufee2\140\ufee2\141\ufee2\142\ufee2\177\ufee2\203\ufee2\205\ufee2" +
    "\210\ufee2\001\002\000\062\003\ufed7\110\ufed7\111\ufed7\112" +
    "\ufed7\113\ufed7\114\ufed7\115\ufed7\116\ufed7\117\ufed7\120\ufed7" +
    "\124\ufed7\126\ufed7\127\ufed7\131\ufed7\133\ufed7\136\ufed7\137" +
    "\ufed7\140\ufed7\141\ufed7\142\ufed7\177\ufed7\203\ufed7\205\ufed7" +
    "\210\ufed7\001\002\000\004\123\u0160\001\002\000\062\003" +
    "\ufed8\110\ufed8\111\ufed8\112\ufed8\113\ufed8\114\ufed8\115\ufed8" +
    "\116\ufed8\117\ufed8\120\ufed8\124\ufed8\126\ufed8\127\ufed8\131" +
    "\ufed8\133\ufed8\136\ufed8\137\ufed8\140\ufed8\141\ufed8\142\ufed8" +
    "\177\ufed8\203\ufed8\205\ufed8\210\ufed8\001\002\000\056\003" +
    "\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114\uff28\115\uff28" +
    "\116\uff28\117\uff28\120\uff28\124\uff28\127\uff28\131\uff28\133" +
    "\uff28\136\uff28\137\uff28\140\uff28\141\uff28\142\uff28\203\uff28" +
    "\205\uff28\210\uff28\001\002\000\056\003\122\110\125\111" +
    "\075\112\116\113\110\114\103\115\102\116\114\117\072" +
    "\120\111\124\112\127\101\131\127\133\130\136\100\137" +
    "\120\140\117\141\071\142\132\203\u0163\205\105\210\073" +
    "\001\002\000\004\201\u0164\001\002\000\004\123\u0165\001" +
    "\002\000\062\003\ufeda\110\ufeda\111\ufeda\112\ufeda\113\ufeda" +
    "\114\ufeda\115\ufeda\116\ufeda\117\ufeda\120\ufeda\124\ufeda\126" +
    "\ufeda\127\ufeda\131\ufeda\133\ufeda\136\ufeda\137\ufeda\140\ufeda" +
    "\141\ufeda\142\ufeda\177\ufeda\203\ufeda\205\ufeda\210\ufeda\001" +
    "\002\000\046\110\125\111\075\112\116\113\110\114\103" +
    "\115\102\116\114\117\072\120\111\122\u0167\133\130\136" +
    "\100\137\120\140\117\141\071\142\132\205\105\210\073" +
    "\001\002\000\004\200\u0169\001\002\000\062\003\ufed2\110" +
    "\ufed2\111\ufed2\112\ufed2\113\ufed2\114\ufed2\115\ufed2\116\ufed2" +
    "\117\ufed2\120\ufed2\124\ufed2\126\ufed2\127\ufed2\131\ufed2\133" +
    "\ufed2\136\ufed2\137\ufed2\140\ufed2\141\ufed2\142\ufed2\177\ufed2" +
    "\203\ufed2\205\ufed2\210\ufed2\001\002\000\004\203\u016a\001" +
    "\002\000\056\003\uff28\110\uff28\111\uff28\112\uff28\113\uff28" +
    "\114\uff28\115\uff28\116\uff28\117\uff28\120\uff28\124\uff28\127" +
    "\uff28\131\uff28\133\uff28\136\uff28\137\uff28\140\uff28\141\uff28" +
    "\142\uff28\203\uff28\205\uff28\210\uff28\001\002\000\056\003" +
    "\122\110\125\111\075\112\116\113\110\114\103\115\102" +
    "\116\114\117\072\120\111\124\112\127\101\131\127\133" +
    "\130\136\100\137\120\140\117\141\071\142\132\203\u016c" +
    "\205\105\210\073\001\002\000\004\201\u016d\001\002\000" +
    "\004\123\u016e\001\002\000\062\003\ufedd\110\ufedd\111\ufedd" +
    "\112\ufedd\113\ufedd\114\ufedd\115\ufedd\116\ufedd\117\ufedd\120" +
    "\ufedd\124\ufedd\126\ufedd\127\ufedd\131\ufedd\133\ufedd\136\ufedd" +
    "\137\ufedd\140\ufedd\141\ufedd\142\ufedd\177\ufedd\203\ufedd\205" +
    "\ufedd\210\ufedd\001\002\000\034\152\176\153\203\154\201" +
    "\155\206\156\174\157\177\160\205\161\173\164\175\165" +
    "\204\166\200\167\202\175\u0170\001\002\000\004\125\u0171" +
    "\001\002\000\046\110\125\111\075\112\116\113\110\114" +
    "\103\115\102\116\114\117\072\120\111\122\u0172\133\130" +
    "\136\100\137\120\140\117\141\071\142\132\205\105\210" +
    "\073\001\002\000\004\200\u0174\001\002\000\062\003\ufed4" +
    "\110\ufed4\111\ufed4\112\ufed4\113\ufed4\114\ufed4\115\ufed4\116" +
    "\ufed4\117\ufed4\120\ufed4\124\ufed4\126\ufed4\127\ufed4\131\ufed4" +
    "\133\ufed4\136\ufed4\137\ufed4\140\ufed4\141\ufed4\142\ufed4\177" +
    "\ufed4\203\ufed4\205\ufed4\210\ufed4\001\002\000\004\203\u0175" +
    "\001\002\000\056\003\uff28\110\uff28\111\uff28\112\uff28\113" +
    "\uff28\114\uff28\115\uff28\116\uff28\117\uff28\120\uff28\124\uff28" +
    "\127\uff28\131\uff28\133\uff28\136\uff28\137\uff28\140\uff28\141" +
    "\uff28\142\uff28\203\uff28\205\uff28\210\uff28\001\002\000\056" +
    "\003\122\110\125\111\075\112\116\113\110\114\103\115" +
    "\102\116\114\117\072\120\111\124\112\127\101\131\127" +
    "\133\130\136\100\137\120\140\117\141\071\142\132\203" +
    "\u0177\205\105\210\073\001\002\000\004\201\u0178\001\002" +
    "\000\004\123\u0179\001\002\000\062\003\ufedf\110\ufedf\111" +
    "\ufedf\112\ufedf\113\ufedf\114\ufedf\115\ufedf\116\ufedf\117\ufedf" +
    "\120\ufedf\124\ufedf\126\ufedf\127\ufedf\131\ufedf\133\ufedf\136" +
    "\ufedf\137\ufedf\140\ufedf\141\ufedf\142\ufedf\177\ufedf\203\ufedf" +
    "\205\ufedf\210\ufedf\001\002\000\004\203\u018c\001\002\000" +
    "\006\003\u017d\203\u017c\001\002\000\056\003\uff28\110\uff28" +
    "\111\uff28\112\uff28\113\uff28\114\uff28\115\uff28\116\uff28\117" +
    "\uff28\120\uff28\124\uff28\127\uff28\131\uff28\133\uff28\136\uff28" +
    "\137\uff28\140\uff28\141\uff28\142\uff28\203\uff28\205\uff28\210" +
    "\uff28\001\002\000\056\003\uff28\110\uff28\111\uff28\112\uff28" +
    "\113\uff28\114\uff28\115\uff28\116\uff28\117\uff28\120\uff28\124" +
    "\uff28\127\uff28\131\uff28\133\uff28\136\uff28\137\uff28\140\uff28" +
    "\141\uff28\142\uff28\203\uff28\205\uff28\210\uff28\001\002\000" +
    "\056\003\122\110\125\111\075\112\116\113\110\114\103" +
    "\115\102\116\114\117\072\120\111\124\112\127\101\131" +
    "\127\133\130\136\100\137\120\140\117\141\071\142\132" +
    "\203\u017f\205\105\210\073\001\002\000\004\201\u0180\001" +
    "\002\000\004\123\u0181\001\002\000\060\003\ufecb\110\ufecb" +
    "\111\ufecb\112\ufecb\113\ufecb\114\ufecb\115\ufecb\116\ufecb\117" +
    "\ufecb\120\ufecb\124\ufecb\127\ufecb\131\ufecb\133\ufecb\136\ufecb" +
    "\137\ufecb\140\ufecb\141\ufecb\142\ufecb\177\ufecb\203\ufecb\205" +
    "\ufecb\210\ufecb\001\002\000\056\003\u0183\110\125\111\075" +
    "\112\116\113\110\114\103\115\102\116\114\117\072\120" +
    "\111\124\112\127\101\131\127\133\130\136\100\137\120" +
    "\140\117\141\071\142\132\203\u0184\205\105\210\073\001" +
    "\002\000\064\003\uff27\110\uff27\111\uff27\112\uff27\113\uff27" +
    "\114\uff27\115\uff27\116\uff27\117\uff27\120\uff27\124\uff27\127" +
    "\uff27\131\uff27\133\uff27\136\uff27\137\uff27\140\uff27\141\uff27" +
    "\142\uff27\174\277\201\u018a\202\276\203\uff27\205\uff27\210" +
    "\uff27\001\002\000\006\003\u0185\201\u0186\001\002\000\004" +
    "\123\u0189\001\002\000\006\003\u0187\123\u0188\001\002\000" +
    "\060\003\ufec8\110\ufec8\111\ufec8\112\ufec8\113\ufec8\114\ufec8" +
    "\115\ufec8\116\ufec8\117\ufec8\120\ufec8\124\ufec8\127\ufec8\131" +
    "\ufec8\133\ufec8\136\ufec8\137\ufec8\140\ufec8\141\ufec8\142\ufec8" +
    "\177\ufec8\203\ufec8\205\ufec8\210\ufec8\001\002\000\060\003" +
    "\ufed0\110\ufed0\111\ufed0\112\ufed0\113\ufed0\114\ufed0\115\ufed0" +
    "\116\ufed0\117\ufed0\120\ufed0\124\ufed0\127\ufed0\131\ufed0\133" +
    "\ufed0\136\ufed0\137\ufed0\140\ufed0\141\ufed0\142\ufed0\177\ufed0" +
    "\203\ufed0\205\ufed0\210\ufed0\001\002\000\060\003\ufec9\110" +
    "\ufec9\111\ufec9\112\ufec9\113\ufec9\114\ufec9\115\ufec9\116\ufec9" +
    "\117\ufec9\120\ufec9\124\ufec9\127\ufec9\131\ufec9\133\ufec9\136" +
    "\ufec9\137\ufec9\140\ufec9\141\ufec9\142\ufec9\177\ufec9\203\ufec9" +
    "\205\ufec9\210\ufec9\001\002\000\004\123\u018b\001\002\000" +
    "\060\003\ufeca\110\ufeca\111\ufeca\112\ufeca\113\ufeca\114\ufeca" +
    "\115\ufeca\116\ufeca\117\ufeca\120\ufeca\124\ufeca\127\ufeca\131" +
    "\ufeca\133\ufeca\136\ufeca\137\ufeca\140\ufeca\141\ufeca\142\ufeca" +
    "\177\ufeca\203\ufeca\205\ufeca\210\ufeca\001\002\000\056\003" +
    "\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114\uff28\115\uff28" +
    "\116\uff28\117\uff28\120\uff28\124\uff28\127\uff28\131\uff28\133" +
    "\uff28\136\uff28\137\uff28\140\uff28\141\uff28\142\uff28\203\uff28" +
    "\205\uff28\210\uff28\001\002\000\056\003\122\110\125\111" +
    "\075\112\116\113\110\114\103\115\102\116\114\117\072" +
    "\120\111\124\112\127\101\131\127\133\130\136\100\137" +
    "\120\140\117\141\071\142\132\203\u018e\205\105\210\073" +
    "\001\002\000\004\201\u018f\001\002\000\004\123\u0190\001" +
    "\002\000\060\003\ufecc\110\ufecc\111\ufecc\112\ufecc\113\ufecc" +
    "\114\ufecc\115\ufecc\116\ufecc\117\ufecc\120\ufecc\124\ufecc\127" +
    "\ufecc\131\ufecc\133\ufecc\136\ufecc\137\ufecc\140\ufecc\141\ufecc" +
    "\142\ufecc\177\ufecc\203\ufecc\205\ufecc\210\ufecc\001\002\000" +
    "\036\144\160\145\156\146\154\147\164\150\161\151\155" +
    "\162\153\165\171\174\157\205\170\207\165\210\166\213" +
    "\150\214\163\001\002\000\034\152\176\153\203\154\201" +
    "\155\206\156\174\157\177\160\205\161\173\164\175\165" +
    "\204\166\200\167\202\175\u0193\001\002\000\004\202\uff11" +
    "\001\002\000\004\175\u0195\001\002\000\004\202\uff1c\001" +
    "\002\000\036\144\160\145\156\146\154\147\164\150\161" +
    "\151\155\162\153\165\171\174\157\205\170\207\165\210" +
    "\166\213\150\214\163\001\002\000\040\003\u0199\144\160" +
    "\145\156\146\154\147\164\150\161\151\155\162\153\165" +
    "\171\174\157\205\170\207\165\210\166\213\150\214\163" +
    "\001\002\000\036\003\u019f\152\176\153\203\154\201\155" +
    "\206\156\174\157\177\160\205\161\173\164\175\165\204" +
    "\166\200\167\202\175\u01a0\001\002\000\004\175\u019a\001" +
    "\002\000\004\125\u019b\001\002\000\004\122\u019c\001\002" +
    "\000\004\200\u019d\001\002\000\004\203\u019e\001\002\000" +
    "\056\003\ufeed\110\ufeed\111\ufeed\112\ufeed\113\ufeed\114\ufeed" +
    "\115\ufeed\116\ufeed\117\ufeed\120\ufeed\124\ufeed\127\ufeed\131" +
    "\ufeed\133\ufeed\136\ufeed\137\ufeed\140\ufeed\141\ufeed\142\ufeed" +
    "\203\ufeed\205\ufeed\210\ufeed\001\002\000\004\125\u01af\001" +
    "\002\000\006\003\u01a1\125\u01a2\001\002\000\004\122\u01ac" +
    "\001\002\000\050\003\u01a4\110\ufee5\111\ufee5\112\ufee5\113" +
    "\ufee5\114\ufee5\115\ufee5\116\ufee5\117\ufee5\120\ufee5\122\u01a3" +
    "\133\ufee5\136\ufee5\137\ufee5\140\ufee5\141\ufee5\142\ufee5\205" +
    "\ufee5\210\ufee5\001\002\000\006\003\u01a7\200\u01a8\001\002" +
    "\000\004\200\u01a5\001\002\000\004\203\u01a6\001\002\000" +
    "\056\003\ufee8\110\ufee8\111\ufee8\112\ufee8\113\ufee8\114\ufee8" +
    "\115\ufee8\116\ufee8\117\ufee8\120\ufee8\124\ufee8\127\ufee8\131" +
    "\ufee8\133\ufee8\136\ufee8\137\ufee8\140\ufee8\141\ufee8\142\ufee8" +
    "\203\ufee8\205\ufee8\210\ufee8\001\002\000\004\203\u01ab\001" +
    "\002\000\006\003\u01aa\203\u01a9\001\002\000\056\003\ufeee" +
    "\110\ufeee\111\ufeee\112\ufeee\113\ufeee\114\ufeee\115\ufeee\116" +
    "\ufeee\117\ufeee\120\ufeee\124\ufeee\127\ufeee\131\ufeee\133\ufeee" +
    "\136\ufeee\137\ufeee\140\ufeee\141\ufeee\142\ufeee\203\ufeee\205" +
    "\ufeee\210\ufeee\001\002\000\056\003\ufee6\110\ufee6\111\ufee6" +
    "\112\ufee6\113\ufee6\114\ufee6\115\ufee6\116\ufee6\117\ufee6\120" +
    "\ufee6\124\ufee6\127\ufee6\131\ufee6\133\ufee6\136\ufee6\137\ufee6" +
    "\140\ufee6\141\ufee6\142\ufee6\203\ufee6\205\ufee6\210\ufee6\001" +
    "\002\000\056\003\ufee7\110\ufee7\111\ufee7\112\ufee7\113\ufee7" +
    "\114\ufee7\115\ufee7\116\ufee7\117\ufee7\120\ufee7\124\ufee7\127" +
    "\ufee7\131\ufee7\133\ufee7\136\ufee7\137\ufee7\140\ufee7\141\ufee7" +
    "\142\ufee7\203\ufee7\205\ufee7\210\ufee7\001\002\000\004\200" +
    "\u01ad\001\002\000\004\203\u01ae\001\002\000\056\003\ufee9" +
    "\110\ufee9\111\ufee9\112\ufee9\113\ufee9\114\ufee9\115\ufee9\116" +
    "\ufee9\117\ufee9\120\ufee9\124\ufee9\127\ufee9\131\ufee9\133\ufee9" +
    "\136\ufee9\137\ufee9\140\ufee9\141\ufee9\142\ufee9\203\ufee9\205" +
    "\ufee9\210\ufee9\001\002\000\004\122\u01b0\001\002\000\004" +
    "\200\u01b1\001\002\000\004\203\u01b2\001\002\000\056\003" +
    "\ufeea\110\ufeea\111\ufeea\112\ufeea\113\ufeea\114\ufeea\115\ufeea" +
    "\116\ufeea\117\ufeea\120\ufeea\124\ufeea\127\ufeea\131\ufeea\133" +
    "\ufeea\136\ufeea\137\ufeea\140\ufeea\141\ufeea\142\ufeea\203\ufeea" +
    "\205\ufeea\210\ufeea\001\002\000\034\152\176\153\203\154" +
    "\201\155\206\156\174\157\177\160\205\161\173\164\175" +
    "\165\204\166\200\167\202\175\u01b4\001\002\000\004\125" +
    "\u01b5\001\002\000\004\122\u01b6\001\002\000\004\200\u01b7" +
    "\001\002\000\004\203\u01b8\001\002\000\056\003\ufeeb\110" +
    "\ufeeb\111\ufeeb\112\ufeeb\113\ufeeb\114\ufeeb\115\ufeeb\116\ufeeb" +
    "\117\ufeeb\120\ufeeb\124\ufeeb\127\ufeeb\131\ufeeb\133\ufeeb\136" +
    "\ufeeb\137\ufeeb\140\ufeeb\141\ufeeb\142\ufeeb\203\ufeeb\205\ufeeb" +
    "\210\ufeeb\001\002\000\004\175\u01ba\001\002\000\004\202" +
    "\uff1a\001\002\000\036\144\160\145\156\146\154\147\164" +
    "\150\161\151\155\162\153\165\171\174\157\205\170\207" +
    "\165\210\166\213\150\214\163\001\002\000\034\152\176" +
    "\153\203\154\201\155\206\156\174\157\177\160\205\161" +
    "\173\164\175\165\204\166\200\167\202\175\u01bd\001\002" +
    "\000\004\202\uff10\001\002\000\062\003\uff21\110\uff21\111" +
    "\uff21\112\uff21\113\uff21\114\uff21\115\uff21\116\uff21\117\uff21" +
    "\120\uff21\124\uff21\126\uff21\127\uff21\131\uff21\133\uff21\136" +
    "\uff21\137\uff21\140\uff21\141\uff21\142\uff21\177\uff21\203\uff21" +
    "\205\uff21\210\uff21\001\002\000\036\144\160\145\156\146" +
    "\154\147\164\150\161\151\155\162\153\165\171\174\157" +
    "\205\170\207\165\210\166\213\150\214\163\001\002\000" +
    "\034\152\176\153\203\154\201\155\206\156\174\157\177" +
    "\160\205\161\173\164\175\165\204\166\200\167\202\175" +
    "\u01c1\001\002\000\004\202\uff0f\001\002\000\004\175\u01c3" +
    "\001\002\000\004\202\uff1d\001\002\000\010\136\303\205" +
    "\105\210\073\001\002\000\012\003\u01c7\136\303\205\105" +
    "\210\073\001\002\000\006\003\u01d5\175\u01d6\001\002\000" +
    "\004\175\u01c8\001\002\000\004\130\u01c9\001\002\000\004" +
    "\174\u01ca\001\002\000\010\144\314\205\105\210\073\001" +
    "\002\000\004\175\u01cc\001\002\000\046\110\125\111\075" +
    "\112\116\113\110\114\103\115\102\116\114\117\072\120" +
    "\111\122\u01cd\133\130\136\100\137\120\140\117\141\071" +
    "\142\132\205\105\210\073\001\002\000\004\200\u01cf\001" +
    "\002\000\060\003\ufeb6\110\ufeb6\111\ufeb6\112\ufeb6\113\ufeb6" +
    "\114\ufeb6\115\ufeb6\116\ufeb6\117\ufeb6\120\ufeb6\124\ufeb6\127" +
    "\ufeb6\131\ufeb6\133\ufeb6\136\ufeb6\137\ufeb6\140\ufeb6\141\ufeb6" +
    "\142\ufeb6\177\ufeb6\203\ufeb6\205\ufeb6\210\ufeb6\001\002\000" +
    "\004\203\u01d0\001\002\000\056\003\uff28\110\uff28\111\uff28" +
    "\112\uff28\113\uff28\114\uff28\115\uff28\116\uff28\117\uff28\120" +
    "\uff28\124\uff28\127\uff28\131\uff28\133\uff28\136\uff28\137\uff28" +
    "\140\uff28\141\uff28\142\uff28\203\uff28\205\uff28\210\uff28\001" +
    "\002\000\056\003\122\110\125\111\075\112\116\113\110" +
    "\114\103\115\102\116\114\117\072\120\111\124\112\127" +
    "\101\131\127\133\130\136\100\137\120\140\117\141\071" +
    "\142\132\203\u01d2\205\105\210\073\001\002\000\004\201" +
    "\u01d3\001\002\000\004\123\u01d4\001\002\000\060\003\ufec3" +
    "\110\ufec3\111\ufec3\112\ufec3\113\ufec3\114\ufec3\115\ufec3\116" +
    "\ufec3\117\ufec3\120\ufec3\124\ufec3\127\ufec3\131\ufec3\133\ufec3" +
    "\136\ufec3\137\ufec3\140\ufec3\141\ufec3\142\ufec3\177\ufec3\203" +
    "\ufec3\205\ufec3\210\ufec3\001\002\000\004\130\u0225\001\002" +
    "\000\006\003\u01d7\130\u01d8\001\002\000\004\174\u021a\001" +
    "\002\000\006\003\u01d9\174\u01da\001\002\000\010\144\314" +
    "\205\105\210\073\001\002\000\012\003\u01db\144\314\205" +
    "\105\210\073\001\002\000\004\175\u0207\001\002\000\006" +
    "\003\u01dd\175\u01de\001\002\000\046\110\125\111\075\112" +
    "\116\113\110\114\103\115\102\116\114\117\072\120\111" +
    "\122\u01ff\133\130\136\100\137\120\140\117\141\071\142" +
    "\132\205\105\210\073\001\002\000\050\003\u01e1\110\125" +
    "\111\075\112\116\113\110\114\103\115\102\116\114\117" +
    "\072\120\111\122\u01df\133\130\136\100\137\120\140\117" +
    "\141\071\142\132\205\105\210\073\001\002\000\006\003" +
    "\u01e8\200\u01e9\001\002\000\060\003\ufec6\110\ufec6\111\ufec6" +
    "\112\ufec6\113\ufec6\114\ufec6\115\ufec6\116\ufec6\117\ufec6\120" +
    "\ufec6\124\ufec6\127\ufec6\131\ufec6\133\ufec6\136\ufec6\137\ufec6" +
    "\140\ufec6\141\ufec6\142\ufec6\177\ufec6\203\ufec6\205\ufec6\210" +
    "\ufec6\001\002\000\004\200\u01e2\001\002\000\004\203\u01e3" +
    "\001\002\000\056\003\uff28\110\uff28\111\uff28\112\uff28\113" +
    "\uff28\114\uff28\115\uff28\116\uff28\117\uff28\120\uff28\124\uff28" +
    "\127\uff28\131\uff28\133\uff28\136\uff28\137\uff28\140\uff28\141" +
    "\uff28\142\uff28\203\uff28\205\uff28\210\uff28\001\002\000\056" +
    "\003\122\110\125\111\075\112\116\113\110\114\103\115" +
    "\102\116\114\117\072\120\111\124\112\127\101\131\127" +
    "\133\130\136\100\137\120\140\117\141\071\142\132\203" +
    "\u01e5\205\105\210\073\001\002\000\004\201\u01e6\001\002" +
    "\000\004\123\u01e7\001\002\000\060\003\ufebd\110\ufebd\111" +
    "\ufebd\112\ufebd\113\ufebd\114\ufebd\115\ufebd\116\ufebd\117\ufebd" +
    "\120\ufebd\124\ufebd\127\ufebd\131\ufebd\133\ufebd\136\ufebd\137" +
    "\ufebd\140\ufebd\141\ufebd\142\ufebd\177\ufebd\203\ufebd\205\ufebd" +
    "\210\ufebd\001\002\000\004\203\u01fa\001\002\000\006\003" +
    "\u01eb\203\u01ea\001\002\000\056\003\uff28\110\uff28\111\uff28" +
    "\112\uff28\113\uff28\114\uff28\115\uff28\116\uff28\117\uff28\120" +
    "\uff28\124\uff28\127\uff28\131\uff28\133\uff28\136\uff28\137\uff28" +
    "\140\uff28\141\uff28\142\uff28\203\uff28\205\uff28\210\uff28\001" +
    "\002\000\056\003\uff28\110\uff28\111\uff28\112\uff28\113\uff28" +
    "\114\uff28\115\uff28\116\uff28\117\uff28\120\uff28\124\uff28\127" +
    "\uff28\131\uff28\133\uff28\136\uff28\137\uff28\140\uff28\141\uff28" +
    "\142\uff28\203\uff28\205\uff28\210\uff28\001\002\000\056\003" +
    "\122\110\125\111\075\112\116\113\110\114\103\115\102" +
    "\116\114\117\072\120\111\124\112\127\101\131\127\133" +
    "\130\136\100\137\120\140\117\141\071\142\132\203\u01ed" +
    "\205\105\210\073\001\002\000\004\201\u01ee\001\002\000" +
    "\004\123\u01ef\001\002\000\060\003\ufebb\110\ufebb\111\ufebb" +
    "\112\ufebb\113\ufebb\114\ufebb\115\ufebb\116\ufebb\117\ufebb\120" +
    "\ufebb\124\ufebb\127\ufebb\131\ufebb\133\ufebb\136\ufebb\137\ufebb" +
    "\140\ufebb\141\ufebb\142\ufebb\177\ufebb\203\ufebb\205\ufebb\210" +
    "\ufebb\001\002\000\056\003\u01f1\110\125\111\075\112\116" +
    "\113\110\114\103\115\102\116\114\117\072\120\111\124" +
    "\112\127\101\131\127\133\130\136\100\137\120\140\117" +
    "\141\071\142\132\203\u01f2\205\105\210\073\001\002\000" +
    "\064\003\uff27\110\uff27\111\uff27\112\uff27\113\uff27\114\uff27" +
    "\115\uff27\116\uff27\117\uff27\120\uff27\124\uff27\127\uff27\131" +
    "\uff27\133\uff27\136\uff27\137\uff27\140\uff27\141\uff27\142\uff27" +
    "\174\277\201\u01f8\202\276\203\uff27\205\uff27\210\uff27\001" +
    "\002\000\006\003\u01f3\201\u01f4\001\002\000\004\123\u01f7" +
    "\001\002\000\006\003\u01f5\123\u01f6\001\002\000\060\003" +
    "\ufeb8\110\ufeb8\111\ufeb8\112\ufeb8\113\ufeb8\114\ufeb8\115\ufeb8" +
    "\116\ufeb8\117\ufeb8\120\ufeb8\124\ufeb8\127\ufeb8\131\ufeb8\133" +
    "\ufeb8\136\ufeb8\137\ufeb8\140\ufeb8\141\ufeb8\142\ufeb8\177\ufeb8" +
    "\203\ufeb8\205\ufeb8\210\ufeb8\001\002\000\060\003\ufec7\110" +
    "\ufec7\111\ufec7\112\ufec7\113\ufec7\114\ufec7\115\ufec7\116\ufec7" +
    "\117\ufec7\120\ufec7\124\ufec7\127\ufec7\131\ufec7\133\ufec7\136" +
    "\ufec7\137\ufec7\140\ufec7\141\ufec7\142\ufec7\177\ufec7\203\ufec7" +
    "\205\ufec7\210\ufec7\001\002\000\060\003\ufeb9\110\ufeb9\111" +
    "\ufeb9\112\ufeb9\113\ufeb9\114\ufeb9\115\ufeb9\116\ufeb9\117\ufeb9" +
    "\120\ufeb9\124\ufeb9\127\ufeb9\131\ufeb9\133\ufeb9\136\ufeb9\137" +
    "\ufeb9\140\ufeb9\141\ufeb9\142\ufeb9\177\ufeb9\203\ufeb9\205\ufeb9" +
    "\210\ufeb9\001\002\000\004\123\u01f9\001\002\000\060\003" +
    "\ufeba\110\ufeba\111\ufeba\112\ufeba\113\ufeba\114\ufeba\115\ufeba" +
    "\116\ufeba\117\ufeba\120\ufeba\124\ufeba\127\ufeba\131\ufeba\133" +
    "\ufeba\136\ufeba\137\ufeba\140\ufeba\141\ufeba\142\ufeba\177\ufeba" +
    "\203\ufeba\205\ufeba\210\ufeba\001\002\000\056\003\uff28\110" +
    "\uff28\111\uff28\112\uff28\113\uff28\114\uff28\115\uff28\116\uff28" +
    "\117\uff28\120\uff28\124\uff28\127\uff28\131\uff28\133\uff28\136" +
    "\uff28\137\uff28\140\uff28\141\uff28\142\uff28\203\uff28\205\uff28" +
    "\210\uff28\001\002\000\056\003\122\110\125\111\075\112" +
    "\116\113\110\114\103\115\102\116\114\117\072\120\111" +
    "\124\112\127\101\131\127\133\130\136\100\137\120\140" +
    "\117\141\071\142\132\203\u01fc\205\105\210\073\001\002" +
    "\000\004\201\u01fd\001\002\000\004\123\u01fe\001\002\000" +
    "\060\003\ufebc\110\ufebc\111\ufebc\112\ufebc\113\ufebc\114\ufebc" +
    "\115\ufebc\116\ufebc\117\ufebc\120\ufebc\124\ufebc\127\ufebc\131" +
    "\ufebc\133\ufebc\136\ufebc\137\ufebc\140\ufebc\141\ufebc\142\ufebc" +
    "\177\ufebc\203\ufebc\205\ufebc\210\ufebc\001\002\000\004\200" +
    "\u0201\001\002\000\060\003\ufeb1\110\ufeb1\111\ufeb1\112\ufeb1" +
    "\113\ufeb1\114\ufeb1\115\ufeb1\116\ufeb1\117\ufeb1\120\ufeb1\124" +
    "\ufeb1\127\ufeb1\131\ufeb1\133\ufeb1\136\ufeb1\137\ufeb1\140\ufeb1" +
    "\141\ufeb1\142\ufeb1\177\ufeb1\203\ufeb1\205\ufeb1\210\ufeb1\001" +
    "\002\000\004\203\u0202\001\002\000\056\003\uff28\110\uff28" +
    "\111\uff28\112\uff28\113\uff28\114\uff28\115\uff28\116\uff28\117" +
    "\uff28\120\uff28\124\uff28\127\uff28\131\uff28\133\uff28\136\uff28" +
    "\137\uff28\140\uff28\141\uff28\142\uff28\203\uff28\205\uff28\210" +
    "\uff28\001\002\000\056\003\122\110\125\111\075\112\116" +
    "\113\110\114\103\115\102\116\114\117\072\120\111\124" +
    "\112\127\101\131\127\133\130\136\100\137\120\140\117" +
    "\141\071\142\132\203\u0204\205\105\210\073\001\002\000" +
    "\004\201\u0205\001\002\000\004\123\u0206\001\002\000\060" +
    "\003\ufebe\110\ufebe\111\ufebe\112\ufebe\113\ufebe\114\ufebe\115" +
    "\ufebe\116\ufebe\117\ufebe\120\ufebe\124\ufebe\127\ufebe\131\ufebe" +
    "\133\ufebe\136\ufebe\137\ufebe\140\ufebe\141\ufebe\142\ufebe\177" +
    "\ufebe\203\ufebe\205\ufebe\210\ufebe\001\002\000\046\110\125" +
    "\111\075\112\116\113\110\114\103\115\102\116\114\117" +
    "\072\120\111\122\u0208\133\130\136\100\137\120\140\117" +
    "\141\071\142\132\205\105\210\073\001\002\000\004\200" +
    "\u020a\001\002\000\060\003\ufeb2\110\ufeb2\111\ufeb2\112\ufeb2" +
    "\113\ufeb2\114\ufeb2\115\ufeb2\116\ufeb2\117\ufeb2\120\ufeb2\124" +
    "\ufeb2\127\ufeb2\131\ufeb2\133\ufeb2\136\ufeb2\137\ufeb2\140\ufeb2" +
    "\141\ufeb2\142\ufeb2\177\ufeb2\203\ufeb2\205\ufeb2\210\ufeb2\001" +
    "\002\000\004\203\u020b\001\002\000\056\003\uff28\110\uff28" +
    "\111\uff28\112\uff28\113\uff28\114\uff28\115\uff28\116\uff28\117" +
    "\uff28\120\uff28\124\uff28\127\uff28\131\uff28\133\uff28\136\uff28" +
    "\137\uff28\140\uff28\141\uff28\142\uff28\203\uff28\205\uff28\210" +
    "\uff28\001\002\000\056\003\122\110\125\111\075\112\116" +
    "\113\110\114\103\115\102\116\114\117\072\120\111\124" +
    "\112\127\101\131\127\133\130\136\100\137\120\140\117" +
    "\141\071\142\132\203\u020d\205\105\210\073\001\002\000" +
    "\004\201\u020e\001\002\000\004\123\u020f\001\002\000\060" +
    "\003\ufebf\110\ufebf\111\ufebf\112\ufebf\113\ufebf\114\ufebf\115" +
    "\ufebf\116\ufebf\117\ufebf\120\ufebf\124\ufebf\127\ufebf\131\ufebf" +
    "\133\ufebf\136\ufebf\137\ufebf\140\ufebf\141\ufebf\142\ufebf\177" +
    "\ufebf\203\ufebf\205\ufebf\210\ufebf\001\002\000\004\175\u0211" +
    "\001\002\000\046\110\125\111\075\112\116\113\110\114" +
    "\103\115\102\116\114\117\072\120\111\122\u0212\133\130" +
    "\136\100\137\120\140\117\141\071\142\132\205\105\210" +
    "\073\001\002\000\004\200\u0214\001\002\000\060\003\ufeb3" +
    "\110\ufeb3\111\ufeb3\112\ufeb3\113\ufeb3\114\ufeb3\115\ufeb3\116" +
    "\ufeb3\117\ufeb3\120\ufeb3\124\ufeb3\127\ufeb3\131\ufeb3\133\ufeb3" +
    "\136\ufeb3\137\ufeb3\140\ufeb3\141\ufeb3\142\ufeb3\177\ufeb3\203" +
    "\ufeb3\205\ufeb3\210\ufeb3\001\002\000\004\203\u0215\001\002" +
    "\000\056\003\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114" +
    "\uff28\115\uff28\116\uff28\117\uff28\120\uff28\124\uff28\127\uff28" +
    "\131\uff28\133\uff28\136\uff28\137\uff28\140\uff28\141\uff28\142" +
    "\uff28\203\uff28\205\uff28\210\uff28\001\002\000\056\003\122" +
    "\110\125\111\075\112\116\113\110\114\103\115\102\116" +
    "\114\117\072\120\111\124\112\127\101\131\127\133\130" +
    "\136\100\137\120\140\117\141\071\142\132\203\u0217\205" +
    "\105\210\073\001\002\000\004\201\u0218\001\002\000\004" +
    "\123\u0219\001\002\000\060\003\ufec0\110\ufec0\111\ufec0\112" +
    "\ufec0\113\ufec0\114\ufec0\115\ufec0\116\ufec0\117\ufec0\120\ufec0" +
    "\124\ufec0\127\ufec0\131\ufec0\133\ufec0\136\ufec0\137\ufec0\140" +
    "\ufec0\141\ufec0\142\ufec0\177\ufec0\203\ufec0\205\ufec0\210\ufec0" +
    "\001\002\000\010\144\314\205\105\210\073\001\002\000" +
    "\004\175\u021c\001\002\000\046\110\125\111\075\112\116" +
    "\113\110\114\103\115\102\116\114\117\072\120\111\122" +
    "\u021d\133\130\136\100\137\120\140\117\141\071\142\132" +
    "\205\105\210\073\001\002\000\004\200\u021f\001\002\000" +
    "\060\003\ufeb4\110\ufeb4\111\ufeb4\112\ufeb4\113\ufeb4\114\ufeb4" +
    "\115\ufeb4\116\ufeb4\117\ufeb4\120\ufeb4\124\ufeb4\127\ufeb4\131" +
    "\ufeb4\133\ufeb4\136\ufeb4\137\ufeb4\140\ufeb4\141\ufeb4\142\ufeb4" +
    "\177\ufeb4\203\ufeb4\205\ufeb4\210\ufeb4\001\002\000\004\203" +
    "\u0220\001\002\000\056\003\uff28\110\uff28\111\uff28\112\uff28" +
    "\113\uff28\114\uff28\115\uff28\116\uff28\117\uff28\120\uff28\124" +
    "\uff28\127\uff28\131\uff28\133\uff28\136\uff28\137\uff28\140\uff28" +
    "\141\uff28\142\uff28\203\uff28\205\uff28\210\uff28\001\002\000" +
    "\056\003\122\110\125\111\075\112\116\113\110\114\103" +
    "\115\102\116\114\117\072\120\111\124\112\127\101\131" +
    "\127\133\130\136\100\137\120\140\117\141\071\142\132" +
    "\203\u0222\205\105\210\073\001\002\000\004\201\u0223\001" +
    "\002\000\004\123\u0224\001\002\000\060\003\ufec1\110\ufec1" +
    "\111\ufec1\112\ufec1\113\ufec1\114\ufec1\115\ufec1\116\ufec1\117" +
    "\ufec1\120\ufec1\124\ufec1\127\ufec1\131\ufec1\133\ufec1\136\ufec1" +
    "\137\ufec1\140\ufec1\141\ufec1\142\ufec1\177\ufec1\203\ufec1\205" +
    "\ufec1\210\ufec1\001\002\000\004\174\u0226\001\002\000\010" +
    "\144\314\205\105\210\073\001\002\000\004\175\u0228\001" +
    "\002\000\046\110\125\111\075\112\116\113\110\114\103" +
    "\115\102\116\114\117\072\120\111\122\u0229\133\130\136" +
    "\100\137\120\140\117\141\071\142\132\205\105\210\073" +
    "\001\002\000\004\200\u022b\001\002\000\060\003\ufeb5\110" +
    "\ufeb5\111\ufeb5\112\ufeb5\113\ufeb5\114\ufeb5\115\ufeb5\116\ufeb5" +
    "\117\ufeb5\120\ufeb5\124\ufeb5\127\ufeb5\131\ufeb5\133\ufeb5\136" +
    "\ufeb5\137\ufeb5\140\ufeb5\141\ufeb5\142\ufeb5\177\ufeb5\203\ufeb5" +
    "\205\ufeb5\210\ufeb5\001\002\000\004\203\u022c\001\002\000" +
    "\056\003\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114\uff28" +
    "\115\uff28\116\uff28\117\uff28\120\uff28\124\uff28\127\uff28\131" +
    "\uff28\133\uff28\136\uff28\137\uff28\140\uff28\141\uff28\142\uff28" +
    "\203\uff28\205\uff28\210\uff28\001\002\000\056\003\122\110" +
    "\125\111\075\112\116\113\110\114\103\115\102\116\114" +
    "\117\072\120\111\124\112\127\101\131\127\133\130\136" +
    "\100\137\120\140\117\141\071\142\132\203\u022e\205\105" +
    "\210\073\001\002\000\004\201\u022f\001\002\000\004\123" +
    "\u0230\001\002\000\060\003\ufec2\110\ufec2\111\ufec2\112\ufec2" +
    "\113\ufec2\114\ufec2\115\ufec2\116\ufec2\117\ufec2\120\ufec2\124" +
    "\ufec2\127\ufec2\131\ufec2\133\ufec2\136\ufec2\137\ufec2\140\ufec2" +
    "\141\ufec2\142\ufec2\177\ufec2\203\ufec2\205\ufec2\210\ufec2\001" +
    "\002\000\004\175\u0232\001\002\000\004\130\u0233\001\002" +
    "\000\004\174\u0234\001\002\000\010\144\314\205\105\210" +
    "\073\001\002\000\004\175\u0236\001\002\000\046\110\125" +
    "\111\075\112\116\113\110\114\103\115\102\116\114\117" +
    "\072\120\111\122\u0237\133\130\136\100\137\120\140\117" +
    "\141\071\142\132\205\105\210\073\001\002\000\004\200" +
    "\u0239\001\002\000\060\003\ufeb7\110\ufeb7\111\ufeb7\112\ufeb7" +
    "\113\ufeb7\114\ufeb7\115\ufeb7\116\ufeb7\117\ufeb7\120\ufeb7\124" +
    "\ufeb7\127\ufeb7\131\ufeb7\133\ufeb7\136\ufeb7\137\ufeb7\140\ufeb7" +
    "\141\ufeb7\142\ufeb7\177\ufeb7\203\ufeb7\205\ufeb7\210\ufeb7\001" +
    "\002\000\004\203\u023a\001\002\000\056\003\uff28\110\uff28" +
    "\111\uff28\112\uff28\113\uff28\114\uff28\115\uff28\116\uff28\117" +
    "\uff28\120\uff28\124\uff28\127\uff28\131\uff28\133\uff28\136\uff28" +
    "\137\uff28\140\uff28\141\uff28\142\uff28\203\uff28\205\uff28\210" +
    "\uff28\001\002\000\056\003\122\110\125\111\075\112\116" +
    "\113\110\114\103\115\102\116\114\117\072\120\111\124" +
    "\112\127\101\131\127\133\130\136\100\137\120\140\117" +
    "\141\071\142\132\203\u023c\205\105\210\073\001\002\000" +
    "\004\201\u023d\001\002\000\004\123\u023e\001\002\000\060" +
    "\003\ufec4\110\ufec4\111\ufec4\112\ufec4\113\ufec4\114\ufec4\115" +
    "\ufec4\116\ufec4\117\ufec4\120\ufec4\124\ufec4\127\ufec4\131\ufec4" +
    "\133\ufec4\136\ufec4\137\ufec4\140\ufec4\141\ufec4\142\ufec4\177" +
    "\ufec4\203\ufec4\205\ufec4\210\ufec4\001\002\000\056\003\122" +
    "\110\125\111\075\112\116\113\110\114\103\115\102\116" +
    "\114\117\072\120\111\124\112\127\101\131\127\133\130" +
    "\136\100\137\120\140\117\141\071\142\132\203\u0240\205" +
    "\105\210\073\001\002\000\004\201\u0241\001\002\000\004" +
    "\123\u0242\001\002\000\062\003\ufee3\110\ufee3\111\ufee3\112" +
    "\ufee3\113\ufee3\114\ufee3\115\ufee3\116\ufee3\117\ufee3\120\ufee3" +
    "\124\ufee3\126\ufee3\127\ufee3\131\ufee3\133\ufee3\136\ufee3\137" +
    "\ufee3\140\ufee3\141\ufee3\142\ufee3\177\ufee3\203\ufee3\205\ufee3" +
    "\210\ufee3\001\002\000\062\003\ufece\110\ufece\111\ufece\112" +
    "\ufece\113\ufece\114\ufece\115\ufece\116\ufece\117\ufece\120\ufece" +
    "\124\ufece\126\u0114\127\ufece\131\ufece\133\ufece\136\ufece\137" +
    "\ufece\140\ufece\141\ufece\142\ufece\177\ufece\203\ufece\205\ufece" +
    "\210\ufece\001\002\000\060\003\ufef0\110\ufef0\111\ufef0\112" +
    "\ufef0\113\ufef0\114\ufef0\115\ufef0\116\ufef0\117\ufef0\120\ufef0" +
    "\124\ufef0\127\ufef0\131\ufef0\133\ufef0\136\ufef0\137\ufef0\140" +
    "\ufef0\141\ufef0\142\ufef0\177\ufef0\203\ufef0\205\ufef0\210\ufef0" +
    "\001\002\000\006\205\uff00\210\uff00\001\002\000\006\205" +
    "\105\210\073\001\002\000\012\003\u0109\171\u0249\202\uff07" +
    "\206\u0108\001\002\000\004\202\uff0e\001\002\000\036\144" +
    "\160\145\156\146\154\147\164\150\161\151\155\162\153" +
    "\165\171\174\157\205\170\207\165\210\166\213\150\214" +
    "\163\001\002\000\034\152\176\153\203\154\201\155\206" +
    "\156\174\157\177\160\205\161\173\164\175\165\204\166" +
    "\200\167\202\202\uff08\001\002\000\036\144\160\145\156" +
    "\146\154\147\164\150\161\151\155\162\153\165\171\174" +
    "\157\205\170\207\165\210\166\213\150\214\163\001\002" +
    "\000\034\152\176\153\203\154\201\155\206\156\174\157" +
    "\177\160\205\161\173\164\175\165\204\166\200\167\202" +
    "\175\u024d\001\002\000\004\202\uff12\001\002\000\062\003" +
    "\uff1f\110\uff1f\111\uff1f\112\uff1f\113\uff1f\114\uff1f\115\uff1f" +
    "\116\uff1f\117\uff1f\120\uff1f\124\uff1f\126\uff1f\127\uff1f\131" +
    "\uff1f\133\uff1f\136\uff1f\137\uff1f\140\uff1f\141\uff1f\142\uff1f" +
    "\177\uff1f\203\uff1f\205\uff1f\210\uff1f\001\002\000\036\144" +
    "\160\145\156\146\154\147\164\150\161\151\155\162\153" +
    "\165\171\174\157\205\170\207\165\210\166\213\150\214" +
    "\163\001\002\000\034\152\176\153\203\154\201\155\206" +
    "\156\174\157\177\160\205\161\173\164\175\165\204\166" +
    "\200\167\202\175\u0251\001\002\000\004\202\uff1b\001\002" +
    "\000\056\003\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114" +
    "\uff28\115\uff28\116\uff28\117\uff28\120\uff28\124\uff28\127\uff28" +
    "\131\uff28\133\uff28\136\uff28\137\uff28\140\uff28\141\uff28\142" +
    "\uff28\177\uff28\205\uff28\210\uff28\001\002\000\056\003\122" +
    "\110\125\111\075\112\116\113\110\114\103\115\102\116" +
    "\114\117\072\120\111\124\112\127\101\131\127\133\130" +
    "\136\100\137\120\140\117\141\071\142\132\177\u0254\205" +
    "\105\210\073\001\002\000\012\003\uff2d\134\uff2d\135\uff2d" +
    "\163\uff2d\001\002\000\004\176\u0256\001\002\000\056\003" +
    "\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114\uff28\115\uff28" +
    "\116\uff28\117\uff28\120\uff28\124\uff28\127\uff28\131\uff28\133" +
    "\uff28\136\uff28\137\uff28\140\uff28\141\uff28\142\uff28\177\uff28" +
    "\205\uff28\210\uff28\001\002\000\056\003\122\110\125\111" +
    "\075\112\116\113\110\114\103\115\102\116\114\117\072" +
    "\120\111\124\112\127\101\131\127\133\130\136\100\137" +
    "\120\140\117\141\071\142\132\177\u0258\205\105\210\073" +
    "\001\002\000\012\003\uff2e\134\uff2e\135\uff2e\163\uff2e\001" +
    "\002\000\004\175\u025a\001\002\000\004\176\u025b\001\002" +
    "\000\056\003\uff28\110\uff28\111\uff28\112\uff28\113\uff28\114" +
    "\uff28\115\uff28\116\uff28\117\uff28\120\uff28\124\uff28\127\uff28" +
    "\131\uff28\133\uff28\136\uff28\137\uff28\140\uff28\141\uff28\142" +
    "\uff28\177\uff28\205\uff28\210\uff28\001\002\000\056\003\122" +
    "\110\125\111\075\112\116\113\110\114\103\115\102\116" +
    "\114\117\072\120\111\124\112\127\101\131\127\133\130" +
    "\136\100\137\120\140\117\141\071\142\132\177\u025d\205" +
    "\105\210\073\001\002\000\012\003\uff2f\134\uff2f\135\uff2f" +
    "\163\uff2f\001\002\000\004\175\u025f\001\002\000\004\176" +
    "\uff2a\001\002\000\056\003\uff28\110\uff28\111\uff28\112\uff28" +
    "\113\uff28\114\uff28\115\uff28\116\uff28\117\uff28\120\uff28\124" +
    "\uff28\127\uff28\131\uff28\133\uff28\136\uff28\137\uff28\140\uff28" +
    "\141\uff28\142\uff28\177\uff28\205\uff28\210\uff28\001\002\000" +
    "\056\003\122\110\125\111\075\112\116\113\110\114\103" +
    "\115\102\116\114\117\072\120\111\124\112\127\101\131" +
    "\127\133\130\136\100\137\120\140\117\141\071\142\132" +
    "\177\u0262\205\105\210\073\001\002\000\012\003\uff30\134" +
    "\uff30\135\uff30\163\uff30\001\002\000\014\003\uffd0\154\uffd0" +
    "\163\uffd0\205\uffd0\210\uffd0\001\002\000\004\017\u0265\001" +
    "\002\000\004\156\u0266\001\002\000\014\003\uffba\154\uffba" +
    "\163\uffba\205\uffba\210\uffba\001\002\000\012\154\u026d\163" +
    "\u026c\205\046\210\042\001\002\000\012\154\uffa0\163\uffa0" +
    "\205\uffa0\210\uffa0\001\002\000\014\003\uffcd\154\uffcd\163" +
    "\uffcd\205\uffcd\210\uffcd\001\002\000\012\154\uffa3\163\uffa3" +
    "\205\uffa3\210\uffa3\001\002\000\012\154\uffa1\163\uffa1\205" +
    "\uffa1\210\uffa1\001\002\000\004\022\u02c0\001\002\000\012" +
    "\011\u027d\020\u027e\022\u027f\023\u0280\001\002\000\012\154" +
    "\uffa2\163\uffa2\205\uffa2\210\uffa2\001\002\000\012\154\uffa2" +
    "\163\uffa2\205\uffa2\210\uffa2\001\002\000\012\154\uffa2\163" +
    "\uffa2\205\uffa2\210\uffa2\001\002\000\012\154\u026d\163\u0273" +
    "\205\046\210\042\001\002\000\012\154\uff9d\163\uff9d\205" +
    "\uff9d\210\uff9d\001\002\000\004\011\u0274\001\002\000\004" +
    "\156\u0275\001\002\000\014\003\uffbf\154\uffbf\163\uffbf\205" +
    "\uffbf\210\uffbf\001\002\000\012\154\u026d\163\u0277\205\046" +
    "\210\042\001\002\000\004\023\u0279\001\002\000\012\154" +
    "\uff9e\163\uff9e\205\uff9e\210\uff9e\001\002\000\004\156\u027a" +
    "\001\002\000\014\003\uffb7\154\uffb7\163\uffb7\205\uffb7\210" +
    "\uffb7\001\002\000\012\154\u026d\163\u026c\205\046\210\042" +
    "\001\002\000\012\154\uff9f\163\uff9f\205\uff9f\210\uff9f\001" +
    "\002\000\010\003\uff8b\156\uff8b\176\uff8b\001\002\000\004" +
    "\156\u02ba\001\002\000\010\003\uff61\156\uff61\176\uff61\001" +
    "\002\000\010\003\uff5d\156\uff5d\176\uff5d\001\002\000\010" +
    "\003\u0283\156\u0282\176\u0286\001\002\000\012\154\uffc0\163" +
    "\uffc0\205\uffc0\210\uffc0\001\002\000\010\003\uff5c\156\uff5c" +
    "\176\uff5c\001\002\000\010\003\uff5b\156\uff5b\176\uff5b\001" +
    "\002\000\010\003\uff5e\156\uff5e\176\uff5e\001\002\000\014" +
    "\027\u0288\030\u028b\031\u028a\032\u0289\034\u0287\001\002\000" +
    "\004\171\u02b2\001\002\000\004\171\u029e\001\002\000\004" +
    "\171\u0297\001\002\000\004\171\u028f\001\002\000\004\171" +
    "\u028c\001\002\000\004\067\u028d\001\002\000\004\177\u028e" +
    "\001\002\000\010\003\uff5a\156\uff5a\176\uff5a\001\002\000" +
    "\014\071\u0293\072\u0294\073\u0291\074\u0292\075\u0295\001\002" +
    "\000\004\177\u0296\001\002\000\004\177\uff42\001\002\000" +
    "\004\177\uff41\001\002\000\004\177\uff44\001\002\000\004" +
    "\177\uff43\001\002\000\004\177\uff40\001\002\000\010\003" +
    "\uff59\156\uff59\176\uff59\001\002\000\012\076\u0298\077\u029a" +
    "\100\u029b\101\u029c\001\002\000\004\177\uff3f\001\002\000" +
    "\004\177\u029d\001\002\000\004\177\uff3e\001\002\000\004" +
    "\177\uff3d\001\002\000\004\177\uff3c\001\002\000\010\003" +
    "\uff58\156\uff58\176\uff58\001\002\000\044\046\u02a3\047\u02a4" +
    "\050\u02a2\051\u02a6\052\u02a5\053\u02a8\054\u02af\055\u02a1\056" +
    "\u02a7\057\u02aa\060\u029f\061\u02ae\062\u02b0\063\u02a9\064\u02ab" +
    "\065\u02a0\066\u02ac\001\002\000\004\177\uff4b\001\002\000" +
    "\004\177\uff46\001\002\000\004\177\uff4e\001\002\000\004" +
    "\177\uff53\001\002\000\004\177\uff55\001\002\000\004\177" +
    "\uff54\001\002\000\004\177\uff51\001\002\000\004\177\uff52" +
    "\001\002\000\004\177\uff4d\001\002\000\004\177\uff50\001" +
    "\002\000\004\177\uff48\001\002\000\004\177\uff4c\001\002" +
    "\000\004\177\uff47\001\002\000\004\177\uff45\001\002\000" +
    "\004\177\u02b1\001\002\000\004\177\uff4a\001\002\000\004" +
    "\177\uff4f\001\002\000\004\177\uff49\001\002\000\010\003" +
    "\uff56\156\uff56\176\uff56\001\002\000\004\207\u02b3\001\002" +
    "\000\004\177\u02b4\001\002\000\010\003\uff57\156\uff57\176" +
    "\uff57\001\002\000\010\003\u02b7\156\u02b6\176\u0286\001\002" +
    "\000\012\154\uffc1\163\uffc1\205\uffc1\210\uffc1\001\002\000" +
    "\010\003\uff60\156\uff60\176\uff60\001\002\000\010\003\uff5f" +
    "\156\uff5f\176\uff5f\001\002\000\010\003\uff62\156\uff62\176" +
    "\uff62\001\002\000\014\003\uffc3\154\uffc3\163\uffc3\205\uffc3" +
    "\210\uffc3\001\002\000\010\003\u02be\156\u02bc\176\u0286\001" +
    "\002\000\012\154\uffc9\163\uffc9\205\uffc9\210\uffc9\001\002" +
    "\000\010\003\uff8c\156\uff8c\176\uff8c\001\002\000\010\003" +
    "\uff8a\156\uff8a\176\uff8a\001\002\000\010\003\uff89\156\uff89" +
    "\176\uff89\001\002\000\004\156\u02c1\001\002\000\014\003" +
    "\uffb8\154\uffb8\163\uffb8\205\uffb8\210\uffb8\001\002\000\012" +
    "\154\u026d\163\u0273\205\046\210\042\001\002\000\014\003" +
    "\uffd5\154\uffd5\163\uffd5\205\uffd5\210\uffd5\001\002\000\010" +
    "\163\u02c7\205\046\210\042\001\002\000\010\163\uffb3\205" +
    "\uffb3\210\uffb3\001\002\000\014\003\uffce\154\uffce\163\uffce" +
    "\205\uffce\210\uffce\001\002\000\004\021\u02c8\001\002\000" +
    "\004\156\u02c9\001\002\000\014\003\uffb9\154\uffb9\163\uffb9" +
    "\205\uffb9\210\uffb9\001\002\000\010\003\uff67\156\uff67\176" +
    "\uff67\001\002\000\010\003\uff87\156\uff87\176\uff87\001\002" +
    "\000\004\156\u0321\001\002\000\010\003\uff75\156\uff75\176" +
    "\uff75\001\002\000\010\003\uff79\156\uff79\176\uff79\001\002" +
    "\000\010\003\uff82\156\uff82\176\uff82\001\002\000\010\003" +
    "\uff6f\156\uff6f\176\uff6f\001\002\000\010\003\u02d3\156\u02d2" +
    "\176\u02d5\001\002\000\004\163\uffc4\001\002\000\010\003" +
    "\uff6e\156\uff6e\176\uff6e\001\002\000\010\003\uff70\156\uff70" +
    "\176\uff70\001\002\000\014\034\u02d6\041\u02d9\042\u02d8\043" +
    "\u02da\044\u02d7\001\002\000\004\171\u02ec\001\002\000\004" +
    "\171\u02e6\001\002\000\004\171\u02e3\001\002\000\004\171" +
    "\u02e0\001\002\000\004\171\u02db\001\002\000\006\067\u02de" +
    "\070\u02dd\001\002\000\004\177\u02df\001\002\000\004\177" +
    "\uff38\001\002\000\004\177\uff39\001\002\000\010\003\uff6b" +
    "\156\uff6b\176\uff6b\001\002\000\004\214\u02e1\001\002\000" +
    "\004\177\u02e2\001\002\000\010\003\uff6d\156\uff6d\176\uff6d" +
    "\001\002\000\006\067\u02de\070\u02dd\001\002\000\004\177" +
    "\u02e5\001\002\000\010\003\uff6c\156\uff6c\176\uff6c\001\002" +
    "\000\010\207\u02e9\213\u02e7\214\u02ea\001\002\000\004\177" +
    "\uff93\001\002\000\004\177\u02eb\001\002\000\004\177\uff91" +
    "\001\002\000\004\177\uff92\001\002\000\010\003\uff6a\156" +
    "\uff6a\176\uff6a\001\002\000\004\207\u02ed\001\002\000\004" +
    "\177\u02ee\001\002\000\010\003\uff69\156\uff69\176\uff69\001" +
    "\002\000\010\003\u02f1\156\u02f0\176\u02f3\001\002\000\010" +
    "\163\uffc7\205\uffc7\210\uffc7\001\002\000\010\003\uff81\156" +
    "\uff81\176\uff81\001\002\000\010\003\uff83\156\uff83\176\uff83" +
    "\001\002\000\016\030\u02f8\031\u02f9\032\u02f7\034\u02f4\036" +
    "\u02f6\037\u02f5\001\002\000\004\171\u0309\001\002\000\004" +
    "\171\u0306\001\002\000\004\171\u0303\001\002\000\004\171" +
    "\u0300\001\002\000\004\171\u02fd\001\002\000\004\171\u02fa" +
    "\001\002\000\014\071\u0293\072\u0294\073\u0291\074\u0292\075" +
    "\u0295\001\002\000\004\177\u02fc\001\002\000\010\003\uff7f" +
    "\156\uff7f\176\uff7f\001\002\000\004\067\u02fe\001\002\000" +
    "\004\177\u02ff\001\002\000\010\003\uff80\156\uff80\176\uff80" +
    "\001\002\000\012\076\u0298\077\u029a\100\u029b\101\u029c\001" +
    "\002\000\004\177\u0302\001\002\000\010\003\uff7e\156\uff7e" +
    "\176\uff7e\001\002\000\004\215\u0304\001\002\000\004\177" +
    "\u0305\001\002\000\010\003\uff7c\156\uff7c\176\uff7c\001\002" +
    "\000\004\215\u0307\001\002\000\004\177\u0308\001\002\000" +
    "\010\003\uff7b\156\uff7b\176\uff7b\001\002\000\004\207\u030a" +
    "\001\002\000\004\177\u030b\001\002\000\010\003\uff7d\156" +
    "\uff7d\176\uff7d\001\002\000\010\003\u030e\156\u030d\176\u0286" +
    "\001\002\000\006\154\uffc6\163\uffc6\001\002\000\010\003" +
    "\uff78\156\uff78\176\uff78\001\002\000\010\003\uff77\156\uff77" +
    "\176\uff77\001\002\000\010\003\uff7a\156\uff7a\176\uff7a\001" +
    "\002\000\010\003\u0313\156\u0312\176\u0316\001\002\000\012" +
    "\154\uffc5\163\uffc5\205\uffc5\210\uffc5\001\002\000\010\003" +
    "\uff74\156\uff74\176\uff74\001\002\000\010\003\uff73\156\uff73" +
    "\176\uff73\001\002\000\010\003\uff76\156\uff76\176\uff76\001" +
    "\002\000\020\026\u0318\027\u0288\030\u028b\031\u028a\032\u0289" +
    "\034\u0287\040\u0317\001\002\000\004\171\u031c\001\002\000" +
    "\004\171\u0319\001\002\000\044\046\u02a3\047\u02a4\050\u02a2" +
    "\051\u02a6\052\u02a5\053\u02a8\054\u02af\055\u02a1\056\u02a7\057" +
    "\u02aa\060\u029f\061\u02ae\062\u02b0\063\u02a9\064\u02ab\065\u02a0" +
    "\066\u02ac\001\002\000\004\177\u031b\001\002\000\010\003" +
    "\uff71\156\uff71\176\uff71\001\002\000\006\106\u031e\107\u031d" +
    "\001\002\000\004\177\uff3a\001\002\000\004\177\uff3b\001" +
    "\002\000\004\177\u0320\001\002\000\010\003\uff72\156\uff72" +
    "\176\uff72\001\002\000\012\003\uffe5\134\uffe5\135\uffe5\163" +
    "\uffe5\001\002\000\010\003\u0325\156\u0324\176\u0327\001\002" +
    "\000\010\003\uff88\156\uff88\176\uff88\001\002\000\010\163" +
    "\uffc8\205\uffc8\210\uffc8\001\002\000\010\003\uff86\156\uff86" +
    "\176\uff86\001\002\000\010\003\uff84\156\uff84\176\uff84\001" +
    "\002\000\016\027\u0288\030\u028b\031\u028a\032\u0289\033\u0328" +
    "\034\u0287\001\002\000\004\171\u0329\001\002\000\012\102" +
    "\u032c\103\u032e\104\u032a\105\u032d\001\002\000\004\177\uff35" +
    "\001\002\000\004\177\u032f\001\002\000\004\177\uff37\001" +
    "\002\000\004\177\uff34\001\002\000\004\177\uff36\001\002" +
    "\000\010\003\uff85\156\uff85\176\uff85\001\002\000\010\003" +
    "\u0332\156\u0331\176\u0335\001\002\000\010\163\uffc2\205\uffc2" +
    "\210\uffc2\001\002\000\010\003\uff66\156\uff66\176\uff66\001" +
    "\002\000\010\003\uff65\156\uff65\176\uff65\001\002\000\010" +
    "\003\uff68\156\uff68\176\uff68\001\002\000\020\026\u0336\027" +
    "\u0288\030\u028b\031\u028a\032\u0289\034\u0287\045\u0337\001\002" +
    "\000\004\171\u033b\001\002\000\004\171\u0338\001\002\000" +
    "\010\207\u02e9\213\u02e7\214\u02ea\001\002\000\004\177\u033a" +
    "\001\002\000\010\003\uff64\156\uff64\176\uff64\001\002\000" +
    "\044\046\u02a3\047\u02a4\050\u02a2\051\u02a6\052\u02a5\053\u02a8" +
    "\054\u02af\055\u02a1\056\u02a7\057\u02aa\060\u029f\061\u02ae\062" +
    "\u02b0\063\u02a9\064\u02ab\065\u02a0\066\u02ac\001\002\000\004" +
    "\177\u033d\001\002\000\010\003\uff63\156\uff63\176\uff63\001" +
    "\002\000\010\163\u033f\205\046\210\042\001\002\000\004" +
    "\013\u0341\001\002\000\014\003\uffd3\154\uffd3\163\uffd3\205" +
    "\uffd3\210\uffd3\001\002\000\004\156\u0342\001\002\000\014" +
    "\003\uffbd\154\uffbd\163\uffbd\205\uffbd\210\uffbd\001\002\000" +
    "\004\156\u0344\001\002\000\006\154\uffee\163\uffee\001\002" +
    "\000\012\154\035\163\u034c\205\046\210\042\001\002\000" +
    "\012\154\uffa4\163\uffa4\205\uffa4\210\uffa4\001\002\000\012" +
    "\154\uffa2\163\uffa2\205\uffa2\210\uffa2\001\002\000\006\154" +
    "\uffb5\163\uffb5\001\002\000\010\163\uffb2\205\uffb2\210\uffb2" +
    "\001\002\000\012\154\uffa9\163\uffa9\205\uffa9\210\uffa9\001" +
    "\002\000\012\154\uffb0\163\uffb0\205\uffb0\210\uffb0\001\002" +
    "\000\004\016\u0360\001\002\000\012\154\uffb1\163\uffb1\205" +
    "\uffb1\210\uffb1\001\002\000\014\003\uffd1\154\uffd1\163\uffd1" +
    "\205\uffd1\210\uffd1\001\002\000\010\163\uffb2\205\uffb2\210" +
    "\uffb2\001\002\000\010\163\uffb2\205\uffb2\210\uffb2\001\002" +
    "\000\012\154\uffa2\163\uffa2\205\uffa2\210\uffa2\001\002\000" +
    "\012\154\uffa2\163\uffa2\205\uffa2\210\uffa2\001\002\000\004" +
    "\163\u0264\001\002\000\012\003\uff31\134\uff31\135\uff31\163" +
    "\uff31\001\002\000\012\003\053\134\052\135\055\163\057" +
    "\001\002\000\012\154\uffa5\163\uffa5\205\uffa5\210\uffa5\001" +
    "\002\000\012\154\uffaa\163\uffaa\205\uffaa\210\uffaa\001\002" +
    "\000\012\154\u026d\163\u026c\205\046\210\042\001\002\000" +
    "\012\154\uffa7\163\uffa7\205\uffa7\210\uffa7\001\002\000\012" +
    "\154\u026d\163\u0273\205\046\210\042\001\002\000\012\154" +
    "\uffaf\163\uffaf\205\uffaf\210\uffaf\001\002\000\010\163\u02c7" +
    "\205\046\210\042\001\002\000\012\154\uffa8\163\uffa8\205" +
    "\uffa8\210\uffa8\001\002\000\010\163\u033f\205\046\210\042" +
    "\001\002\000\012\154\uffad\163\uffad\205\uffad\210\uffad\001" +
    "\002\000\004\156\u0361\001\002\000\014\003\uffbb\154\uffbb" +
    "\163\uffbb\205\uffbb\210\uffbb\001\002\000\012\154\035\163" +
    "\u034c\205\046\210\042\001\002\000\012\154\uffab\163\uffab" +
    "\205\uffab\210\uffab\001\002\000\010\163\u0366\205\046\210" +
    "\042\001\002\000\012\154\uffae\163\uffae\205\uffae\210\uffae" +
    "\001\002\000\004\012\u0367\001\002\000\004\156\u0368\001" +
    "\002\000\014\003\uffbe\154\uffbe\163\uffbe\205\uffbe\210\uffbe" +
    "\001\002\000\006\154\u036a\163\u036c\001\002\000\004\015" +
    "\u0370\001\002\000\006\154\uffb6\163\uffb6\001\002\000\004" +
    "\014\u036e\001\002\000\012\154\uffac\163\uffac\205\uffac\210" +
    "\uffac\001\002\000\004\156\u036f\001\002\000\014\003\uffbc" +
    "\154\uffbc\163\uffbc\205\uffbc\210\uffbc\001\002\000\004\156" +
    "\u0371\001\002\000\010\163\uffb2\205\uffb2\210\uffb2\001\002" +
    "\000\010\163\u0373\205\046\210\042\001\002\000\004\015" +
    "\u0374\001\002\000\004\156\u0375\001\002\000\006\154\uffb4" +
    "\163\uffb4\001\002\000\012\154\u026d\163\u0277\205\046\210" +
    "\042\001\002\000\012\154\uffa6\163\uffa6\205\uffa6\210\uffa6" +
    "\001\002\000\010\163\u0366\205\046\210\042\001\002\000" +
    "\014\003\uffd4\154\uffd4\163\uffd4\205\uffd4\210\uffd4\001\002" +
    "\000\006\154\u036a\163\u036c\001\002\000\014\003\uffd2\154" +
    "\uffd2\163\uffd2\205\uffd2\210\uffd2\001\002\000\012\154\u026d" +
    "\163\u0277\205\046\210\042\001\002\000\014\003\uffcc\154" +
    "\uffcc\163\uffcc\205\uffcc\210\uffcc\001\002\000\010\003\uff8f" +
    "\156\uff8f\176\uff8f\001\002\000\010\003\u0381\156\u0380\176" +
    "\u0383\001\002\000\014\003\ufff0\154\ufff0\163\ufff0\205\ufff0" +
    "\210\ufff0\001\002\000\010\003\uff8e\156\uff8e\176\uff8e\001" +
    "\002\000\010\003\uff90\156\uff90\176\uff90\001\002\000\004" +
    "\026\u0384\001\002\000\004\171\u0385\001\002\000\044\046" +
    "\u02a3\047\u02a4\050\u02a2\051\u02a6\052\u02a5\053\u02a8\054\u02af" +
    "\055\u02a1\056\u02a7\057\u02aa\060\u029f\061\u02ae\062\u02b0\063" +
    "\u02a9\064\u02ab\065\u02a0\066\u02ac\001\002\000\004\177\u0387" +
    "\001\002\000\010\003\uff8d\156\uff8d\176\uff8d\001\002\000" +
    "\006\154\u038a\163\u038d\001\002\000\004\010\u037e\001\002" +
    "\000\004\024\u02cc\001\002\000\004\163\u038d\001\002\000" +
    "\004\002\ufffb\001\002\000\004\004\u038e\001\002\000\004" +
    "\156\u038f\001\002\000\004\002\ufff5\001\002\000\004\002" +
    "\ufff7\001\002\000\004\163\u038d\001\002\000\004\002\ufffd" +
    "\001\002\000\004\002\ufffa\001\002\000\012\003\u0395\134" +
    "\052\135\055\163\u0396\001\002\000\004\174\u0259\001\002" +
    "\000\004\024\u0397\001\002\000\004\156\u0398\001\002\000" +
    "\010\003\uff33\154\uff33\163\uff33\001\002\000\004\156\u039a" +
    "\001\002\000\010\003\ufff3\154\ufff3\163\ufff3\001\002\000" +
    "\004\005\u0399\001\002\000\006\003\020\154\022\001\002" +
    "\000\006\154\u038a\163\u038d\001\002\000\006\003\020\154" +
    "\u0389\001\002\000\006\154\u038a\163\u038d\001\002\000\004" +
    "\163\u038d\001\002\000\004\002\ufff9\001\002\000\004\002" +
    "\ufff6\001\002\000\004\163\u038d\001\002\000\004\002\ufffc" +
    "\001\002\000\004\002\ufff8\001\002\000\010\003\u03a8\154" +
    "\u03a9\163\u03ad\001\002\000\006\003\u03c7\163\u03c8\001\002" +
    "\000\010\003\uffeb\154\uffeb\163\uffeb\001\002\000\010\006" +
    "\u03bb\007\u03ba\024\u02cc\001\002\000\012\003\uffdd\163\uffdd" +
    "\205\uffdd\210\uffdd\001\002\000\010\003\uffed\154\uffed\163" +
    "\uffed\001\002\000\006\003\ufff4\154\ufff4\001\002\000\004" +
    "\005\u03b1\001\002\000\012\003\uff31\134\uff31\135\uff31\163" +
    "\uff31\001\002\000\012\003\053\134\052\135\055\163\057" +
    "\001\002\000\010\003\uffe8\154\uffe8\163\uffe8\001\002\000" +
    "\004\156\u03b2\001\002\000\006\003\ufff2\154\ufff2\001\002" +
    "\000\012\003\u03b5\163\u03b7\205\046\210\042\001\002\000" +
    "\012\003\uffde\163\uffde\205\uffde\210\uffde\001\002\000\010" +
    "\003\uffe1\154\uffe1\163\uffe1\001\002\000\010\003\uffe9\154" +
    "\uffe9\163\uffe9\001\002\000\004\006\u03b8\001\002\000\004" +
    "\156\u03b9\001\002\000\010\003\uffe2\154\uffe2\163\uffe2\001" +
    "\002\000\010\003\uff96\156\uff96\176\uff96\001\002\000\004" +
    "\156\u03bc\001\002\000\012\003\uffe6\163\uffe6\205\uffe6\210" +
    "\uffe6\001\002\000\010\003\u03c0\156\u03bf\176\u03c1\001\002" +
    "\000\010\003\uff97\156\uff97\176\uff97\001\002\000\006\003" +
    "\uffe7\163\uffe7\001\002\000\010\003\uff95\156\uff95\176\uff95" +
    "\001\002\000\004\025\u03c2\001\002\000\004\171\u03c3\001" +
    "\002\000\004\214\u03c4\001\002\000\004\177\u03c5\001\002" +
    "\000\010\003\uff94\156\uff94\176\uff94\001\002\000\010\003" +
    "\uffea\154\uffea\163\uffea\001\002\000\010\003\uffe3\154\uffe3" +
    "\163\uffe3\001\002\000\004\007\u03c9\001\002\000\004\156" +
    "\u03ca\001\002\000\010\003\uffe4\154\uffe4\163\uffe4\001\002" +
    "\000\010\003\uff9b\156\uff9b\176\uff9b\001\002\000\010\003" +
    "\u03ce\156\u03cd\176\u03d0\001\002\000\004\154\uffff\001\002" +
    "\000\010\003\uff9a\156\uff9a\176\uff9a\001\002\000\010\003" +
    "\uff9c\156\uff9c\176\uff9c\001\002\000\006\034\u03d1\035\u03d2" +
    "\001\002\000\004\171\u03d6\001\002\000\004\171\u03d3\001" +
    "\002\000\010\207\u02e9\213\u02e7\214\u02ea\001\002\000\004" +
    "\177\u03d5\001\002\000\010\003\uff98\156\uff98\176\uff98\001" +
    "\002\000\004\207\u03d7\001\002\000\004\177\u03d8\001\002" +
    "\000\010\003\uff99\156\uff99\176\uff99\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u03d6\000\006\002\006\146\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\015\005\012\014\010" +
    "\147\011\154\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\u03a5\001\001\000\006" +
    "\003\u039b\147\011\001\001\000\002\001\001\000\004\043" +
    "\u0393\001\001\000\012\004\016\005\020\150\022\154\014" +
    "\001\001\000\010\005\u0390\046\u0391\154\014\001\001\000" +
    "\002\001\001\000\006\004\u0387\150\022\001\001\000\002" +
    "\001\001\000\004\016\023\001\001\000\036\021\046\023" +
    "\024\154\044\155\036\156\027\157\033\160\026\161\031" +
    "\162\043\163\030\164\035\165\040\166\025\205\037\001" +
    "\001\000\002\001\001\000\004\113\u037b\001\001\000\004" +
    "\035\u0379\001\001\000\004\042\u0377\001\001\000\002\001" +
    "\001\000\004\044\u0344\001\001\000\002\001\001\000\004" +
    "\042\u033d\001\001\000\002\001\001\000\004\042\u02c3\001" +
    "\001\000\004\113\u02c1\001\001\000\002\001\001\000\004" +
    "\113\u0266\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\174\u0262\001\001\000\004\043\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\104\055\203\050\210" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\101\066\001\001\000\036\013\105" +
    "\034\114\102\112\103\067\115\073\116\123\117\106\120" +
    "\103\124\122\130\130\134\075\145\125\201\120\202\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\u0245\001\001\000\004\101\u023e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\013\105\034\114\103\u0110\115\073\116" +
    "\123\130\130\134\075\145\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\111\141\112\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\112\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\131\374\132\150\144\161\001" +
    "\001\000\010\131\151\132\150\144\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\131" +
    "\236\132\150\144\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\131\234\132\150\144" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\131\171\132\150\144\161\001\001\000\002\001" +
    "\001\000\010\131\221\132\150\144\161\001\001\000\010" +
    "\131\220\132\150\144\161\001\001\000\010\131\217\132" +
    "\150\144\161\001\001\000\010\131\216\132\150\144\161" +
    "\001\001\000\010\131\215\132\150\144\161\001\001\000" +
    "\010\131\214\132\150\144\161\001\001\000\010\131\213" +
    "\132\150\144\161\001\001\000\010\131\212\132\150\144" +
    "\161\001\001\000\010\131\211\132\150\144\161\001\001" +
    "\000\010\131\210\132\150\144\161\001\001\000\010\131" +
    "\207\132\150\144\161\001\001\000\010\131\206\132\150" +
    "\144\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\013\105\034\114\103\225\115" +
    "\073\116\123\130\130\134\075\145\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\101" +
    "\230\001\001\000\036\013\105\034\114\102\112\103\067" +
    "\115\073\116\123\117\106\120\103\124\122\130\130\134" +
    "\075\145\125\201\120\202\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\013\105\034\114\103\354\115\073\116" +
    "\123\130\130\134\075\145\125\001\001\000\022\013\105" +
    "\034\114\103\244\115\073\116\123\130\130\134\075\145" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\101\250\001\001\000" +
    "\036\013\105\034\114\102\112\103\067\115\073\116\123" +
    "\117\106\120\103\124\122\130\130\134\075\145\125\201" +
    "\120\202\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\101\264\001\001\000\004\101\260\001\001\000\036" +
    "\013\105\034\114\102\112\103\067\115\073\116\123\117" +
    "\106\120\103\124\122\130\130\134\075\145\125\201\120" +
    "\202\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\013\105\034\114\102\112\103\067" +
    "\115\073\116\123\117\106\120\103\124\122\130\130\134" +
    "\075\145\125\201\120\202\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\034\304\121\303\131" +
    "\277\132\150\144\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\325\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\131\306\132\150" +
    "\144\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\034\314\122\312\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\101\321" +
    "\001\001\000\036\013\105\034\114\102\112\103\067\115" +
    "\073\116\123\117\106\120\103\124\122\130\130\134\075" +
    "\145\125\201\120\202\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\131\327\132\150\144\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\101\336\001\001\000" +
    "\036\013\105\034\114\102\112\103\067\115\073\116\123" +
    "\117\106\120\103\124\122\130\130\134\075\145\125\201" +
    "\120\202\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\101\347\001\001" +
    "\000\036\013\105\034\114\102\112\103\067\115\073\116" +
    "\123\117\106\120\103\124\122\130\130\134\075\145\125" +
    "\201\120\202\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\101\357\001\001\000\036\013" +
    "\105\034\114\102\112\103\067\115\073\116\123\117\106" +
    "\120\103\124\122\130\130\134\075\145\125\201\120\202" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\013\105\034\114\103\365\115\073\116" +
    "\123\130\130\134\075\145\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\101\370\001" +
    "\001\000\036\013\105\034\114\102\112\103\067\115\073" +
    "\116\123\117\106\120\103\124\122\130\130\134\075\145" +
    "\125\201\120\202\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\013\105\034\114\103\u0100\115\073\116\123" +
    "\130\130\134\075\145\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\101\u0103\001\001" +
    "\000\036\013\105\034\114\102\112\103\067\115\073\116" +
    "\123\117\106\120\103\124\122\130\130\134\075\145\125" +
    "\201\120\202\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\u010c\001\001\000\002" +
    "\001\001\000\010\131\u010a\132\150\144\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\131\u010e\132\150\144\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\125\u0111\001\001\000\006\126\u0112" +
    "\127\u0114\001\001\000\002\001\001\000\022\013\105\034" +
    "\114\103\u0116\115\073\116\123\130\130\134\075\145\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\131\u011b\132\150\144\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\013\105\034\114\103\u011f" +
    "\115\073\116\123\130\130\134\075\145\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\101\u0122\001\001\000\036\013\105\034\114\102\112\103" +
    "\067\115\073\116\123\117\106\120\103\124\122\130\130" +
    "\134\075\145\125\201\120\202\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\101\u0127" +
    "\001\001\000\036\013\105\034\114\102\112\103\067\115" +
    "\073\116\123\117\106\120\103\124\122\130\130\134\075" +
    "\145\125\201\120\202\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\131\u016e\132\150" +
    "\144\161\001\001\000\010\131\u012d\132\150\144\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\013\105\034\114\103\u0132\115\073\116\123\130" +
    "\130\134\075\145\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\101\u0135\001\001\000" +
    "\036\013\105\034\114\102\112\103\067\115\073\116\123" +
    "\117\106\120\103\124\122\130\130\134\075\145\125\201" +
    "\120\202\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\013\105\034\114\103\u0146\115\073\116\123\130\130" +
    "\134\075\145\125\001\001\000\022\013\105\034\114\103" +
    "\u013e\115\073\116\123\130\130\134\075\145\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\101\u0141\001\001\000\036\013\105\034\114\102\112" +
    "\103\067\115\073\116\123\117\106\120\103\124\122\130" +
    "\130\134\075\145\125\201\120\202\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\101\u014a\001\001\000\036\013\105\034\114\102" +
    "\112\103\067\115\073\116\123\117\106\120\103\124\122" +
    "\130\130\134\075\145\125\201\120\202\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\101\u0156\001\001\000" +
    "\004\101\u0152\001\001\000\036\013\105\034\114\102\112" +
    "\103\067\115\073\116\123\117\106\120\103\124\122\130" +
    "\130\134\075\145\125\201\120\202\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\013" +
    "\105\034\114\102\112\103\067\115\073\116\123\117\106" +
    "\120\103\124\122\130\130\134\075\145\125\201\120\202" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\101\u0161\001\001\000\036\013\105\034\114\102" +
    "\112\103\067\115\073\116\123\117\106\120\103\124\122" +
    "\130\130\134\075\145\125\201\120\202\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\013\105\034\114\103\u0167\115\073\116\123\130\130\134" +
    "\075\145\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\101\u016a\001\001\000\036\013" +
    "\105\034\114\102\112\103\067\115\073\116\123\117\106" +
    "\120\103\124\122\130\130\134\075\145\125\201\120\202" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\013" +
    "\105\034\114\103\u0172\115\073\116\123\130\130\134\075" +
    "\145\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\101\u0175\001\001\000\036\013\105" +
    "\034\114\102\112\103\067\115\073\116\123\117\106\120" +
    "\103\124\122\130\130\134\075\145\125\201\120\202\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\101\u0181" +
    "\001\001\000\004\101\u017d\001\001\000\036\013\105\034" +
    "\114\102\112\103\067\115\073\116\123\117\106\120\103" +
    "\124\122\130\130\134\075\145\125\201\120\202\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\013\105\034\114\102\112\103\067\115\073\116" +
    "\123\117\106\120\103\124\122\130\130\134\075\145\125" +
    "\201\120\202\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\101\u018c\001\001\000\036\013\105" +
    "\034\114\102\112\103\067\115\073\116\123\117\106\120" +
    "\103\124\122\130\130\134\075\145\125\201\120\202\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\131\u0191\132\150\144\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\131\u01b2\132\150\144\161\001\001\000\010" +
    "\131\u0197\132\150\144\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\131\u01bb\132\150\144\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\131\u01bf\132\150\144\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\034\304\121\u0230\001\001\000\006\034\304" +
    "\121\u01c5\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\034\314\122\u01ca" +
    "\001\001\000\002\001\001\000\022\013\105\034\114\103" +
    "\u01cd\115\073\116\123\130\130\134\075\145\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\101\u01d0\001\001\000\036\013\105\034\114\102\112" +
    "\103\067\115\073\116\123\117\106\120\103\124\122\130" +
    "\130\134\075\145\125\201\120\202\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\034\314\122\u020f\001\001\000\006\034\314\122" +
    "\u01db\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\013\105\034\114\103\u01ff\115\073\116\123\130\130\134" +
    "\075\145\125\001\001\000\022\013\105\034\114\103\u01df" +
    "\115\073\116\123\130\130\134\075\145\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\101\u01e3\001\001\000\036\013\105\034" +
    "\114\102\112\103\067\115\073\116\123\117\106\120\103" +
    "\124\122\130\130\134\075\145\125\201\120\202\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\101\u01ef\001" +
    "\001\000\004\101\u01eb\001\001\000\036\013\105\034\114" +
    "\102\112\103\067\115\073\116\123\117\106\120\103\124" +
    "\122\130\130\134\075\145\125\201\120\202\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\013\105\034\114\102\112\103\067\115\073\116\123" +
    "\117\106\120\103\124\122\130\130\134\075\145\125\201" +
    "\120\202\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\101\u01fa\001\001\000\036\013\105\034" +
    "\114\102\112\103\067\115\073\116\123\117\106\120\103" +
    "\124\122\130\130\134\075\145\125\201\120\202\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\101\u0202\001\001\000\036\013\105\034\114\102\112" +
    "\103\067\115\073\116\123\117\106\120\103\124\122\130" +
    "\130\134\075\145\125\201\120\202\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\013" +
    "\105\034\114\103\u0208\115\073\116\123\130\130\134\075" +
    "\145\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\101\u020b\001\001\000\036\013\105" +
    "\034\114\102\112\103\067\115\073\116\123\117\106\120" +
    "\103\124\122\130\130\134\075\145\125\201\120\202\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\013\105\034\114\103\u0212" +
    "\115\073\116\123\130\130\134\075\145\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\101\u0215\001\001\000\036\013\105\034\114\102\112\103" +
    "\067\115\073\116\123\117\106\120\103\124\122\130\130" +
    "\134\075\145\125\201\120\202\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\034\314" +
    "\122\u021a\001\001\000\002\001\001\000\022\013\105\034" +
    "\114\103\u021d\115\073\116\123\130\130\134\075\145\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\101\u0220\001\001\000\036\013\105\034\114" +
    "\102\112\103\067\115\073\116\123\117\106\120\103\124" +
    "\122\130\130\134\075\145\125\201\120\202\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\034\314\122\u0226\001\001\000\002" +
    "\001\001\000\022\013\105\034\114\103\u0229\115\073\116" +
    "\123\130\130\134\075\145\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\101\u022c\001" +
    "\001\000\036\013\105\034\114\102\112\103\067\115\073" +
    "\116\123\117\106\120\103\124\122\130\130\134\075\145" +
    "\125\201\120\202\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\034\314\122\u0234\001\001" +
    "\000\002\001\001\000\022\013\105\034\114\103\u0237\115" +
    "\073\116\123\130\130\134\075\145\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\101" +
    "\u023a\001\001\000\036\013\105\034\114\102\112\103\067" +
    "\115\073\116\123\117\106\120\103\124\122\130\130\134" +
    "\075\145\125\201\120\202\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\013\105\034" +
    "\114\102\112\103\067\115\073\116\123\117\106\120\103" +
    "\124\122\130\130\134\075\145\125\201\120\202\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\125\u0242" +
    "\001\001\000\006\126\u0112\127\u0243\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\034\114\145\u0246\001\001" +
    "\000\004\135\u0247\001\001\000\002\001\001\000\010\131" +
    "\u0249\132\150\144\161\001\001\000\002\001\001\000\010" +
    "\131\u024b\132\150\144\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\131\u024f\132\150" +
    "\144\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\101\u0252\001\001\000\036\013\105\034\114\102\112" +
    "\103\067\115\073\116\123\117\106\120\103\124\122\130" +
    "\130\134\075\145\125\201\120\202\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\101\u0256\001\001\000" +
    "\036\013\105\034\114\102\112\103\067\115\073\116\123" +
    "\117\106\120\103\124\122\130\130\134\075\145\125\201" +
    "\120\202\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\101\u025b\001\001\000\036\013" +
    "\105\034\114\102\112\103\067\115\073\116\123\117\106" +
    "\120\103\124\122\130\130\134\075\145\125\201\120\202" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\101\u0260\001\001\000\036\013\105\034" +
    "\114\102\112\103\067\115\073\116\123\117\106\120\103" +
    "\124\122\130\130\134\075\145\125\201\120\202\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\023\u026a\114" +
    "\u0269\155\u026f\163\u0267\165\u026d\166\u026e\177\u0268\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\113\u027a\001\001\000\004\113\u0275\001\001\000\004\113" +
    "\u0270\001\001\000\020\023\u026a\114\u0269\155\u026f\163\u0267" +
    "\165\u026d\166\u026e\167\u0271\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\023\u026a\114\u0269\155\u026f\163\u0267\165\u026d\166\u026e\200" +
    "\u0277\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\023\u026a\114\u0269\155" +
    "\u026f\163\u0267\165\u026d\166\u026e\177\u027b\001\001\000\002" +
    "\001\001\000\004\056\u02ba\001\001\000\002\001\001\000" +
    "\004\074\u02b4\001\001\000\004\076\u0280\001\001\000\006" +
    "\047\u0283\077\u0284\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\u028f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\u0298\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\u02ac\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\047\u02b7\075" +
    "\u02b8\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\047" +
    "\u02be\057\u02bc\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\023\u026a\114\u0269\155\u026f\163\u0267" +
    "\165\u026d\166\u026e\167\u02c2\001\001\000\002\001\001\000" +
    "\006\023\u02c4\176\u02c5\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\072\u032f\001\001\000\004\060\u0321\001\001" +
    "\000\002\001\001\000\004\066\u0310\001\001\000\004\064" +
    "\u030b\001\001\000\004\062\u02ee\001\001\000\004\070\u02d0" +
    "\001\001\000\004\071\u02d3\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\u02db\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\u02e3\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\u02e7\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\063\u02f1\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\u02fa\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\u0300\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\047\u030e\065\u030f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\047\u0313\067\u0314\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\u0319\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\u031e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\047\u0325\061\u0322\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\u032a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\047\u0332\073\u0333\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\u0338\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\u033b" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\u02c4\171\u033f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\023\u0345\045\u034c\154\u0353\155\u0350" +
    "\156\u0348\157\u034e\160\u0347\161\u034a\162\u0352\163\u0349\164" +
    "\u034f\165\u0351\166\u0346\173\u034d\001\001\000\002\001\001" +
    "\000\004\113\u0375\001\001\000\004\035\u0368\001\001\000" +
    "\004\042\u0363\001\001\000\002\001\001\000\004\044\u0361" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\u035d\001\001\000\004\042\u035b\001\001" +
    "\000\004\113\u0359\001\001\000\004\113\u0357\001\001\000" +
    "\004\174\u0356\001\001\000\004\043\u0354\001\001\000\010" +
    "\104\055\203\050\210\u0355\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\023\u026a\114\u0269\155\u026f\163\u0267" +
    "\165\u026d\166\u026e\177\u0358\001\001\000\002\001\001\000" +
    "\020\023\u026a\114\u0269\155\u026f\163\u0267\165\u026d\166\u026e" +
    "\167\u035a\001\001\000\002\001\001\000\006\023\u02c4\176" +
    "\u035c\001\001\000\002\001\001\000\006\023\u02c4\171\u035e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\023\u0345\045\u034c\154\u0353\155\u0350\156\u0348" +
    "\157\u034e\160\u0347\161\u034a\162\u0352\163\u0349\164\u034f\165" +
    "\u0351\166\u0346\173\u0362\001\001\000\002\001\001\000\006" +
    "\023\u02c4\170\u0364\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\u036a" +
    "\172\u036c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\u0371\001\001\000" +
    "\004\023\u02c4\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\023\u026a\114\u0269\155\u026f\163" +
    "\u0267\165\u026d\166\u026e\200\u0376\001\001\000\002\001\001" +
    "\000\006\023\u02c4\170\u0378\001\001\000\002\001\001\000" +
    "\006\022\u036a\172\u037a\001\001\000\002\001\001\000\020" +
    "\023\u026a\114\u0269\155\u026f\163\u0267\165\u026d\166\u026e\200" +
    "\u037c\001\001\000\002\001\001\000\004\054\u037e\001\001" +
    "\000\004\055\u0381\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\u0385\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\u038a\046\u038b\154\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\u038f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\u0392\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\104\055\203\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\u039c\005\u039d\150\022\154" +
    "\014\001\001\000\010\005\u03a2\046\u03a3\154\014\001\001" +
    "\000\006\004\u039e\150\022\001\001\000\010\005\u039f\046" +
    "\u03a0\154\014\001\001\000\004\046\u03a1\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\u03a4\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\020\u03aa\152\u03a6" +
    "\153\u03a9\154\u03ad\204\u03ab\001\001\000\004\206\u03c5\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\u03b2" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\u03ae\001\001\000\010\104\055\203\050" +
    "\210\u03af\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\u03b3\207\u03b5\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\u03bc" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\u03bd\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\u03cb\001\001\000\004\051\u03ce" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\u03d3\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$EtiquetadoParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$EtiquetadoParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$EtiquetadoParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ArrayList<Captcha> listaCaptchas;
    private ArrayList<Advertencia> listaErrores;
    private ArrayList<String> parametros;
    private ArrayList<Identificador> procesos;
    private ArrayList<Identificador> identificadores;
    private Captcha captchaSolicitado;
    private TablaDeSimbolos tablaSimbolos;
    private TablasDeOperaciones tablaOperaciones;
    private OperacionesBooleanas operacionesBooleanas;

    private String integer = TipoDeDato.INTEGER;
    private String string = TipoDeDato.STRING;
    private String decimal = TipoDeDato.DECIMAL;
    private String character = TipoDeDato.CHAR;
    private String booleano = TipoDeDato.BOOLEAN;
    private String error = TipoDeDato.ERROR;

    private String procesoActual;
    private String codigoScripting;
    private String insertCompletoPorProceso;
    private int cantOnLoad;
    private int totalOnLoad;
    private int procesoRepetido;

    /* ETIQUETAS PRINCIPALES */
    private EtiquetaGCIC gcicPrincipal = new EtiquetaGCIC();
    private EtiquetaHead headPrincipal = new EtiquetaHead();
    private EtiquetaBody bodyPrincipal = new EtiquetaBody();

    public EtiquetadoParser(EtiquetadoLexer lexer, ArrayList<Advertencia> listaErrores, ArrayList<Captcha> listaCaptchas) {
        super(lexer);
        this.listaErrores = listaErrores;
        this.listaCaptchas = listaCaptchas;
        this.captchaSolicitado = new Captcha();
        this.tablaOperaciones = new TablasDeOperaciones();
        this.operacionesBooleanas = new OperacionesBooleanas();
        this.parametros = new ArrayList<>();
        this.procesos = new ArrayList<>();
        this.identificadores = new ArrayList<>();
        this.procesoActual = "";
        this.insertCompletoPorProceso = "";
        this.codigoScripting = "";
        this.totalOnLoad = 0;
        this.cantOnLoad = 0;
        this.procesoRepetido = 0;
        this.tablaSimbolos = captchaSolicitado.getTablaSimbolos();
    }
    public void report_error(String message, Object info) {
        System.out.println("reporterror");;
    }
    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal " + info);
    }
    @Override
    public void syntax_error(Symbol s) {
        Advertencia errorNuevo = new Advertencia("Sintactico");
        //System.out.println("linea: " + s.left + "   columna: " + s.right + "   token: " + symbl_name_from_id(s.sym) + "     texto: " + s.value);
        errorNuevo.setLinea(s.left);
        errorNuevo.setColumna(s.right);
        errorNuevo.setToken(symbl_name_from_id(s.sym)); //Se cambiará por uno de la tabla
        errorNuevo.setTexto(s.value.toString());
        //Agregamos los simbolos que se esperan
        String solucion = "";
        for(int i = 0; i < expected_token_ids().size(); i++) {
            if(i != 0) {
                solucion += ",";
            }
            solucion += " " + symbl_name_from_id(expected_token_ids().get(i));
        }
        errorNuevo.setSolucion(solucion);
        listaErrores.add(errorNuevo);
    }
    protected int error_sync_size() {
        return 1;
    }

    public void agregarErrorSemantico(String mensaje) {
        Advertencia errorNuevo = new Advertencia("Semantico");
        errorNuevo.setMensaje(mensaje);
        listaErrores.add(errorNuevo);
    }

    public boolean etiquetasDuplicadas(int linea, int columna) {
        boolean comprobante = false;
        Set<String> datosSinDuplicar = new HashSet<String>(parametros); //Creamos un Set de los parametros
        for(String param : datosSinDuplicar) {
            int repeticion = Collections.frequency(parametros, param);
            if(repeticion > 1) {
                agregarErrorSemantico("El parametro " + param + " se ha repetido " + repeticion + " veces.\nConflicto en Linea: " + linea + " - Columna: " + columna);
                comprobante = true;
            }
        }
        return comprobante;
    }

    public void agregarIdentificador(String id, int linea, int columna) {
        boolean comprobante = true;
        for(Identificador ident : identificadores) {
            if(ident.getId().equals(id)) {
                agregarErrorSemantico("El identificador " + id + " ya fue declarado en la Linea: " + ident.getLinea() + " - Columna: " + ident.getColumna() + ".\nConflicto en Linea: " + linea + " - Columna: " + columna);
                comprobante = false;
                break;
            }
        }
        if(comprobante) {
            identificadores.add(new Identificador(id, linea, columna));
        }
    }

    public boolean variableExistente(String id, String procesoActual) {
        for(Simbolo simb : tablaSimbolos.getTablaSimbolos()) {
            if(simb.getIdentificador().equals(id) && (simb.getProcedimiento().equals(procesoActual) || simb.getModo().equals("@global"))) {
                return true;
            }
        }
        return false;
    }
    
    public boolean variableValida(String id, String procesoActual, String tipo) {
        for(Simbolo simb : tablaSimbolos.getTablaSimbolos()) {
            if(simb.getIdentificador().equals(id) && (simb.getProcedimiento().equals(procesoActual) || simb.getModo().equals("@global")) && simb.getTipo().equals(tipo)) {
                return true;
            }
        }
        return false;
    }

    public String agregarProceso(String nombreProceso, int linea, int columna) {
        for(Identificador proc : procesos) {
            if(proc.getId().equals(nombreProceso)) {
                agregarErrorSemantico("El proceso " + nombreProceso + " Ya está declarado en la Linea: " + proc.getLinea() + " - Columna: " + proc.getColumna() + ".\nConflicto en Linea: " + linea + " - Columna: " + columna); 
                procesoRepetido++;
                return nombreProceso + procesoRepetido;
            }
        }
        return nombreProceso;
    }

    public boolean verificarTipo(Dato dato, String tipo, int linea, int columna) {
        if(dato.getTipo().equals(tipo)) {
            return true;
        } else {
            agregarErrorSemantico("La función solo recibe parametros del tipo: " + tipo + ". (Se recibió parametro de tipo: " + dato.getTipo() + ").\nConflicto en la Linea: " + linea + " - Columna: " + columna);
            return false;
        }
    }

    public Captcha getCaptcha() {
        return captchaSolicitado;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$EtiquetadoParser$actions {
  private final EtiquetadoParser parser;

  /** Constructor */
  CUP$EtiquetadoParser$actions(EtiquetadoParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$EtiquetadoParser$do_action_part00000000(
    int                        CUP$EtiquetadoParser$act_num,
    java_cup.runtime.lr_parser CUP$EtiquetadoParser$parser,
    java.util.Stack            CUP$EtiquetadoParser$stack,
    int                        CUP$EtiquetadoParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$EtiquetadoParser$result;

      /* select the action based on the action number */
      switch (CUP$EtiquetadoParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		RESULT = start_val;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$EtiquetadoParser$parser.done_parsing();
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= apertura_gcic cuerpo_gcic 
            {
              Object RESULT =null;
		
                                                    System.out.println("Se ha llegado al final del reconocimiento. Los simbolos encontrados son: ");
                                                    for(Simbolo simb: tablaSimbolos.getTablaSimbolos()) {
                                                        System.out.println(simb);
                                                    }
                                                    System.out.println(" \n\n");
                                                    System.out.println(gcicPrincipal.generarHTML());
                                                    captchaSolicitado.setContenidoCaptcha(gcicPrincipal);
                                                
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // apertura_gcic ::= MENOR_QUE GCIC cuerpo_parametros_gcic MAYOR_QUE 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> param = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                                            if(!etiquetasDuplicadas(inileft, iniright) && param != null) {
                                                                                                for(Parametro element: param) {
                                                                                                    gcicPrincipal.setByString(element, listaErrores);
                                                                                                }
                                                                                            }
                                                                                        
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_gcic",100, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // apertura_gcic ::= error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_gcic",100, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cuerpo_gcic ::= cabecera cuerpo cierre_gcic 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_gcic",10, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cuerpo_gcic ::= scripting cabecera cuerpo cierre_gcic 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_gcic",10, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpo_gcic ::= cabecera scripting cuerpo cierre_gcic 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_gcic",10, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpo_gcic ::= cabecera cuerpo scripting cierre_gcic 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_gcic",10, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpo_gcic ::= scripting cabecera scripting cuerpo cierre_gcic 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_gcic",10, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cuerpo_gcic ::= scripting cabecera cuerpo scripting cierre_gcic 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_gcic",10, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cuerpo_gcic ::= cabecera scripting cuerpo scripting cierre_gcic 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_gcic",10, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo_gcic ::= scripting cabecera scripting cuerpo scripting cierre_gcic 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_gcic",10, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-5)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cierre_gcic ::= MENOR_CIERRE GCIC MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cierre_gcic",36, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cabecera ::= apertura_cabecera cuerpo_cabecera cierre_cabecera 
            {
              Object RESULT =null;
		gcicPrincipal.getListaEtiquetas().add(headPrincipal);
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cabecera",1, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // apertura_cabecera ::= MENOR_QUE HEAD MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_cabecera",101, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cierre_cabecera ::= MENOR_CIERRE HEAD MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cierre_cabecera",130, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cuerpo ::= apertura_body cuerpo_cuerpo cierre_body 
            {
              Object RESULT =null;
		gcicPrincipal.getListaEtiquetas().add(bodyPrincipal);
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // apertura_body ::= MENOR_QUE BODY cuerpo_parametros_body MAYOR_QUE 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> param = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                                        if(!etiquetasDuplicadas(inileft, iniright) && param != null) {
                                                                                            for(Parametro element: param) {
                                                                                                bodyPrincipal.setByString(element, listaErrores);
                                                                                            }
                                                                                        }
                                                                                    
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_body",102, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // apertura_body ::= error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_body",102, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cierre_body ::= MENOR_CIERRE BODY MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cierre_body",131, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cuerpo_cabecera ::= cuerpo_cabecera etiquetas_cabecera 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cabecera",11, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cuerpo_cabecera ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cabecera",11, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cuerpo_cabecera ::= cuerpo_cabecera error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cabecera",11, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // etiquetas_cabecera ::= apertura_link cierre_link 
            {
              Object RESULT =null;
		headPrincipal.getEtiquetasHead().add(new EtiquetaLink());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cabecera",14, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // etiquetas_cabecera ::= apertura_title cuerpo_title cierre_title 
            {
              Object RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Object ct = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		EtiquetaTitle et = new EtiquetaTitle(); et.setTitulo(ct.toString()); headPrincipal.getEtiquetasHead().add(et);
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cabecera",14, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // etiquetas_cabecera ::= apertura_scripting cuerpo_scripting cierre_scripting 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cabecera",14, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // apertura_link ::= MENOR_QUE LINK cuerpo_parametros_link MAYOR_QUE 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		
                                                                                if(!etiquetasDuplicadas(inileft, iniright)) {

                                                                                }
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_link",104, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // apertura_title ::= MENOR_QUE TITLE MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_title",105, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // apertura_scripting ::= MENOR_QUE SCRIPTING MAYOR_QUE 
            {
              Object RESULT =null;
		cantOnLoad = 0; insertCompletoPorProceso = ""; codigoScripting = "";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_scripting",106, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cierre_link ::= MENOR_CIERRE LINK MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cierre_link",132, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cierre_link ::= error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cierre_link",132, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cierre_title ::= MENOR_CIERRE TITLE MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cierre_title",133, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cierre_title ::= error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cierre_title",133, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cierre_scripting ::= MENOR_CIERRE SCRIPTING MAYOR_QUE 
            {
              Object RESULT =null;
		
                                                                    if(insertCompletoPorProceso.length() > 0) {
                                                                        System.out.println("INSERT " + procesoActual);
                                                                        System.out.println(insertCompletoPorProceso + "\n");
                                                                    }
                                                                
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cierre_scripting",134, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cierre_scripting ::= error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cierre_scripting",134, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cuerpo_title ::= cuerpo_title texto 
            {
              Object RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Object ct = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int entleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT= ct.toString() + " " + ent.toString();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_title",13, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cuerpo_title ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_title",13, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cuerpo_texto_sin_etiqueta ::= cuerpo_texto_sin_etiqueta texto 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_texto_sin_etiqueta",62, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cuerpo_texto_sin_etiqueta ::= texto 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_texto_sin_etiqueta",62, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // texto ::= ALFANUMERICO 
            {
              String RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT=ent.toString();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("texto",17, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // texto ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT=ent.toString();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("texto",17, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cuerpo_cuerpo ::= cuerpo_cuerpo etiquetas_cuerpo 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cuerpo",12, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cuerpo_cuerpo ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cuerpo",12, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cuerpo_cuerpo ::= cuerpo_cuerpo error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_cuerpo",12, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // etiquetas_cuerpo ::= apertura_spam parametros_etiquetas_texuales cerradura_spam 
            {
              Object RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaSpam eti = (EtiquetaSpam)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setTextoInterno(txt.trim()); bodyPrincipal.getEtiquetasBody().add(eti);
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // etiquetas_cuerpo ::= apertura_input cuerpo_texto cerradura_input 
            {
              Object RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaInput eti = (EtiquetaInput)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setTextoInterno(txt.trim()); bodyPrincipal.getEtiquetasBody().add(eti);
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // etiquetas_cuerpo ::= apertura_textarea cuerpo_texto cerradura_textarea 
            {
              Object RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaTextarea eti = (EtiquetaTextarea)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setTextoInterno(txt.trim()); bodyPrincipal.getEtiquetasBody().add(eti);
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // etiquetas_cuerpo ::= apertura_select cuerpo_select cerradura_select 
            {
              Object RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaSelect eti = (EtiquetaSelect)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int cseleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int cseright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<EtiquetaOption> cse = (ArrayList<EtiquetaOption>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setOpciones(cse); bodyPrincipal.getEtiquetasBody().add(eti);
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // etiquetas_cuerpo ::= apertura_div cuerpo_div cerradura_div 
            {
              Object RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaDiv eti = (EtiquetaDiv)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int crpleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int crpright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Etiqueta> crp = (ArrayList<Etiqueta>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setEtiquetasInternas(crp); bodyPrincipal.getEtiquetasBody().add(eti);
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // etiquetas_cuerpo ::= apertura_img cerradura_img 
            {
              Object RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		EtiquetaImg eti = (EtiquetaImg)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		bodyPrincipal.getEtiquetasBody().add(eti);
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // etiquetas_cuerpo ::= apertura_br 
            {
              Object RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		EtiquetaBr eti = (EtiquetaBr)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		bodyPrincipal.getEtiquetasBody().add(eti);
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // etiquetas_cuerpo ::= apertura_button cuerpo_texto cerradura_button 
            {
              Object RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaButton eti = (EtiquetaButton)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setTextoInterno(txt.trim()); bodyPrincipal.getEtiquetasBody().add(eti);
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // etiquetas_cuerpo ::= apertura_h1 parametros_etiquetas_texuales cerradura_h1 
            {
              Object RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaH1 eti = (EtiquetaH1)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setTextoInterno(txt.trim()); bodyPrincipal.getEtiquetasBody().add(eti);
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // etiquetas_cuerpo ::= apertura_p parametros_etiquetas_texuales cerradura_p 
            {
              Object RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaP eti = (EtiquetaP)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setTextoInterno(txt.trim()); bodyPrincipal.getEtiquetasBody().add(eti);
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // etiquetas_cuerpo ::= apertura_scripting cuerpo_scripting cierre_scripting 
            {
              Object RESULT =null;
		int crpleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int crpright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String crp = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		System.out.println("\n\nSCRIPT\n" + crp + "\n\n");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // etiquetas_cuerpo ::= texto 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo",15, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // apertura_spam ::= MENOR_QUE SPAM cuerpo_parametros_spam MAYOR_QUE 
            {
              EtiquetaSpam RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> param = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                                        EtiquetaSpam spam = new EtiquetaSpam();
                                                                                        if(!etiquetasDuplicadas(inileft, iniright) && param != null) {
                                                                                            for(Parametro element: param) {
                                                                                                spam.setByString(element, listaErrores);
                                                                                            }
                                                                                        }
                                                                                        RESULT = spam;
                                                                                    
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_spam",107, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // apertura_input ::= MENOR_QUE INPUT cuerpo_parametros_input MAYOR_QUE 
            {
              EtiquetaInput RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> param = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                                        EtiquetaInput input = new EtiquetaInput();
                                                                                        if(!etiquetasDuplicadas(inileft, iniright) && param != null) {
                                                                                            System.out.println("filtro input: ");
                                                                                            for(Parametro element: param) {
                                                                                                input.setByString(element, listaErrores);
                                                                                            }
                                                                                        }
                                                                                        RESULT = input;
                                                                                    
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_input",108, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // apertura_textarea ::= MENOR_QUE TEXTAREA cuerpo_parametros_textarea MAYOR_QUE 
            {
              EtiquetaTextarea RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> param = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                                                    EtiquetaTextarea textarea = new EtiquetaTextarea();
                                                                                                    if(!etiquetasDuplicadas(inileft, iniright) && param != null) {
                                                                                                        for(Parametro element: param) {
                                                                                                            textarea.setByString(element, listaErrores);
                                                                                                        }
                                                                                                    }
                                                                                                    RESULT = textarea;
                                                                                                
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_textarea",109, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // apertura_select ::= MENOR_QUE SELECT cuerpo_parametros_select MAYOR_QUE 
            {
              EtiquetaSelect RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> param = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                                            EtiquetaSelect select = new EtiquetaSelect();
                                                                                            if(!etiquetasDuplicadas(inileft, iniright) && param != null) {
                                                                                                for(Parametro element: param) {
                                                                                                    select.setByString(element, listaErrores);
                                                                                                }
                                                                                            }
                                                                                            RESULT = select;
                                                                                        
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_select",110, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // apertura_div ::= MENOR_QUE DIV cuerpo_parametros_div MAYOR_QUE 
            {
              EtiquetaDiv RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> param = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                                        EtiquetaDiv div = new EtiquetaDiv();
                                                                                        if(!etiquetasDuplicadas(inileft, iniright) && param != null) {
                                                                                            for(Parametro element: param) {
                                                                                                div.setByString(element, listaErrores);
                                                                                            }
                                                                                        }
                                                                                        RESULT = div;
                                                                                    
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_div",111, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // apertura_img ::= MENOR_QUE IMG cuerpo_parametros_img MAYOR_QUE 
            {
              EtiquetaImg RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> param = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                                        EtiquetaImg img = new EtiquetaImg();
                                                                                        if(!etiquetasDuplicadas(inileft, iniright) && param != null) {
                                                                                            for(Parametro element: param) {
                                                                                                img.setByString(element, listaErrores);
                                                                                            }
                                                                                        }
                                                                                        RESULT = img;
                                                                                    
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_img",112, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // apertura_br ::= MENOR_QUE BR MAYOR_QUE 
            {
              EtiquetaBr RESULT =null;
		RESULT = new EtiquetaBr();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_br",113, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // apertura_button ::= MENOR_QUE BUTTON cuerpo_parametros_button MAYOR_QUE 
            {
              EtiquetaButton RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> param = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                                            EtiquetaButton button = new EtiquetaButton();
                                                                                            if(!etiquetasDuplicadas(inileft, iniright) && param != null) {
                                                                                                for(Parametro element: param) {
                                                                                                    button.setByString(element, listaErrores);
                                                                                                }
                                                                                            }
                                                                                            RESULT = button;
                                                                                        
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_button",114, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // apertura_h1 ::= MENOR_QUE H1 cuerpo_parametros_h1 MAYOR_QUE 
            {
              EtiquetaH1 RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> param = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                                EtiquetaH1 h1 = new EtiquetaH1();
                                                                                if(!etiquetasDuplicadas(inileft, iniright) && param != null) {
                                                                                    for(Parametro element: param) {
                                                                                        h1.setByString(element, listaErrores);
                                                                                    }
                                                                                }
                                                                                RESULT = h1;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_h1",115, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // apertura_p ::= MENOR_QUE P cuerpo_parametros_p MAYOR_QUE 
            {
              EtiquetaP RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> param = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                                EtiquetaP p = new EtiquetaP();
                                                                                if(!etiquetasDuplicadas(inileft, iniright) && param != null) {
                                                                                    for(Parametro element: param) {
                                                                                        p.setByString(element, listaErrores);
                                                                                    }
                                                                                }
                                                                                RESULT = p;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_p",116, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // cerradura_spam ::= MENOR_CIERRE SPAM MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cerradura_spam",117, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cerradura_input ::= MENOR_CIERRE INPUT MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cerradura_input",118, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cerradura_textarea ::= MENOR_CIERRE TEXTAREA MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cerradura_textarea",119, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cerradura_select ::= MENOR_CIERRE SELECT MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cerradura_select",120, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cerradura_div ::= MENOR_CIERRE DIV MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cerradura_div",121, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cerradura_img ::= MENOR_CIERRE IMG MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cerradura_img",122, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cerradura_button ::= MENOR_CIERRE BUTTON MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cerradura_button",124, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cerradura_h1 ::= MENOR_CIERRE H1 MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cerradura_h1",125, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // cerradura_p ::= MENOR_CIERRE P MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cerradura_p",126, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cuerpo_select ::= cuerpo_select etiqueta_option 
            {
              ArrayList<EtiquetaOption> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<EtiquetaOption> l = (ArrayList<EtiquetaOption>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		EtiquetaOption p = (EtiquetaOption)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		l.add(p); RESULT = l;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_select",27, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cuerpo_select ::= 
            {
              ArrayList<EtiquetaOption> RESULT =null;
		ArrayList<EtiquetaOption> lista = new ArrayList<>(); RESULT = lista;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_select",27, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // etiqueta_option ::= MENOR_QUE OPTION MAYOR_QUE cuerpo_texto MENOR_CIERRE OPTION MAYOR_QUE 
            {
              EtiquetaOption RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		EtiquetaOption option = new EtiquetaOption(); option.setTextoInterno(txt.trim()); RESULT = option;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiqueta_option",16, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-6)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cuerpo_texto ::= cuerpo_texto texto 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = c + t + " ";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_texto",32, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cuerpo_texto ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_texto",32, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cuerpo_div ::= cuerpo_div etiquetas_cuerpo_div 
            {
              ArrayList<Etiqueta> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Etiqueta> l = (ArrayList<Etiqueta>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Etiqueta p = (Etiqueta)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		l.add(p); RESULT = l;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_div",34, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cuerpo_div ::= 
            {
              ArrayList<Etiqueta> RESULT =null;
		ArrayList<Etiqueta> lista = new ArrayList<>(); RESULT = lista;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_div",34, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // etiquetas_cuerpo_div ::= apertura_spam parametros_etiquetas_texuales cerradura_spam 
            {
              Etiqueta RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaSpam eti = (EtiquetaSpam)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setTextoInterno(txt.trim()); RESULT = eti;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo_div",35, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // etiquetas_cuerpo_div ::= apertura_input cuerpo_texto cerradura_input 
            {
              Etiqueta RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaInput eti = (EtiquetaInput)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setTextoInterno(txt.trim()); RESULT = eti;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo_div",35, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // etiquetas_cuerpo_div ::= apertura_textarea cuerpo_texto cerradura_textarea 
            {
              Etiqueta RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaTextarea eti = (EtiquetaTextarea)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setTextoInterno(txt.trim()); RESULT = eti;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo_div",35, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // etiquetas_cuerpo_div ::= apertura_select cuerpo_select cerradura_select 
            {
              Etiqueta RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaSelect eti = (EtiquetaSelect)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int cseleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int cseright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<EtiquetaOption> cse = (ArrayList<EtiquetaOption>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setOpciones(cse); RESULT = eti;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo_div",35, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // etiquetas_cuerpo_div ::= apertura_div cuerpo_div cerradura_div 
            {
              Etiqueta RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaDiv eti = (EtiquetaDiv)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int crpleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int crpright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Etiqueta> crp = (ArrayList<Etiqueta>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setEtiquetasInternas(crp); RESULT = eti;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo_div",35, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // etiquetas_cuerpo_div ::= apertura_img cerradura_img 
            {
              Etiqueta RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		EtiquetaImg eti = (EtiquetaImg)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		RESULT = eti;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo_div",35, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // etiquetas_cuerpo_div ::= apertura_br 
            {
              Etiqueta RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		EtiquetaBr eti = (EtiquetaBr)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = eti;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo_div",35, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // etiquetas_cuerpo_div ::= apertura_button cuerpo_texto cerradura_button 
            {
              Etiqueta RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaButton eti = (EtiquetaButton)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setTextoInterno(txt.trim()); RESULT = eti;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo_div",35, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // etiquetas_cuerpo_div ::= apertura_h1 parametros_etiquetas_texuales cerradura_h1 
            {
              Etiqueta RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaH1 eti = (EtiquetaH1)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setTextoInterno(txt.trim()); RESULT = eti;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo_div",35, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // etiquetas_cuerpo_div ::= apertura_p parametros_etiquetas_texuales cerradura_p 
            {
              Etiqueta RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		EtiquetaP eti = (EtiquetaP)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		eti.setTextoInterno(txt.trim()); RESULT = eti;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo_div",35, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // etiquetas_cuerpo_div ::= apertura_scripting cuerpo_scripting cierre_scripting 
            {
              Etiqueta RESULT =null;
		int etileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Object eti = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int crpleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int crpright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String crp = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		System.out.println("\n\nSCRIPT\n" + crp + "\n\n");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo_div",35, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // etiquetas_cuerpo_div ::= texto 
            {
              Etiqueta RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("etiquetas_cuerpo_div",35, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // parametros_etiquetas_texuales ::= parametros_etiquetas_texuales parametros_etiquetas_texuales_p 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = c + " " + p;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas_texuales",73, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // parametros_etiquetas_texuales ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas_texuales",73, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // parametros_etiquetas_texuales_p ::= texto 
            {
              String RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = ide.toString();;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas_texuales_p",74, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parametros_etiquetas_texuales_p ::= apertura_br 
            {
              String RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		EtiquetaBr ide = (EtiquetaBr)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = "<br>";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas_texuales_p",74, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parametros_etiquetas_texuales_p ::= apertura_h1 parametros_etiquetas_texuales cerradura_h1 
            {
              String RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		RESULT = ide.toString();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas_texuales_p",74, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parametros_etiquetas_texuales_p ::= apertura_p parametros_etiquetas_texuales cerradura_p 
            {
              String RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		RESULT = ide.toString();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas_texuales_p",74, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parametros_etiquetas_texuales_p ::= apertura_spam parametros_etiquetas_texuales cerradura_spam 
            {
              String RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		RESULT = ide.toString();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas_texuales_p",74, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cuerpo_parametros_gcic ::= cuerpo_parametros_gcic parametros_gcic 
            {
              ArrayList<Parametro> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> l = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		l.add(p); RESULT = l;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_gcic",38, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // cuerpo_parametros_gcic ::= 
            {
              ArrayList<Parametro> RESULT =null;
		parametros.clear(); ArrayList<Parametro> parametrosGCIC = new ArrayList<>(); RESULT = parametrosGCIC;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_gcic",38, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // cuerpo_parametros_gcic ::= cuerpo_parametros_gcic error 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_gcic",38, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parametros_gcic ::= CORA ID IGUAL ID_ETIQUETA CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("id"); agregarIdentificador(ide.toString(), ideleft, ideright); RESULT = new Parametro("id", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_gcic",39, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parametros_gcic ::= CORA NAME IGUAL texto_comillas_complete CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("name"); RESULT = new Parametro("name", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_gcic",39, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // cuerpo_parametros_link ::= cuerpo_parametros_link parametros_link 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_link",40, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // cuerpo_parametros_link ::= 
            {
              ArrayList<Parametro> RESULT =null;
		parametros.clear();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_link",40, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // cuerpo_parametros_link ::= cuerpo_parametros_link error 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_link",40, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // parametros_link ::= CORA HREF IGUAL ALLCHARNOSPACE CORC 
            {
              Parametro RESULT =null;
		parametros.add("href");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_link",41, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // texto_comillas_complete ::= ALLCHAR 
            {
              String RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = par.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("texto_comillas_complete",18, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // texto_comillas_complete ::= ALLCHARNOSPACE 
            {
              String RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = par.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("texto_comillas_complete",18, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // texto_comillas_complete ::= ID_ETIQUETA 
            {
              String RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = par.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("texto_comillas_complete",18, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // cuerpo_parametros_body ::= cuerpo_parametros_body parametros_body 
            {
              ArrayList<Parametro> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> l = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		l.add(p); RESULT = l;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_body",42, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // cuerpo_parametros_body ::= 
            {
              ArrayList<Parametro> RESULT =null;
		parametros.clear(); ArrayList<Parametro> lista = new ArrayList<>(); RESULT = lista;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_body",42, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // cuerpo_parametros_body ::= cuerpo_parametros_body error 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_body",42, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // parametros_body ::= CORA BACKGROUND IGUAL colores CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("background"); RESULT = new Parametro("background", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_body",43, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // cuerpo_parametros_spam ::= cuerpo_parametros_spam parametros_spam 
            {
              ArrayList<Parametro> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> l = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		l.add(p); RESULT = l;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_spam",44, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // cuerpo_parametros_spam ::= 
            {
              ArrayList<Parametro> RESULT =null;
		parametros.clear(); ArrayList<Parametro> parametrosSpam = new ArrayList<>(); RESULT = parametrosSpam;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_spam",44, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // cuerpo_parametros_spam ::= cuerpo_parametros_spam error 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_spam",44, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // parametros_spam ::= parametros_textuales 
            {
              Parametro RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro val = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_spam",45, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // cuerpo_parametros_input ::= cuerpo_parametros_input parametros_input 
            {
              ArrayList<Parametro> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> l = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		l.add(p); RESULT = l;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_input",46, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // cuerpo_parametros_input ::= 
            {
              ArrayList<Parametro> RESULT =null;
		parametros.clear(); ArrayList<Parametro> parametrosInput = new ArrayList<>(); RESULT = parametrosInput;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_input",46, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // cuerpo_parametros_input ::= cuerpo_parametros_input error 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_input",46, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // parametros_input ::= CORA TYPE IGUAL tipos_input CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("type"); RESULT = new Parametro("type", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_input",47, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // parametros_input ::= parametros_textuales 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro ide = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = ide;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_input",47, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // cuerpo_parametros_textarea ::= cuerpo_parametros_textarea parametros_textarea 
            {
              ArrayList<Parametro> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> l = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		l.add(p); RESULT = l;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_textarea",48, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // cuerpo_parametros_textarea ::= 
            {
              ArrayList<Parametro> RESULT =null;
		parametros.clear(); ArrayList<Parametro> parametrosTextarea = new ArrayList<>(); RESULT = parametrosTextarea;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_textarea",48, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // cuerpo_parametros_textarea ::= cuerpo_parametros_textarea error 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_textarea",48, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // parametros_textarea ::= CORA FONTSIZE IGUAL PIXELES CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("font-size"); RESULT = new Parametro("font-size", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textarea",49, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // parametros_textarea ::= CORA FONTFAMILY IGUAL font_family CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("font-family"); RESULT = new Parametro("font-family", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textarea",49, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // parametros_textarea ::= CORA TEXTALIGN IGUAL alineaciones CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("text-align"); RESULT = new Parametro("text-align", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textarea",49, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // parametros_textarea ::= CORA ID IGUAL ID_ETIQUETA CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("id"); agregarIdentificador(ide.toString(), ideleft, ideright); RESULT = new Parametro("id", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textarea",49, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // parametros_textarea ::= CORA COLS IGUAL DIGITO_COM CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("cols"); RESULT = new Parametro("cols", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textarea",49, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // parametros_textarea ::= CORA ROWS IGUAL DIGITO_COM CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("rows"); RESULT = new Parametro("rows", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textarea",49, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // cuerpo_parametros_select ::= cuerpo_parametros_select parametros_select 
            {
              ArrayList<Parametro> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> l = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		l.add(p); RESULT = l;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_select",50, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // cuerpo_parametros_select ::= 
            {
              ArrayList<Parametro> RESULT =null;
		parametros.clear(); ArrayList<Parametro> listaParametros = new ArrayList<>(); RESULT = listaParametros;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_select",50, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // cuerpo_parametros_select ::= cuerpo_parametros_select error 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_select",50, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // parametros_select ::= parametros_textuales 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro ide = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = ide;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_select",51, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // cuerpo_parametros_div ::= cuerpo_parametros_div parametros_div 
            {
              ArrayList<Parametro> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> l = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		l.add(p); RESULT = l;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_div",52, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // cuerpo_parametros_div ::= 
            {
              ArrayList<Parametro> RESULT =null;
		parametros.clear(); ArrayList<Parametro> listaParametros = new ArrayList<>(); RESULT = listaParametros;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_div",52, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // cuerpo_parametros_div ::= cuerpo_parametros_div error 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_div",52, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // parametros_div ::= parametros_textuales 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro ide = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = ide;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_div",53, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // parametros_div ::= CORA CLASS IGUAL clases CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("class"); RESULT = new Parametro("class", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_div",53, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // parametros_div ::= CORA BACKGROUND IGUAL colores CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("background"); RESULT = new Parametro("background", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_div",53, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // cuerpo_parametros_img ::= cuerpo_parametros_img parametros_img 
            {
              ArrayList<Parametro> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> l = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		l.add(p); RESULT = l;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_img",54, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // cuerpo_parametros_img ::= 
            {
              ArrayList<Parametro> RESULT =null;
		parametros.clear(); ArrayList<Parametro> parametrosInput = new ArrayList<>(); RESULT = parametrosInput;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_img",54, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // cuerpo_parametros_img ::= cuerpo_parametros_img error 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_img",54, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // parametros_img ::= CORA SRC IGUAL ALLCHARNOSPACE CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("src"); RESULT = new Parametro("src", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_img",55, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // parametros_img ::= CORA WIDTH IGUAL tamaños CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("width"); RESULT = new Parametro("width", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_img",55, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // parametros_img ::= CORA HEIGHT IGUAL tamaños CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("height"); RESULT = new Parametro("height", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_img",55, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // parametros_img ::= CORA ALT IGUAL texto_comillas_complete CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("alt"); RESULT = new Parametro("alt", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_img",55, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // parametros_img ::= CORA ID IGUAL ID_ETIQUETA CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("id"); agregarIdentificador(ide.toString(), ideleft, ideright); RESULT = new Parametro("id", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_img",55, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // cuerpo_parametros_button ::= cuerpo_parametros_button parametros_button 
            {
              ArrayList<Parametro> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> l = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		l.add(p); RESULT = l;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_button",56, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // cuerpo_parametros_button ::= 
            {
              ArrayList<Parametro> RESULT =null;
		parametros.clear(); ArrayList<Parametro> parametrosButton = new ArrayList<>(); RESULT = parametrosButton;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_button",56, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // cuerpo_parametros_button ::= cuerpo_parametros_button error 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_button",56, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // parametros_button ::= parametros_textuales 
            {
              Parametro RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro param = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = param;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_button",57, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // parametros_button ::= CORA ONCLICK IGUAL texto_comillas_complete CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		RESULT = new Parametro("onClick", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_button",57, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // parametros_button ::= CORA BACKGROUND IGUAL colores CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		RESULT = new Parametro("background", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_button",57, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // cuerpo_parametros_h1 ::= cuerpo_parametros_h1 parametros_h1 
            {
              ArrayList<Parametro> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> l = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		l.add(p); RESULT = l;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_h1",58, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // cuerpo_parametros_h1 ::= 
            {
              ArrayList<Parametro> RESULT =null;
		parametros.clear(); ArrayList<Parametro> listaParametros = new ArrayList<>(); RESULT = listaParametros;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_h1",58, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // cuerpo_parametros_h1 ::= cuerpo_parametros_h1 error 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_h1",58, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // parametros_h1 ::= parametros_textuales 
            {
              Parametro RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro val = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_h1",59, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // cuerpo_parametros_p ::= cuerpo_parametros_p parametros_p 
            {
              ArrayList<Parametro> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<Parametro> l = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		l.add(p); RESULT = l;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_p",60, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // cuerpo_parametros_p ::= 
            {
              ArrayList<Parametro> RESULT =null;
		parametros.clear(); ArrayList<Parametro> listaParametros = new ArrayList<>(); RESULT = listaParametros;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_p",60, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // cuerpo_parametros_p ::= cuerpo_parametros_p error 
            {
              ArrayList<Parametro> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_p",60, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // parametros_p ::= parametros_textuales 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Parametro ide = (Parametro)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = ide;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_p",61, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // parametros_textuales ::= CORA FONTSIZE IGUAL PIXELES CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("font-size"); RESULT = new Parametro("font-size", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textuales",37, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // parametros_textuales ::= CORA FONTFAMILY IGUAL font_family CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("font-family"); RESULT = new Parametro("font-family", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textuales",37, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // parametros_textuales ::= CORA TEXTALIGN IGUAL alineaciones CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("text-align"); RESULT = new Parametro("text-align", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textuales",37, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // parametros_textuales ::= CORA ID IGUAL ID_ETIQUETA CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("id"); agregarIdentificador(ide.toString(), ideleft, ideright); RESULT = new Parametro("id", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textuales",37, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // parametros_textuales ::= CORA COLOR IGUAL colores CORC 
            {
              Parametro RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		parametros.add("color"); RESULT = new Parametro("color", ide.toString().replace("\"", "").trim());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_textuales",37, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // colores ::= BLACK 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // colores ::= OLIVE 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // colores ::= TEAL 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // colores ::= RED 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // colores ::= BLUE 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // colores ::= MAROON 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // colores ::= NAVY 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // colores ::= GRAY 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // colores ::= LIME 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // colores ::= FUCHSIA 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // colores ::= GREEN 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // colores ::= WHITE 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // colores ::= PURPLE 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // colores ::= SILVER 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // colores ::= YELLOW 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // colores ::= AQUA 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // colores ::= HEXADECIMAL 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("colores",20, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // font_family ::= COURIER 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("font_family",21, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // font_family ::= VERDANA 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("font_family",21, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // font_family ::= ARIAL 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("font_family",21, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // font_family ::= GENEVA 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("font_family",21, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // font_family ::= SANS_SERIF 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("font_family",21, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // alineaciones ::= LEFT 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("alineaciones",22, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // alineaciones ::= RIGHT 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("alineaciones",22, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // alineaciones ::= CENTER 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("alineaciones",22, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // alineaciones ::= JUSTIFY 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("alineaciones",22, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // clases ::= ROW 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("clases",23, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // clases ::= COLUMN 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("clases",23, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // tamaños ::= PIXELES 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tamaños",24, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // tamaños ::= PORCENTAJE 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tamaños",24, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // tipos_input ::= TEXT 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tipos_input",25, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // tipos_input ::= NUMBER 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tipos_input",25, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // tipos_input ::= RADIO 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tipos_input",25, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // tipos_input ::= CHECKBOX 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("\"", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tipos_input",25, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // scripting ::= apertura_scripting cuerpo_scripting MENOR_CIERRE SCRIPTING MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("scripting",3, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // cuerpo_scripting ::= cuerpo_scripting parametros_scripting 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = l + p + "\n";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_scripting",33, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // cuerpo_scripting ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_scripting",33, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // parametros_scripting ::= apertura_proceso CORA cuerpo_parametros_proceso CORC 
            {
              String RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		String proc = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int crpleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int crpright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String crp = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                String scriptingInterno = "";
                                if(proc.equals("ON_LOAD")) {
                                    scriptingInterno += "window.onload=function()";
                                } else {
                                    scriptingInterno += "function " + proc + "()";
                                }
                                scriptingInterno += "{" + "\n";
                                scriptingInterno += crp;
                                scriptingInterno += "}\n";
                                RESULT = scriptingInterno;
                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_scripting",66, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // parametros_scripting ::= error PARA PARC CORA cuerpo_parametros_proceso CORC 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_scripting",66, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-5)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // parametros_scripting ::= PROCESS error PARC CORA cuerpo_parametros_proceso CORC 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_scripting",66, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-5)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // parametros_scripting ::= PROCESS PARA error CORA cuerpo_parametros_proceso CORC 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_scripting",66, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-5)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // parametros_scripting ::= PROCESS PARA PARC error cuerpo_parametros_proceso CORC 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_scripting",66, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-5)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // apertura_proceso ::= PROCESS PARA PARC 
            {
              String RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		
                                                        procesoActual = agregarProceso(proc.toString(), procleft, procright);
                                                        procesos.add(new Identificador(procesoActual, procleft, procright));
                                                        RESULT = procesoActual;
                                                    
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_proceso",129, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // apertura_proceso ::= ON_LOAD PARA PARC 
            {
              String RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		
                                                        cantOnLoad++; totalOnLoad++;
                                                        procesoActual = proc.toString() + totalOnLoad;
                                                        procesos.add(new Identificador(procesoActual, procleft, procright));
                                                        if(cantOnLoad > 1) {
                                                            agregarErrorSemantico("Ya existe un bloque ON_LOAD() en el scripting.\nConflicto en Linea: " + procleft + " - Columna: " + procright);
                                                        }
                                                        RESULT = proc.toString();
                                                    
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_proceso",129, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // cuerpo_parametros_proceso ::= cuerpo_parametros_proceso parametros_proceso 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                        RESULT = l + p + "\n";
                                                                                    
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_proceso",63, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // cuerpo_parametros_proceso ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_proceso",63, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // cuerpo_parametros_proceso ::= cuerpo_parametros_proceso error 
            {
              String RESULT =null;
		System.out.println("Se ha encontrado un error de prueba");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_proceso",63, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // parametros_proceso ::= parametros_proceso_simples 
            {
              String RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		String par = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                RESULT = par;
                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_proceso",64, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // parametros_proceso ::= condicion_if 
            {
              String RESULT =null;
		RESULT = "IF";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_proceso",64, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // parametros_proceso ::= ciclo_repeat 
            {
              String RESULT =null;
		RESULT = "REPEAT";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_proceso",64, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // parametros_proceso ::= ciclo_while 
            {
              String RESULT =null;
		RESULT = "WHILE";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_proceso",64, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // parametros_proceso ::= error PUNTO_COMA 
            {
              String RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_proceso",64, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // parametros_proceso_simples ::= variables PUNTO_COMA 
            {
              String RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		RESULT = var;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_proceso_simples",65, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // parametros_proceso_simples ::= asignacion_valor PUNTO_COMA 
            {
              String RESULT =null;
		RESULT = "ASIGNACION DE VALORES";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_proceso_simples",65, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // parametros_proceso_simples ::= funciones_especiales PUNTO_COMA 
            {
              String RESULT =null;
		RESULT = "FUNCIONES ESPECIALES";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_proceso_simples",65, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // funciones_especiales ::= funciones_strings 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_especiales",75, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // funciones_especiales ::= CARACTER_ALEATORIO PARA PARC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_especiales",75, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // funciones_especiales ::= NUM_ALEATORIO PARA PARC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_especiales",75, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // funciones_especiales ::= ALERT_INFO PARA condicion PARC 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Dato con = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                            if(verificarTipo(con, string, inileft, iniright)) {

                                                                            }
                                                                        
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_especiales",75, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // funciones_especiales ::= EXIT PARA PARC 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_especiales",75, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // funciones_especiales ::= INSERT PARA cuerpo_insert PARC 
            {
              Object RESULT =null;
		int bodleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int bodright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		String bod = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		insertCompletoPorProceso += bod + "\n";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_especiales",75, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // cuerpo_insert ::= cuerpo_insert COMA parametros_insert 
            {
              String RESULT =null;
		int bodleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int bodright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		String bod = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = bod + "\n" + param;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_insert",71, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // cuerpo_insert ::= parametros_insert 
            {
              String RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = param;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_insert",71, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // parametros_insert ::= ALLCHAR_COMSIMP 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val.toString().replace("'", "").replace("’", "").replace("‘", "").trim();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_insert",72, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // parametros_insert ::= ALFANUMERICO 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                    if(variableExistente(val.toString(), procesoActual)) {
                                                        Dato valorVariable = tablaSimbolos.obtenerDato(val.toString(), procesoActual);
                                                        if(variableValida(val.toString(), procesoActual, string)) {
                                                            if(!valorVariable.getTipo().equals(error)) {
                                                                RESULT = valorVariable.getValor();
                                                            } else {
                                                                agregarErrorSemantico("La variable " + val.toString() + " no es valida para la instrucción insert");
                                                            }
                                                        } else {
                                                            agregarErrorSemantico("La variable " + val.toString() + " no es del tipo string (tipo de la variable: " + valorVariable.getTipo() + ")");
                                                        }
                                                    } else {
                                                        agregarErrorSemantico("La variable " + val.toString() + " no está declarada en el proceso actual.\nConlficto en la Linea: " + valleft + " - Columna: " + valright);
                                                    }
                                                
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_insert",72, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // parametros_insert ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                    if(variableExistente(val.toString(), procesoActual)) {
                                                        Dato valorVariable = tablaSimbolos.obtenerDato(val.toString(), procesoActual);
                                                        if(variableValida(val.toString(), procesoActual, string)) {
                                                            if(!valorVariable.getTipo().equals(error)) {
                                                                RESULT = valorVariable.getValor();
                                                            } else {
                                                                agregarErrorSemantico("La variable " + val.toString() + " no es valida para la instrucción insert");
                                                            }
                                                        } else {
                                                            agregarErrorSemantico("La variable " + val.toString() + " no es del tipo string (tipo de la variable: " + valorVariable.getTipo() + ")");
                                                        }
                                                    } else {
                                                        agregarErrorSemantico("La variable " + val.toString() + " no está declarada en el proceso actual.\nConlficto en la Linea: " + valleft + " - Columna: " + valright);
                                                    }
                                                
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_insert",72, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // funciones_strings ::= ASC PARA condicion PARC 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Dato con = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                            if(verificarTipo(con, string, inileft, iniright)) {
                                                                                
                                                                            }
                                                                        
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_strings",76, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // funciones_strings ::= DESC PARA condicion PARC 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Dato con = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                            if(verificarTipo(con, string, inileft, iniright)) {

                                                                            }
                                                                        
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_strings",76, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // funciones_strings ::= LETPAR_NUM PARA condicion PARC 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Dato con = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                            if(verificarTipo(con, string, inileft, iniright)) {

                                                                            }
                                                                        
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_strings",76, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // funciones_strings ::= LETIMPAR_NUM PARA condicion PARC 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Dato con = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                            if(verificarTipo(con, string, inileft, iniright)) {

                                                                            }
                                                                        
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_strings",76, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // funciones_strings ::= REVERSE PARA condicion PARC 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Dato con = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		
                                                                            if(verificarTipo(con, string, inileft, iniright)) {

                                                                            }
                                                                        
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("funciones_strings",76, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // variables ::= tipos_variables modo cuerpo_identificadores igual_variable 
            {
              String RESULT =null;
		int tipoVarleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int tipoVarright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		String tipoVar = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int modeleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Object mode = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		ArrayList<String> ids = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato valor = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                                        boolean comprobante = true;
                                                                                                        for(String id: ids) {
                                                                                                            if(valor.getValor() != null && valor.getTipo().equals(error) && valor.getValor().equals("vacio")){
                                                                                                                if(!tablaSimbolos.insertarSimbolo(new Simbolo(id, tipoVar, null, mode.toString(), procesoActual))) {
                                                                                                                    Advertencia errorNuevo = new Advertencia("Semantico");
                                                                                                                    if(mode.toString().equals("@global"))
                                                                                                                        errorNuevo.setMensaje("El simbolo " + id + " ya existe.\nConflicto en la Linea: " + tipoVarleft + " - Columna: " + tipoVarright);
                                                                                                                    else 
                                                                                                                        errorNuevo.setMensaje("El simbolo " + id + " ya existe en el procedimiento " + procesoActual + " o es una variable global" + ".\nConflicto en la Linea: " + tipoVarleft + " - Columna: " + tipoVarright);
                                                                                                                    listaErrores.add(errorNuevo);
                                                                                                                    comprobante = false;
                                                                                                                }
                                                                                                            } else if(valor.getTipo().equals(error)) {
                                                                                                                agregarErrorSemantico(valor.getValor() + ".\nConflicto en la Linea: " + tipoVarleft + " - Columna: " + tipoVarright);
                                                                                                                comprobante = false;
                                                                                                            } else {
                                                                                                                if(tipoVar.equals(valor.getTipo())) {
                                                                                                                    if(!tablaSimbolos.insertarSimbolo(new Simbolo(id, tipoVar, valor.getValor(), mode.toString(), procesoActual))){
                                                                                                                        Advertencia errorNuevo = new Advertencia("Semantico");
                                                                                                                        errorNuevo.setMensaje("El simbolo " + id + " ya existe en el procedimiento " + procesoActual + " o es una variable global" + ".\nConflicto en la Linea: " + tipoVarleft + " - Columna: " + tipoVarright);
                                                                                                                        listaErrores.add(errorNuevo);
                                                                                                                        comprobante = false;
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    agregarErrorSemantico("El valor asignado a la(s) variable(s) no es compatible. Conflicto en Linea " + tipoVarleft + " - Columna " + tipoVarright);
                                                                                                                    comprobante = false;
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        String variablesImpresas = "var ";
                                                                                                        if(comprobante){
                                                                                                            int contador = 0;
                                                                                                            for(String id: ids) {
                                                                                                                if(contador > 0) {
                                                                                                                    variablesImpresas += ", ";
                                                                                                                }
                                                                                                                variablesImpresas += id;
                                                                                                                if(valor.getTipo().equals(string)) {
                                                                                                                    variablesImpresas += " = \"" + valor.getValor() + "\"";
                                                                                                                } else if(!valor.getTipo().equals(error)) {
                                                                                                                    variablesImpresas += " = " + valor.getValor();
                                                                                                                }
                                                                                                                contador++;
                                                                                                            }
                                                                                                        }
                                                                                                        variablesImpresas += ";";
                                                                                                        RESULT = variablesImpresas;
                                                                                                    
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("variables",9, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // tipos_variables ::= INTEGER 
            {
              String RESULT =null;
		RESULT = integer;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tipos_variables",90, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // tipos_variables ::= DECIMAL 
            {
              String RESULT =null;
		RESULT = decimal;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tipos_variables",90, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // tipos_variables ::= STRING 
            {
              String RESULT =null;
		RESULT = string;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tipos_variables",90, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // tipos_variables ::= BOOLEAN 
            {
              String RESULT =null;
		RESULT = booleano;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tipos_variables",90, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // tipos_variables ::= CHAR 
            {
              String RESULT =null;
		RESULT = character;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("tipos_variables",90, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // igual_variable ::= IGUAL condicion 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato val = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("igual_variable",91, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // igual_variable ::= 
            {
              Dato RESULT =null;
		RESULT = new Dato(error, "vacio");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("igual_variable",91, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // cuerpo_identificadores ::= cuerpo_identificadores COMA identificadores 
            {
              ArrayList<String> RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		ArrayList<String> ids = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		ids.add(id); RESULT = ids;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_identificadores",99, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // cuerpo_identificadores ::= identificadores 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		ArrayList<String> identificadoresNuevos = new ArrayList<>(); identificadoresNuevos.add(id); RESULT = identificadoresNuevos;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_identificadores",99, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // cuerpo_identificadores ::= cuerpo_identificadores error 
            {
              ArrayList<String> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_identificadores",99, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // cuerpo_identificadores ::= cuerpo_identificadores COMA error 
            {
              ArrayList<String> RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("cuerpo_identificadores",99, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // identificadores ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = id.toString();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("identificadores",26, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // identificadores ::= ALFANUMERICO 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = id.toString();
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("identificadores",26, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // modo ::= GLOBAL 
            {
              Object RESULT =null;
		RESULT = "@global";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("modo",5, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // modo ::= 
            {
              Object RESULT =null;
		RESULT = "-";
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("modo",5, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // strings_concatenados ::= strings_concatenados SUMA strings 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("strings_concatenados",7, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // strings_concatenados ::= strings 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("strings_concatenados",7, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // strings_concatenados ::= strings_concatenados error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("strings_concatenados",7, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // booleanos ::= TRUE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("booleanos",8, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // booleanos ::= FALSE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("booleanos",8, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // booleanos ::= error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("booleanos",8, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // strings ::= ALLCHAR 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("strings",6, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // strings ::= ALLCHARNOSPACE 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("strings",6, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // strings ::= D_STRING 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("strings",6, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // strings ::= ID_ETIQUETA 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("strings",6, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // strings ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("strings",6, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // strings ::= funciones_strings 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("strings",6, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // strings ::= error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("strings",6, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // asignacion_valor ::= cuerpo_identificadores IGUAL condicion 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		ArrayList<String> ids = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato con = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                String tipoVar = con.getTipo();
                                                                                for(String iden: ids) {
                                                                                    if(variableExistente(iden, procesoActual)) {
                                                                                        if(!variableValida(iden, procesoActual, tipoVar)) {
                                                                                            agregarErrorSemantico("La variable: " + iden + " no es del tipo " + tipoVar + ".\nConflicto en la Linea: " + idsleft + " - Columna: " + idsright);
                                                                                        }
                                                                                    } else {
                                                                                        agregarErrorSemantico("La variable " + iden + " no está declarada en el proceso " + procesoActual + ".\nConflicto en la Linea: " + idsleft + " - Columna: " + idsright);
                                                                                    }
                                                                                }
                                                                                
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("asignacion_valor",86, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // condicion_if ::= apertura_if_complete cuerpo_parametros_proceso PUNTOS LLAC END condicion_else_if condicion_else 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_if",77, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-6)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // condicion_if ::= apertura_if parametros_proceso_simples condicion_else_if condicion_else 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_if",77, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // apertura_if_complete ::= IF PARA condicion PARC THEN INIT LLAA PUNTOS 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_if_complete",128, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // apertura_if_complete ::= IF PARA error PARC THEN INIT LLAA PUNTOS 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_if_complete",128, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // apertura_if_complete ::= error PARA condicion PARC THEN INIT LLAA PUNTOS 
            {
              Object RESULT =null;
		listaErrores.get(listaErrores.size()-1).setSolucion("IF");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_if_complete",128, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // apertura_if_complete ::= IF error condicion PARC THEN INIT LLAA PUNTOS 
            {
              Object RESULT =null;
		listaErrores.get(listaErrores.size()-1).setSolucion("(");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_if_complete",128, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // apertura_if_complete ::= IF PARA condicion error THEN INIT LLAA PUNTOS 
            {
              Object RESULT =null;
		listaErrores.get(listaErrores.size()-1).setSolucion(")");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_if_complete",128, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // apertura_if_complete ::= IF PARA condicion PARC error INIT LLAA PUNTOS 
            {
              Object RESULT =null;
		listaErrores.get(listaErrores.size()-1).setSolucion("THEN");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_if_complete",128, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // apertura_if_complete ::= IF PARA condicion PARC THEN error LLAA PUNTOS 
            {
              Object RESULT =null;
		listaErrores.get(listaErrores.size()-1).setSolucion("INIT");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_if_complete",128, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // apertura_if_complete ::= IF PARA condicion PARC THEN INIT error PUNTOS 
            {
              Object RESULT =null;
		listaErrores.get(listaErrores.size()-1).setSolucion("{");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_if_complete",128, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // apertura_if_complete ::= IF PARA condicion PARC THEN INIT LLAA error 
            {
              Object RESULT =null;
		listaErrores.get(listaErrores.size()-1).setSolucion(":");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_if_complete",128, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // apertura_if ::= IF PARA condicion PARC THEN 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("apertura_if",127, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-4)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // condicion_else_if ::= condicion_else_if parametros_else_if 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else_if",83, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // condicion_else_if ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else_if",83, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // parametros_else_if ::= ELSE IF PARA condicion PARC THEN INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // parametros_else_if ::= ELSE IF PARA condicion PARC THEN parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-6)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // parametros_else_if ::= ELSE error PARA condicion PARC THEN INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // parametros_else_if ::= ELSE IF error condicion PARC THEN INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // parametros_else_if ::= ELSE IF PARA error PARC THEN INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // parametros_else_if ::= ELSE IF PARA condicion error THEN INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // parametros_else_if ::= ELSE IF PARA condicion PARC error INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // parametros_else_if ::= ELSE IF PARA condicion PARC THEN error LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // parametros_else_if ::= ELSE IF PARA condicion PARC THEN INIT error PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // parametros_else_if ::= ELSE IF PARA condicion PARC THEN INIT LLAA error cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // parametros_else_if ::= ELSE IF PARA condicion PARC THEN INIT LLAA PUNTOS cuerpo_parametros_proceso error LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // parametros_else_if ::= ELSE IF PARA condicion PARC THEN INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS error END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // parametros_else_if ::= ELSE IF PARA condicion PARC THEN INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-12)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$EtiquetadoParser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$EtiquetadoParser$do_action_part00000001(
    int                        CUP$EtiquetadoParser$act_num,
    java_cup.runtime.lr_parser CUP$EtiquetadoParser$parser,
    java.util.Stack            CUP$EtiquetadoParser$stack,
    int                        CUP$EtiquetadoParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$EtiquetadoParser$result;

      /* select the action based on the action number */
      switch (CUP$EtiquetadoParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // parametros_else_if ::= ELSE error PARA condicion PARC THEN parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-6)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // parametros_else_if ::= ELSE IF error condicion PARC THEN parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-6)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // parametros_else_if ::= ELSE IF PARA error PARC THEN parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-6)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // parametros_else_if ::= ELSE IF PARA condicion error THEN parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-6)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // parametros_else_if ::= ELSE IF PARA condicion PARC error parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("parametros_else_if",84, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-6)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // condicion_else ::= ELSE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // condicion_else ::= ELSE parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // condicion_else ::= 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // condicion_else ::= ELSE error LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // condicion_else ::= ELSE INIT error PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // condicion_else ::= ELSE INIT LLAA error cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // condicion_else ::= ELSE INIT LLAA PUNTOS cuerpo_parametros_proceso error LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // condicion_else ::= ELSE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS error END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // condicion_else ::= ELSE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion_else",85, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-7)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA repetir_limite PARC parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-8)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // ciclo_repeat ::= error PARA repetir_declaracion PARC HUNTIL PARA repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // ciclo_repeat ::= REPEAT error repetir_declaracion PARC HUNTIL PARA repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // ciclo_repeat ::= REPEAT PARA error PARC HUNTIL PARA repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // ciclo_repeat ::= REPEAT PARA repetir_declaracion error HUNTIL PARA repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC error PARA repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL error repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA error PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA repetir_limite error INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA repetir_limite PARC error LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA repetir_limite PARC INIT error PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA repetir_limite PARC INIT LLAA error cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso error LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS error END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA repetir_limite PARC INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-14)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // ciclo_repeat ::= REPEAT error repetir_declaracion PARC HUNTIL PARA repetir_limite PARC parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-8)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // ciclo_repeat ::= REPEAT PARA error PARC HUNTIL PARA repetir_limite PARC parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-8)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // ciclo_repeat ::= REPEAT PARA repetir_declaracion error HUNTIL PARA repetir_limite PARC parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-8)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC error PARA repetir_limite PARC parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-8)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL error repetir_limite PARC parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-8)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA error PARC parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-8)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // ciclo_repeat ::= REPEAT PARA repetir_declaracion PARC HUNTIL PARA repetir_limite error parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_repeat",78, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-8)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // repetir_declaracion ::= INTEGER identificadores IGUAL condicion 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).left;
		int entright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato val = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                if(val.getTipo().equals(integer)) {
                                                                                    if(!tablaSimbolos.insertarSimbolo(new Simbolo(ide.toString(), integer, val.getValor(), "-", procesoActual))){
                                                                                        agregarErrorSemantico("El simbolo " + ide.toString() + " ya existe en el procedimiento " + procesoActual + ".\nConflicto en Linea: " + entleft + " - Columna: " + entright);
                                                                                    }
                                                                                } else {
                                                                                    agregarErrorSemantico("El valor asignado a la variable no es compatible.\n Conflicto en Linea: " + entleft + " - Columna: " + entright);
                                                                                }
                                                                                
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("repetir_declaracion",79, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-3)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // repetir_declaracion ::= identificadores IGUAL condicion 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		String ide = (String)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato val = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                if(!val.getTipo().equals(integer)) {
                                                                                    agregarErrorSemantico("El valor a asignar no es de tipo integer, recuerde que REPEAT solo acepta parametros de tipo integer.\nConflicto en Linea: " + valleft + " - Columna: " + valright);
                                                                                }
                                                                                if(variableExistente(ide.toString(), procesoActual)) {
                                                                                    if(variableValida(ide.toString(), procesoActual, integer)) {
                                                                                        
                                                                                    } else {
                                                                                        agregarErrorSemantico("La variable " + ide.toString() + " no es una variable de tipo integer.\nConflicto en Linea: " + ideleft + " - Columna: " + ideright);
                                                                                    }
                                                                                } else {
                                                                                    agregarErrorSemantico("La variable " + ide.toString() + " no está declarada en el proceso " + procesoActual + ".\nConflicto en Linea: " + ideleft + " - Columna: " + ideright);
                                                                                }
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("repetir_declaracion",79, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // repetir_limite ::= D_INTEGER 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("repetir_limite",80, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // repetir_limite ::= identificadores 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("repetir_limite",80, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // igual_repeat ::= D_INTEGER 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("igual_repeat",81, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // ciclo_while ::= WHILE PARA condicion PARC THENWHILE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // ciclo_while ::= WHILE PARA condicion PARC THENWHILE parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-5)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // ciclo_while ::= error PARA condicion PARC THENWHILE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // ciclo_while ::= WHILE error condicion PARC THENWHILE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // ciclo_while ::= WHILE PARA error PARC THENWHILE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // ciclo_while ::= WHILE PARA condicion error THENWHILE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // ciclo_while ::= WHILE PARA condicion PARC error INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // ciclo_while ::= WHILE PARA condicion PARC THENWHILE error LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // ciclo_while ::= WHILE PARA condicion PARC THENWHILE INIT error PUNTOS cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // ciclo_while ::= WHILE PARA condicion PARC THENWHILE INIT LLAA error cuerpo_parametros_proceso PUNTOS LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // ciclo_while ::= WHILE PARA condicion PARC THENWHILE INIT LLAA PUNTOS cuerpo_parametros_proceso error LLAC END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // ciclo_while ::= WHILE PARA condicion PARC THENWHILE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS error END 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // ciclo_while ::= WHILE PARA condicion PARC THENWHILE INIT LLAA PUNTOS cuerpo_parametros_proceso PUNTOS LLAC error 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-11)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // ciclo_while ::= WHILE error condicion PARC THENWHILE parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-5)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // ciclo_while ::= WHILE PARA error PARC THENWHILE parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-5)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // ciclo_while ::= WHILE PARA condicion error THENWHILE parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-5)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // ciclo_while ::= WHILE PARA condicion PARC error parametros_proceso_simples 
            {
              Object RESULT =null;

              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("ciclo_while",82, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-5)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // condicion ::= condicion IGUAL_IGUAL condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoCondicionado = operacionesBooleanas.igualIgual(dato1, dato2);
                                                                                System.out.println("\n" + dato1.getTipo() + ":" + dato1.getValor() + " == " + dato2.getTipo() + ":" + dato2.getValor() + "\n");
                                                                                if(datoCondicionado.getTipo().equals(error)) {
                                                                                    agregarErrorSemantico(datoCondicionado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                }
                                                                                RESULT = datoCondicionado;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // condicion ::= condicion DIFERENTE_IGUAL condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoCondicionado = operacionesBooleanas.diferenteIgual(dato1, dato2);
                                                                                if(datoCondicionado.getTipo().equals(error)) {
                                                                                    agregarErrorSemantico(datoCondicionado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                }
                                                                                RESULT = datoCondicionado;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // condicion ::= condicion MENOR_QUE condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoCondicionado = operacionesBooleanas.menorQue(dato1, dato2);
                                                                                if(datoCondicionado.getTipo().equals(error)) {
                                                                                    agregarErrorSemantico(datoCondicionado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                }
                                                                                RESULT = datoCondicionado;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // condicion ::= condicion MENOR_IGUAL condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoCondicionado = operacionesBooleanas.menorIgual(dato1, dato2);
                                                                                if(datoCondicionado.getTipo().equals(error)) {
                                                                                    agregarErrorSemantico(datoCondicionado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                }
                                                                                RESULT = datoCondicionado;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // condicion ::= condicion MAYOR_QUE condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoCondicionado = operacionesBooleanas.mayorQue(dato1, dato2);
                                                                                System.out.println("\n" + dato1.getTipo() + ":" + dato1.getValor() + " > " + dato2.getTipo() + ":" + dato2.getValor() + "\n");
                                                                                if(datoCondicionado.getTipo().equals(error)) {
                                                                                    agregarErrorSemantico(datoCondicionado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                }
                                                                                RESULT = datoCondicionado;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // condicion ::= condicion MAYOR_IGUAL condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoCondicionado = operacionesBooleanas.mayorIgual(dato1, dato2);
                                                                                if(datoCondicionado.getTipo().equals(error)) {
                                                                                    agregarErrorSemantico(datoCondicionado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                }
                                                                                RESULT = datoCondicionado;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // condicion ::= NOT condicion 
            {
              Dato RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoCondicionado = operacionesBooleanas.not(dato);
                                                                                if(datoCondicionado.getTipo().equals(error)) {
                                                                                    agregarErrorSemantico(datoCondicionado.getValor() + ".\nConflicto en Linea " + datoleft + " - Columna " + datoright);
                                                                                }
                                                                                RESULT = datoCondicionado;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // condicion ::= condicion AND condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoCondicionado = operacionesBooleanas.and(dato1, dato2);
                                                                                System.out.println("\n" + dato1.getTipo() + ":" + dato1.getValor() + " && " + dato2.getTipo() + ":" + dato2.getValor() + "\n");
                                                                                if(datoCondicionado.getTipo().equals(error)) {
                                                                                    agregarErrorSemantico(datoCondicionado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                }
                                                                                RESULT = datoCondicionado;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // condicion ::= condicion OR condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoCondicionado = operacionesBooleanas.or(dato1, dato2);
                                                                                if(datoCondicionado.getTipo().equals(error)) {
                                                                                    agregarErrorSemantico(datoCondicionado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                }
                                                                                RESULT = datoCondicionado;
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // condicion ::= RESTA condicion 
            {
              Dato RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoMultiplicado = tablaOperaciones.menosUnario(dato);
                                                                                if(datoMultiplicado.getTipo().equals(error)) {
                                                                                    if(datoMultiplicado.getValor() != null) {
                                                                                        agregarErrorSemantico("El dato " + dato.getValor() + " no es compatible para operar de manera unaria.\nConflicto en Linea " + datoleft + " - Columna " + datoright);
                                                                                    } else {
                                                                                        agregarErrorSemantico(datoMultiplicado.getValor() + ".\nConflicto en Linea " + datoleft + " - Columna " + datoright);
                                                                                    }
                                                                                    RESULT = datoMultiplicado;
                                                                                } else {
                                                                                    RESULT = datoMultiplicado;
                                                                                }
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // condicion ::= condicion SUMA condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoSumado = tablaOperaciones.sumar(dato1, dato2);
                                                                                if(datoSumado.getTipo().equals(error)) {
                                                                                    if(datoSumado.getValor() != null) {
                                                                                        agregarErrorSemantico("Los datos " + dato1.getValor() + " y " + dato2.getValor() + " no son compatibles para sumar.\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                    } else {
                                                                                        agregarErrorSemantico(datoSumado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                    }
                                                                                    RESULT = datoSumado;
                                                                                } else {
                                                                                    RESULT = datoSumado;
                                                                                }
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // condicion ::= condicion RESTA condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoRestado = tablaOperaciones.restar(dato1, dato2);
                                                                                if(datoRestado.getTipo().equals(error)) {
                                                                                    if(datoRestado.getValor() != null) {
                                                                                        agregarErrorSemantico("Los datos " + dato1.getValor() + " y " + dato2.getValor() + " no son compatibles para restar.\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                    } else {
                                                                                        agregarErrorSemantico(datoRestado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                    }
                                                                                    RESULT = datoRestado;
                                                                                } else {
                                                                                    RESULT = datoRestado;
                                                                                }
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // condicion ::= condicion MULTIPLICACION condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoMultiplicado = tablaOperaciones.multiplicar(dato1, dato2);
                                                                                if(datoMultiplicado.getTipo().equals(error)) {
                                                                                    if(datoMultiplicado.getValor() != null) {
                                                                                        agregarErrorSemantico("Los datos " + dato1.getValor() + " y " + dato2.getValor() + " no son compatibles para multiplicar.\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                    } else {
                                                                                        agregarErrorSemantico(datoMultiplicado.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                    }
                                                                                    RESULT = datoMultiplicado;
                                                                                } else {
                                                                                    RESULT = datoMultiplicado;
                                                                                }
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // condicion ::= condicion DIVISION condicion 
            {
              Dato RESULT =null;
		int dato1left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).left;
		int dato1right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).right;
		Dato dato1 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)).value;
		int dato2left = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int dato2right = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato2 = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                                                Dato datoDividido = tablaOperaciones.dividir(dato1, dato2);
                                                                                if(datoDividido.getTipo().equals(error)) {
                                                                                    if(datoDividido.getValor() != null) {
                                                                                        agregarErrorSemantico("Los datos " + dato1.getValor() + " y " + dato2.getValor() + " no son compatibles para dividir.\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                    } else {
                                                                                        agregarErrorSemantico(datoDividido.getValor() + ".\nConflicto en Linea " + dato1left + " - Columna " + dato1right);
                                                                                    }
                                                                                    RESULT = datoDividido;
                                                                                } else {
                                                                                    RESULT = datoDividido;
                                                                                }
                                                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // condicion ::= valor_condicion 
            {
              Dato RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = dato;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // condicion ::= PARA condicion PARC 
            {
              Dato RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).right;
		Dato dato = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-1)).value;
		RESULT = dato;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("condicion",87, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.elementAt(CUP$EtiquetadoParser$top-2)), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // valor_condicion ::= valor_numerico 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Dato val = (Dato)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = val;
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_condicion",88, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // valor_numerico ::= D_INTEGER 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = new Dato(integer, val.toString());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // valor_numerico ::= D_DECIMAL 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = new Dato(decimal, val.toString());
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // valor_numerico ::= IDENTIFICADOR 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                Dato nuevoDato = tablaSimbolos.obtenerDato(val.toString(), procesoActual);
                                                if(nuevoDato.getTipo().equals(error)) {
                                                    agregarErrorSemantico(nuevoDato.getValor() + ".\nConflicto en Linea: " + valleft + " - Columna: " + valright);
                                                }
                                                RESULT = nuevoDato;
                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // valor_numerico ::= ALFANUMERICO 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		
                                                Dato nuevoDato = tablaSimbolos.obtenerDato(val.toString(), procesoActual);
                                                if(nuevoDato.getTipo().equals(error)) {
                                                    agregarErrorSemantico(nuevoDato.getValor() + ".\nConflicto en Linea: " + valleft + " - Columna: " + valright);
                                                }
                                                RESULT = nuevoDato;
                                            
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // valor_numerico ::= D_CHAR 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		String caracterSt = val.toString().substring(1,2); RESULT = new Dato(character, caracterSt);
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // valor_numerico ::= ALLCHAR 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = new Dato(string, val.toString().replace("\"", ""));
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // valor_numerico ::= ALLCHARNOSPACE 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = new Dato(string, val.toString().replace("\"", ""));
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // valor_numerico ::= D_STRING 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = new Dato(string, val.toString().replace("\"", ""));
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // valor_numerico ::= ID_ETIQUETA 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = new Dato(string, val.toString().replace("\"", ""));
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // valor_numerico ::= TRUE 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = new Dato(booleano, "true");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // valor_numerico ::= FALSE 
            {
              Dato RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$EtiquetadoParser$stack.peek()).value;
		RESULT = new Dato(booleano, "false");
              CUP$EtiquetadoParser$result = parser.getSymbolFactory().newSymbol("valor_numerico",98, ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$EtiquetadoParser$stack.peek()), RESULT);
            }
          return CUP$EtiquetadoParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$EtiquetadoParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$EtiquetadoParser$do_action(
    int                        CUP$EtiquetadoParser$act_num,
    java_cup.runtime.lr_parser CUP$EtiquetadoParser$parser,
    java.util.Stack            CUP$EtiquetadoParser$stack,
    int                        CUP$EtiquetadoParser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$EtiquetadoParser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$EtiquetadoParser$do_action_part00000000(
                               CUP$EtiquetadoParser$act_num,
                               CUP$EtiquetadoParser$parser,
                               CUP$EtiquetadoParser$stack,
                               CUP$EtiquetadoParser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$EtiquetadoParser$do_action_part00000001(
                               CUP$EtiquetadoParser$act_num,
                               CUP$EtiquetadoParser$parser,
                               CUP$EtiquetadoParser$stack,
                               CUP$EtiquetadoParser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
