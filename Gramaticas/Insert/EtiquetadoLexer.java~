// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: InsertLexer.jflex

//Secci√≥n de Importaciones
package com.froi.pruebas.gramaticas;
import java_cup.runtime.*;
import static com.froi.pruebas.gramaticas.InsertParserSym.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class EtiquetadoLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\7\0\1\12\1\0"+
    "\1\13\1\14\1\15\10\16\2\0\1\17\1\0\1\20"+
    "\2\0\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\32\1\41\1\42\1\43\1\44\1\45\1\32"+
    "\1\46\1\47\1\32\4\0\1\50\1\0\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\0\1\103\104\0\1\104\7\0\1\104\3\0\1\104"+
    "\5\0\1\104\6\0\1\104\6\0\1\104\7\0\1\104"+
    "\3\0\1\104\5\0\1\104\6\0\1\104\1\0\1\104"+
    "\u0103\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\5\16\3"+
    "\1\2\36\0\1\6\2\7\7\3\1\10\7\3\1\11"+
    "\26\0\1\12\30\0\1\13\1\14\37\0\7\7\1\15"+
    "\2\7\1\16\11\3\1\17\3\3\76\0\1\20\1\21"+
    "\41\0\1\7\1\22\3\7\1\23\12\7\3\3\1\24"+
    "\2\3\1\25\1\26\1\3\1\27\1\3\1\30\1\3"+
    "\100\0\1\31\26\0\1\32\1\0\1\33\10\0\2\7"+
    "\1\34\2\7\1\35\10\7\1\3\1\36\1\37\1\0"+
    "\2\3\1\0\1\40\76\0\1\41\1\0\1\42\4\0"+
    "\1\43\2\0\1\44\1\45\1\0\1\46\7\0\1\47"+
    "\1\50\3\0\1\51\1\7\1\52\1\53\1\7\1\54"+
    "\3\7\1\55\2\7\1\3\2\0\1\56\1\3\53\0"+
    "\1\57\3\0\1\60\4\0\1\61\3\0\1\62\1\0"+
    "\1\63\1\64\2\0\1\65\2\0\1\7\1\66\4\7"+
    "\1\67\1\3\2\0\1\70\36\0\1\71\1\0\1\72"+
    "\1\0\1\73\2\0\1\74\1\75\1\76\1\0\1\77"+
    "\1\100\1\101\1\102\1\7\1\103\1\7\1\3\17\0"+
    "\1\104\1\105\1\0\1\106\1\107\1\0\2\7\1\3"+
    "\1\0\1\110\5\0\1\111\1\0\1\7\1\112\1\113"+
    "\1\0\1\114\3\0\1\115\1\116\2\0\1\117";

  private static int [] zzUnpackAction() {
    int [] result = new int[698];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\105\0\212\0\317\0\u0114\0\u0159\0\105"+
    "\0\u019e\0\u01e3\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381"+
    "\0\u03c6\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9"+
    "\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1"+
    "\0\u0816\0\u085b\0\u08a0\0\u08e5\0\u092a\0\u096f\0\u09b4\0\u09f9"+
    "\0\u0a3e\0\u0a83\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc\0\u0c21"+
    "\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a\0\105\0\u0dbf\0\u0e04"+
    "\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u019e"+
    "\0\u102c\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185\0\u11ca\0\105"+
    "\0\u120f\0\u1254\0\u1299\0\u12de\0\u1323\0\u1368\0\u13ad\0\u13f2"+
    "\0\u1437\0\u147c\0\u14c1\0\u1506\0\u154b\0\u1590\0\u15d5\0\u161a"+
    "\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773\0\u17b8\0\105\0\u17fd"+
    "\0\u1842\0\u1887\0\u18cc\0\u1911\0\u1956\0\u199b\0\u19e0\0\u1a25"+
    "\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d"+
    "\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\105"+
    "\0\105\0\u1e75\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u2013"+
    "\0\u2058\0\u209d\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u21f6\0\u223b"+
    "\0\u2280\0\u22c5\0\u230a\0\u234f\0\u2394\0\u23d9\0\u241e\0\u2463"+
    "\0\u24a8\0\u24ed\0\u2532\0\u2577\0\u25bc\0\u2601\0\u2646\0\u268b"+
    "\0\u26d0\0\u2715\0\u275a\0\u279f\0\u27e4\0\u2829\0\u286e\0\u0dbf"+
    "\0\u28b3\0\u28f8\0\u019e\0\u293d\0\u2982\0\u29c7\0\u2a0c\0\u2a51"+
    "\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\u019e\0\u2baa\0\u2bef\0\u2c34"+
    "\0\u2c79\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d\0\u2dd2\0\u2e17\0\u2e5c"+
    "\0\u2ea1\0\u2ee6\0\u2f2b\0\u2f70\0\u2fb5\0\u2ffa\0\u303f\0\u3084"+
    "\0\u30c9\0\u310e\0\u3153\0\u3198\0\u31dd\0\u3222\0\u3267\0\u32ac"+
    "\0\u32f1\0\u3336\0\u337b\0\u33c0\0\u3405\0\u344a\0\u348f\0\u34d4"+
    "\0\u3519\0\u355e\0\u35a3\0\u35e8\0\u362d\0\u3672\0\u36b7\0\u36fc"+
    "\0\u3741\0\u3786\0\u37cb\0\u3810\0\u3855\0\u389a\0\u38df\0\u3924"+
    "\0\u3969\0\u39ae\0\u39f3\0\u3a38\0\u3a7d\0\u3ac2\0\u3b07\0\u3b4c"+
    "\0\u3b91\0\u3bd6\0\u3c1b\0\u3c60\0\u3ca5\0\u3cea\0\105\0\105"+
    "\0\u3d2f\0\u3d74\0\u3db9\0\u3dfe\0\u3e43\0\u3e88\0\u3ecd\0\u3f12"+
    "\0\u3f57\0\u3f9c\0\u3fe1\0\u4026\0\u406b\0\u40b0\0\u40f5\0\u413a"+
    "\0\u417f\0\u41c4\0\u4209\0\u424e\0\u4293\0\u42d8\0\u431d\0\u4362"+
    "\0\u43a7\0\u43ec\0\u4431\0\u4476\0\u44bb\0\u4500\0\u4545\0\u458a"+
    "\0\u45cf\0\u4614\0\u0dbf\0\u4659\0\u469e\0\u46e3\0\u0dbf\0\u4728"+
    "\0\u476d\0\u47b2\0\u47f7\0\u483c\0\u4881\0\u48c6\0\u490b\0\u4950"+
    "\0\u4995\0\u49da\0\u4a1f\0\u4a64\0\u019e\0\u4aa9\0\u4aee\0\u019e"+
    "\0\u019e\0\u4b33\0\u019e\0\u4b78\0\u019e\0\u4bbd\0\u4c02\0\u4c47"+
    "\0\u4c8c\0\u4cd1\0\u4d16\0\u4d5b\0\u4da0\0\u4de5\0\u4e2a\0\u4e6f"+
    "\0\u4eb4\0\u4ef9\0\u4f3e\0\u4f83\0\u4fc8\0\u500d\0\u5052\0\u5097"+
    "\0\u50dc\0\u5121\0\u5166\0\u51ab\0\u51f0\0\u5235\0\u527a\0\u52bf"+
    "\0\u5304\0\u5349\0\u538e\0\u53d3\0\u5418\0\u545d\0\u54a2\0\u54e7"+
    "\0\u552c\0\u5571\0\u55b6\0\u55fb\0\u5640\0\u5685\0\u56ca\0\u570f"+
    "\0\u5754\0\u5799\0\u57de\0\u5823\0\u5868\0\u58ad\0\u58f2\0\u5937"+
    "\0\u597c\0\u59c1\0\u5a06\0\u5a4b\0\u5a90\0\u5ad5\0\u5b1a\0\u5b5f"+
    "\0\u5ba4\0\u5be9\0\u5c2e\0\u5c73\0\u5cb8\0\u5cfd\0\105\0\u5d42"+
    "\0\u5d87\0\u5dcc\0\u5e11\0\u5e56\0\u5e9b\0\u5ee0\0\u5f25\0\u5f6a"+
    "\0\u5faf\0\u5ff4\0\u6039\0\u607e\0\u60c3\0\u6108\0\u614d\0\u6192"+
    "\0\u61d7\0\u621c\0\u6261\0\u62a6\0\u62eb\0\105\0\u6330\0\105"+
    "\0\u6375\0\u63ba\0\u63ff\0\u6444\0\u6489\0\u64ce\0\u6513\0\u6558"+
    "\0\u659d\0\u65e2\0\u0dbf\0\u6627\0\u666c\0\u0dbf\0\u66b1\0\u66f6"+
    "\0\u673b\0\u6780\0\u67c5\0\u680a\0\u684f\0\u6894\0\u68d9\0\u019e"+
    "\0\u019e\0\u691e\0\u6963\0\u69a8\0\u69ed\0\u019e\0\u6a32\0\u6a77"+
    "\0\u6abc\0\u6b01\0\u6b46\0\u6b8b\0\u6bd0\0\u6c15\0\u6c5a\0\u6c9f"+
    "\0\u6ce4\0\u6d29\0\u6d6e\0\u6db3\0\u6df8\0\u6e3d\0\u6e82\0\u6ec7"+
    "\0\u6f0c\0\u6f51\0\u6f96\0\u6fdb\0\u7020\0\u7065\0\u70aa\0\u70ef"+
    "\0\u7134\0\u7179\0\u71be\0\u7203\0\u7248\0\u728d\0\u72d2\0\u7317"+
    "\0\u735c\0\u73a1\0\u73e6\0\u742b\0\u7470\0\u74b5\0\u74fa\0\u753f"+
    "\0\u7584\0\u75c9\0\u760e\0\u7653\0\u7698\0\u76dd\0\u7722\0\u7767"+
    "\0\u77ac\0\u77f1\0\u7836\0\u787b\0\u78c0\0\u7905\0\u794a\0\u798f"+
    "\0\u79d4\0\u7a19\0\u7a5e\0\u7aa3\0\105\0\u7ae8\0\105\0\u7b2d"+
    "\0\u7b72\0\u7bb7\0\u7bfc\0\105\0\u7c41\0\u7c86\0\105\0\105"+
    "\0\u7ccb\0\105\0\u7d10\0\u7d55\0\u7d9a\0\u7ddf\0\u7e24\0\u7e69"+
    "\0\u7eae\0\105\0\105\0\u7ef3\0\u7f38\0\u7f7d\0\u0dbf\0\u7fc2"+
    "\0\u0dbf\0\u0dbf\0\u8007\0\u0dbf\0\u804c\0\u8091\0\u80d6\0\u0dbf"+
    "\0\u811b\0\u8160\0\u81a5\0\u81ea\0\u822f\0\u019e\0\u8274\0\u82b9"+
    "\0\u82fe\0\u8343\0\u8388\0\u83cd\0\u8412\0\u8457\0\u849c\0\u84e1"+
    "\0\u8526\0\u856b\0\u85b0\0\u85f5\0\u863a\0\u867f\0\u86c4\0\u8709"+
    "\0\u874e\0\u8793\0\u87d8\0\u881d\0\u8862\0\u88a7\0\u88ec\0\u8931"+
    "\0\u8976\0\u89bb\0\u8a00\0\u8a45\0\u8a8a\0\u8acf\0\u8b14\0\u8b59"+
    "\0\u8b9e\0\u8be3\0\u8c28\0\u8c6d\0\u8cb2\0\u8cf7\0\u8d3c\0\u8d81"+
    "\0\u8dc6\0\u8e0b\0\105\0\u8e50\0\u8e95\0\u8eda\0\105\0\u8f1f"+
    "\0\u8f64\0\u8fa9\0\u8fee\0\105\0\u9033\0\u9078\0\u90bd\0\105"+
    "\0\u9102\0\105\0\105\0\u9147\0\u918c\0\105\0\u91d1\0\u9216"+
    "\0\u925b\0\u0dbf\0\u92a0\0\u92e5\0\u932a\0\u936f\0\u0dbf\0\u93b4"+
    "\0\u93f9\0\u943e\0\u019e\0\u9483\0\u94c8\0\u950d\0\u9552\0\u9597"+
    "\0\u95dc\0\u9621\0\u9666\0\u96ab\0\u96f0\0\u9735\0\u977a\0\u97bf"+
    "\0\u9804\0\u9849\0\u988e\0\u98d3\0\u9918\0\u995d\0\u99a2\0\u99e7"+
    "\0\u9a2c\0\u9a71\0\u9ab6\0\u9afb\0\u9b40\0\u9b85\0\u9bca\0\u9c0f"+
    "\0\u9c54\0\105\0\u9c99\0\105\0\u9cde\0\105\0\u9d23\0\u9d68"+
    "\0\105\0\105\0\105\0\u9dad\0\105\0\105\0\u0dbf\0\u0dbf"+
    "\0\u9df2\0\u0dbf\0\u9e37\0\u9e7c\0\u9ec1\0\u9f06\0\u9f4b\0\u9f90"+
    "\0\u9fd5\0\ua01a\0\ua05f\0\ua0a4\0\ua0e9\0\ua12e\0\ua173\0\ua1b8"+
    "\0\ua1fd\0\ua242\0\ua287\0\105\0\105\0\ua2cc\0\105\0\105"+
    "\0\ua311\0\ua356\0\ua39b\0\ua3e0\0\ua425\0\105\0\ua46a\0\ua4af"+
    "\0\ua4f4\0\ua539\0\ua57e\0\105\0\ua5c3\0\ua608\0\u0dbf\0\u019e"+
    "\0\ua64d\0\105\0\ua692\0\ua6d7\0\ua71c\0\u0dbf\0\105\0\ua761"+
    "\0\ua7a6\0\105";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[698];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\4\3\1\4\1\5\5\2\3\6\1\7\1\10"+
    "\2\11\1\12\24\11\1\2\1\13\1\14\1\15\2\11"+
    "\1\16\1\11\1\17\1\20\4\11\1\21\1\22\2\11"+
    "\1\23\1\24\1\25\2\11\1\26\3\11\1\3\1\6"+
    "\112\0\1\27\77\0\1\30\1\31\1\32\1\30\1\33"+
    "\1\30\1\0\1\34\1\35\1\30\1\35\1\30\1\36"+
    "\2\37\2\30\1\40\1\35\1\41\3\35\1\42\15\35"+
    "\1\43\3\35\1\44\1\45\1\46\2\35\1\47\1\50"+
    "\2\35\1\51\1\35\1\52\1\53\1\54\1\55\1\56"+
    "\1\35\1\57\1\60\1\61\2\35\1\62\1\35\1\63"+
    "\1\35\1\30\1\35\14\0\3\6\2\0\27\6\1\0"+
    "\32\6\1\0\1\6\1\0\1\64\2\0\1\64\1\65"+
    "\5\0\1\66\105\0\3\11\2\0\27\11\1\67\32\11"+
    "\1\0\1\11\14\0\3\11\2\0\27\11\1\70\32\11"+
    "\1\0\1\11\14\0\3\11\2\0\27\11\1\67\13\11"+
    "\1\71\16\11\1\0\1\11\14\0\3\11\2\0\27\11"+
    "\1\67\1\72\31\11\1\0\1\11\14\0\3\11\2\0"+
    "\27\11\1\70\13\11\1\73\2\11\1\74\13\11\1\0"+
    "\1\11\14\0\3\11\2\0\27\11\1\67\16\11\1\75"+
    "\13\11\1\0\1\11\14\0\3\11\2\0\27\11\1\67"+
    "\4\11\1\76\14\11\1\77\10\11\1\0\1\11\14\0"+
    "\3\11\2\0\27\11\1\67\3\11\1\100\26\11\1\0"+
    "\1\11\14\0\3\11\2\0\27\11\1\67\1\101\31\11"+
    "\1\0\1\11\14\0\3\11\2\0\27\11\1\67\15\11"+
    "\1\102\14\11\1\0\1\11\14\0\3\11\2\0\27\11"+
    "\1\67\16\11\1\103\13\11\1\0\1\11\14\0\3\11"+
    "\2\0\27\11\1\67\21\11\1\104\10\11\1\0\1\11"+
    "\14\0\3\11\2\0\27\11\1\67\4\11\1\105\23\11"+
    "\1\106\1\11\1\0\1\11\14\0\3\11\2\0\27\11"+
    "\1\67\10\11\1\107\21\11\1\0\1\11\2\27\2\0"+
    "\101\27\2\30\1\32\1\30\1\32\1\30\1\110\77\30"+
    "\1\31\1\32\1\30\1\33\1\30\1\110\1\34\4\30"+
    "\1\111\2\112\2\30\1\113\1\30\1\114\3\30\1\115"+
    "\15\30\1\116\3\30\1\117\1\120\1\121\2\30\1\122"+
    "\1\123\2\30\1\124\1\30\1\125\1\126\1\127\1\130"+
    "\1\131\1\30\1\132\1\133\1\134\2\30\1\135\1\30"+
    "\1\136\3\30\6\32\1\137\77\32\1\33\2\32\1\33"+
    "\1\32\1\137\1\140\4\32\1\141\2\142\2\32\1\143"+
    "\1\32\1\144\3\32\1\145\15\32\1\146\3\32\1\147"+
    "\1\150\1\151\2\32\1\152\1\153\2\32\1\154\1\32"+
    "\1\155\1\156\1\157\1\160\1\161\1\32\1\162\1\163"+
    "\1\164\2\32\1\165\1\32\1\166\3\32\2\30\1\32"+
    "\1\30\1\32\1\30\1\110\5\30\3\167\2\30\6\167"+
    "\22\30\6\167\30\30\1\32\1\30\1\32\1\30\1\170"+
    "\1\30\1\35\1\30\1\35\1\30\3\35\2\30\62\35"+
    "\1\30\1\35\1\30\1\111\1\32\1\30\1\141\1\30"+
    "\1\171\1\30\1\35\1\172\1\35\1\30\3\35\2\30"+
    "\17\35\1\173\27\35\1\173\12\35\1\30\1\35\1\30"+
    "\1\111\1\32\1\30\1\141\1\30\1\171\1\30\1\35"+
    "\1\172\1\35\1\30\3\37\2\30\17\35\1\173\27\35"+
    "\1\173\12\35\1\30\1\35\2\30\1\32\1\30\1\32"+
    "\1\30\1\170\1\30\1\35\1\30\1\35\1\30\3\35"+
    "\2\30\51\35\1\174\10\35\1\30\1\35\2\30\1\32"+
    "\1\30\1\32\1\30\1\170\1\30\1\35\1\30\1\35"+
    "\1\30\3\35\2\30\46\35\1\175\13\35\1\30\1\35"+
    "\2\30\1\32\1\30\1\32\1\30\1\170\1\30\1\35"+
    "\1\30\1\35\1\30\3\35\2\30\34\35\1\176\25\35"+
    "\1\30\1\35\2\30\1\32\1\30\1\32\1\30\1\170"+
    "\1\30\1\35\1\30\1\35\1\30\3\35\2\30\34\35"+
    "\1\177\25\35\1\30\1\35\2\30\1\32\1\30\1\32"+
    "\1\30\1\170\1\30\1\35\1\30\1\35\1\30\3\35"+
    "\2\30\50\35\1\200\11\35\1\30\1\35\2\30\1\32"+
    "\1\30\1\32\1\30\1\170\1\30\1\35\1\30\1\35"+
    "\1\30\3\35\2\30\43\35\1\201\16\35\1\30\1\35"+
    "\2\30\1\32\1\30\1\32\1\30\1\170\1\30\1\35"+
    "\1\30\1\35\1\30\3\35\2\30\34\35\1\202\2\35"+
    "\1\203\6\35\1\204\13\35\1\30\1\35\2\30\1\32"+
    "\1\30\1\32\1\30\1\170\1\30\1\35\1\30\1\35"+
    "\1\30\3\35\2\30\54\35\1\205\5\35\1\30\1\35"+
    "\2\30\1\32\1\30\1\32\1\30\1\170\1\30\1\35"+
    "\1\30\1\35\1\30\3\35\2\30\51\35\1\206\10\35"+
    "\1\30\1\35\2\30\1\32\1\30\1\32\1\30\1\170"+
    "\1\30\1\35\1\30\1\35\1\30\3\35\2\30\54\35"+
    "\1\207\5\35\1\30\1\35\2\30\1\32\1\30\1\32"+
    "\1\30\1\170\1\30\1\35\1\30\1\35\1\30\3\35"+
    "\2\30\34\35\1\210\3\35\1\211\21\35\1\30\1\35"+
    "\2\30\1\32\1\30\1\32\1\30\1\170\1\30\1\35"+
    "\1\30\1\35\1\30\3\35\2\30\30\35\1\212\31\35"+
    "\1\30\1\35\2\30\1\32\1\30\1\32\1\30\1\170"+
    "\1\30\1\35\1\30\1\35\1\30\3\35\2\30\30\35"+
    "\1\213\23\35\1\214\5\35\1\30\1\35\2\30\1\32"+
    "\1\30\1\32\1\30\1\170\1\30\1\35\1\30\1\35"+
    "\1\30\3\35\2\30\43\35\1\215\16\35\1\30\1\35"+
    "\2\30\1\32\1\30\1\32\1\30\1\170\1\30\1\35"+
    "\1\30\1\35\1\30\3\35\2\30\54\35\1\216\5\35"+
    "\1\30\1\35\2\30\1\32\1\30\1\32\1\30\1\170"+
    "\1\30\1\35\1\30\1\35\1\30\3\35\2\30\30\35"+
    "\1\217\3\35\1\220\3\35\1\221\5\35\1\222\13\35"+
    "\1\30\1\35\2\30\1\32\1\30\1\32\1\30\1\170"+
    "\1\30\1\35\1\30\1\35\1\30\3\35\2\30\30\35"+
    "\1\223\7\35\1\224\21\35\1\30\1\35\2\30\1\32"+
    "\1\30\1\32\1\30\1\170\1\30\1\35\1\30\1\35"+
    "\1\30\3\35\2\30\34\35\1\225\25\35\1\30\1\35"+
    "\2\30\1\32\1\30\1\32\1\30\1\170\1\30\1\35"+
    "\1\30\1\35\1\30\3\35\2\30\37\35\1\226\22\35"+
    "\1\30\1\35\2\30\1\32\1\30\1\32\1\30\1\170"+
    "\1\30\1\35\1\30\1\35\1\30\3\35\2\30\34\35"+
    "\1\227\25\35\1\30\1\35\1\0\1\64\2\0\1\64"+
    "\6\0\1\66\103\0\1\230\106\0\3\67\2\0\62\67"+
    "\1\0\1\67\14\0\3\67\2\0\1\67\1\231\1\67"+
    "\1\232\2\67\1\233\1\234\1\235\2\67\1\236\2\67"+
    "\1\237\1\240\1\67\1\241\1\242\6\67\1\231\1\67"+
    "\1\232\2\67\1\233\1\234\1\235\2\67\1\236\2\67"+
    "\1\237\1\240\2\67\1\241\1\242\6\67\1\0\1\67"+
    "\14\0\3\11\2\0\27\11\1\67\23\11\1\243\6\11"+
    "\1\0\1\11\14\0\3\11\2\0\27\11\1\67\2\11"+
    "\1\244\27\11\1\0\1\11\14\0\3\11\2\0\27\11"+
    "\1\67\1\245\31\11\1\0\1\11\14\0\3\11\2\0"+
    "\27\11\1\67\13\11\1\246\16\11\1\0\1\11\14\0"+
    "\3\11\2\0\27\11\1\67\15\11\1\247\14\11\1\0"+
    "\1\11\14\0\3\11\2\0\27\11\1\67\10\11\1\250"+
    "\21\11\1\0\1\11\14\0\3\11\2\0\27\11\1\67"+
    "\4\11\1\251\25\11\1\0\1\11\14\0\3\11\2\0"+
    "\27\11\1\67\14\11\1\252\15\11\1\0\1\11\14\0"+
    "\3\11\2\0\27\11\1\67\2\11\1\253\27\11\1\0"+
    "\1\11\14\0\3\11\2\0\27\11\1\67\26\11\1\254"+
    "\3\11\1\0\1\11\14\0\3\11\2\0\27\11\1\67"+
    "\2\11\1\255\27\11\1\0\1\11\14\0\3\11\2\0"+
    "\27\11\1\67\27\11\1\256\2\11\1\0\1\11\14\0"+
    "\3\11\2\0\27\11\1\67\17\11\1\257\12\11\1\0"+
    "\1\11\14\0\3\11\2\0\27\11\1\67\3\11\1\260"+
    "\26\11\1\0\1\11\1\30\1\111\1\32\1\30\1\141"+
    "\1\30\1\171\2\30\1\172\26\30\1\261\27\30\1\261"+
    "\15\30\1\111\1\32\1\30\1\141\1\30\1\171\2\30"+
    "\1\172\2\30\3\112\21\30\1\261\27\30\1\261\16\30"+
    "\1\32\1\30\1\32\1\30\1\110\63\30\1\262\14\30"+
    "\1\32\1\30\1\32\1\30\1\110\60\30\1\263\17\30"+
    "\1\32\1\30\1\32\1\30\1\110\46\30\1\264\31\30"+
    "\1\32\1\30\1\32\1\30\1\110\46\30\1\265\31\30"+
    "\1\32\1\30\1\32\1\30\1\110\62\30\1\266\15\30"+
    "\1\32\1\30\1\32\1\30\1\110\55\30\1\267\22\30"+
    "\1\32\1\30\1\32\1\30\1\110\46\30\1\270\2\30"+
    "\1\271\6\30\1\272\17\30\1\32\1\30\1\32\1\30"+
    "\1\110\66\30\1\273\11\30\1\32\1\30\1\32\1\30"+
    "\1\110\63\30\1\274\14\30\1\32\1\30\1\32\1\30"+
    "\1\110\66\30\1\275\11\30\1\32\1\30\1\32\1\30"+
    "\1\110\46\30\1\276\3\30\1\277\25\30\1\32\1\30"+
    "\1\32\1\30\1\110\42\30\1\300\35\30\1\32\1\30"+
    "\1\32\1\30\1\110\42\30\1\301\23\30\1\302\11\30"+
    "\1\32\1\30\1\32\1\30\1\110\55\30\1\303\22\30"+
    "\1\32\1\30\1\32\1\30\1\110\66\30\1\304\11\30"+
    "\1\32\1\30\1\32\1\30\1\110\42\30\1\305\3\30"+
    "\1\306\3\30\1\307\5\30\1\310\17\30\1\32\1\30"+
    "\1\32\1\30\1\110\42\30\1\311\7\30\1\312\25\30"+
    "\1\32\1\30\1\32\1\30\1\110\46\30\1\313\31\30"+
    "\1\32\1\30\1\32\1\30\1\110\51\30\1\314\26\30"+
    "\1\32\1\30\1\32\1\30\1\110\46\30\1\315\27\30"+
    "\6\32\1\137\5\32\3\316\2\32\6\316\22\32\6\316"+
    "\27\32\1\141\2\32\1\141\1\32\1\171\2\32\1\317"+
    "\26\32\1\320\27\32\1\320\15\32\1\141\2\32\1\141"+
    "\1\32\1\171\2\32\1\317\2\32\3\142\21\32\1\320"+
    "\27\32\1\320\22\32\1\137\63\32\1\321\20\32\1\137"+
    "\60\32\1\322\23\32\1\137\46\32\1\323\35\32\1\137"+
    "\46\32\1\324\35\32\1\137\62\32\1\325\21\32\1\137"+
    "\55\32\1\326\26\32\1\137\46\32\1\327\2\32\1\330"+
    "\6\32\1\331\23\32\1\137\66\32\1\332\15\32\1\137"+
    "\63\32\1\333\20\32\1\137\66\32\1\334\15\32\1\137"+
    "\46\32\1\335\3\32\1\336\31\32\1\137\42\32\1\337"+
    "\41\32\1\137\42\32\1\340\23\32\1\341\15\32\1\137"+
    "\55\32\1\342\26\32\1\137\66\32\1\343\15\32\1\137"+
    "\42\32\1\344\3\32\1\345\3\32\1\346\5\32\1\347"+
    "\23\32\1\137\42\32\1\350\7\32\1\351\31\32\1\137"+
    "\46\32\1\352\35\32\1\137\51\32\1\353\32\32\1\137"+
    "\46\32\1\354\27\32\1\30\1\355\1\32\1\30\1\356"+
    "\1\30\1\357\5\30\3\167\2\30\6\167\22\30\6\167"+
    "\27\30\1\172\1\32\1\30\1\317\1\30\1\360\100\30"+
    "\1\32\1\30\1\32\1\30\1\170\1\30\1\35\1\30"+
    "\1\35\1\30\3\35\2\30\25\35\1\361\31\35\1\361"+
    "\2\35\1\30\1\35\2\30\1\32\1\30\1\32\1\30"+
    "\1\170\1\30\1\35\1\30\1\35\1\30\3\35\2\30"+
    "\40\35\1\362\21\35\1\30\1\35\2\30\1\32\1\30"+
    "\1\32\1\30\1\170\1\30\1\35\1\30\1\35\1\30"+
    "\3\35\2\30\54\35\1\363\5\35\1\30\1\35\2\30"+
    "\1\32\1\30\1\32\1\30\1\170\1\30\1\35\1\30"+
    "\1\35\1\30\3\35\2\30\45\35\1\364\14\35\1\30"+
    "\1\35\2\30\1\32\1\30\1\32\1\30\1\170\1\30"+
    "\1\35\1\30\1\35\1\30\3\35\2\30\51\35\1\365"+
    "\10\35\1\30\1\35\2\30\1\32\1\30\1\32\1\30"+
    "\1\170\1\30\1\35\1\30\1\35\1\30\3\35\2\30"+
    "\54\35\1\366\5\35\1\30\1\35\2\30\1\32\1\30"+
    "\1\32\1\30\1\170\1\30\1\35\1\30\1\35\1\30"+
    "\3\35\2\30\30\35\1\367\23\35\1\370\5\35\1\30"+
    "\1\35\2\30\1\32\1\30\1\32\1\30\1\170\1\30"+
    "\1\35\1\30\1\35\1\30\3\35\2\30\45\35\1\371"+
    "\14\35\1\30\1\35\2\30\1\32\1\30\1\32\1\30"+
    "\1\170\1\30\1\35\1\30\1\35\1\30\3\35\2\30"+
    "\34\35\1\372\25\35\1\30\1\35\2\30\1\32\1\30"+
    "\1\32\1\30\1\170\1\30\1\35\1\30\1\35\1\30"+
    "\3\35\2\30\43\35\1\373\16\35\1\30\1\35\2\30"+
    "\1\32\1\30\1\32\1\30\1\170\1\30\1\35\1\30"+
    "\1\35\1\30\3\35\2\30\32\35\1\374\27\35\1\30"+
    "\1\35\2\30\1\32\1\30\1\32\1\30\1\170\1\30"+
    "\1\35\1\30\1\35\1\30\3\35\2\30\30\35\1\375"+
    "\3\35\1\376\25\35\1\30\1\35\2\30\1\32\1\30"+
    "\1\32\1\30\1\170\1\30\1\35\1\30\1\35\1\30"+
    "\3\35\2\30\52\35\1\377\7\35\1\30\1\35\2\30"+
    "\1\32\1\30\1\32\1\30\1\170\1\30\1\35\1\30"+
    "\1\35\1\30\3\35\2\30\35\35\1\u0100\24\35\1\30"+
    "\1\35\2\30\1\32\1\30\1\32\1\30\1\170\1\30"+
    "\1\35\1\30\1\35\1\30\3\35\2\30\44\35\1\u0101"+
    "\15\35\1\30\1\35\2\30\1\32\1\30\1\32\1\30"+
    "\1\170\1\30\1\35\1\30\1\35\1\30\3\35\2\30"+
    "\51\35\1\u0102\10\35\1\30\1\35\2\30\1\32\1\30"+
    "\1\32\1\30\1\170\1\30\1\35\1\30\1\35\1\30"+
    "\3\35\2\30\55\35\1\u0103\4\35\1\30\1\35\2\30"+
    "\1\32\1\30\1\32\1\30\1\170\1\30\1\35\1\30"+
    "\1\35\1\30\3\35\2\30\44\35\1\u0104\15\35\1\30"+
    "\1\35\2\30\1\32\1\30\1\32\1\30\1\170\1\30"+
    "\1\35\1\30\1\35\1\30\3\35\2\30\40\35\1\u0105"+
    "\21\35\1\30\1\35\2\30\1\32\1\30\1\32\1\30"+
    "\1\170\1\30\1\35\1\30\1\35\1\30\3\35\2\30"+
    "\51\35\1\u0106\10\35\1\30\1\35\2\30\1\32\1\30"+
    "\1\32\1\30\1\170\1\30\1\35\1\30\1\35\1\30"+
    "\3\35\2\30\33\35\1\u0107\26\35\1\30\1\35\2\30"+
    "\1\32\1\30\1\32\1\30\1\170\1\30\1\35\1\30"+
    "\1\35\1\30\3\35\2\30\33\35\1\u0108\26\35\1\30"+
    "\1\35\2\30\1\32\1\30\1\32\1\30\1\170\1\30"+
    "\1\35\1\30\1\35\1\30\3\35\2\30\36\35\1\u0109"+
    "\23\35\1\30\1\35\2\30\1\32\1\30\1\32\1\30"+
    "\1\170\1\30\1\35\1\30\1\35\1\30\3\35\2\30"+
    "\56\35\1\u010a\3\35\1\30\1\35\2\30\1\32\1\30"+
    "\1\32\1\30\1\170\1\30\1\35\1\30\1\35\1\30"+
    "\3\35\2\30\45\35\1\u010b\14\35\1\30\1\35\2\30"+
    "\1\32\1\30\1\32\1\30\1\170\1\30\1\35\1\30"+
    "\1\35\1\30\3\35\2\30\43\35\1\u010c\16\35\1\30"+
    "\1\35\2\30\1\32\1\30\1\32\1\30\1\170\1\30"+
    "\1\35\1\30\1\35\1\30\3\35\2\30\30\35\1\u010d"+
    "\26\35\1\u010e\2\35\1\30\1\35\2\30\1\32\1\30"+
    "\1\32\1\30\1\170\1\30\1\35\1\30\1\35\1\30"+
    "\3\35\2\30\40\35\1\u010f\21\35\1\30\1\35\2\30"+
    "\1\32\1\30\1\32\1\30\1\170\1\30\1\35\1\30"+
    "\1\35\1\30\3\35\2\30\43\35\1\u0110\16\35\1\30"+
    "\1\35\12\0\1\u0111\106\0\3\67\2\0\16\67\1\u0112"+
    "\1\67\1\u0113\2\67\1\u0114\22\67\1\u0112\2\67\1\u0113"+
    "\2\67\1\u0114\5\67\1\0\1\67\14\0\3\67\2\0"+
    "\10\67\1\u0115\27\67\1\u0115\21\67\1\0\1\67\14\0"+
    "\3\67\2\0\2\67\1\u0116\27\67\1\u0116\27\67\1\0"+
    "\1\67\14\0\1\67\1\u0117\1\67\2\0\4\67\1\u0118"+
    "\27\67\1\u0118\25\67\1\0\1\67\14\0\3\67\2\0"+
    "\14\67\1\u0119\1\u011a\26\67\1\u0119\1\u011a\14\67\1\0"+
    "\1\67\14\0\3\67\2\0\10\67\1\u011b\27\67\1\u011b"+
    "\21\67\1\0\1\67\14\0\3\67\2\0\17\67\1\u011c"+
    "\27\67\1\u011c\12\67\1\0\1\67\14\0\3\67\2\0"+
    "\2\67\1\u011d\1\67\1\u011e\12\67\1\u011f\12\67\1\u011d"+
    "\1\67\1\u011e\12\67\1\u011f\12\67\1\0\1\67\14\0"+
    "\3\67\2\0\4\67\1\u0120\3\67\1\u0121\23\67\1\u0120"+
    "\3\67\1\u0121\21\67\1\0\1\67\14\0\3\11\2\0"+
    "\27\11\1\67\12\11\1\u0122\17\11\1\0\1\11\14\0"+
    "\3\11\2\0\27\11\1\67\22\11\1\u0123\7\11\1\0"+
    "\1\11\14\0\3\11\2\0\27\11\1\67\16\11\1\u0124"+
    "\3\11\1\u0125\7\11\1\0\1\11\14\0\3\11\2\0"+
    "\27\11\1\67\23\11\1\u0126\6\11\1\0\1\11\14\0"+
    "\3\11\2\0\27\11\1\67\6\11\1\u0127\23\11\1\0"+
    "\1\11\14\0\3\11\2\0\27\11\1\67\5\11\1\u0128"+
    "\24\11\1\0\1\11\14\0\3\11\2\0\27\11\1\67"+
    "\4\11\1\u0129\25\11\1\0\1\11\14\0\3\11\2\0"+
    "\27\11\1\67\13\11\1\u012a\16\11\1\0\1\11\14\0"+
    "\3\11\2\0\27\11\1\67\22\11\1\u012b\7\11\1\0"+
    "\1\11\14\0\3\11\2\0\27\11\1\67\23\11\1\u012c"+
    "\6\11\1\0\1\11\14\0\3\11\2\0\27\11\1\67"+
    "\4\11\1\u012d\25\11\1\0\1\11\14\0\3\11\2\0"+
    "\27\11\1\67\23\11\1\u012e\6\11\1\0\1\11\2\30"+
    "\1\32\1\30\1\32\1\30\1\110\37\30\1\u012f\31\30"+
    "\1\u012f\6\30\1\32\1\30\1\32\1\30\1\110\52\30"+
    "\1\u0130\25\30\1\32\1\30\1\32\1\30\1\110\66\30"+
    "\1\u0131\11\30\1\32\1\30\1\32\1\30\1\110\57\30"+
    "\1\u0132\20\30\1\32\1\30\1\32\1\30\1\110\63\30"+
    "\1\u0133\14\30\1\32\1\30\1\32\1\30\1\110\66\30"+
    "\1\u0134\11\30\1\32\1\30\1\32\1\30\1\110\42\30"+
    "\1\u0135\23\30\1\u0136\11\30\1\32\1\30\1\32\1\30"+
    "\1\110\57\30\1\u0137\20\30\1\32\1\30\1\32\1\30"+
    "\1\110\46\30\1\u0138\31\30\1\32\1\30\1\32\1\30"+
    "\1\110\55\30\1\u0139\22\30\1\32\1\30\1\32\1\30"+
    "\1\110\44\30\1\u013a\33\30\1\32\1\30\1\32\1\30"+
    "\1\110\42\30\1\u013b\3\30\1\u013c\31\30\1\32\1\30"+
    "\1\32\1\30\1\110\64\30\1\u013d\13\30\1\32\1\30"+
    "\1\32\1\30\1\110\47\30\1\u013e\30\30\1\32\1\30"+
    "\1\32\1\30\1\110\56\30\1\u013f\21\30\1\32\1\30"+
    "\1\32\1\30\1\110\63\30\1\u0140\14\30\1\32\1\30"+
    "\1\32\1\30\1\110\67\30\1\u0141\10\30\1\32\1\30"+
    "\1\32\1\30\1\110\56\30\1\u0142\21\30\1\32\1\30"+
    "\1\32\1\30\1\110\52\30\1\u0143\25\30\1\32\1\30"+
    "\1\32\1\30\1\110\63\30\1\u0144\14\30\1\32\1\30"+
    "\1\32\1\30\1\110\45\30\1\u0145\32\30\1\32\1\30"+
    "\1\32\1\30\1\110\45\30\1\u0146\32\30\1\32\1\30"+
    "\1\32\1\30\1\110\50\30\1\u0147\27\30\1\32\1\30"+
    "\1\32\1\30\1\110\70\30\1\u0148\7\30\1\32\1\30"+
    "\1\32\1\30\1\110\57\30\1\u0149\20\30\1\32\1\30"+
    "\1\32\1\30\1\110\55\30\1\u014a\22\30\1\32\1\30"+
    "\1\32\1\30\1\110\42\30\1\u014b\26\30\1\u014c\6\30"+
    "\1\32\1\30\1\32\1\30\1\110\52\30\1\u014d\25\30"+
    "\1\32\1\30\1\32\1\30\1\110\55\30\1\u014e\20\30"+
    "\1\32\1\356\2\32\1\356\1\32\1\357\5\32\3\316"+
    "\2\32\6\316\22\32\6\316\27\32\1\317\2\32\1\317"+
    "\1\32\1\360\104\32\1\137\37\32\1\u014f\31\32\1\u014f"+
    "\12\32\1\137\52\32\1\u0150\31\32\1\137\66\32\1\u0151"+
    "\15\32\1\137\57\32\1\u0152\24\32\1\137\63\32\1\u0153"+
    "\20\32\1\137\66\32\1\u0154\15\32\1\137\42\32\1\u0155"+
    "\23\32\1\u0156\15\32\1\137\57\32\1\u0157\24\32\1\137"+
    "\46\32\1\u0158\35\32\1\137\55\32\1\u0159\26\32\1\137"+
    "\44\32\1\u015a\37\32\1\137\42\32\1\u015b\3\32\1\u015c"+
    "\35\32\1\137\64\32\1\u015d\17\32\1\137\47\32\1\u015e"+
    "\34\32\1\137\56\32\1\u015f\25\32\1\137\63\32\1\u0160"+
    "\20\32\1\137\67\32\1\u0161\14\32\1\137\56\32\1\u0162"+
    "\25\32\1\137\52\32\1\u0163\31\32\1\137\63\32\1\u0164"+
    "\20\32\1\137\45\32\1\u0165\36\32\1\137\45\32\1\u0166"+
    "\36\32\1\137\50\32\1\u0167\33\32\1\137\70\32\1\u0168"+
    "\13\32\1\137\57\32\1\u0169\24\32\1\137\55\32\1\u016a"+
    "\26\32\1\137\42\32\1\u016b\26\32\1\u016c\12\32\1\137"+
    "\52\32\1\u016d\31\32\1\137\55\32\1\u016e\20\32\1\30"+
    "\1\355\1\32\1\30\1\356\1\30\1\357\76\30\1\32"+
    "\1\356\2\32\1\356\1\32\1\357\76\32\1\30\1\u012f"+
    "\1\32\1\30\1\u014f\1\30\1\u016f\1\30\1\35\1\30"+
    "\1\35\1\30\3\35\2\30\62\35\1\30\1\35\2\30"+
    "\1\32\1\30\1\32\1\30\1\170\1\30\1\35\1\30"+
    "\1\35\1\30\3\35\2\30\30\35\1\u0170\31\35\1\30"+
    "\1\35\2\30\1\32\1\30\1\32\1\30\1\170\1\30"+
    "\1\35\1\30\1\35\1\30\3\35\2\30\51\35\1\u0171"+
    "\10\35\1\30\1\35\2\30\1\32\1\30\1\32\1\30"+
    "\1\170\1\30\1\35\1\30\1\35\1\30\3\35\2\30"+
    "\34\35\1\u0172\25\35\1\30\1\35\2\30\1\32\1\30"+
    "\1\32\1\30\1\170\1\30\1\35\1\30\1\35\1\30"+
    "\3\35\2\30\33\35\1\u0173\26\35\1\30\1\35\2\30"+
    "\1\32\1\30\1\32\1\30\1\170\1\30\1\35\1\30"+
    "\1\35\1\30\3\35\2\30\30\35\1\u0174\31\35\1\30"+
    "\1\35\2\30\1\32\1\30\1\32\1\30\1\170\1\30"+
    "\1\35\1\30\1\35\1\30\3\35\2\30\32\35\1\u0175"+
    "\27\35\1\30\1\35\2\30\1\32\1\30\1\32\1\30"+
    "\1\170\1\30\1\35\1\30\1\35\1\30\3\35\2\30"+
    "\34\35\1\u0176\25\35\1\30\1\35\2\30\1\32\1\30"+
    "\1\32\1\30\1\170\1\30\1\35\1\30\1\35\1\30"+
    "\3\35\2\30\53\35\1\u0177\6\35\1\30\1\35\2\30"+
    "\1\32\1\30\1\32\1\30\1\170\1\30\1\35\1\30"+
    "\1\35\1\30\3\35\2\30\32\35\1\u0178\27\35\1\30"+
    "\1\35\2\30\1\32\1\30\1\32\1\30\1\170\1\30"+
    "\1\35\1\30\1\35\1\30\3\35\2\30\54\35\1\u0179"+
    "\5\35\1\30\1\35\2\30\1\32\1\30\1\32\1\30"+
    "\1\170\1\30\1\35\1\30\1\35\1\30\3\35\2\30"+
    "\37\35\1\u017a\22\35\1\30\1\35\2\30\1\32\1\30"+
    "\1\32\1\30\1\170\1\30\1\35\1\30\1\35\1\30"+
    "\3\35\2\30\60\35\1\u017b\1\35\1\30\1\35\2\30"+
    "\1\32\1\30\1\32\1\30\1\170\1\30\1\35\1\30"+
    "\1\35\1\30\3\35\2\30\34\35\1\u017c\25\35\1\30"+
    "\1\35\2\30\1\32\1\30\1\32\1\30\1\170\1\30"+
    "\1\35\1\30\1\35\1\30\3\35\2\30\53\35\1\u017d"+
    "\6\35\1\30\1\35\2\30\1\32\1\30\1\32\1\30"+
    "\1\170\1\30\1\35\1\30\1\35\1\30\3\35\2\30"+
    "\53\35\1\u017e\6\35\1\30\1\35\2\30\1\32\1\30"+
    "\1\32\1\30\1\170\1\30\1\35\1\30\1\35\1\30"+
    "\3\35\2\30\34\35\1\u017f\25\35\1\30\1\35\2\30"+
    "\1\32\1\30\1\32\1\30\1\170\1\30\1\35\1\30"+
    "\1\35\1\30\3\35\2\30\46\35\1\u0180\13\35\1\30"+
    "\1\35\2\30\1\32\1\30\1\32\1\30\1\170\1\30"+
    "\1\35\1\30\1\35\1\30\3\35\2\30\60\35\1\u0181"+
    "\1\35\1\30\1\35\2\30\1\32\1\30\1\32\1\30"+
    "\1\170\1\30\1\35\1\30\1\35\1\30\3\35\2\30"+
    "\31\35\1\u0182\30\35\1\30\1\35\2\30\1\32\1\30"+
    "\1\32\1\30\1\170\1\30\1\35\1\30\1\35\1\30"+
    "\3\35\2\30\55\35\1\u0183\4\35\1\30\1\35\2\30"+
    "\1\32\1\30\1\32\1\30\1\170\1\30\1\35\1\30"+
    "\1\35\1\30\3\35\2\30\47\35\1\u0184\12\35\1\30"+
    "\1\35\2\30\1\32\1\30\1\32\1\30\1\170\1\30"+
    "\1\35\1\30\1\35\1\30\3\35\2\30\40\35\1\u0185"+
    "\21\35\1\30\1\35\1\30\1\u0146\1\32\1\30\1\u0166"+
    "\1\30\1\u0186\1\30\1\35\1\30\1\35\1\30\3\35"+
    "\2\30\62\35\1\30\1\35\2\30\1\32\1\30\1\32"+
    "\1\30\1\170\1\30\1\35\1\30\1\35\1\30\3\35"+
    "\2\30\37\35\1\u0187\22\35\1\30\1\35\1\30\1\u0148"+
    "\1\32\1\30\1\u0168\1\30\1\u0188\1\30\1\35\1\30"+
    "\1\35\1\30\3\35\2\30\62\35\1\30\1\35\2\30"+
    "\1\32\1\30\1\32\1\30\1\170\1\30\1\35\1\30"+
    "\1\35\1\30\3\35\2\30\52\35\1\u0189\7\35\1\30"+
    "\1\35\2\30\1\32\1\30\1\32\1\30\1\170\1\30"+
    "\1\35\1\30\1\35\1\30\3\35\2\30\55\35\1\u018a"+
    "\4\35\1\30\1\35\2\30\1\32\1\30\1\32\1\30"+
    "\1\170\1\30\1\35\1\30\1\35\1\30\3\35\2\30"+
    "\43\35\1\u018b\16\35\1\30\1\35\2\30\1\32\1\30"+
    "\1\32\1\30\1\170\1\30\1\35\1\30\1\35\1\30"+
    "\3\35\2\30\53\35\1\u018c\6\35\1\30\1\35\2\30"+
    "\1\32\1\30\1\32\1\30\1\170\1\30\1\35\1\30"+
    "\1\35\1\30\3\35\2\30\53\35\1\u018d\6\35\1\30"+
    "\1\35\2\30\1\32\1\30\1\32\1\30\1\170\1\30"+
    "\1\35\1\30\1\35\1\30\3\35\2\30\43\35\1\u018e"+
    "\16\35\1\30\1\35\12\u018f\1\u0190\72\u018f\14\0\3\67"+
    "\2\0\3\67\1\u0191\27\67\1\u0191\26\67\1\0\1\67"+
    "\14\0\3\67\2\0\22\67\1\u0192\30\67\1\u0192\6\67"+
    "\1\0\1\67\14\0\3\67\2\0\24\67\1\u0193\30\67"+
    "\1\u0193\4\67\1\0\1\67\14\0\3\67\2\0\10\67"+
    "\1\u0194\27\67\1\u0194\21\67\1\0\1\67\14\0\3\67"+
    "\2\0\1\u0195\27\67\1\u0195\31\67\1\0\1\67\14\0"+
    "\3\67\2\0\6\67\1\u0196\27\67\1\u0196\23\67\1\0"+
    "\1\67\14\0\3\67\2\0\17\67\1\u0197\27\67\1\u0197"+
    "\12\67\1\0\1\67\14\0\3\67\2\0\15\67\1\u0198"+
    "\27\67\1\u0198\14\67\1\0\1\67\14\0\3\67\2\0"+
    "\22\67\1\u0199\30\67\1\u0199\6\67\1\0\1\67\14\0"+
    "\3\67\2\0\20\67\1\u019a\30\67\1\u019a\10\67\1\0"+
    "\1\67\14\0\3\67\2\0\13\67\1\u019b\27\67\1\u019b"+
    "\16\67\1\0\1\67\14\0\3\67\2\0\1\u019c\27\67"+
    "\1\u019c\31\67\1\0\1\67\14\0\3\67\2\0\25\67"+
    "\1\u019d\31\67\1\u019d\2\67\1\0\1\67\14\0\3\67"+
    "\2\0\22\67\1\u019e\30\67\1\u019e\6\67\1\0\1\67"+
    "\14\0\3\11\2\0\27\11\1\67\6\11\1\u019f\23\11"+
    "\1\0\1\11\14\0\3\11\2\0\27\11\1\67\22\11"+
    "\1\u01a0\7\11\1\0\1\11\14\0\3\11\2\0\27\11"+
    "\1\67\21\11\1\u01a1\10\11\1\0\1\11\12\0\1\u01a2"+
    "\1\0\3\11\2\0\27\11\1\67\32\11\1\0\1\11"+
    "\14\0\3\11\2\0\27\11\1\67\23\11\1\u01a3\6\11"+
    "\1\0\1\11\14\0\3\11\2\0\27\11\1\67\10\11"+
    "\1\u01a4\21\11\1\0\1\11\12\0\1\u01a5\1\0\3\11"+
    "\2\0\27\11\1\67\32\11\1\0\1\11\14\0\3\11"+
    "\2\0\27\11\1\67\7\11\1\u01a6\22\11\1\0\1\11"+
    "\1\30\1\u012f\1\32\1\30\1\u014f\1\30\1\u016f\100\30"+
    "\1\32\1\30\1\32\1\30\1\110\42\30\1\u01a7\35\30"+
    "\1\32\1\30\1\32\1\30\1\110\63\30\1\u01a8\14\30"+
    "\1\32\1\30\1\32\1\30\1\110\46\30\1\u01a9\31\30"+
    "\1\32\1\30\1\32\1\30\1\110\45\30\1\u01aa\32\30"+
    "\1\32\1\30\1\32\1\30\1\110\42\30\1\u01ab\35\30"+
    "\1\32\1\30\1\32\1\30\1\110\44\30\1\u01ac\33\30"+
    "\1\32\1\30\1\32\1\30\1\110\46\30\1\u01ad\31\30"+
    "\1\32\1\30\1\32\1\30\1\110\65\30\1\u01ae\12\30"+
    "\1\32\1\30\1\32\1\30\1\110\44\30\1\u01af\33\30"+
    "\1\32\1\30\1\32\1\30\1\110\66\30\1\u01b0\11\30"+
    "\1\32\1\30\1\32\1\30\1\110\51\30\1\u01b1\26\30"+
    "\1\32\1\30\1\32\1\30\1\110\72\30\1\u01b2\5\30"+
    "\1\32\1\30\1\32\1\30\1\110\46\30\1\u01b3\31\30"+
    "\1\32\1\30\1\32\1\30\1\110\65\30\1\u01b4\12\30"+
    "\1\32\1\30\1\32\1\30\1\110\65\30\1\u01b5\12\30"+
    "\1\32\1\30\1\32\1\30\1\110\46\30\1\u01b6\31\30"+
    "\1\32\1\30\1\32\1\30\1\110\60\30\1\u01b7\17\30"+
    "\1\32\1\30\1\32\1\30\1\110\72\30\1\u01b8\5\30"+
    "\1\32\1\30\1\32\1\30\1\110\43\30\1\u01b9\34\30"+
    "\1\32\1\30\1\32\1\30\1\110\67\30\1\u01ba\10\30"+
    "\1\32\1\30\1\32\1\30\1\110\61\30\1\u01bb\16\30"+
    "\1\32\1\30\1\32\1\30\1\110\52\30\1\u01bc\24\30"+
    "\1\u0146\1\32\1\30\1\u0166\1\30\1\u0186\100\30\1\32"+
    "\1\30\1\32\1\30\1\110\51\30\1\u01bd\25\30\1\u0148"+
    "\1\32\1\30\1\u0168\1\30\1\u0188\100\30\1\32\1\30"+
    "\1\32\1\30\1\110\64\30\1\u01be\13\30\1\32\1\30"+
    "\1\32\1\30\1\110\67\30\1\u01bf\10\30\1\32\1\30"+
    "\1\32\1\30\1\110\55\30\1\u01c0\22\30\1\32\1\30"+
    "\1\32\1\30\1\110\65\30\1\u01c1\12\30\1\32\1\30"+
    "\1\32\1\30\1\110\65\30\1\u01c2\12\30\1\32\1\30"+
    "\1\32\1\30\1\110\55\30\1\u01c3\20\30\1\32\1\u014f"+
    "\2\32\1\u014f\1\32\1\u016f\104\32\1\137\42\32\1\u01c4"+
    "\41\32\1\137\63\32\1\u01c5\20\32\1\137\46\32\1\u01c6"+
    "\35\32\1\137\45\32\1\u01c7\36\32\1\137\42\32\1\u01c8"+
    "\41\32\1\137\44\32\1\u01c9\37\32\1\137\46\32\1\u01ca"+
    "\35\32\1\137\65\32\1\u01cb\16\32\1\137\44\32\1\u01cc"+
    "\37\32\1\137\66\32\1\u01cd\15\32\1\137\51\32\1\u01ce"+
    "\32\32\1\137\72\32\1\u01cf\11\32\1\137\46\32\1\u01d0"+
    "\35\32\1\137\65\32\1\u01d1\16\32\1\137\65\32\1\u01d2"+
    "\16\32\1\137\46\32\1\u01d3\35\32\1\137\60\32\1\u01d4"+
    "\23\32\1\137\72\32\1\u01d5\11\32\1\137\43\32\1\u01d6"+
    "\40\32\1\137\67\32\1\u01d7\14\32\1\137\61\32\1\u01d8"+
    "\22\32\1\137\52\32\1\u01d9\24\32\1\u0166\2\32\1\u0166"+
    "\1\32\1\u0186\104\32\1\137\51\32\1\u01da\25\32\1\u0168"+
    "\2\32\1\u0168\1\32\1\u0188\104\32\1\137\64\32\1\u01db"+
    "\17\32\1\137\67\32\1\u01dc\14\32\1\137\55\32\1\u01dd"+
    "\26\32\1\137\65\32\1\u01de\16\32\1\137\65\32\1\u01df"+
    "\16\32\1\137\55\32\1\u01e0\20\32\2\30\1\32\1\30"+
    "\1\32\1\30\1\170\1\30\1\35\1\30\1\35\1\30"+
    "\3\35\2\30\43\35\1\u01e1\16\35\1\30\1\35\2\30"+
    "\1\32\1\30\1\32\1\30\1\170\1\30\1\35\1\30"+
    "\1\35\1\30\3\35\2\30\40\35\1\u01e2\21\35\1\30"+
    "\1\35\2\30\1\32\1\30\1\32\1\30\1\170\1\30"+
    "\1\35\1\30\1\35\1\30\3\35\2\30\55\35\1\u01e3"+
    "\4\35\1\30\1\35\2\30\1\32\1\30\1\32\1\30"+
    "\1\170\1\30\1\35\1\30\1\35\1\30\3\35\2\30"+
    "\30\35\1\u01e4\31\35\1\30\1\35\1\30\1\u01ab\1\32"+
    "\1\30\1\u01c8\1\30\1\u01e5\1\30\1\35\1\30\1\35"+
    "\1\30\3\35\2\30\62\35\1\30\1\35\2\30\1\32"+
    "\1\30\1\32\1\30\1\170\1\30\1\35\1\30\1\35"+
    "\1\30\3\35\2\30\42\35\1\u01e6\17\35\1\30\1\35"+
    "\1\30\1\u01ad\1\32\1\30\1\u01ca\1\30\1\u01e7\1\30"+
    "\1\35\1\30\1\35\1\30\3\35\2\30\62\35\1\30"+
    "\1\35\2\30\1\32\1\30\1\32\1\30\1\170\1\30"+
    "\1\35\1\30\1\35\1\30\3\35\2\30\34\35\1\u01e8"+
    "\25\35\1\30\1\35\2\30\1\32\1\30\1\32\1\30"+
    "\1\170\1\30\1\35\1\30\1\35\1\30\3\35\2\30"+
    "\42\35\1\u01e9\17\35\1\30\1\35\2\30\1\32\1\30"+
    "\1\32\1\30\1\170\1\30\1\35\1\30\1\35\1\30"+
    "\3\35\2\30\44\35\1\u01ea\15\35\1\30\1\35\2\30"+
    "\1\32\1\30\1\32\1\30\1\170\1\30\1\35\1\30"+
    "\1\35\1\30\3\35\2\30\52\35\1\u01eb\7\35\1\30"+
    "\1\35\1\30\1\u01b2\1\32\1\30\1\u01cf\1\30\1\u01ec"+
    "\1\30\1\35\1\30\1\35\1\30\3\35\2\30\62\35"+
    "\1\30\1\35\2\30\1\32\1\30\1\32\1\30\1\170"+
    "\1\30\1\35\1\30\1\35\1\30\3\35\2\30\45\35"+
    "\1\u01ed\14\35\1\30\1\35\2\30\1\32\1\30\1\32"+
    "\1\30\1\170\1\30\1\35\1\30\1\35\1\30\3\35"+
    "\2\30\40\35\1\u01ee\21\35\1\30\1\35\1\30\1\u01b5"+
    "\1\32\1\30\1\u01d2\1\30\1\u01ef\1\30\1\35\1\30"+
    "\1\35\1\30\3\35\2\30\62\35\1\30\1\35\1\30"+
    "\1\u01b6\1\32\1\30\1\u01d3\1\30\1\u01f0\1\30\1\35"+
    "\1\30\1\35\1\30\3\35\2\30\62\35\1\30\1\35"+
    "\2\30\1\32\1\30\1\32\1\30\1\170\1\30\1\35"+
    "\1\30\1\35\1\30\3\35\2\30\46\35\1\u01f1\13\35"+
    "\1\30\1\35\1\30\1\u01b8\1\32\1\30\1\u01d5\1\30"+
    "\1\u01f2\1\30\1\35\1\30\1\35\1\30\3\35\2\30"+
    "\62\35\1\30\1\35\2\30\1\32\1\30\1\32\1\30"+
    "\1\170\1\30\1\35\1\30\1\35\1\30\3\35\2\30"+
    "\34\35\1\u01f3\25\35\1\30\1\35\2\30\1\32\1\30"+
    "\1\32\1\30\1\170\1\30\1\35\1\30\1\35\1\30"+
    "\3\35\2\30\34\35\1\u01f4\25\35\1\30\1\35\2\30"+
    "\1\32\1\30\1\32\1\30\1\170\1\30\1\35\1\30"+
    "\1\35\1\30\3\35\2\30\43\35\1\u01f5\16\35\1\30"+
    "\1\35\2\30\1\32\1\30\1\32\1\30\1\170\1\30"+
    "\1\35\1\30\1\35\1\30\3\35\2\30\46\35\1\u01f6"+
    "\13\35\1\30\1\35\2\30\1\32\1\30\1\32\1\30"+
    "\1\170\1\30\1\35\1\30\1\35\1\30\3\35\2\30"+
    "\53\35\1\u01f7\6\35\1\30\1\35\2\30\1\32\1\30"+
    "\1\32\1\30\1\170\1\30\1\35\1\30\1\u01f8\1\30"+
    "\3\35\2\30\62\35\1\30\1\35\2\30\1\32\1\30"+
    "\1\32\1\30\1\170\1\30\1\35\1\30\1\35\1\30"+
    "\3\35\2\30\34\35\1\u01f9\25\35\1\30\1\35\1\30"+
    "\1\u01c0\1\32\1\30\1\u01dd\1\30\1\u01fa\1\30\1\35"+
    "\1\30\1\35\1\30\3\35\2\30\62\35\1\30\1\35"+
    "\1\30\1\u01c1\1\32\1\30\1\u01de\1\30\1\u01fb\1\30"+
    "\1\35\1\30\1\35\1\30\3\35\2\30\62\35\1\30"+
    "\1\35\2\30\1\32\1\30\1\32\1\30\1\170\1\30"+
    "\1\35\1\30\1\35\1\30\3\35\2\30\34\35\1\u01fc"+
    "\25\35\1\30\1\35\2\30\1\32\1\30\1\32\1\30"+
    "\1\170\1\30\1\35\1\30\1\35\1\30\3\35\2\30"+
    "\46\35\1\u01fd\13\35\1\30\1\35\12\u018f\1\u01fe\72\u018f"+
    "\12\0\1\u0190\5\0\1\3\100\0\3\67\2\0\26\67"+
    "\1\u01ff\31\67\1\u01ff\1\67\1\0\1\67\14\0\3\67"+
    "\2\0\22\67\1\u0200\30\67\1\u0200\6\67\1\0\1\67"+
    "\14\0\3\67\2\0\2\67\1\u0201\27\67\1\u0201\27\67"+
    "\1\0\1\67\14\0\3\67\2\0\3\67\1\u0202\27\67"+
    "\1\u0202\26\67\1\0\1\67\14\0\3\67\2\0\23\67"+
    "\1\u0203\30\67\1\u0203\5\67\1\0\1\67\14\0\3\67"+
    "\2\0\12\67\1\u0204\27\67\1\u0204\17\67\1\0\1\67"+
    "\14\0\3\67\2\0\10\67\1\u0205\27\67\1\u0205\21\67"+
    "\1\0\1\67\14\0\3\67\2\0\10\67\1\u0206\27\67"+
    "\1\u0206\21\67\1\0\1\67\14\0\3\67\2\0\4\67"+
    "\1\u0207\27\67\1\u0207\25\67\1\0\1\67\14\0\3\67"+
    "\2\0\14\67\1\u0208\27\67\1\u0208\15\67\1\0\1\67"+
    "\14\0\3\67\2\0\22\67\1\u0209\30\67\1\u0209\6\67"+
    "\1\0\1\67\14\0\3\67\2\0\13\67\1\u020a\27\67"+
    "\1\u020a\16\67\1\0\1\67\14\0\3\11\2\0\27\11"+
    "\1\67\21\11\1\u020b\10\11\1\0\1\11\56\0\1\u020c"+
    "\14\0\1\u020d\25\0\3\11\2\0\27\11\1\67\7\11"+
    "\1\u020e\22\11\1\0\1\11\14\0\3\11\2\0\27\11"+
    "\1\67\2\11\1\u020f\27\11\1\0\1\11\51\0\1\u0210"+
    "\33\0\2\30\1\32\1\30\1\32\1\30\1\110\55\30"+
    "\1\u0211\22\30\1\32\1\30\1\32\1\30\1\110\52\30"+
    "\1\u0212\25\30\1\32\1\30\1\32\1\30\1\110\67\30"+
    "\1\u0213\10\30\1\32\1\30\1\32\1\30\1\110\42\30"+
    "\1\u0214\34\30\1\u01ab\1\32\1\30\1\u01c8\1\30\1\u01e5"+
    "\100\30\1\32\1\30\1\32\1\30\1\110\54\30\1\u0215"+
    "\22\30\1\u01ad\1\32\1\30\1\u01ca\1\30\1\u01e7\100\30"+
    "\1\32\1\30\1\32\1\30\1\110\46\30\1\u0216\31\30"+
    "\1\32\1\30\1\32\1\30\1\110\54\30\1\u0217\23\30"+
    "\1\32\1\30\1\32\1\30\1\110\56\30\1\u0218\21\30"+
    "\1\32\1\30\1\32\1\30\1\110\64\30\1\u0219\12\30"+
    "\1\u01b2\1\32\1\30\1\u01cf\1\30\1\u01ec\100\30\1\32"+
    "\1\30\1\32\1\30\1\110\57\30\1\u021a\20\30\1\32"+
    "\1\30\1\32\1\30\1\110\52\30\1\u021b\24\30\1\u01b5"+
    "\1\32\1\30\1\u01d2\1\30\1\u01ef\77\30\1\u01b6\1\32"+
    "\1\30\1\u01d3\1\30\1\u01f0\100\30\1\32\1\30\1\32"+
    "\1\30\1\110\60\30\1\u021c\16\30\1\u01b8\1\32\1\30"+
    "\1\u01d5\1\30\1\u01f2\100\30\1\32\1\30\1\32\1\30"+
    "\1\110\46\30\1\u021d\31\30\1\32\1\30\1\32\1\30"+
    "\1\110\46\30\1\u021e\31\30\1\32\1\30\1\32\1\30"+
    "\1\110\55\30\1\u021f\22\30\1\32\1\30\1\32\1\30"+
    "\1\110\60\30\1\u0220\17\30\1\32\1\30\1\32\1\30"+
    "\1\110\65\30\1\u0221\12\30\1\32\1\30\1\32\1\30"+
    "\1\110\3\30\1\u0222\74\30\1\32\1\30\1\32\1\30"+
    "\1\110\46\30\1\u0223\30\30\1\u01c0\1\32\1\30\1\u01dd"+
    "\1\30\1\u01fa\77\30\1\u01c1\1\32\1\30\1\u01de\1\30"+
    "\1\u01fb\100\30\1\32\1\30\1\32\1\30\1\110\46\30"+
    "\1\u0224\31\30\1\32\1\30\1\32\1\30\1\110\60\30"+
    "\1\u0225\15\30\6\32\1\137\55\32\1\u0226\26\32\1\137"+
    "\52\32\1\u0227\31\32\1\137\67\32\1\u0228\14\32\1\137"+
    "\42\32\1\u0229\34\32\1\u01c8\2\32\1\u01c8\1\32\1\u01e5"+
    "\104\32\1\137\54\32\1\u022a\22\32\1\u01ca\2\32\1\u01ca"+
    "\1\32\1\u01e7\104\32\1\137\46\32\1\u022b\35\32\1\137"+
    "\54\32\1\u022c\27\32\1\137\56\32\1\u022d\25\32\1\137"+
    "\64\32\1\u022e\12\32\1\u01cf\2\32\1\u01cf\1\32\1\u01ec"+
    "\104\32\1\137\57\32\1\u022f\24\32\1\137\52\32\1\u0230"+
    "\24\32\1\u01d2\2\32\1\u01d2\1\32\1\u01ef\77\32\1\u01d3"+
    "\2\32\1\u01d3\1\32\1\u01f0\104\32\1\137\60\32\1\u0231"+
    "\16\32\1\u01d5\2\32\1\u01d5\1\32\1\u01f2\104\32\1\137"+
    "\46\32\1\u0232\35\32\1\137\46\32\1\u0233\35\32\1\137"+
    "\55\32\1\u0234\26\32\1\137\60\32\1\u0235\23\32\1\137"+
    "\65\32\1\u0236\16\32\1\137\3\32\1\u0237\100\32\1\137"+
    "\46\32\1\u0238\30\32\1\u01dd\2\32\1\u01dd\1\32\1\u01fa"+
    "\77\32\1\u01de\2\32\1\u01de\1\32\1\u01fb\104\32\1\137"+
    "\46\32\1\u0239\35\32\1\137\60\32\1\u023a\15\32\1\30"+
    "\1\u0211\1\32\1\30\1\u0226\1\30\1\u023b\1\30\1\35"+
    "\1\30\1\35\1\30\3\35\2\30\62\35\1\30\1\35"+
    "\2\30\1\32\1\30\1\32\1\30\1\170\1\30\1\35"+
    "\1\30\1\35\1\30\3\35\2\30\34\35\1\u023c\25\35"+
    "\1\30\1\35\2\30\1\32\1\30\1\32\1\30\1\170"+
    "\1\30\1\35\1\30\1\35\1\30\3\35\2\30\30\35"+
    "\1\u023d\31\35\1\30\1\35\2\30\1\32\1\30\1\32"+
    "\1\30\1\170\1\30\1\35\1\30\1\35\1\30\3\35"+
    "\2\30\45\35\1\u023e\14\35\1\30\1\35\1\30\1\u0215"+
    "\1\32\1\30\1\u022a\1\30\1\u023f\1\30\1\35\1\30"+
    "\1\35\1\30\3\35\2\30\62\35\1\30\1\35\2\30"+
    "\1\32\1\30\1\32\1\30\1\170\1\30\1\35\1\30"+
    "\1\35\1\30\3\35\2\30\51\35\1\u0240\10\35\1\30"+
    "\1\35\2\30\1\32\1\30\1\32\1\30\1\170\1\30"+
    "\1\35\1\30\1\35\1\30\3\35\2\30\31\35\1\u0241"+
    "\30\35\1\30\1\35\2\30\1\32\1\30\1\32\1\30"+
    "\1\170\1\30\1\35\1\30\1\35\1\30\3\35\2\30"+
    "\45\35\1\u0242\14\35\1\30\1\35\2\30\1\32\1\30"+
    "\1\32\1\30\1\170\1\30\1\35\1\30\1\35\1\30"+
    "\3\35\2\30\40\35\1\u0243\21\35\1\30\1\35\1\30"+
    "\1\u021a\1\32\1\30\1\u022f\1\30\1\u0244\1\30\1\35"+
    "\1\30\1\35\1\30\3\35\2\30\62\35\1\30\1\35"+
    "\2\30\1\32\1\30\1\32\1\30\1\170\1\30\1\35"+
    "\1\30\1\35\1\30\3\35\2\30\35\35\1\u0245\24\35"+
    "\1\30\1\35\2\30\1\32\1\30\1\32\1\30\1\170"+
    "\1\30\1\35\1\30\1\35\1\30\3\35\2\30\45\35"+
    "\1\u0246\14\35\1\30\1\35\2\30\1\32\1\30\1\32"+
    "\1\30\1\170\1\30\1\35\1\30\1\35\1\30\3\35"+
    "\2\30\51\35\1\u0247\10\35\1\30\1\35\1\30\1\u021e"+
    "\1\32\1\30\1\u0233\1\30\1\u0248\1\30\1\35\1\30"+
    "\1\35\1\30\3\35\2\30\62\35\1\30\1\35\2\30"+
    "\1\32\1\30\1\32\1\30\1\170\1\30\1\35\1\30"+
    "\1\35\1\30\3\35\2\30\34\35\1\u0249\25\35\1\30"+
    "\1\35\1\30\1\u0220\1\32\1\30\1\u0235\1\30\1\u024a"+
    "\1\30\1\35\1\30\1\35\1\30\3\35\2\30\62\35"+
    "\1\30\1\35\1\30\1\u0221\1\32\1\30\1\u0236\1\30"+
    "\1\u024b\1\30\1\35\1\30\1\35\1\30\3\35\2\30"+
    "\62\35\1\30\1\35\2\30\1\32\1\30\1\32\1\30"+
    "\1\170\1\30\1\35\1\30\1\35\1\30\3\35\2\30"+
    "\52\35\1\u024c\7\35\1\30\1\35\2\30\1\32\1\30"+
    "\1\32\1\30\1\170\1\30\1\35\1\30\1\35\1\30"+
    "\3\35\2\30\51\35\1\u024d\10\35\1\30\1\35\1\30"+
    "\1\u0224\1\32\1\30\1\u0239\1\30\1\u024e\1\30\1\35"+
    "\1\30\1\35\1\30\3\35\2\30\62\35\1\30\1\35"+
    "\2\30\1\32\1\30\1\32\1\30\1\170\1\30\1\35"+
    "\1\30\1\35\1\30\3\35\2\30\56\35\1\u024f\3\35"+
    "\1\30\1\35\12\u018f\1\u0250\72\u018f\14\0\3\67\2\0"+
    "\16\67\1\u0251\27\67\1\u0251\13\67\1\0\1\67\14\0"+
    "\3\67\2\0\22\67\1\u0252\30\67\1\u0252\6\67\1\0"+
    "\1\67\14\0\3\67\2\0\16\67\1\u0253\27\67\1\u0253"+
    "\13\67\1\0\1\67\14\0\3\67\2\0\17\67\1\u0254"+
    "\27\67\1\u0254\12\67\1\0\1\67\14\0\3\67\2\0"+
    "\2\67\1\u0255\27\67\1\u0255\27\67\1\0\1\67\14\0"+
    "\3\67\2\0\1\u0256\27\67\1\u0256\31\67\1\0\1\67"+
    "\14\0\3\67\2\0\4\67\1\u0257\27\67\1\u0257\25\67"+
    "\1\0\1\67\14\0\3\11\2\0\27\11\1\67\16\11"+
    "\1\u0258\13\11\1\0\1\11\51\0\1\u0259\114\0\1\u025a"+
    "\37\0\3\11\2\0\27\11\1\67\12\11\1\u025b\17\11"+
    "\1\0\1\11\64\0\1\u025c\20\0\1\30\1\u0211\1\32"+
    "\1\30\1\u0226\1\30\1\u023b\100\30\1\32\1\30\1\32"+
    "\1\30\1\110\46\30\1\u025d\31\30\1\32\1\30\1\32"+
    "\1\30\1\110\42\30\1\u025e\35\30\1\32\1\30\1\32"+
    "\1\30\1\110\57\30\1\u025f\17\30\1\u0215\1\32\1\30"+
    "\1\u022a\1\30\1\u023f\100\30\1\32\1\30\1\32\1\30"+
    "\1\110\63\30\1\u0260\14\30\1\32\1\30\1\32\1\30"+
    "\1\110\43\30\1\u0261\34\30\1\32\1\30\1\32\1\30"+
    "\1\110\57\30\1\u0262\20\30\1\32\1\30\1\32\1\30"+
    "\1\110\52\30\1\u0263\24\30\1\u021a\1\32\1\30\1\u022f"+
    "\1\30\1\u0244\100\30\1\32\1\30\1\32\1\30\1\110"+
    "\47\30\1\u0264\30\30\1\32\1\30\1\32\1\30\1\110"+
    "\57\30\1\u0265\20\30\1\32\1\30\1\32\1\30\1\110"+
    "\63\30\1\u0266\13\30\1\u021e\1\32\1\30\1\u0233\1\30"+
    "\1\u0248\100\30\1\32\1\30\1\32\1\30\1\110\46\30"+
    "\1\u0267\30\30\1\u0220\1\32\1\30\1\u0235\1\30\1\u024a"+
    "\77\30\1\u0221\1\32\1\30\1\u0236\1\30\1\u024b\100\30"+
    "\1\32\1\30\1\32\1\30\1\110\64\30\1\u0268\13\30"+
    "\1\32\1\30\1\32\1\30\1\110\63\30\1\u0269\13\30"+
    "\1\u0224\1\32\1\30\1\u0239\1\30\1\u024e\100\30\1\32"+
    "\1\30\1\32\1\30\1\110\70\30\1\u026a\5\30\1\32"+
    "\1\u0226\2\32\1\u0226\1\32\1\u023b\104\32\1\137\46\32"+
    "\1\u026b\35\32\1\137\42\32\1\u026c\41\32\1\137\57\32"+
    "\1\u026d\17\32\1\u022a\2\32\1\u022a\1\32\1\u023f\104\32"+
    "\1\137\63\32\1\u026e\20\32\1\137\43\32\1\u026f\40\32"+
    "\1\137\57\32\1\u0270\24\32\1\137\52\32\1\u0271\24\32"+
    "\1\u022f\2\32\1\u022f\1\32\1\u0244\104\32\1\137\47\32"+
    "\1\u0272\34\32\1\137\57\32\1\u0273\24\32\1\137\63\32"+
    "\1\u0274\13\32\1\u0233\2\32\1\u0233\1\32\1\u0248\104\32"+
    "\1\137\46\32\1\u0275\30\32\1\u0235\2\32\1\u0235\1\32"+
    "\1\u024a\77\32\1\u0236\2\32\1\u0236\1\32\1\u024b\104\32"+
    "\1\137\64\32\1\u0276\17\32\1\137\63\32\1\u0277\13\32"+
    "\1\u0239\2\32\1\u0239\1\32\1\u024e\104\32\1\137\70\32"+
    "\1\u0278\5\32\2\30\1\32\1\30\1\32\1\30\1\170"+
    "\1\30\1\35\1\30\1\35\1\30\3\35\2\30\51\35"+
    "\1\u0279\10\35\1\30\1\35\1\30\1\u025e\1\32\1\30"+
    "\1\u026c\1\30\1\u027a\1\30\1\35\1\30\1\35\1\30"+
    "\3\35\2\30\62\35\1\30\1\35\2\30\1\32\1\30"+
    "\1\32\1\30\1\170\1\30\1\35\1\30\1\35\1\30"+
    "\3\35\2\30\30\35\1\u027b\31\35\1\30\1\35\1\30"+
    "\1\u0260\1\32\1\30\1\u026e\1\30\1\u027c\1\30\1\35"+
    "\1\30\1\35\1\30\3\35\2\30\62\35\1\30\1\35"+
    "\2\30\1\32\1\30\1\32\1\30\1\170\1\30\1\35"+
    "\1\30\1\35\1\30\3\35\2\30\46\35\1\u027d\13\35"+
    "\1\30\1\35\1\30\1\u0262\1\32\1\30\1\u0270\1\30"+
    "\1\u027e\1\30\1\35\1\30\1\35\1\30\3\35\2\30"+
    "\62\35\1\30\1\35\2\30\1\32\1\30\1\32\1\30"+
    "\1\170\1\30\1\35\1\30\1\35\1\30\3\35\2\30"+
    "\30\35\1\u027f\31\35\1\30\1\35\2\30\1\32\1\30"+
    "\1\32\1\30\1\170\1\30\1\35\1\30\1\35\1\30"+
    "\3\35\2\30\60\35\1\u0280\1\35\1\30\1\35\1\30"+
    "\1\u0265\1\32\1\30\1\u0273\1\30\1\u0281\1\30\1\35"+
    "\1\30\1\35\1\30\3\35\2\30\62\35\1\30\1\35"+
    "\1\30\1\u0266\1\32\1\30\1\u0274\1\30\1\u0282\1\30"+
    "\1\35\1\30\1\35\1\30\3\35\2\30\62\35\1\30"+
    "\1\35\1\30\1\u0267\1\32\1\30\1\u0275\1\30\1\u0283"+
    "\1\30\1\35\1\30\1\35\1\30\3\35\2\30\62\35"+
    "\1\30\1\35\2\30\1\32\1\30\1\32\1\30\1\170"+
    "\1\30\1\35\1\30\1\35\1\30\3\35\2\30\34\35"+
    "\1\u0284\25\35\1\30\1\35\1\30\1\u0269\1\32\1\30"+
    "\1\u0277\1\30\1\u0285\1\30\1\35\1\30\1\35\1\30"+
    "\3\35\2\30\62\35\1\30\1\35\1\30\1\u026a\1\32"+
    "\1\30\1\u0278\1\30\1\u0286\1\30\1\35\1\30\1\35"+
    "\1\30\3\35\2\30\62\35\1\30\1\35\12\u018f\1\u0250"+
    "\5\u018f\1\3\64\u018f\14\0\3\67\2\0\15\67\1\u0287"+
    "\27\67\1\u0287\14\67\1\0\1\67\14\0\3\67\2\0"+
    "\15\67\1\u0288\27\67\1\u0288\14\67\1\0\1\67\14\0"+
    "\3\67\2\0\22\67\1\u0289\30\67\1\u0289\6\67\1\0"+
    "\1\67\14\0\3\67\2\0\22\67\1\u028a\30\67\1\u028a"+
    "\6\67\1\0\1\67\14\0\3\67\2\0\20\67\1\u028b"+
    "\30\67\1\u028b\10\67\1\0\1\67\14\0\3\11\2\0"+
    "\27\11\1\67\24\11\1\u028c\5\11\1\0\1\11\65\0"+
    "\1\u028d\121\0\1\u028e\63\0\1\u028f\23\0\2\30\1\32"+
    "\1\30\1\32\1\30\1\110\63\30\1\u0290\13\30\1\u025e"+
    "\1\32\1\30\1\u026c\1\30\1\u027a\100\30\1\32\1\30"+
    "\1\32\1\30\1\110\42\30\1\u0291\34\30\1\u0260\1\32"+
    "\1\30\1\u026e\1\30\1\u027c\100\30\1\32\1\30\1\32"+
    "\1\30\1\110\60\30\1\u0292\16\30\1\u0262\1\32\1\30"+
    "\1\u0270\1\30\1\u027e\100\30\1\32\1\30\1\32\1\30"+
    "\1\110\42\30\1\u0293\35\30\1\32\1\30\1\32\1\30"+
    "\1\110\72\30\1\u0294\4\30\1\u0265\1\32\1\30\1\u0273"+
    "\1\30\1\u0281\77\30\1\u0266\1\32\1\30\1\u0274\1\30"+
    "\1\u0282\77\30\1\u0267\1\32\1\30\1\u0275\1\30\1\u0283"+
    "\100\30\1\32\1\30\1\32\1\30\1\110\46\30\1\u0295"+
    "\30\30\1\u0269\1\32\1\30\1\u0277\1\30\1\u0285\77\30"+
    "\1\u026a\1\32\1\30\1\u0278\1\30\1\u0286\76\30\6\32"+
    "\1\137\63\32\1\u0296\13\32\1\u026c\2\32\1\u026c\1\32"+
    "\1\u027a\104\32\1\137\42\32\1\u0297\34\32\1\u026e\2\32"+
    "\1\u026e\1\32\1\u027c\104\32\1\137\60\32\1\u0298\16\32"+
    "\1\u0270\2\32\1\u0270\1\32\1\u027e\104\32\1\137\42\32"+
    "\1\u0299\41\32\1\137\72\32\1\u029a\4\32\1\u0273\2\32"+
    "\1\u0273\1\32\1\u0281\77\32\1\u0274\2\32\1\u0274\1\32"+
    "\1\u0282\77\32\1\u0275\2\32\1\u0275\1\32\1\u0283\104\32"+
    "\1\137\46\32\1\u029b\30\32\1\u0277\2\32\1\u0277\1\32"+
    "\1\u0285\77\32\1\u0278\2\32\1\u0278\1\32\1\u0286\76\32"+
    "\1\30\1\u0290\1\32\1\30\1\u0296\1\30\1\u029c\1\30"+
    "\1\35\1\30\1\35\1\30\3\35\2\30\62\35\1\30"+
    "\1\35\1\30\1\u0291\1\32\1\30\1\u0297\1\30\1\u029d"+
    "\1\30\1\35\1\30\1\35\1\30\3\35\2\30\62\35"+
    "\1\30\1\35\2\30\1\32\1\30\1\32\1\30\1\170"+
    "\1\30\1\35\1\30\1\35\1\30\3\35\2\30\57\35"+
    "\1\u029e\2\35\1\30\1\35\1\30\1\u0293\1\32\1\30"+
    "\1\u0299\1\30\1\u029f\1\30\1\35\1\30\1\35\1\30"+
    "\3\35\2\30\62\35\1\30\1\35\1\30\1\u0294\1\32"+
    "\1\30\1\u029a\1\30\1\u02a0\1\30\1\35\1\30\1\35"+
    "\1\30\3\35\2\30\62\35\1\30\1\35\2\30\1\32"+
    "\1\30\1\32\1\30\1\170\1\30\1\35\1\30\1\35"+
    "\1\30\3\35\2\30\51\35\1\u02a1\10\35\1\30\1\35"+
    "\14\0\3\67\2\0\10\67\1\u02a2\27\67\1\u02a2\21\67"+
    "\1\0\1\67\14\0\3\67\2\0\4\67\1\u02a3\27\67"+
    "\1\u02a3\25\67\1\0\1\67\14\0\3\11\2\0\27\11"+
    "\1\67\15\11\1\u02a4\14\11\1\0\1\11\61\0\1\u02a5"+
    "\100\0\1\u02a6\106\0\1\u02a7\25\0\1\30\1\u0290\1\32"+
    "\1\30\1\u0296\1\30\1\u029c\77\30\1\u0291\1\32\1\30"+
    "\1\u0297\1\30\1\u029d\100\30\1\32\1\30\1\32\1\30"+
    "\1\110\71\30\1\u02a8\5\30\1\u0293\1\32\1\30\1\u0299"+
    "\1\30\1\u029f\77\30\1\u0294\1\32\1\30\1\u029a\1\30"+
    "\1\u02a0\100\30\1\32\1\30\1\32\1\30\1\110\63\30"+
    "\1\u02a9\12\30\1\32\1\u0296\2\32\1\u0296\1\32\1\u029c"+
    "\77\32\1\u0297\2\32\1\u0297\1\32\1\u029d\104\32\1\137"+
    "\71\32\1\u02aa\5\32\1\u0299\2\32\1\u0299\1\32\1\u029f"+
    "\77\32\1\u029a\2\32\1\u029a\1\32\1\u02a0\104\32\1\137"+
    "\63\32\1\u02ab\12\32\1\30\1\u02a8\1\32\1\30\1\u02aa"+
    "\1\30\1\u02ac\1\30\1\35\1\30\1\35\1\30\3\35"+
    "\2\30\62\35\1\30\1\35\2\30\1\32\1\30\1\32"+
    "\1\30\1\170\1\30\1\35\1\30\1\35\1\30\3\35"+
    "\2\30\40\35\1\u02ad\21\35\1\30\1\35\14\0\3\67"+
    "\2\0\15\67\1\u02ae\27\67\1\u02ae\14\67\1\0\1\67"+
    "\14\0\3\67\2\0\1\u02af\27\67\1\u02af\31\67\1\0"+
    "\1\67\14\0\3\11\2\0\27\11\1\67\3\11\1\u02b0"+
    "\26\11\1\0\1\11\64\0\1\u02b1\106\0\1\u02b2\16\0"+
    "\1\30\1\u02a8\1\32\1\30\1\u02aa\1\30\1\u02ac\100\30"+
    "\1\32\1\30\1\32\1\30\1\110\52\30\1\u02b3\23\30"+
    "\1\32\1\u02aa\2\32\1\u02aa\1\32\1\u02ac\104\32\1\137"+
    "\52\32\1\u02b4\23\32\2\30\1\32\1\30\1\32\1\30"+
    "\1\170\1\30\1\35\1\30\1\35\1\30\3\35\2\30"+
    "\35\35\1\u02b5\24\35\1\30\1\35\14\0\3\67\2\0"+
    "\6\67\1\u02b6\27\67\1\u02b6\23\67\1\0\1\67\101\0"+
    "\1\u02b7\3\0\2\30\1\32\1\30\1\32\1\30\1\110"+
    "\47\30\1\u02b8\26\30\6\32\1\137\47\32\1\u02b9\26\32"+
    "\1\30\1\u02b8\1\32\1\30\1\u02b9\1\30\1\u02ba\1\30"+
    "\1\35\1\30\1\35\1\30\3\35\2\30\62\35\1\30"+
    "\1\35\1\30\1\u02b8\1\32\1\30\1\u02b9\1\30\1\u02ba"+
    "\76\30\1\32\1\u02b9\2\32\1\u02b9\1\32\1\u02ba\76\32";

  private static int [] zzUnpackTrans() {
    int [] result = new int[42987];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\1\11\17\1\36\0\1\11\21\1"+
    "\1\11\26\0\1\11\30\0\2\11\37\0\30\1\76\0"+
    "\2\11\41\0\35\1\100\0\1\11\26\0\1\11\1\0"+
    "\1\11\10\0\21\1\1\0\2\1\1\0\1\1\76\0"+
    "\1\11\1\0\1\11\4\0\1\11\2\0\2\11\1\0"+
    "\1\11\7\0\2\11\3\0\15\1\2\0\2\1\53\0"+
    "\1\11\3\0\1\11\4\0\1\11\3\0\1\11\1\0"+
    "\2\11\2\0\1\11\2\0\10\1\2\0\1\1\36\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\3\11\1\0"+
    "\2\11\6\1\17\0\2\11\1\0\2\11\1\0\3\1"+
    "\1\0\1\11\5\0\1\11\1\0\3\1\1\0\1\11"+
    "\3\0\1\1\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[698];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    /* CODIGO A√ëADIDO */    


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public EtiquetadoLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    /* CODIGO EJECUTADO AL FINAL DEL ANALISIS */
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 80: break;
          case 2:
            { /* IGNORAR */
            }
            // fall through
          case 81: break;
          case 3:
            { return new Symbol(ALFANUMERICO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 82: break;
          case 4:
            { return new Symbol(MENOR_QUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 83: break;
          case 5:
            { return new Symbol(MAYOR_QUE, yyline+1, yycollumn+1, yytext());
            }
            // fall through
          case 84: break;
          case 6:
            { return new Symbol(MENOR_CIERRE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 85: break;
          case 7:
            { return new Symbol(IDENTIFICADOR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 86: break;
          case 8:
            { return new Symbol(ID, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 87: break;
          case 9:
            { return new Symbol(ALLCHARNOSPACE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 88: break;
          case 10:
            { return new Symbol(ALLCHAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 89: break;
          case 11:
            { return new Symbol(ID_ETIQUETA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 90: break;
          case 12:
            { return new Symbol(DIGITO_COM, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 91: break;
          case 13:
            { return new Symbol(P, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 92: break;
          case 14:
            { return new Symbol(ALT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 93: break;
          case 15:
            { return new Symbol(SRC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 94: break;
          case 16:
            { return new Symbol(HEXADECIMAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 95: break;
          case 17:
            { return new Symbol(PORCENTAJE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 96: break;
          case 18:
            { return new Symbol(BR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 97: break;
          case 19:
            { return new Symbol(H1, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 98: break;
          case 20:
            { return new Symbol(COLS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 99: break;
          case 21:
            { return new Symbol(HREF, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 100: break;
          case 22:
            { return new Symbol(NAME, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 101: break;
          case 23:
            { return new Symbol(ROWS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 102: break;
          case 24:
            { return new Symbol(TYPE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 103: break;
          case 25:
            { return new Symbol(PIXELES, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 104: break;
          case 26:
            { return new Symbol(RED, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 105: break;
          case 27:
            { return new Symbol(ROW, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 106: break;
          case 28:
            { return new Symbol(DIV, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 107: break;
          case 29:
            { return new Symbol(IMG, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 108: break;
          case 30:
            { return new Symbol(CLASS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 109: break;
          case 31:
            { return new Symbol(COLOR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 110: break;
          case 32:
            { return new Symbol(WIDTH, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 111: break;
          case 33:
            { return new Symbol(AQUA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 112: break;
          case 34:
            { return new Symbol(BLUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 113: break;
          case 35:
            { return new Symbol(GRAY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 114: break;
          case 36:
            { return new Symbol(LEFT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 115: break;
          case 37:
            { return new Symbol(LIME, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 116: break;
          case 38:
            { return new Symbol(NAVY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 117: break;
          case 39:
            { return new Symbol(TEAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 118: break;
          case 40:
            { return new Symbol(TEXT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 119: break;
          case 41:
            { return new Symbol(BODY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 120: break;
          case 42:
            { return new Symbol(GCIC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 121: break;
          case 43:
            { return new Symbol(HEAD, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 122: break;
          case 44:
            { return new Symbol(LINK, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 123: break;
          case 45:
            { return new Symbol(SPAM, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 124: break;
          case 46:
            { return new Symbol(HEIGHT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 125: break;
          case 47:
            { return new Symbol(ARIAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 126: break;
          case 48:
            { return new Symbol(BLACK, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 127: break;
          case 49:
            { return new Symbol(GREEN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 128: break;
          case 50:
            { return new Symbol(OLIVE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 129: break;
          case 51:
            { return new Symbol(RADIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 130: break;
          case 52:
            { return new Symbol(RIGHT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 131: break;
          case 53:
            { return new Symbol(WHITE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 132: break;
          case 54:
            { return new Symbol(INPUT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 133: break;
          case 55:
            { return new Symbol(TITLE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 134: break;
          case 56:
            { return new Symbol(ONCLICK, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 135: break;
          case 57:
            { return new Symbol(GENEVA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 136: break;
          case 58:
            { return new Symbol(CENTER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 137: break;
          case 59:
            { return new Symbol(COLUMN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 138: break;
          case 60:
            { return new Symbol(MAROON, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 139: break;
          case 61:
            { return new Symbol(NUMBER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 140: break;
          case 62:
            { return new Symbol(PURPLE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 141: break;
          case 63:
            { return new Symbol(SILVER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 142: break;
          case 64:
            { return new Symbol(YELLOW, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 143: break;
          case 65:
            { return new Symbol(BUTTON, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 144: break;
          case 66:
            { return new Symbol(OPTION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 145: break;
          case 67:
            { return new Symbol(SELECT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 146: break;
          case 68:
            { return new Symbol(COURIER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 147: break;
          case 69:
            { return new Symbol(VERDANA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 148: break;
          case 70:
            { return new Symbol(FUCHSIA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 149: break;
          case 71:
            { return new Symbol(JUSTIFY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 150: break;
          case 72:
            { return new Symbol(FONTSIZE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 151: break;
          case 73:
            { return new Symbol(CHECKBOX, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 152: break;
          case 74:
            { return new Symbol(TEXTAREA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 153: break;
          case 75:
            { return new Symbol(BACKGROUND, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 154: break;
          case 76:
            { return new Symbol(TEXTALIGN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 155: break;
          case 77:
            { return new Symbol(SCRIPTING, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 156: break;
          case 78:
            { return new Symbol(FONTFAMILY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 157: break;
          case 79:
            { return new Symbol(SANS_SERIF, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 158: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
