// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: InsertLexer.jflex

//Secci√≥n de Importaciones
package com.froi.pruebas.gramaticas;
import java_cup.runtime.*;
import static com.froi.pruebas.gramaticas.InsertParserSym.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class EtiquetadoLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\7\0\1\12\1\0"+
    "\1\13\1\14\1\15\10\16\2\0\1\17\1\20\1\21"+
    "\2\0\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\33\1\42\1\43\1\44\1\45\1\46\1\33"+
    "\1\47\1\50\1\33\1\51\1\0\1\52\1\0\1\53"+
    "\1\0\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\0\1\106\104\0\1\107\7\0"+
    "\1\107\3\0\1\107\5\0\1\107\6\0\1\107\6\0"+
    "\1\107\7\0\1\107\3\0\1\107\5\0\1\107\6\0"+
    "\1\107\1\0\1\107\u0103\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\5\1\6"+
    "\2\3\1\7\1\10\14\3\1\2\36\0\1\11\2\12"+
    "\7\3\1\13\7\3\1\14\26\0\1\15\30\0\1\16"+
    "\1\17\37\0\7\12\1\20\2\12\1\21\11\3\1\22"+
    "\3\3\76\0\1\23\1\24\41\0\1\12\1\25\3\12"+
    "\1\26\12\12\3\3\1\27\2\3\1\30\1\31\1\3"+
    "\1\32\1\3\1\33\1\3\100\0\1\34\26\0\1\35"+
    "\1\0\1\36\10\0\2\12\1\37\2\12\1\40\10\12"+
    "\1\3\1\41\1\42\1\0\2\3\1\0\1\43\76\0"+
    "\1\44\1\0\1\45\4\0\1\46\2\0\1\47\1\50"+
    "\1\0\1\51\7\0\1\52\1\53\3\0\1\54\1\12"+
    "\1\55\1\56\1\12\1\57\3\12\1\60\2\12\1\3"+
    "\2\0\1\61\1\3\53\0\1\62\3\0\1\63\4\0"+
    "\1\64\3\0\1\65\1\0\1\66\1\67\2\0\1\70"+
    "\2\0\1\12\1\71\4\12\1\72\1\3\2\0\1\73"+
    "\36\0\1\74\1\0\1\75\1\0\1\76\2\0\1\77"+
    "\1\100\1\101\1\0\1\102\1\103\1\104\1\105\1\12"+
    "\1\106\1\12\1\3\17\0\1\107\1\110\1\0\1\111"+
    "\1\112\1\0\2\12\1\3\1\0\1\113\5\0\1\114"+
    "\1\0\1\12\1\115\1\116\1\0\1\117\3\0\1\120"+
    "\1\121\2\0\1\122";

  private static int [] zzUnpackAction() {
    int [] result = new int[701];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\110\0\220\0\330\0\u0120\0\u0168\0\110"+
    "\0\110\0\u01b0\0\u01f8\0\110\0\110\0\u0240\0\u0288\0\u02d0"+
    "\0\u0318\0\u0360\0\u03a8\0\u03f0\0\u0438\0\u0480\0\u04c8\0\u0510"+
    "\0\u0558\0\u05a0\0\u05e8\0\u0630\0\u0678\0\u06c0\0\u0708\0\u0750"+
    "\0\u0798\0\u07e0\0\u0828\0\u0870\0\u08b8\0\u0900\0\u0948\0\u0990"+
    "\0\u09d8\0\u0a20\0\u0a68\0\u0ab0\0\u0af8\0\u0b40\0\u0b88\0\u0bd0"+
    "\0\u0c18\0\u0c60\0\u0ca8\0\u0cf0\0\u0d38\0\u0d80\0\u0dc8\0\u0e10"+
    "\0\110\0\u0e58\0\u0ea0\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0\0\u1008"+
    "\0\u1050\0\u1098\0\u01b0\0\u10e0\0\u1128\0\u1170\0\u11b8\0\u1200"+
    "\0\u1248\0\u1290\0\110\0\u12d8\0\u1320\0\u1368\0\u13b0\0\u13f8"+
    "\0\u1440\0\u1488\0\u14d0\0\u1518\0\u1560\0\u15a8\0\u15f0\0\u1638"+
    "\0\u1680\0\u16c8\0\u1710\0\u1758\0\u17a0\0\u17e8\0\u1830\0\u1878"+
    "\0\u18c0\0\110\0\u1908\0\u1950\0\u1998\0\u19e0\0\u1a28\0\u1a70"+
    "\0\u1ab8\0\u1b00\0\u1b48\0\u1b90\0\u1bd8\0\u1c20\0\u1c68\0\u1cb0"+
    "\0\u1cf8\0\u1d40\0\u1d88\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8\0\u1ef0"+
    "\0\u1f38\0\u1f80\0\110\0\110\0\u1fc8\0\u2010\0\u2058\0\u20a0"+
    "\0\u20e8\0\u2130\0\u2178\0\u21c0\0\u2208\0\u2250\0\u2298\0\u22e0"+
    "\0\u2328\0\u2370\0\u23b8\0\u2400\0\u2448\0\u2490\0\u24d8\0\u2520"+
    "\0\u2568\0\u25b0\0\u25f8\0\u2640\0\u2688\0\u26d0\0\u2718\0\u2760"+
    "\0\u27a8\0\u27f0\0\u2838\0\u2880\0\u28c8\0\u2910\0\u2958\0\u29a0"+
    "\0\u29e8\0\u2a30\0\u0e58\0\u2a78\0\u2ac0\0\u01b0\0\u2b08\0\u2b50"+
    "\0\u2b98\0\u2be0\0\u2c28\0\u2c70\0\u2cb8\0\u2d00\0\u2d48\0\u01b0"+
    "\0\u2d90\0\u2dd8\0\u2e20\0\u2e68\0\u2eb0\0\u2ef8\0\u2f40\0\u2f88"+
    "\0\u2fd0\0\u3018\0\u3060\0\u30a8\0\u30f0\0\u3138\0\u3180\0\u31c8"+
    "\0\u3210\0\u3258\0\u32a0\0\u32e8\0\u3330\0\u3378\0\u33c0\0\u3408"+
    "\0\u3450\0\u3498\0\u34e0\0\u3528\0\u3570\0\u35b8\0\u3600\0\u3648"+
    "\0\u3690\0\u36d8\0\u3720\0\u3768\0\u37b0\0\u37f8\0\u3840\0\u3888"+
    "\0\u38d0\0\u3918\0\u3960\0\u39a8\0\u39f0\0\u3a38\0\u3a80\0\u3ac8"+
    "\0\u3b10\0\u3b58\0\u3ba0\0\u3be8\0\u3c30\0\u3c78\0\u3cc0\0\u3d08"+
    "\0\u3d50\0\u3d98\0\u3de0\0\u3e28\0\u3e70\0\u3eb8\0\u3f00\0\u3f48"+
    "\0\u3f90\0\110\0\110\0\u3fd8\0\u4020\0\u4068\0\u40b0\0\u40f8"+
    "\0\u4140\0\u4188\0\u41d0\0\u4218\0\u4260\0\u42a8\0\u42f0\0\u4338"+
    "\0\u4380\0\u43c8\0\u4410\0\u4458\0\u44a0\0\u44e8\0\u4530\0\u4578"+
    "\0\u45c0\0\u4608\0\u4650\0\u4698\0\u46e0\0\u4728\0\u4770\0\u47b8"+
    "\0\u4800\0\u4848\0\u4890\0\u48d8\0\u4920\0\u0e58\0\u4968\0\u49b0"+
    "\0\u49f8\0\u0e58\0\u4a40\0\u4a88\0\u4ad0\0\u4b18\0\u4b60\0\u4ba8"+
    "\0\u4bf0\0\u4c38\0\u4c80\0\u4cc8\0\u4d10\0\u4d58\0\u4da0\0\u01b0"+
    "\0\u4de8\0\u4e30\0\u01b0\0\u01b0\0\u4e78\0\u01b0\0\u4ec0\0\u01b0"+
    "\0\u4f08\0\u4f50\0\u4f98\0\u4fe0\0\u5028\0\u5070\0\u50b8\0\u5100"+
    "\0\u5148\0\u5190\0\u51d8\0\u5220\0\u5268\0\u52b0\0\u52f8\0\u5340"+
    "\0\u5388\0\u53d0\0\u5418\0\u5460\0\u54a8\0\u54f0\0\u5538\0\u5580"+
    "\0\u55c8\0\u5610\0\u5658\0\u56a0\0\u56e8\0\u5730\0\u5778\0\u57c0"+
    "\0\u5808\0\u5850\0\u5898\0\u58e0\0\u5928\0\u5970\0\u59b8\0\u5a00"+
    "\0\u5a48\0\u5a90\0\u5ad8\0\u5b20\0\u5b68\0\u5bb0\0\u5bf8\0\u5c40"+
    "\0\u5c88\0\u5cd0\0\u5d18\0\u5d60\0\u5da8\0\u5df0\0\u5e38\0\u5e80"+
    "\0\u5ec8\0\u5f10\0\u5f58\0\u5fa0\0\u5fe8\0\u6030\0\u6078\0\u60c0"+
    "\0\u6108\0\110\0\u6150\0\u6198\0\u61e0\0\u6228\0\u6270\0\u62b8"+
    "\0\u6300\0\u6348\0\u6390\0\u63d8\0\u6420\0\u6468\0\u64b0\0\u64f8"+
    "\0\u6540\0\u6588\0\u65d0\0\u6618\0\u6660\0\u66a8\0\u66f0\0\u6738"+
    "\0\110\0\u6780\0\110\0\u67c8\0\u6810\0\u6858\0\u68a0\0\u68e8"+
    "\0\u6930\0\u6978\0\u69c0\0\u6a08\0\u6a50\0\u0e58\0\u6a98\0\u6ae0"+
    "\0\u0e58\0\u6b28\0\u6b70\0\u6bb8\0\u6c00\0\u6c48\0\u6c90\0\u6cd8"+
    "\0\u6d20\0\u6d68\0\u01b0\0\u01b0\0\u6db0\0\u6df8\0\u6e40\0\u6e88"+
    "\0\u01b0\0\u6ed0\0\u6f18\0\u6f60\0\u6fa8\0\u6ff0\0\u7038\0\u7080"+
    "\0\u70c8\0\u7110\0\u7158\0\u71a0\0\u71e8\0\u7230\0\u7278\0\u72c0"+
    "\0\u7308\0\u7350\0\u7398\0\u73e0\0\u7428\0\u7470\0\u74b8\0\u7500"+
    "\0\u7548\0\u7590\0\u75d8\0\u7620\0\u7668\0\u76b0\0\u76f8\0\u7740"+
    "\0\u7788\0\u77d0\0\u7818\0\u7860\0\u78a8\0\u78f0\0\u7938\0\u7980"+
    "\0\u79c8\0\u7a10\0\u7a58\0\u7aa0\0\u7ae8\0\u7b30\0\u7b78\0\u7bc0"+
    "\0\u7c08\0\u7c50\0\u7c98\0\u7ce0\0\u7d28\0\u7d70\0\u7db8\0\u7e00"+
    "\0\u7e48\0\u7e90\0\u7ed8\0\u7f20\0\u7f68\0\u7fb0\0\u7ff8\0\110"+
    "\0\u8040\0\110\0\u8088\0\u80d0\0\u8118\0\u8160\0\110\0\u81a8"+
    "\0\u81f0\0\110\0\110\0\u8238\0\110\0\u8280\0\u82c8\0\u8310"+
    "\0\u8358\0\u83a0\0\u83e8\0\u8430\0\110\0\110\0\u8478\0\u84c0"+
    "\0\u8508\0\u0e58\0\u8550\0\u0e58\0\u0e58\0\u8598\0\u0e58\0\u85e0"+
    "\0\u8628\0\u8670\0\u0e58\0\u86b8\0\u8700\0\u8748\0\u8790\0\u87d8"+
    "\0\u01b0\0\u8820\0\u8868\0\u88b0\0\u88f8\0\u8940\0\u8988\0\u89d0"+
    "\0\u8a18\0\u8a60\0\u8aa8\0\u8af0\0\u8b38\0\u8b80\0\u8bc8\0\u8c10"+
    "\0\u8c58\0\u8ca0\0\u8ce8\0\u8d30\0\u8d78\0\u8dc0\0\u8e08\0\u8e50"+
    "\0\u8e98\0\u8ee0\0\u8f28\0\u8f70\0\u8fb8\0\u9000\0\u9048\0\u9090"+
    "\0\u90d8\0\u9120\0\u9168\0\u91b0\0\u91f8\0\u9240\0\u9288\0\u92d0"+
    "\0\u9318\0\u9360\0\u93a8\0\u93f0\0\u9438\0\110\0\u9480\0\u94c8"+
    "\0\u9510\0\110\0\u9558\0\u95a0\0\u95e8\0\u9630\0\110\0\u9678"+
    "\0\u96c0\0\u9708\0\110\0\u9750\0\110\0\110\0\u9798\0\u97e0"+
    "\0\110\0\u9828\0\u9870\0\u98b8\0\u0e58\0\u9900\0\u9948\0\u9990"+
    "\0\u99d8\0\u0e58\0\u9a20\0\u9a68\0\u9ab0\0\u01b0\0\u9af8\0\u9b40"+
    "\0\u9b88\0\u9bd0\0\u9c18\0\u9c60\0\u9ca8\0\u9cf0\0\u9d38\0\u9d80"+
    "\0\u9dc8\0\u9e10\0\u9e58\0\u9ea0\0\u9ee8\0\u9f30\0\u9f78\0\u9fc0"+
    "\0\ua008\0\ua050\0\ua098\0\ua0e0\0\ua128\0\ua170\0\ua1b8\0\ua200"+
    "\0\ua248\0\ua290\0\ua2d8\0\ua320\0\110\0\ua368\0\110\0\ua3b0"+
    "\0\110\0\ua3f8\0\ua440\0\110\0\110\0\110\0\ua488\0\110"+
    "\0\110\0\u0e58\0\u0e58\0\ua4d0\0\u0e58\0\ua518\0\ua560\0\ua5a8"+
    "\0\ua5f0\0\ua638\0\ua680\0\ua6c8\0\ua710\0\ua758\0\ua7a0\0\ua7e8"+
    "\0\ua830\0\ua878\0\ua8c0\0\ua908\0\ua950\0\ua998\0\110\0\110"+
    "\0\ua9e0\0\110\0\110\0\uaa28\0\uaa70\0\uaab8\0\uab00\0\uab48"+
    "\0\110\0\uab90\0\uabd8\0\uac20\0\uac68\0\uacb0\0\110\0\uacf8"+
    "\0\uad40\0\u0e58\0\u01b0\0\uad88\0\110\0\uadd0\0\uae18\0\uae60"+
    "\0\u0e58\0\110\0\uaea8\0\uaef0\0\110";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[701];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\4\3\1\4\1\5\5\2\3\6\1\7\1\10"+
    "\1\11\2\12\1\13\24\12\1\14\1\15\1\2\1\16"+
    "\1\17\1\20\2\12\1\21\1\12\1\22\1\23\4\12"+
    "\1\24\1\25\2\12\1\26\1\27\1\30\2\12\1\31"+
    "\3\12\1\3\1\6\115\0\1\32\102\0\1\33\1\34"+
    "\1\35\1\33\1\36\1\33\1\0\1\37\1\40\1\33"+
    "\1\40\1\33\1\41\2\42\3\33\1\43\1\40\1\44"+
    "\3\40\1\45\15\40\1\46\2\40\2\33\1\40\1\47"+
    "\1\50\1\51\2\40\1\52\1\53\2\40\1\54\1\40"+
    "\1\55\1\56\1\57\1\60\1\61\1\40\1\62\1\63"+
    "\1\64\2\40\1\65\1\40\1\66\1\40\1\33\1\40"+
    "\14\0\3\6\3\0\27\6\3\0\32\6\1\0\1\6"+
    "\1\0\1\67\2\0\1\67\1\70\5\0\1\71\110\0"+
    "\3\12\3\0\27\12\2\0\1\72\32\12\1\0\1\12"+
    "\14\0\3\12\3\0\27\12\2\0\1\73\32\12\1\0"+
    "\1\12\14\0\3\12\3\0\27\12\2\0\1\72\13\12"+
    "\1\74\16\12\1\0\1\12\14\0\3\12\3\0\27\12"+
    "\2\0\1\72\1\75\31\12\1\0\1\12\14\0\3\12"+
    "\3\0\27\12\2\0\1\73\13\12\1\76\2\12\1\77"+
    "\13\12\1\0\1\12\14\0\3\12\3\0\27\12\2\0"+
    "\1\72\16\12\1\100\13\12\1\0\1\12\14\0\3\12"+
    "\3\0\27\12\2\0\1\72\4\12\1\101\14\12\1\102"+
    "\10\12\1\0\1\12\14\0\3\12\3\0\27\12\2\0"+
    "\1\72\3\12\1\103\26\12\1\0\1\12\14\0\3\12"+
    "\3\0\27\12\2\0\1\72\1\104\31\12\1\0\1\12"+
    "\14\0\3\12\3\0\27\12\2\0\1\72\15\12\1\105"+
    "\14\12\1\0\1\12\14\0\3\12\3\0\27\12\2\0"+
    "\1\72\16\12\1\106\13\12\1\0\1\12\14\0\3\12"+
    "\3\0\27\12\2\0\1\72\21\12\1\107\10\12\1\0"+
    "\1\12\14\0\3\12\3\0\27\12\2\0\1\72\4\12"+
    "\1\110\23\12\1\111\1\12\1\0\1\12\14\0\3\12"+
    "\3\0\27\12\2\0\1\72\10\12\1\112\21\12\1\0"+
    "\1\12\2\32\2\0\104\32\2\33\1\35\1\33\1\35"+
    "\1\33\1\113\102\33\1\34\1\35\1\33\1\36\1\33"+
    "\1\113\1\37\4\33\1\114\2\115\3\33\1\116\1\33"+
    "\1\117\3\33\1\120\15\33\1\121\5\33\1\122\1\123"+
    "\1\124\2\33\1\125\1\126\2\33\1\127\1\33\1\130"+
    "\1\131\1\132\1\133\1\134\1\33\1\135\1\136\1\137"+
    "\2\33\1\140\1\33\1\141\3\33\6\35\1\142\102\35"+
    "\1\36\2\35\1\36\1\35\1\142\1\143\4\35\1\144"+
    "\2\145\3\35\1\146\1\35\1\147\3\35\1\150\15\35"+
    "\1\151\5\35\1\152\1\153\1\154\2\35\1\155\1\156"+
    "\2\35\1\157\1\35\1\160\1\161\1\162\1\163\1\164"+
    "\1\35\1\165\1\166\1\167\2\35\1\170\1\35\1\171"+
    "\3\35\2\33\1\35\1\33\1\35\1\33\1\113\5\33"+
    "\3\172\3\33\6\172\24\33\6\172\30\33\1\35\1\33"+
    "\1\35\1\33\1\173\1\33\1\40\1\33\1\40\1\33"+
    "\3\40\3\33\27\40\2\33\33\40\1\33\1\40\1\33"+
    "\1\114\1\35\1\33\1\144\1\33\1\174\1\33\1\40"+
    "\1\175\1\40\1\33\3\40\3\33\17\40\1\176\7\40"+
    "\2\33\20\40\1\176\12\40\1\33\1\40\1\33\1\114"+
    "\1\35\1\33\1\144\1\33\1\174\1\33\1\40\1\175"+
    "\1\40\1\33\3\42\3\33\17\40\1\176\7\40\2\33"+
    "\20\40\1\176\12\40\1\33\1\40\2\33\1\35\1\33"+
    "\1\35\1\33\1\173\1\33\1\40\1\33\1\40\1\33"+
    "\3\40\3\33\27\40\2\33\22\40\1\177\10\40\1\33"+
    "\1\40\2\33\1\35\1\33\1\35\1\33\1\173\1\33"+
    "\1\40\1\33\1\40\1\33\3\40\3\33\27\40\2\33"+
    "\17\40\1\200\13\40\1\33\1\40\2\33\1\35\1\33"+
    "\1\35\1\33\1\173\1\33\1\40\1\33\1\40\1\33"+
    "\3\40\3\33\27\40\2\33\5\40\1\201\25\40\1\33"+
    "\1\40\2\33\1\35\1\33\1\35\1\33\1\173\1\33"+
    "\1\40\1\33\1\40\1\33\3\40\3\33\27\40\2\33"+
    "\5\40\1\202\25\40\1\33\1\40\2\33\1\35\1\33"+
    "\1\35\1\33\1\173\1\33\1\40\1\33\1\40\1\33"+
    "\3\40\3\33\27\40\2\33\21\40\1\203\11\40\1\33"+
    "\1\40\2\33\1\35\1\33\1\35\1\33\1\173\1\33"+
    "\1\40\1\33\1\40\1\33\3\40\3\33\27\40\2\33"+
    "\14\40\1\204\16\40\1\33\1\40\2\33\1\35\1\33"+
    "\1\35\1\33\1\173\1\33\1\40\1\33\1\40\1\33"+
    "\3\40\3\33\27\40\2\33\5\40\1\205\2\40\1\206"+
    "\6\40\1\207\13\40\1\33\1\40\2\33\1\35\1\33"+
    "\1\35\1\33\1\173\1\33\1\40\1\33\1\40\1\33"+
    "\3\40\3\33\27\40\2\33\25\40\1\210\5\40\1\33"+
    "\1\40\2\33\1\35\1\33\1\35\1\33\1\173\1\33"+
    "\1\40\1\33\1\40\1\33\3\40\3\33\27\40\2\33"+
    "\22\40\1\211\10\40\1\33\1\40\2\33\1\35\1\33"+
    "\1\35\1\33\1\173\1\33\1\40\1\33\1\40\1\33"+
    "\3\40\3\33\27\40\2\33\25\40\1\212\5\40\1\33"+
    "\1\40\2\33\1\35\1\33\1\35\1\33\1\173\1\33"+
    "\1\40\1\33\1\40\1\33\3\40\3\33\27\40\2\33"+
    "\5\40\1\213\3\40\1\214\21\40\1\33\1\40\2\33"+
    "\1\35\1\33\1\35\1\33\1\173\1\33\1\40\1\33"+
    "\1\40\1\33\3\40\3\33\27\40\2\33\1\40\1\215"+
    "\31\40\1\33\1\40\2\33\1\35\1\33\1\35\1\33"+
    "\1\173\1\33\1\40\1\33\1\40\1\33\3\40\3\33"+
    "\27\40\2\33\1\40\1\216\23\40\1\217\5\40\1\33"+
    "\1\40\2\33\1\35\1\33\1\35\1\33\1\173\1\33"+
    "\1\40\1\33\1\40\1\33\3\40\3\33\27\40\2\33"+
    "\14\40\1\220\16\40\1\33\1\40\2\33\1\35\1\33"+
    "\1\35\1\33\1\173\1\33\1\40\1\33\1\40\1\33"+
    "\3\40\3\33\27\40\2\33\25\40\1\221\5\40\1\33"+
    "\1\40\2\33\1\35\1\33\1\35\1\33\1\173\1\33"+
    "\1\40\1\33\1\40\1\33\3\40\3\33\27\40\2\33"+
    "\1\40\1\222\3\40\1\223\3\40\1\224\5\40\1\225"+
    "\13\40\1\33\1\40\2\33\1\35\1\33\1\35\1\33"+
    "\1\173\1\33\1\40\1\33\1\40\1\33\3\40\3\33"+
    "\27\40\2\33\1\40\1\226\7\40\1\227\21\40\1\33"+
    "\1\40\2\33\1\35\1\33\1\35\1\33\1\173\1\33"+
    "\1\40\1\33\1\40\1\33\3\40\3\33\27\40\2\33"+
    "\5\40\1\230\25\40\1\33\1\40\2\33\1\35\1\33"+
    "\1\35\1\33\1\173\1\33\1\40\1\33\1\40\1\33"+
    "\3\40\3\33\27\40\2\33\10\40\1\231\22\40\1\33"+
    "\1\40\2\33\1\35\1\33\1\35\1\33\1\173\1\33"+
    "\1\40\1\33\1\40\1\33\3\40\3\33\27\40\2\33"+
    "\5\40\1\232\25\40\1\33\1\40\1\0\1\67\2\0"+
    "\1\67\6\0\1\71\106\0\1\233\111\0\3\72\3\0"+
    "\27\72\2\0\33\72\1\0\1\72\14\0\3\72\3\0"+
    "\1\72\1\234\1\72\1\235\2\72\1\236\1\237\1\240"+
    "\2\72\1\241\2\72\1\242\1\243\1\72\1\244\1\245"+
    "\4\72\2\0\2\72\1\234\1\72\1\235\2\72\1\236"+
    "\1\237\1\240\2\72\1\241\2\72\1\242\1\243\2\72"+
    "\1\244\1\245\6\72\1\0\1\72\14\0\3\12\3\0"+
    "\27\12\2\0\1\72\23\12\1\246\6\12\1\0\1\12"+
    "\14\0\3\12\3\0\27\12\2\0\1\72\2\12\1\247"+
    "\27\12\1\0\1\12\14\0\3\12\3\0\27\12\2\0"+
    "\1\72\1\250\31\12\1\0\1\12\14\0\3\12\3\0"+
    "\27\12\2\0\1\72\13\12\1\251\16\12\1\0\1\12"+
    "\14\0\3\12\3\0\27\12\2\0\1\72\15\12\1\252"+
    "\14\12\1\0\1\12\14\0\3\12\3\0\27\12\2\0"+
    "\1\72\10\12\1\253\21\12\1\0\1\12\14\0\3\12"+
    "\3\0\27\12\2\0\1\72\4\12\1\254\25\12\1\0"+
    "\1\12\14\0\3\12\3\0\27\12\2\0\1\72\14\12"+
    "\1\255\15\12\1\0\1\12\14\0\3\12\3\0\27\12"+
    "\2\0\1\72\2\12\1\256\27\12\1\0\1\12\14\0"+
    "\3\12\3\0\27\12\2\0\1\72\26\12\1\257\3\12"+
    "\1\0\1\12\14\0\3\12\3\0\27\12\2\0\1\72"+
    "\2\12\1\260\27\12\1\0\1\12\14\0\3\12\3\0"+
    "\27\12\2\0\1\72\27\12\1\261\2\12\1\0\1\12"+
    "\14\0\3\12\3\0\27\12\2\0\1\72\17\12\1\262"+
    "\12\12\1\0\1\12\14\0\3\12\3\0\27\12\2\0"+
    "\1\72\3\12\1\263\26\12\1\0\1\12\1\33\1\114"+
    "\1\35\1\33\1\144\1\33\1\174\2\33\1\175\27\33"+
    "\1\264\31\33\1\264\15\33\1\114\1\35\1\33\1\144"+
    "\1\33\1\174\2\33\1\175\2\33\3\115\22\33\1\264"+
    "\31\33\1\264\16\33\1\35\1\33\1\35\1\33\1\113"+
    "\66\33\1\265\14\33\1\35\1\33\1\35\1\33\1\113"+
    "\63\33\1\266\17\33\1\35\1\33\1\35\1\33\1\113"+
    "\51\33\1\267\31\33\1\35\1\33\1\35\1\33\1\113"+
    "\51\33\1\270\31\33\1\35\1\33\1\35\1\33\1\113"+
    "\65\33\1\271\15\33\1\35\1\33\1\35\1\33\1\113"+
    "\60\33\1\272\22\33\1\35\1\33\1\35\1\33\1\113"+
    "\51\33\1\273\2\33\1\274\6\33\1\275\17\33\1\35"+
    "\1\33\1\35\1\33\1\113\71\33\1\276\11\33\1\35"+
    "\1\33\1\35\1\33\1\113\66\33\1\277\14\33\1\35"+
    "\1\33\1\35\1\33\1\113\71\33\1\300\11\33\1\35"+
    "\1\33\1\35\1\33\1\113\51\33\1\301\3\33\1\302"+
    "\25\33\1\35\1\33\1\35\1\33\1\113\45\33\1\303"+
    "\35\33\1\35\1\33\1\35\1\33\1\113\45\33\1\304"+
    "\23\33\1\305\11\33\1\35\1\33\1\35\1\33\1\113"+
    "\60\33\1\306\22\33\1\35\1\33\1\35\1\33\1\113"+
    "\71\33\1\307\11\33\1\35\1\33\1\35\1\33\1\113"+
    "\45\33\1\310\3\33\1\311\3\33\1\312\5\33\1\313"+
    "\17\33\1\35\1\33\1\35\1\33\1\113\45\33\1\314"+
    "\7\33\1\315\25\33\1\35\1\33\1\35\1\33\1\113"+
    "\51\33\1\316\31\33\1\35\1\33\1\35\1\33\1\113"+
    "\54\33\1\317\26\33\1\35\1\33\1\35\1\33\1\113"+
    "\51\33\1\320\27\33\6\35\1\142\5\35\3\321\3\35"+
    "\6\321\24\35\6\321\27\35\1\144\2\35\1\144\1\35"+
    "\1\174\2\35\1\322\27\35\1\323\31\35\1\323\15\35"+
    "\1\144\2\35\1\144\1\35\1\174\2\35\1\322\2\35"+
    "\3\145\22\35\1\323\31\35\1\323\22\35\1\142\66\35"+
    "\1\324\20\35\1\142\63\35\1\325\23\35\1\142\51\35"+
    "\1\326\35\35\1\142\51\35\1\327\35\35\1\142\65\35"+
    "\1\330\21\35\1\142\60\35\1\331\26\35\1\142\51\35"+
    "\1\332\2\35\1\333\6\35\1\334\23\35\1\142\71\35"+
    "\1\335\15\35\1\142\66\35\1\336\20\35\1\142\71\35"+
    "\1\337\15\35\1\142\51\35\1\340\3\35\1\341\31\35"+
    "\1\142\45\35\1\342\41\35\1\142\45\35\1\343\23\35"+
    "\1\344\15\35\1\142\60\35\1\345\26\35\1\142\71\35"+
    "\1\346\15\35\1\142\45\35\1\347\3\35\1\350\3\35"+
    "\1\351\5\35\1\352\23\35\1\142\45\35\1\353\7\35"+
    "\1\354\31\35\1\142\51\35\1\355\35\35\1\142\54\35"+
    "\1\356\32\35\1\142\51\35\1\357\27\35\1\33\1\360"+
    "\1\35\1\33\1\361\1\33\1\362\5\33\3\172\3\33"+
    "\6\172\24\33\6\172\27\33\1\175\1\35\1\33\1\322"+
    "\1\33\1\363\103\33\1\35\1\33\1\35\1\33\1\173"+
    "\1\33\1\40\1\33\1\40\1\33\3\40\3\33\25\40"+
    "\1\364\1\40\2\33\30\40\1\364\2\40\1\33\1\40"+
    "\2\33\1\35\1\33\1\35\1\33\1\173\1\33\1\40"+
    "\1\33\1\40\1\33\3\40\3\33\27\40\2\33\11\40"+
    "\1\365\21\40\1\33\1\40\2\33\1\35\1\33\1\35"+
    "\1\33\1\173\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\25\40\1\366\5\40\1\33\1\40"+
    "\2\33\1\35\1\33\1\35\1\33\1\173\1\33\1\40"+
    "\1\33\1\40\1\33\3\40\3\33\27\40\2\33\16\40"+
    "\1\367\14\40\1\33\1\40\2\33\1\35\1\33\1\35"+
    "\1\33\1\173\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\22\40\1\370\10\40\1\33\1\40"+
    "\2\33\1\35\1\33\1\35\1\33\1\173\1\33\1\40"+
    "\1\33\1\40\1\33\3\40\3\33\27\40\2\33\25\40"+
    "\1\371\5\40\1\33\1\40\2\33\1\35\1\33\1\35"+
    "\1\33\1\173\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\1\40\1\372\23\40\1\373\5\40"+
    "\1\33\1\40\2\33\1\35\1\33\1\35\1\33\1\173"+
    "\1\33\1\40\1\33\1\40\1\33\3\40\3\33\27\40"+
    "\2\33\16\40\1\374\14\40\1\33\1\40\2\33\1\35"+
    "\1\33\1\35\1\33\1\173\1\33\1\40\1\33\1\40"+
    "\1\33\3\40\3\33\27\40\2\33\5\40\1\375\25\40"+
    "\1\33\1\40\2\33\1\35\1\33\1\35\1\33\1\173"+
    "\1\33\1\40\1\33\1\40\1\33\3\40\3\33\27\40"+
    "\2\33\14\40\1\376\16\40\1\33\1\40\2\33\1\35"+
    "\1\33\1\35\1\33\1\173\1\33\1\40\1\33\1\40"+
    "\1\33\3\40\3\33\27\40\2\33\3\40\1\377\27\40"+
    "\1\33\1\40\2\33\1\35\1\33\1\35\1\33\1\173"+
    "\1\33\1\40\1\33\1\40\1\33\3\40\3\33\27\40"+
    "\2\33\1\40\1\u0100\3\40\1\u0101\25\40\1\33\1\40"+
    "\2\33\1\35\1\33\1\35\1\33\1\173\1\33\1\40"+
    "\1\33\1\40\1\33\3\40\3\33\27\40\2\33\23\40"+
    "\1\u0102\7\40\1\33\1\40\2\33\1\35\1\33\1\35"+
    "\1\33\1\173\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\6\40\1\u0103\24\40\1\33\1\40"+
    "\2\33\1\35\1\33\1\35\1\33\1\173\1\33\1\40"+
    "\1\33\1\40\1\33\3\40\3\33\27\40\2\33\15\40"+
    "\1\u0104\15\40\1\33\1\40\2\33\1\35\1\33\1\35"+
    "\1\33\1\173\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\22\40\1\u0105\10\40\1\33\1\40"+
    "\2\33\1\35\1\33\1\35\1\33\1\173\1\33\1\40"+
    "\1\33\1\40\1\33\3\40\3\33\27\40\2\33\26\40"+
    "\1\u0106\4\40\1\33\1\40\2\33\1\35\1\33\1\35"+
    "\1\33\1\173\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\15\40\1\u0107\15\40\1\33\1\40"+
    "\2\33\1\35\1\33\1\35\1\33\1\173\1\33\1\40"+
    "\1\33\1\40\1\33\3\40\3\33\27\40\2\33\11\40"+
    "\1\u0108\21\40\1\33\1\40\2\33\1\35\1\33\1\35"+
    "\1\33\1\173\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\22\40\1\u0109\10\40\1\33\1\40"+
    "\2\33\1\35\1\33\1\35\1\33\1\173\1\33\1\40"+
    "\1\33\1\40\1\33\3\40\3\33\27\40\2\33\4\40"+
    "\1\u010a\26\40\1\33\1\40\2\33\1\35\1\33\1\35"+
    "\1\33\1\173\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\4\40\1\u010b\26\40\1\33\1\40"+
    "\2\33\1\35\1\33\1\35\1\33\1\173\1\33\1\40"+
    "\1\33\1\40\1\33\3\40\3\33\27\40\2\33\7\40"+
    "\1\u010c\23\40\1\33\1\40\2\33\1\35\1\33\1\35"+
    "\1\33\1\173\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\27\40\1\u010d\3\40\1\33\1\40"+
    "\2\33\1\35\1\33\1\35\1\33\1\173\1\33\1\40"+
    "\1\33\1\40\1\33\3\40\3\33\27\40\2\33\16\40"+
    "\1\u010e\14\40\1\33\1\40\2\33\1\35\1\33\1\35"+
    "\1\33\1\173\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\14\40\1\u010f\16\40\1\33\1\40"+
    "\2\33\1\35\1\33\1\35\1\33\1\173\1\33\1\40"+
    "\1\33\1\40\1\33\3\40\3\33\27\40\2\33\1\40"+
    "\1\u0110\26\40\1\u0111\2\40\1\33\1\40\2\33\1\35"+
    "\1\33\1\35\1\33\1\173\1\33\1\40\1\33\1\40"+
    "\1\33\3\40\3\33\27\40\2\33\11\40\1\u0112\21\40"+
    "\1\33\1\40\2\33\1\35\1\33\1\35\1\33\1\173"+
    "\1\33\1\40\1\33\1\40\1\33\3\40\3\33\27\40"+
    "\2\33\14\40\1\u0113\16\40\1\33\1\40\12\0\1\u0114"+
    "\111\0\3\72\3\0\16\72\1\u0115\1\72\1\u0116\2\72"+
    "\1\u0117\3\72\2\0\17\72\1\u0115\2\72\1\u0116\2\72"+
    "\1\u0117\5\72\1\0\1\72\14\0\3\72\3\0\10\72"+
    "\1\u0118\16\72\2\0\11\72\1\u0118\21\72\1\0\1\72"+
    "\14\0\3\72\3\0\2\72\1\u0119\24\72\2\0\3\72"+
    "\1\u0119\27\72\1\0\1\72\14\0\1\72\1\u011a\1\72"+
    "\3\0\4\72\1\u011b\22\72\2\0\5\72\1\u011b\25\72"+
    "\1\0\1\72\14\0\3\72\3\0\14\72\1\u011c\1\u011d"+
    "\11\72\2\0\15\72\1\u011c\1\u011d\14\72\1\0\1\72"+
    "\14\0\3\72\3\0\10\72\1\u011e\16\72\2\0\11\72"+
    "\1\u011e\21\72\1\0\1\72\14\0\3\72\3\0\17\72"+
    "\1\u011f\7\72\2\0\20\72\1\u011f\12\72\1\0\1\72"+
    "\14\0\3\72\3\0\2\72\1\u0120\1\72\1\u0121\12\72"+
    "\1\u0122\7\72\2\0\3\72\1\u0120\1\72\1\u0121\12\72"+
    "\1\u0122\12\72\1\0\1\72\14\0\3\72\3\0\4\72"+
    "\1\u0123\3\72\1\u0124\16\72\2\0\5\72\1\u0123\3\72"+
    "\1\u0124\21\72\1\0\1\72\14\0\3\12\3\0\27\12"+
    "\2\0\1\72\12\12\1\u0125\17\12\1\0\1\12\14\0"+
    "\3\12\3\0\27\12\2\0\1\72\22\12\1\u0126\7\12"+
    "\1\0\1\12\14\0\3\12\3\0\27\12\2\0\1\72"+
    "\16\12\1\u0127\3\12\1\u0128\7\12\1\0\1\12\14\0"+
    "\3\12\3\0\27\12\2\0\1\72\23\12\1\u0129\6\12"+
    "\1\0\1\12\14\0\3\12\3\0\27\12\2\0\1\72"+
    "\6\12\1\u012a\23\12\1\0\1\12\14\0\3\12\3\0"+
    "\27\12\2\0\1\72\5\12\1\u012b\24\12\1\0\1\12"+
    "\14\0\3\12\3\0\27\12\2\0\1\72\4\12\1\u012c"+
    "\25\12\1\0\1\12\14\0\3\12\3\0\27\12\2\0"+
    "\1\72\13\12\1\u012d\16\12\1\0\1\12\14\0\3\12"+
    "\3\0\27\12\2\0\1\72\22\12\1\u012e\7\12\1\0"+
    "\1\12\14\0\3\12\3\0\27\12\2\0\1\72\23\12"+
    "\1\u012f\6\12\1\0\1\12\14\0\3\12\3\0\27\12"+
    "\2\0\1\72\4\12\1\u0130\25\12\1\0\1\12\14\0"+
    "\3\12\3\0\27\12\2\0\1\72\23\12\1\u0131\6\12"+
    "\1\0\1\12\2\33\1\35\1\33\1\35\1\33\1\113"+
    "\40\33\1\u0132\33\33\1\u0132\6\33\1\35\1\33\1\35"+
    "\1\33\1\113\55\33\1\u0133\25\33\1\35\1\33\1\35"+
    "\1\33\1\113\71\33\1\u0134\11\33\1\35\1\33\1\35"+
    "\1\33\1\113\62\33\1\u0135\20\33\1\35\1\33\1\35"+
    "\1\33\1\113\66\33\1\u0136\14\33\1\35\1\33\1\35"+
    "\1\33\1\113\71\33\1\u0137\11\33\1\35\1\33\1\35"+
    "\1\33\1\113\45\33\1\u0138\23\33\1\u0139\11\33\1\35"+
    "\1\33\1\35\1\33\1\113\62\33\1\u013a\20\33\1\35"+
    "\1\33\1\35\1\33\1\113\51\33\1\u013b\31\33\1\35"+
    "\1\33\1\35\1\33\1\113\60\33\1\u013c\22\33\1\35"+
    "\1\33\1\35\1\33\1\113\47\33\1\u013d\33\33\1\35"+
    "\1\33\1\35\1\33\1\113\45\33\1\u013e\3\33\1\u013f"+
    "\31\33\1\35\1\33\1\35\1\33\1\113\67\33\1\u0140"+
    "\13\33\1\35\1\33\1\35\1\33\1\113\52\33\1\u0141"+
    "\30\33\1\35\1\33\1\35\1\33\1\113\61\33\1\u0142"+
    "\21\33\1\35\1\33\1\35\1\33\1\113\66\33\1\u0143"+
    "\14\33\1\35\1\33\1\35\1\33\1\113\72\33\1\u0144"+
    "\10\33\1\35\1\33\1\35\1\33\1\113\61\33\1\u0145"+
    "\21\33\1\35\1\33\1\35\1\33\1\113\55\33\1\u0146"+
    "\25\33\1\35\1\33\1\35\1\33\1\113\66\33\1\u0147"+
    "\14\33\1\35\1\33\1\35\1\33\1\113\50\33\1\u0148"+
    "\32\33\1\35\1\33\1\35\1\33\1\113\50\33\1\u0149"+
    "\32\33\1\35\1\33\1\35\1\33\1\113\53\33\1\u014a"+
    "\27\33\1\35\1\33\1\35\1\33\1\113\73\33\1\u014b"+
    "\7\33\1\35\1\33\1\35\1\33\1\113\62\33\1\u014c"+
    "\20\33\1\35\1\33\1\35\1\33\1\113\60\33\1\u014d"+
    "\22\33\1\35\1\33\1\35\1\33\1\113\45\33\1\u014e"+
    "\26\33\1\u014f\6\33\1\35\1\33\1\35\1\33\1\113"+
    "\55\33\1\u0150\25\33\1\35\1\33\1\35\1\33\1\113"+
    "\60\33\1\u0151\20\33\1\35\1\361\2\35\1\361\1\35"+
    "\1\362\5\35\3\321\3\35\6\321\24\35\6\321\27\35"+
    "\1\322\2\35\1\322\1\35\1\363\107\35\1\142\40\35"+
    "\1\u0152\33\35\1\u0152\12\35\1\142\55\35\1\u0153\31\35"+
    "\1\142\71\35\1\u0154\15\35\1\142\62\35\1\u0155\24\35"+
    "\1\142\66\35\1\u0156\20\35\1\142\71\35\1\u0157\15\35"+
    "\1\142\45\35\1\u0158\23\35\1\u0159\15\35\1\142\62\35"+
    "\1\u015a\24\35\1\142\51\35\1\u015b\35\35\1\142\60\35"+
    "\1\u015c\26\35\1\142\47\35\1\u015d\37\35\1\142\45\35"+
    "\1\u015e\3\35\1\u015f\35\35\1\142\67\35\1\u0160\17\35"+
    "\1\142\52\35\1\u0161\34\35\1\142\61\35\1\u0162\25\35"+
    "\1\142\66\35\1\u0163\20\35\1\142\72\35\1\u0164\14\35"+
    "\1\142\61\35\1\u0165\25\35\1\142\55\35\1\u0166\31\35"+
    "\1\142\66\35\1\u0167\20\35\1\142\50\35\1\u0168\36\35"+
    "\1\142\50\35\1\u0169\36\35\1\142\53\35\1\u016a\33\35"+
    "\1\142\73\35\1\u016b\13\35\1\142\62\35\1\u016c\24\35"+
    "\1\142\60\35\1\u016d\26\35\1\142\45\35\1\u016e\26\35"+
    "\1\u016f\12\35\1\142\55\35\1\u0170\31\35\1\142\60\35"+
    "\1\u0171\20\35\1\33\1\360\1\35\1\33\1\361\1\33"+
    "\1\362\101\33\1\35\1\361\2\35\1\361\1\35\1\362"+
    "\101\35\1\33\1\u0132\1\35\1\33\1\u0152\1\33\1\u0172"+
    "\1\33\1\40\1\33\1\40\1\33\3\40\3\33\27\40"+
    "\2\33\33\40\1\33\1\40\2\33\1\35\1\33\1\35"+
    "\1\33\1\173\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\1\40\1\u0173\31\40\1\33\1\40"+
    "\2\33\1\35\1\33\1\35\1\33\1\173\1\33\1\40"+
    "\1\33\1\40\1\33\3\40\3\33\27\40\2\33\22\40"+
    "\1\u0174\10\40\1\33\1\40\2\33\1\35\1\33\1\35"+
    "\1\33\1\173\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\5\40\1\u0175\25\40\1\33\1\40"+
    "\2\33\1\35\1\33\1\35\1\33\1\173\1\33\1\40"+
    "\1\33\1\40\1\33\3\40\3\33\27\40\2\33\4\40"+
    "\1\u0176\26\40\1\33\1\40\2\33\1\35\1\33\1\35"+
    "\1\33\1\173\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\1\40\1\u0177\31\40\1\33\1\40"+
    "\2\33\1\35\1\33\1\35\1\33\1\173\1\33\1\40"+
    "\1\33\1\40\1\33\3\40\3\33\27\40\2\33\3\40"+
    "\1\u0178\27\40\1\33\1\40\2\33\1\35\1\33\1\35"+
    "\1\33\1\173\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\5\40\1\u0179\25\40\1\33\1\40"+
    "\2\33\1\35\1\33\1\35\1\33\1\173\1\33\1\40"+
    "\1\33\1\40\1\33\3\40\3\33\27\40\2\33\24\40"+
    "\1\u017a\6\40\1\33\1\40\2\33\1\35\1\33\1\35"+
    "\1\33\1\173\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\3\40\1\u017b\27\40\1\33\1\40"+
    "\2\33\1\35\1\33\1\35\1\33\1\173\1\33\1\40"+
    "\1\33\1\40\1\33\3\40\3\33\27\40\2\33\25\40"+
    "\1\u017c\5\40\1\33\1\40\2\33\1\35\1\33\1\35"+
    "\1\33\1\173\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\10\40\1\u017d\22\40\1\33\1\40"+
    "\2\33\1\35\1\33\1\35\1\33\1\173\1\33\1\40"+
    "\1\33\1\40\1\33\3\40\3\33\27\40\2\33\31\40"+
    "\1\u017e\1\40\1\33\1\40\2\33\1\35\1\33\1\35"+
    "\1\33\1\173\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\5\40\1\u017f\25\40\1\33\1\40"+
    "\2\33\1\35\1\33\1\35\1\33\1\173\1\33\1\40"+
    "\1\33\1\40\1\33\3\40\3\33\27\40\2\33\24\40"+
    "\1\u0180\6\40\1\33\1\40\2\33\1\35\1\33\1\35"+
    "\1\33\1\173\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\24\40\1\u0181\6\40\1\33\1\40"+
    "\2\33\1\35\1\33\1\35\1\33\1\173\1\33\1\40"+
    "\1\33\1\40\1\33\3\40\3\33\27\40\2\33\5\40"+
    "\1\u0182\25\40\1\33\1\40\2\33\1\35\1\33\1\35"+
    "\1\33\1\173\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\17\40\1\u0183\13\40\1\33\1\40"+
    "\2\33\1\35\1\33\1\35\1\33\1\173\1\33\1\40"+
    "\1\33\1\40\1\33\3\40\3\33\27\40\2\33\31\40"+
    "\1\u0184\1\40\1\33\1\40\2\33\1\35\1\33\1\35"+
    "\1\33\1\173\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\2\40\1\u0185\30\40\1\33\1\40"+
    "\2\33\1\35\1\33\1\35\1\33\1\173\1\33\1\40"+
    "\1\33\1\40\1\33\3\40\3\33\27\40\2\33\26\40"+
    "\1\u0186\4\40\1\33\1\40\2\33\1\35\1\33\1\35"+
    "\1\33\1\173\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\20\40\1\u0187\12\40\1\33\1\40"+
    "\2\33\1\35\1\33\1\35\1\33\1\173\1\33\1\40"+
    "\1\33\1\40\1\33\3\40\3\33\27\40\2\33\11\40"+
    "\1\u0188\21\40\1\33\1\40\1\33\1\u0149\1\35\1\33"+
    "\1\u0169\1\33\1\u0189\1\33\1\40\1\33\1\40\1\33"+
    "\3\40\3\33\27\40\2\33\33\40\1\33\1\40\2\33"+
    "\1\35\1\33\1\35\1\33\1\173\1\33\1\40\1\33"+
    "\1\40\1\33\3\40\3\33\27\40\2\33\10\40\1\u018a"+
    "\22\40\1\33\1\40\1\33\1\u014b\1\35\1\33\1\u016b"+
    "\1\33\1\u018b\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\33\40\1\33\1\40\2\33\1\35"+
    "\1\33\1\35\1\33\1\173\1\33\1\40\1\33\1\40"+
    "\1\33\3\40\3\33\27\40\2\33\23\40\1\u018c\7\40"+
    "\1\33\1\40\2\33\1\35\1\33\1\35\1\33\1\173"+
    "\1\33\1\40\1\33\1\40\1\33\3\40\3\33\27\40"+
    "\2\33\26\40\1\u018d\4\40\1\33\1\40\2\33\1\35"+
    "\1\33\1\35\1\33\1\173\1\33\1\40\1\33\1\40"+
    "\1\33\3\40\3\33\27\40\2\33\14\40\1\u018e\16\40"+
    "\1\33\1\40\2\33\1\35\1\33\1\35\1\33\1\173"+
    "\1\33\1\40\1\33\1\40\1\33\3\40\3\33\27\40"+
    "\2\33\24\40\1\u018f\6\40\1\33\1\40\2\33\1\35"+
    "\1\33\1\35\1\33\1\173\1\33\1\40\1\33\1\40"+
    "\1\33\3\40\3\33\27\40\2\33\24\40\1\u0190\6\40"+
    "\1\33\1\40\2\33\1\35\1\33\1\35\1\33\1\173"+
    "\1\33\1\40\1\33\1\40\1\33\3\40\3\33\27\40"+
    "\2\33\14\40\1\u0191\16\40\1\33\1\40\12\u0192\1\u0193"+
    "\75\u0192\14\0\3\72\3\0\3\72\1\u0194\23\72\2\0"+
    "\4\72\1\u0194\26\72\1\0\1\72\14\0\3\72\3\0"+
    "\22\72\1\u0195\4\72\2\0\24\72\1\u0195\6\72\1\0"+
    "\1\72\14\0\3\72\3\0\24\72\1\u0196\2\72\2\0"+
    "\26\72\1\u0196\4\72\1\0\1\72\14\0\3\72\3\0"+
    "\10\72\1\u0197\16\72\2\0\11\72\1\u0197\21\72\1\0"+
    "\1\72\14\0\3\72\3\0\1\u0198\26\72\2\0\1\72"+
    "\1\u0198\31\72\1\0\1\72\14\0\3\72\3\0\6\72"+
    "\1\u0199\20\72\2\0\7\72\1\u0199\23\72\1\0\1\72"+
    "\14\0\3\72\3\0\17\72\1\u019a\7\72\2\0\20\72"+
    "\1\u019a\12\72\1\0\1\72\14\0\3\72\3\0\15\72"+
    "\1\u019b\11\72\2\0\16\72\1\u019b\14\72\1\0\1\72"+
    "\14\0\3\72\3\0\22\72\1\u019c\4\72\2\0\24\72"+
    "\1\u019c\6\72\1\0\1\72\14\0\3\72\3\0\20\72"+
    "\1\u019d\6\72\2\0\22\72\1\u019d\10\72\1\0\1\72"+
    "\14\0\3\72\3\0\13\72\1\u019e\13\72\2\0\14\72"+
    "\1\u019e\16\72\1\0\1\72\14\0\3\72\3\0\1\u019f"+
    "\26\72\2\0\1\72\1\u019f\31\72\1\0\1\72\14\0"+
    "\3\72\3\0\25\72\1\u01a0\1\72\2\0\30\72\1\u01a0"+
    "\2\72\1\0\1\72\14\0\3\72\3\0\22\72\1\u01a1"+
    "\4\72\2\0\24\72\1\u01a1\6\72\1\0\1\72\14\0"+
    "\3\12\3\0\27\12\2\0\1\72\6\12\1\u01a2\23\12"+
    "\1\0\1\12\14\0\3\12\3\0\27\12\2\0\1\72"+
    "\22\12\1\u01a3\7\12\1\0\1\12\14\0\3\12\3\0"+
    "\27\12\2\0\1\72\21\12\1\u01a4\10\12\1\0\1\12"+
    "\12\0\1\u01a5\1\0\3\12\3\0\27\12\2\0\1\72"+
    "\32\12\1\0\1\12\14\0\3\12\3\0\27\12\2\0"+
    "\1\72\23\12\1\u01a6\6\12\1\0\1\12\14\0\3\12"+
    "\3\0\27\12\2\0\1\72\10\12\1\u01a7\21\12\1\0"+
    "\1\12\12\0\1\u01a8\1\0\3\12\3\0\27\12\2\0"+
    "\1\72\32\12\1\0\1\12\14\0\3\12\3\0\27\12"+
    "\2\0\1\72\7\12\1\u01a9\22\12\1\0\1\12\1\33"+
    "\1\u0132\1\35\1\33\1\u0152\1\33\1\u0172\103\33\1\35"+
    "\1\33\1\35\1\33\1\113\45\33\1\u01aa\35\33\1\35"+
    "\1\33\1\35\1\33\1\113\66\33\1\u01ab\14\33\1\35"+
    "\1\33\1\35\1\33\1\113\51\33\1\u01ac\31\33\1\35"+
    "\1\33\1\35\1\33\1\113\50\33\1\u01ad\32\33\1\35"+
    "\1\33\1\35\1\33\1\113\45\33\1\u01ae\35\33\1\35"+
    "\1\33\1\35\1\33\1\113\47\33\1\u01af\33\33\1\35"+
    "\1\33\1\35\1\33\1\113\51\33\1\u01b0\31\33\1\35"+
    "\1\33\1\35\1\33\1\113\70\33\1\u01b1\12\33\1\35"+
    "\1\33\1\35\1\33\1\113\47\33\1\u01b2\33\33\1\35"+
    "\1\33\1\35\1\33\1\113\71\33\1\u01b3\11\33\1\35"+
    "\1\33\1\35\1\33\1\113\54\33\1\u01b4\26\33\1\35"+
    "\1\33\1\35\1\33\1\113\75\33\1\u01b5\5\33\1\35"+
    "\1\33\1\35\1\33\1\113\51\33\1\u01b6\31\33\1\35"+
    "\1\33\1\35\1\33\1\113\70\33\1\u01b7\12\33\1\35"+
    "\1\33\1\35\1\33\1\113\70\33\1\u01b8\12\33\1\35"+
    "\1\33\1\35\1\33\1\113\51\33\1\u01b9\31\33\1\35"+
    "\1\33\1\35\1\33\1\113\63\33\1\u01ba\17\33\1\35"+
    "\1\33\1\35\1\33\1\113\75\33\1\u01bb\5\33\1\35"+
    "\1\33\1\35\1\33\1\113\46\33\1\u01bc\34\33\1\35"+
    "\1\33\1\35\1\33\1\113\72\33\1\u01bd\10\33\1\35"+
    "\1\33\1\35\1\33\1\113\64\33\1\u01be\16\33\1\35"+
    "\1\33\1\35\1\33\1\113\55\33\1\u01bf\24\33\1\u0149"+
    "\1\35\1\33\1\u0169\1\33\1\u0189\103\33\1\35\1\33"+
    "\1\35\1\33\1\113\54\33\1\u01c0\25\33\1\u014b\1\35"+
    "\1\33\1\u016b\1\33\1\u018b\103\33\1\35\1\33\1\35"+
    "\1\33\1\113\67\33\1\u01c1\13\33\1\35\1\33\1\35"+
    "\1\33\1\113\72\33\1\u01c2\10\33\1\35\1\33\1\35"+
    "\1\33\1\113\60\33\1\u01c3\22\33\1\35\1\33\1\35"+
    "\1\33\1\113\70\33\1\u01c4\12\33\1\35\1\33\1\35"+
    "\1\33\1\113\70\33\1\u01c5\12\33\1\35\1\33\1\35"+
    "\1\33\1\113\60\33\1\u01c6\20\33\1\35\1\u0152\2\35"+
    "\1\u0152\1\35\1\u0172\107\35\1\142\45\35\1\u01c7\41\35"+
    "\1\142\66\35\1\u01c8\20\35\1\142\51\35\1\u01c9\35\35"+
    "\1\142\50\35\1\u01ca\36\35\1\142\45\35\1\u01cb\41\35"+
    "\1\142\47\35\1\u01cc\37\35\1\142\51\35\1\u01cd\35\35"+
    "\1\142\70\35\1\u01ce\16\35\1\142\47\35\1\u01cf\37\35"+
    "\1\142\71\35\1\u01d0\15\35\1\142\54\35\1\u01d1\32\35"+
    "\1\142\75\35\1\u01d2\11\35\1\142\51\35\1\u01d3\35\35"+
    "\1\142\70\35\1\u01d4\16\35\1\142\70\35\1\u01d5\16\35"+
    "\1\142\51\35\1\u01d6\35\35\1\142\63\35\1\u01d7\23\35"+
    "\1\142\75\35\1\u01d8\11\35\1\142\46\35\1\u01d9\40\35"+
    "\1\142\72\35\1\u01da\14\35\1\142\64\35\1\u01db\22\35"+
    "\1\142\55\35\1\u01dc\24\35\1\u0169\2\35\1\u0169\1\35"+
    "\1\u0189\107\35\1\142\54\35\1\u01dd\25\35\1\u016b\2\35"+
    "\1\u016b\1\35\1\u018b\107\35\1\142\67\35\1\u01de\17\35"+
    "\1\142\72\35\1\u01df\14\35\1\142\60\35\1\u01e0\26\35"+
    "\1\142\70\35\1\u01e1\16\35\1\142\70\35\1\u01e2\16\35"+
    "\1\142\60\35\1\u01e3\20\35\2\33\1\35\1\33\1\35"+
    "\1\33\1\173\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\14\40\1\u01e4\16\40\1\33\1\40"+
    "\2\33\1\35\1\33\1\35\1\33\1\173\1\33\1\40"+
    "\1\33\1\40\1\33\3\40\3\33\27\40\2\33\11\40"+
    "\1\u01e5\21\40\1\33\1\40\2\33\1\35\1\33\1\35"+
    "\1\33\1\173\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\26\40\1\u01e6\4\40\1\33\1\40"+
    "\2\33\1\35\1\33\1\35\1\33\1\173\1\33\1\40"+
    "\1\33\1\40\1\33\3\40\3\33\27\40\2\33\1\40"+
    "\1\u01e7\31\40\1\33\1\40\1\33\1\u01ae\1\35\1\33"+
    "\1\u01cb\1\33\1\u01e8\1\33\1\40\1\33\1\40\1\33"+
    "\3\40\3\33\27\40\2\33\33\40\1\33\1\40\2\33"+
    "\1\35\1\33\1\35\1\33\1\173\1\33\1\40\1\33"+
    "\1\40\1\33\3\40\3\33\27\40\2\33\13\40\1\u01e9"+
    "\17\40\1\33\1\40\1\33\1\u01b0\1\35\1\33\1\u01cd"+
    "\1\33\1\u01ea\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\33\40\1\33\1\40\2\33\1\35"+
    "\1\33\1\35\1\33\1\173\1\33\1\40\1\33\1\40"+
    "\1\33\3\40\3\33\27\40\2\33\5\40\1\u01eb\25\40"+
    "\1\33\1\40\2\33\1\35\1\33\1\35\1\33\1\173"+
    "\1\33\1\40\1\33\1\40\1\33\3\40\3\33\27\40"+
    "\2\33\13\40\1\u01ec\17\40\1\33\1\40\2\33\1\35"+
    "\1\33\1\35\1\33\1\173\1\33\1\40\1\33\1\40"+
    "\1\33\3\40\3\33\27\40\2\33\15\40\1\u01ed\15\40"+
    "\1\33\1\40\2\33\1\35\1\33\1\35\1\33\1\173"+
    "\1\33\1\40\1\33\1\40\1\33\3\40\3\33\27\40"+
    "\2\33\23\40\1\u01ee\7\40\1\33\1\40\1\33\1\u01b5"+
    "\1\35\1\33\1\u01d2\1\33\1\u01ef\1\33\1\40\1\33"+
    "\1\40\1\33\3\40\3\33\27\40\2\33\33\40\1\33"+
    "\1\40\2\33\1\35\1\33\1\35\1\33\1\173\1\33"+
    "\1\40\1\33\1\40\1\33\3\40\3\33\27\40\2\33"+
    "\16\40\1\u01f0\14\40\1\33\1\40\2\33\1\35\1\33"+
    "\1\35\1\33\1\173\1\33\1\40\1\33\1\40\1\33"+
    "\3\40\3\33\27\40\2\33\11\40\1\u01f1\21\40\1\33"+
    "\1\40\1\33\1\u01b8\1\35\1\33\1\u01d5\1\33\1\u01f2"+
    "\1\33\1\40\1\33\1\40\1\33\3\40\3\33\27\40"+
    "\2\33\33\40\1\33\1\40\1\33\1\u01b9\1\35\1\33"+
    "\1\u01d6\1\33\1\u01f3\1\33\1\40\1\33\1\40\1\33"+
    "\3\40\3\33\27\40\2\33\33\40\1\33\1\40\2\33"+
    "\1\35\1\33\1\35\1\33\1\173\1\33\1\40\1\33"+
    "\1\40\1\33\3\40\3\33\27\40\2\33\17\40\1\u01f4"+
    "\13\40\1\33\1\40\1\33\1\u01bb\1\35\1\33\1\u01d8"+
    "\1\33\1\u01f5\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\33\40\1\33\1\40\2\33\1\35"+
    "\1\33\1\35\1\33\1\173\1\33\1\40\1\33\1\40"+
    "\1\33\3\40\3\33\27\40\2\33\5\40\1\u01f6\25\40"+
    "\1\33\1\40\2\33\1\35\1\33\1\35\1\33\1\173"+
    "\1\33\1\40\1\33\1\40\1\33\3\40\3\33\27\40"+
    "\2\33\5\40\1\u01f7\25\40\1\33\1\40\2\33\1\35"+
    "\1\33\1\35\1\33\1\173\1\33\1\40\1\33\1\40"+
    "\1\33\3\40\3\33\27\40\2\33\14\40\1\u01f8\16\40"+
    "\1\33\1\40\2\33\1\35\1\33\1\35\1\33\1\173"+
    "\1\33\1\40\1\33\1\40\1\33\3\40\3\33\27\40"+
    "\2\33\17\40\1\u01f9\13\40\1\33\1\40\2\33\1\35"+
    "\1\33\1\35\1\33\1\173\1\33\1\40\1\33\1\40"+
    "\1\33\3\40\3\33\27\40\2\33\24\40\1\u01fa\6\40"+
    "\1\33\1\40\2\33\1\35\1\33\1\35\1\33\1\173"+
    "\1\33\1\40\1\33\1\u01fb\1\33\3\40\3\33\27\40"+
    "\2\33\33\40\1\33\1\40\2\33\1\35\1\33\1\35"+
    "\1\33\1\173\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\5\40\1\u01fc\25\40\1\33\1\40"+
    "\1\33\1\u01c3\1\35\1\33\1\u01e0\1\33\1\u01fd\1\33"+
    "\1\40\1\33\1\40\1\33\3\40\3\33\27\40\2\33"+
    "\33\40\1\33\1\40\1\33\1\u01c4\1\35\1\33\1\u01e1"+
    "\1\33\1\u01fe\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\33\40\1\33\1\40\2\33\1\35"+
    "\1\33\1\35\1\33\1\173\1\33\1\40\1\33\1\40"+
    "\1\33\3\40\3\33\27\40\2\33\5\40\1\u01ff\25\40"+
    "\1\33\1\40\2\33\1\35\1\33\1\35\1\33\1\173"+
    "\1\33\1\40\1\33\1\40\1\33\3\40\3\33\27\40"+
    "\2\33\17\40\1\u0200\13\40\1\33\1\40\12\u0192\1\u0201"+
    "\75\u0192\12\0\1\u0193\6\0\1\3\102\0\3\72\3\0"+
    "\26\72\1\u0202\2\0\31\72\1\u0202\1\72\1\0\1\72"+
    "\14\0\3\72\3\0\22\72\1\u0203\4\72\2\0\24\72"+
    "\1\u0203\6\72\1\0\1\72\14\0\3\72\3\0\2\72"+
    "\1\u0204\24\72\2\0\3\72\1\u0204\27\72\1\0\1\72"+
    "\14\0\3\72\3\0\3\72\1\u0205\23\72\2\0\4\72"+
    "\1\u0205\26\72\1\0\1\72\14\0\3\72\3\0\23\72"+
    "\1\u0206\3\72\2\0\25\72\1\u0206\5\72\1\0\1\72"+
    "\14\0\3\72\3\0\12\72\1\u0207\14\72\2\0\13\72"+
    "\1\u0207\17\72\1\0\1\72\14\0\3\72\3\0\10\72"+
    "\1\u0208\16\72\2\0\11\72\1\u0208\21\72\1\0\1\72"+
    "\14\0\3\72\3\0\10\72\1\u0209\16\72\2\0\11\72"+
    "\1\u0209\21\72\1\0\1\72\14\0\3\72\3\0\4\72"+
    "\1\u020a\22\72\2\0\5\72\1\u020a\25\72\1\0\1\72"+
    "\14\0\3\72\3\0\14\72\1\u020b\12\72\2\0\15\72"+
    "\1\u020b\15\72\1\0\1\72\14\0\3\72\3\0\22\72"+
    "\1\u020c\4\72\2\0\24\72\1\u020c\6\72\1\0\1\72"+
    "\14\0\3\72\3\0\13\72\1\u020d\13\72\2\0\14\72"+
    "\1\u020d\16\72\1\0\1\72\14\0\3\12\3\0\27\12"+
    "\2\0\1\72\21\12\1\u020e\10\12\1\0\1\12\61\0"+
    "\1\u020f\14\0\1\u0210\25\0\3\12\3\0\27\12\2\0"+
    "\1\72\7\12\1\u0211\22\12\1\0\1\12\14\0\3\12"+
    "\3\0\27\12\2\0\1\72\2\12\1\u0212\27\12\1\0"+
    "\1\12\54\0\1\u0213\33\0\2\33\1\35\1\33\1\35"+
    "\1\33\1\113\60\33\1\u0214\22\33\1\35\1\33\1\35"+
    "\1\33\1\113\55\33\1\u0215\25\33\1\35\1\33\1\35"+
    "\1\33\1\113\72\33\1\u0216\10\33\1\35\1\33\1\35"+
    "\1\33\1\113\45\33\1\u0217\34\33\1\u01ae\1\35\1\33"+
    "\1\u01cb\1\33\1\u01e8\103\33\1\35\1\33\1\35\1\33"+
    "\1\113\57\33\1\u0218\22\33\1\u01b0\1\35\1\33\1\u01cd"+
    "\1\33\1\u01ea\103\33\1\35\1\33\1\35\1\33\1\113"+
    "\51\33\1\u0219\31\33\1\35\1\33\1\35\1\33\1\113"+
    "\57\33\1\u021a\23\33\1\35\1\33\1\35\1\33\1\113"+
    "\61\33\1\u021b\21\33\1\35\1\33\1\35\1\33\1\113"+
    "\67\33\1\u021c\12\33\1\u01b5\1\35\1\33\1\u01d2\1\33"+
    "\1\u01ef\103\33\1\35\1\33\1\35\1\33\1\113\62\33"+
    "\1\u021d\20\33\1\35\1\33\1\35\1\33\1\113\55\33"+
    "\1\u021e\24\33\1\u01b8\1\35\1\33\1\u01d5\1\33\1\u01f2"+
    "\102\33\1\u01b9\1\35\1\33\1\u01d6\1\33\1\u01f3\103\33"+
    "\1\35\1\33\1\35\1\33\1\113\63\33\1\u021f\16\33"+
    "\1\u01bb\1\35\1\33\1\u01d8\1\33\1\u01f5\103\33\1\35"+
    "\1\33\1\35\1\33\1\113\51\33\1\u0220\31\33\1\35"+
    "\1\33\1\35\1\33\1\113\51\33\1\u0221\31\33\1\35"+
    "\1\33\1\35\1\33\1\113\60\33\1\u0222\22\33\1\35"+
    "\1\33\1\35\1\33\1\113\63\33\1\u0223\17\33\1\35"+
    "\1\33\1\35\1\33\1\113\70\33\1\u0224\12\33\1\35"+
    "\1\33\1\35\1\33\1\113\3\33\1\u0225\77\33\1\35"+
    "\1\33\1\35\1\33\1\113\51\33\1\u0226\30\33\1\u01c3"+
    "\1\35\1\33\1\u01e0\1\33\1\u01fd\102\33\1\u01c4\1\35"+
    "\1\33\1\u01e1\1\33\1\u01fe\103\33\1\35\1\33\1\35"+
    "\1\33\1\113\51\33\1\u0227\31\33\1\35\1\33\1\35"+
    "\1\33\1\113\63\33\1\u0228\15\33\6\35\1\142\60\35"+
    "\1\u0229\26\35\1\142\55\35\1\u022a\31\35\1\142\72\35"+
    "\1\u022b\14\35\1\142\45\35\1\u022c\34\35\1\u01cb\2\35"+
    "\1\u01cb\1\35\1\u01e8\107\35\1\142\57\35\1\u022d\22\35"+
    "\1\u01cd\2\35\1\u01cd\1\35\1\u01ea\107\35\1\142\51\35"+
    "\1\u022e\35\35\1\142\57\35\1\u022f\27\35\1\142\61\35"+
    "\1\u0230\25\35\1\142\67\35\1\u0231\12\35\1\u01d2\2\35"+
    "\1\u01d2\1\35\1\u01ef\107\35\1\142\62\35\1\u0232\24\35"+
    "\1\142\55\35\1\u0233\24\35\1\u01d5\2\35\1\u01d5\1\35"+
    "\1\u01f2\102\35\1\u01d6\2\35\1\u01d6\1\35\1\u01f3\107\35"+
    "\1\142\63\35\1\u0234\16\35\1\u01d8\2\35\1\u01d8\1\35"+
    "\1\u01f5\107\35\1\142\51\35\1\u0235\35\35\1\142\51\35"+
    "\1\u0236\35\35\1\142\60\35\1\u0237\26\35\1\142\63\35"+
    "\1\u0238\23\35\1\142\70\35\1\u0239\16\35\1\142\3\35"+
    "\1\u023a\103\35\1\142\51\35\1\u023b\30\35\1\u01e0\2\35"+
    "\1\u01e0\1\35\1\u01fd\102\35\1\u01e1\2\35\1\u01e1\1\35"+
    "\1\u01fe\107\35\1\142\51\35\1\u023c\35\35\1\142\63\35"+
    "\1\u023d\15\35\1\33\1\u0214\1\35\1\33\1\u0229\1\33"+
    "\1\u023e\1\33\1\40\1\33\1\40\1\33\3\40\3\33"+
    "\27\40\2\33\33\40\1\33\1\40\2\33\1\35\1\33"+
    "\1\35\1\33\1\173\1\33\1\40\1\33\1\40\1\33"+
    "\3\40\3\33\27\40\2\33\5\40\1\u023f\25\40\1\33"+
    "\1\40\2\33\1\35\1\33\1\35\1\33\1\173\1\33"+
    "\1\40\1\33\1\40\1\33\3\40\3\33\27\40\2\33"+
    "\1\40\1\u0240\31\40\1\33\1\40\2\33\1\35\1\33"+
    "\1\35\1\33\1\173\1\33\1\40\1\33\1\40\1\33"+
    "\3\40\3\33\27\40\2\33\16\40\1\u0241\14\40\1\33"+
    "\1\40\1\33\1\u0218\1\35\1\33\1\u022d\1\33\1\u0242"+
    "\1\33\1\40\1\33\1\40\1\33\3\40\3\33\27\40"+
    "\2\33\33\40\1\33\1\40\2\33\1\35\1\33\1\35"+
    "\1\33\1\173\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\22\40\1\u0243\10\40\1\33\1\40"+
    "\2\33\1\35\1\33\1\35\1\33\1\173\1\33\1\40"+
    "\1\33\1\40\1\33\3\40\3\33\27\40\2\33\2\40"+
    "\1\u0244\30\40\1\33\1\40\2\33\1\35\1\33\1\35"+
    "\1\33\1\173\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\16\40\1\u0245\14\40\1\33\1\40"+
    "\2\33\1\35\1\33\1\35\1\33\1\173\1\33\1\40"+
    "\1\33\1\40\1\33\3\40\3\33\27\40\2\33\11\40"+
    "\1\u0246\21\40\1\33\1\40\1\33\1\u021d\1\35\1\33"+
    "\1\u0232\1\33\1\u0247\1\33\1\40\1\33\1\40\1\33"+
    "\3\40\3\33\27\40\2\33\33\40\1\33\1\40\2\33"+
    "\1\35\1\33\1\35\1\33\1\173\1\33\1\40\1\33"+
    "\1\40\1\33\3\40\3\33\27\40\2\33\6\40\1\u0248"+
    "\24\40\1\33\1\40\2\33\1\35\1\33\1\35\1\33"+
    "\1\173\1\33\1\40\1\33\1\40\1\33\3\40\3\33"+
    "\27\40\2\33\16\40\1\u0249\14\40\1\33\1\40\2\33"+
    "\1\35\1\33\1\35\1\33\1\173\1\33\1\40\1\33"+
    "\1\40\1\33\3\40\3\33\27\40\2\33\22\40\1\u024a"+
    "\10\40\1\33\1\40\1\33\1\u0221\1\35\1\33\1\u0236"+
    "\1\33\1\u024b\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\33\40\1\33\1\40\2\33\1\35"+
    "\1\33\1\35\1\33\1\173\1\33\1\40\1\33\1\40"+
    "\1\33\3\40\3\33\27\40\2\33\5\40\1\u024c\25\40"+
    "\1\33\1\40\1\33\1\u0223\1\35\1\33\1\u0238\1\33"+
    "\1\u024d\1\33\1\40\1\33\1\40\1\33\3\40\3\33"+
    "\27\40\2\33\33\40\1\33\1\40\1\33\1\u0224\1\35"+
    "\1\33\1\u0239\1\33\1\u024e\1\33\1\40\1\33\1\40"+
    "\1\33\3\40\3\33\27\40\2\33\33\40\1\33\1\40"+
    "\2\33\1\35\1\33\1\35\1\33\1\173\1\33\1\40"+
    "\1\33\1\40\1\33\3\40\3\33\27\40\2\33\23\40"+
    "\1\u024f\7\40\1\33\1\40\2\33\1\35\1\33\1\35"+
    "\1\33\1\173\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\22\40\1\u0250\10\40\1\33\1\40"+
    "\1\33\1\u0227\1\35\1\33\1\u023c\1\33\1\u0251\1\33"+
    "\1\40\1\33\1\40\1\33\3\40\3\33\27\40\2\33"+
    "\33\40\1\33\1\40\2\33\1\35\1\33\1\35\1\33"+
    "\1\173\1\33\1\40\1\33\1\40\1\33\3\40\3\33"+
    "\27\40\2\33\27\40\1\u0252\3\40\1\33\1\40\12\u0192"+
    "\1\u0253\75\u0192\14\0\3\72\3\0\16\72\1\u0254\10\72"+
    "\2\0\17\72\1\u0254\13\72\1\0\1\72\14\0\3\72"+
    "\3\0\22\72\1\u0255\4\72\2\0\24\72\1\u0255\6\72"+
    "\1\0\1\72\14\0\3\72\3\0\16\72\1\u0256\10\72"+
    "\2\0\17\72\1\u0256\13\72\1\0\1\72\14\0\3\72"+
    "\3\0\17\72\1\u0257\7\72\2\0\20\72\1\u0257\12\72"+
    "\1\0\1\72\14\0\3\72\3\0\2\72\1\u0258\24\72"+
    "\2\0\3\72\1\u0258\27\72\1\0\1\72\14\0\3\72"+
    "\3\0\1\u0259\26\72\2\0\1\72\1\u0259\31\72\1\0"+
    "\1\72\14\0\3\72\3\0\4\72\1\u025a\22\72\2\0"+
    "\5\72\1\u025a\25\72\1\0\1\72\14\0\3\12\3\0"+
    "\27\12\2\0\1\72\16\12\1\u025b\13\12\1\0\1\12"+
    "\54\0\1\u025c\117\0\1\u025d\37\0\3\12\3\0\27\12"+
    "\2\0\1\72\12\12\1\u025e\17\12\1\0\1\12\67\0"+
    "\1\u025f\20\0\1\33\1\u0214\1\35\1\33\1\u0229\1\33"+
    "\1\u023e\103\33\1\35\1\33\1\35\1\33\1\113\51\33"+
    "\1\u0260\31\33\1\35\1\33\1\35\1\33\1\113\45\33"+
    "\1\u0261\35\33\1\35\1\33\1\35\1\33\1\113\62\33"+
    "\1\u0262\17\33\1\u0218\1\35\1\33\1\u022d\1\33\1\u0242"+
    "\103\33\1\35\1\33\1\35\1\33\1\113\66\33\1\u0263"+
    "\14\33\1\35\1\33\1\35\1\33\1\113\46\33\1\u0264"+
    "\34\33\1\35\1\33\1\35\1\33\1\113\62\33\1\u0265"+
    "\20\33\1\35\1\33\1\35\1\33\1\113\55\33\1\u0266"+
    "\24\33\1\u021d\1\35\1\33\1\u0232\1\33\1\u0247\103\33"+
    "\1\35\1\33\1\35\1\33\1\113\52\33\1\u0267\30\33"+
    "\1\35\1\33\1\35\1\33\1\113\62\33\1\u0268\20\33"+
    "\1\35\1\33\1\35\1\33\1\113\66\33\1\u0269\13\33"+
    "\1\u0221\1\35\1\33\1\u0236\1\33\1\u024b\103\33\1\35"+
    "\1\33\1\35\1\33\1\113\51\33\1\u026a\30\33\1\u0223"+
    "\1\35\1\33\1\u0238\1\33\1\u024d\102\33\1\u0224\1\35"+
    "\1\33\1\u0239\1\33\1\u024e\103\33\1\35\1\33\1\35"+
    "\1\33\1\113\67\33\1\u026b\13\33\1\35\1\33\1\35"+
    "\1\33\1\113\66\33\1\u026c\13\33\1\u0227\1\35\1\33"+
    "\1\u023c\1\33\1\u0251\103\33\1\35\1\33\1\35\1\33"+
    "\1\113\73\33\1\u026d\5\33\1\35\1\u0229\2\35\1\u0229"+
    "\1\35\1\u023e\107\35\1\142\51\35\1\u026e\35\35\1\142"+
    "\45\35\1\u026f\41\35\1\142\62\35\1\u0270\17\35\1\u022d"+
    "\2\35\1\u022d\1\35\1\u0242\107\35\1\142\66\35\1\u0271"+
    "\20\35\1\142\46\35\1\u0272\40\35\1\142\62\35\1\u0273"+
    "\24\35\1\142\55\35\1\u0274\24\35\1\u0232\2\35\1\u0232"+
    "\1\35\1\u0247\107\35\1\142\52\35\1\u0275\34\35\1\142"+
    "\62\35\1\u0276\24\35\1\142\66\35\1\u0277\13\35\1\u0236"+
    "\2\35\1\u0236\1\35\1\u024b\107\35\1\142\51\35\1\u0278"+
    "\30\35\1\u0238\2\35\1\u0238\1\35\1\u024d\102\35\1\u0239"+
    "\2\35\1\u0239\1\35\1\u024e\107\35\1\142\67\35\1\u0279"+
    "\17\35\1\142\66\35\1\u027a\13\35\1\u023c\2\35\1\u023c"+
    "\1\35\1\u0251\107\35\1\142\73\35\1\u027b\5\35\2\33"+
    "\1\35\1\33\1\35\1\33\1\173\1\33\1\40\1\33"+
    "\1\40\1\33\3\40\3\33\27\40\2\33\22\40\1\u027c"+
    "\10\40\1\33\1\40\1\33\1\u0261\1\35\1\33\1\u026f"+
    "\1\33\1\u027d\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\33\40\1\33\1\40\2\33\1\35"+
    "\1\33\1\35\1\33\1\173\1\33\1\40\1\33\1\40"+
    "\1\33\3\40\3\33\27\40\2\33\1\40\1\u027e\31\40"+
    "\1\33\1\40\1\33\1\u0263\1\35\1\33\1\u0271\1\33"+
    "\1\u027f\1\33\1\40\1\33\1\40\1\33\3\40\3\33"+
    "\27\40\2\33\33\40\1\33\1\40\2\33\1\35\1\33"+
    "\1\35\1\33\1\173\1\33\1\40\1\33\1\40\1\33"+
    "\3\40\3\33\27\40\2\33\17\40\1\u0280\13\40\1\33"+
    "\1\40\1\33\1\u0265\1\35\1\33\1\u0273\1\33\1\u0281"+
    "\1\33\1\40\1\33\1\40\1\33\3\40\3\33\27\40"+
    "\2\33\33\40\1\33\1\40\2\33\1\35\1\33\1\35"+
    "\1\33\1\173\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\1\40\1\u0282\31\40\1\33\1\40"+
    "\2\33\1\35\1\33\1\35\1\33\1\173\1\33\1\40"+
    "\1\33\1\40\1\33\3\40\3\33\27\40\2\33\31\40"+
    "\1\u0283\1\40\1\33\1\40\1\33\1\u0268\1\35\1\33"+
    "\1\u0276\1\33\1\u0284\1\33\1\40\1\33\1\40\1\33"+
    "\3\40\3\33\27\40\2\33\33\40\1\33\1\40\1\33"+
    "\1\u0269\1\35\1\33\1\u0277\1\33\1\u0285\1\33\1\40"+
    "\1\33\1\40\1\33\3\40\3\33\27\40\2\33\33\40"+
    "\1\33\1\40\1\33\1\u026a\1\35\1\33\1\u0278\1\33"+
    "\1\u0286\1\33\1\40\1\33\1\40\1\33\3\40\3\33"+
    "\27\40\2\33\33\40\1\33\1\40\2\33\1\35\1\33"+
    "\1\35\1\33\1\173\1\33\1\40\1\33\1\40\1\33"+
    "\3\40\3\33\27\40\2\33\5\40\1\u0287\25\40\1\33"+
    "\1\40\1\33\1\u026c\1\35\1\33\1\u027a\1\33\1\u0288"+
    "\1\33\1\40\1\33\1\40\1\33\3\40\3\33\27\40"+
    "\2\33\33\40\1\33\1\40\1\33\1\u026d\1\35\1\33"+
    "\1\u027b\1\33\1\u0289\1\33\1\40\1\33\1\40\1\33"+
    "\3\40\3\33\27\40\2\33\33\40\1\33\1\40\12\u0192"+
    "\1\u0253\6\u0192\1\3\66\u0192\14\0\3\72\3\0\15\72"+
    "\1\u028a\11\72\2\0\16\72\1\u028a\14\72\1\0\1\72"+
    "\14\0\3\72\3\0\15\72\1\u028b\11\72\2\0\16\72"+
    "\1\u028b\14\72\1\0\1\72\14\0\3\72\3\0\22\72"+
    "\1\u028c\4\72\2\0\24\72\1\u028c\6\72\1\0\1\72"+
    "\14\0\3\72\3\0\22\72\1\u028d\4\72\2\0\24\72"+
    "\1\u028d\6\72\1\0\1\72\14\0\3\72\3\0\20\72"+
    "\1\u028e\6\72\2\0\22\72\1\u028e\10\72\1\0\1\72"+
    "\14\0\3\12\3\0\27\12\2\0\1\72\24\12\1\u028f"+
    "\5\12\1\0\1\12\70\0\1\u0290\124\0\1\u0291\66\0"+
    "\1\u0292\23\0\2\33\1\35\1\33\1\35\1\33\1\113"+
    "\66\33\1\u0293\13\33\1\u0261\1\35\1\33\1\u026f\1\33"+
    "\1\u027d\103\33\1\35\1\33\1\35\1\33\1\113\45\33"+
    "\1\u0294\34\33\1\u0263\1\35\1\33\1\u0271\1\33\1\u027f"+
    "\103\33\1\35\1\33\1\35\1\33\1\113\63\33\1\u0295"+
    "\16\33\1\u0265\1\35\1\33\1\u0273\1\33\1\u0281\103\33"+
    "\1\35\1\33\1\35\1\33\1\113\45\33\1\u0296\35\33"+
    "\1\35\1\33\1\35\1\33\1\113\75\33\1\u0297\4\33"+
    "\1\u0268\1\35\1\33\1\u0276\1\33\1\u0284\102\33\1\u0269"+
    "\1\35\1\33\1\u0277\1\33\1\u0285\102\33\1\u026a\1\35"+
    "\1\33\1\u0278\1\33\1\u0286\103\33\1\35\1\33\1\35"+
    "\1\33\1\113\51\33\1\u0298\30\33\1\u026c\1\35\1\33"+
    "\1\u027a\1\33\1\u0288\102\33\1\u026d\1\35\1\33\1\u027b"+
    "\1\33\1\u0289\101\33\6\35\1\142\66\35\1\u0299\13\35"+
    "\1\u026f\2\35\1\u026f\1\35\1\u027d\107\35\1\142\45\35"+
    "\1\u029a\34\35\1\u0271\2\35\1\u0271\1\35\1\u027f\107\35"+
    "\1\142\63\35\1\u029b\16\35\1\u0273\2\35\1\u0273\1\35"+
    "\1\u0281\107\35\1\142\45\35\1\u029c\41\35\1\142\75\35"+
    "\1\u029d\4\35\1\u0276\2\35\1\u0276\1\35\1\u0284\102\35"+
    "\1\u0277\2\35\1\u0277\1\35\1\u0285\102\35\1\u0278\2\35"+
    "\1\u0278\1\35\1\u0286\107\35\1\142\51\35\1\u029e\30\35"+
    "\1\u027a\2\35\1\u027a\1\35\1\u0288\102\35\1\u027b\2\35"+
    "\1\u027b\1\35\1\u0289\101\35\1\33\1\u0293\1\35\1\33"+
    "\1\u0299\1\33\1\u029f\1\33\1\40\1\33\1\40\1\33"+
    "\3\40\3\33\27\40\2\33\33\40\1\33\1\40\1\33"+
    "\1\u0294\1\35\1\33\1\u029a\1\33\1\u02a0\1\33\1\40"+
    "\1\33\1\40\1\33\3\40\3\33\27\40\2\33\33\40"+
    "\1\33\1\40\2\33\1\35\1\33\1\35\1\33\1\173"+
    "\1\33\1\40\1\33\1\40\1\33\3\40\3\33\27\40"+
    "\2\33\30\40\1\u02a1\2\40\1\33\1\40\1\33\1\u0296"+
    "\1\35\1\33\1\u029c\1\33\1\u02a2\1\33\1\40\1\33"+
    "\1\40\1\33\3\40\3\33\27\40\2\33\33\40\1\33"+
    "\1\40\1\33\1\u0297\1\35\1\33\1\u029d\1\33\1\u02a3"+
    "\1\33\1\40\1\33\1\40\1\33\3\40\3\33\27\40"+
    "\2\33\33\40\1\33\1\40\2\33\1\35\1\33\1\35"+
    "\1\33\1\173\1\33\1\40\1\33\1\40\1\33\3\40"+
    "\3\33\27\40\2\33\22\40\1\u02a4\10\40\1\33\1\40"+
    "\14\0\3\72\3\0\10\72\1\u02a5\16\72\2\0\11\72"+
    "\1\u02a5\21\72\1\0\1\72\14\0\3\72\3\0\4\72"+
    "\1\u02a6\22\72\2\0\5\72\1\u02a6\25\72\1\0\1\72"+
    "\14\0\3\12\3\0\27\12\2\0\1\72\15\12\1\u02a7"+
    "\14\12\1\0\1\12\64\0\1\u02a8\103\0\1\u02a9\111\0"+
    "\1\u02aa\25\0\1\33\1\u0293\1\35\1\33\1\u0299\1\33"+
    "\1\u029f\102\33\1\u0294\1\35\1\33\1\u029a\1\33\1\u02a0"+
    "\103\33\1\35\1\33\1\35\1\33\1\113\74\33\1\u02ab"+
    "\5\33\1\u0296\1\35\1\33\1\u029c\1\33\1\u02a2\102\33"+
    "\1\u0297\1\35\1\33\1\u029d\1\33\1\u02a3\103\33\1\35"+
    "\1\33\1\35\1\33\1\113\66\33\1\u02ac\12\33\1\35"+
    "\1\u0299\2\35\1\u0299\1\35\1\u029f\102\35\1\u029a\2\35"+
    "\1\u029a\1\35\1\u02a0\107\35\1\142\74\35\1\u02ad\5\35"+
    "\1\u029c\2\35\1\u029c\1\35\1\u02a2\102\35\1\u029d\2\35"+
    "\1\u029d\1\35\1\u02a3\107\35\1\142\66\35\1\u02ae\12\35"+
    "\1\33\1\u02ab\1\35\1\33\1\u02ad\1\33\1\u02af\1\33"+
    "\1\40\1\33\1\40\1\33\3\40\3\33\27\40\2\33"+
    "\33\40\1\33\1\40\2\33\1\35\1\33\1\35\1\33"+
    "\1\173\1\33\1\40\1\33\1\40\1\33\3\40\3\33"+
    "\27\40\2\33\11\40\1\u02b0\21\40\1\33\1\40\14\0"+
    "\3\72\3\0\15\72\1\u02b1\11\72\2\0\16\72\1\u02b1"+
    "\14\72\1\0\1\72\14\0\3\72\3\0\1\u02b2\26\72"+
    "\2\0\1\72\1\u02b2\31\72\1\0\1\72\14\0\3\12"+
    "\3\0\27\12\2\0\1\72\3\12\1\u02b3\26\12\1\0"+
    "\1\12\67\0\1\u02b4\111\0\1\u02b5\16\0\1\33\1\u02ab"+
    "\1\35\1\33\1\u02ad\1\33\1\u02af\103\33\1\35\1\33"+
    "\1\35\1\33\1\113\55\33\1\u02b6\23\33\1\35\1\u02ad"+
    "\2\35\1\u02ad\1\35\1\u02af\107\35\1\142\55\35\1\u02b7"+
    "\23\35\2\33\1\35\1\33\1\35\1\33\1\173\1\33"+
    "\1\40\1\33\1\40\1\33\3\40\3\33\27\40\2\33"+
    "\6\40\1\u02b8\24\40\1\33\1\40\14\0\3\72\3\0"+
    "\6\72\1\u02b9\20\72\2\0\7\72\1\u02b9\23\72\1\0"+
    "\1\72\104\0\1\u02ba\3\0\2\33\1\35\1\33\1\35"+
    "\1\33\1\113\52\33\1\u02bb\26\33\6\35\1\142\52\35"+
    "\1\u02bc\26\35\1\33\1\u02bb\1\35\1\33\1\u02bc\1\33"+
    "\1\u02bd\1\33\1\40\1\33\1\40\1\33\3\40\3\33"+
    "\27\40\2\33\33\40\1\33\1\40\1\33\1\u02bb\1\35"+
    "\1\33\1\u02bc\1\33\1\u02bd\101\33\1\35\1\u02bc\2\35"+
    "\1\u02bc\1\35\1\u02bd\101\35";

  private static int [] zzUnpackTrans() {
    int [] result = new int[44856];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\2\11\2\1\2\11\15\1\36\0"+
    "\1\11\21\1\1\11\26\0\1\11\30\0\2\11\37\0"+
    "\30\1\76\0\2\11\41\0\35\1\100\0\1\11\26\0"+
    "\1\11\1\0\1\11\10\0\21\1\1\0\2\1\1\0"+
    "\1\1\76\0\1\11\1\0\1\11\4\0\1\11\2\0"+
    "\2\11\1\0\1\11\7\0\2\11\3\0\15\1\2\0"+
    "\2\1\53\0\1\11\3\0\1\11\4\0\1\11\3\0"+
    "\1\11\1\0\2\11\2\0\1\11\2\0\10\1\2\0"+
    "\1\1\36\0\1\11\1\0\1\11\1\0\1\11\2\0"+
    "\3\11\1\0\2\11\6\1\17\0\2\11\1\0\2\11"+
    "\1\0\3\1\1\0\1\11\5\0\1\11\1\0\3\1"+
    "\1\0\1\11\3\0\1\1\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[701];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    /* CODIGO A√ëADIDO */    


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public EtiquetadoLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    /* CODIGO EJECUTADO AL FINAL DEL ANALISIS */
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 83: break;
          case 2:
            { /* IGNORAR */
            }
            // fall through
          case 84: break;
          case 3:
            { return new Symbol(ALFANUMERICO, yyline, yycolumn, yytext());
            }
            // fall through
          case 85: break;
          case 4:
            { return new Symbol(MENOR_QUE, yyline, yycolumn, yytext());
            }
            // fall through
          case 86: break;
          case 5:
            { return new Symbol(IGUAL, yyline, yycolumn, yytext());
            }
            // fall through
          case 87: break;
          case 6:
            { return new Symbol(MAYOR_QUE, yyline+1, yycollumn+1, yytext());
            }
            // fall through
          case 88: break;
          case 7:
            { return new Symbol(CORA, yyline, yycolumn, yytext());
            }
            // fall through
          case 89: break;
          case 8:
            { return new Symnol(CORC, yyline, yycolumn, yytext());
            }
            // fall through
          case 90: break;
          case 9:
            { return new Symbol(MENOR_CIERRE, yyline, yycolumn, yytext());
            }
            // fall through
          case 91: break;
          case 10:
            { return new Symbol(IDENTIFICADOR, yyline, yycolumn, yytext());
            }
            // fall through
          case 92: break;
          case 11:
            { return new Symbol(ID, yyline, yycolumn, yytext());
            }
            // fall through
          case 93: break;
          case 12:
            { return new Symbol(ALLCHARNOSPACE, yyline, yycolumn, yytext());
            }
            // fall through
          case 94: break;
          case 13:
            { return new Symbol(ALLCHAR, yyline, yycolumn, yytext());
            }
            // fall through
          case 95: break;
          case 14:
            { return new Symbol(ID_ETIQUETA, yyline, yycolumn, yytext());
            }
            // fall through
          case 96: break;
          case 15:
            { return new Symbol(DIGITO_COM, yyline, yycolumn, yytext());
            }
            // fall through
          case 97: break;
          case 16:
            { return new Symbol(P, yyline, yycolumn, yytext());
            }
            // fall through
          case 98: break;
          case 17:
            { return new Symbol(ALT, yyline, yycolumn, yytext());
            }
            // fall through
          case 99: break;
          case 18:
            { return new Symbol(SRC, yyline, yycolumn, yytext());
            }
            // fall through
          case 100: break;
          case 19:
            { return new Symbol(HEXADECIMAL, yyline, yycolumn, yytext());
            }
            // fall through
          case 101: break;
          case 20:
            { return new Symbol(PORCENTAJE, yyline, yycolumn, yytext());
            }
            // fall through
          case 102: break;
          case 21:
            { return new Symbol(BR, yyline, yycolumn, yytext());
            }
            // fall through
          case 103: break;
          case 22:
            { return new Symbol(H1, yyline, yycolumn, yytext());
            }
            // fall through
          case 104: break;
          case 23:
            { return new Symbol(COLS, yyline, yycolumn, yytext());
            }
            // fall through
          case 105: break;
          case 24:
            { return new Symbol(HREF, yyline, yycolumn, yytext());
            }
            // fall through
          case 106: break;
          case 25:
            { return new Symbol(NAME, yyline, yycolumn, yytext());
            }
            // fall through
          case 107: break;
          case 26:
            { return new Symbol(ROWS, yyline, yycolumn, yytext());
            }
            // fall through
          case 108: break;
          case 27:
            { return new Symbol(TYPE, yyline, yycolumn, yytext());
            }
            // fall through
          case 109: break;
          case 28:
            { return new Symbol(PIXELES, yyline, yycolumn, yytext());
            }
            // fall through
          case 110: break;
          case 29:
            { return new Symbol(RED, yyline, yycolumn, yytext());
            }
            // fall through
          case 111: break;
          case 30:
            { return new Symbol(ROW, yyline, yycolumn, yytext());
            }
            // fall through
          case 112: break;
          case 31:
            { return new Symbol(DIV, yyline, yycolumn, yytext());
            }
            // fall through
          case 113: break;
          case 32:
            { return new Symbol(IMG, yyline, yycolumn, yytext());
            }
            // fall through
          case 114: break;
          case 33:
            { return new Symbol(CLASS, yyline, yycolumn, yytext());
            }
            // fall through
          case 115: break;
          case 34:
            { return new Symbol(COLOR, yyline, yycolumn, yytext());
            }
            // fall through
          case 116: break;
          case 35:
            { return new Symbol(WIDTH, yyline, yycolumn, yytext());
            }
            // fall through
          case 117: break;
          case 36:
            { return new Symbol(AQUA, yyline, yycolumn, yytext());
            }
            // fall through
          case 118: break;
          case 37:
            { return new Symbol(BLUE, yyline, yycolumn, yytext());
            }
            // fall through
          case 119: break;
          case 38:
            { return new Symbol(GRAY, yyline, yycolumn, yytext());
            }
            // fall through
          case 120: break;
          case 39:
            { return new Symbol(LEFT, yyline, yycolumn, yytext());
            }
            // fall through
          case 121: break;
          case 40:
            { return new Symbol(LIME, yyline, yycolumn, yytext());
            }
            // fall through
          case 122: break;
          case 41:
            { return new Symbol(NAVY, yyline, yycolumn, yytext());
            }
            // fall through
          case 123: break;
          case 42:
            { return new Symbol(TEAL, yyline, yycolumn, yytext());
            }
            // fall through
          case 124: break;
          case 43:
            { return new Symbol(TEXT, yyline, yycolumn, yytext());
            }
            // fall through
          case 125: break;
          case 44:
            { return new Symbol(BODY, yyline, yycolumn, yytext());
            }
            // fall through
          case 126: break;
          case 45:
            { return new Symbol(GCIC, yyline, yycolumn, yytext());
            }
            // fall through
          case 127: break;
          case 46:
            { return new Symbol(HEAD, yyline, yycolumn, yytext());
            }
            // fall through
          case 128: break;
          case 47:
            { return new Symbol(LINK, yyline, yycolumn, yytext());
            }
            // fall through
          case 129: break;
          case 48:
            { return new Symbol(SPAM, yyline, yycolumn, yytext());
            }
            // fall through
          case 130: break;
          case 49:
            { return new Symbol(HEIGHT, yyline, yycolumn, yytext());
            }
            // fall through
          case 131: break;
          case 50:
            { return new Symbol(ARIAL, yyline, yycolumn, yytext());
            }
            // fall through
          case 132: break;
          case 51:
            { return new Symbol(BLACK, yyline, yycolumn, yytext());
            }
            // fall through
          case 133: break;
          case 52:
            { return new Symbol(GREEN, yyline, yycolumn, yytext());
            }
            // fall through
          case 134: break;
          case 53:
            { return new Symbol(OLIVE, yyline, yycolumn, yytext());
            }
            // fall through
          case 135: break;
          case 54:
            { return new Symbol(RADIO, yyline, yycolumn, yytext());
            }
            // fall through
          case 136: break;
          case 55:
            { return new Symbol(RIGHT, yyline, yycolumn, yytext());
            }
            // fall through
          case 137: break;
          case 56:
            { return new Symbol(WHITE, yyline, yycolumn, yytext());
            }
            // fall through
          case 138: break;
          case 57:
            { return new Symbol(INPUT, yyline, yycolumn, yytext());
            }
            // fall through
          case 139: break;
          case 58:
            { return new Symbol(TITLE, yyline, yycolumn, yytext());
            }
            // fall through
          case 140: break;
          case 59:
            { return new Symbol(ONCLICK, yyline, yycolumn, yytext());
            }
            // fall through
          case 141: break;
          case 60:
            { return new Symbol(GENEVA, yyline, yycolumn, yytext());
            }
            // fall through
          case 142: break;
          case 61:
            { return new Symbol(CENTER, yyline, yycolumn, yytext());
            }
            // fall through
          case 143: break;
          case 62:
            { return new Symbol(COLUMN, yyline, yycolumn, yytext());
            }
            // fall through
          case 144: break;
          case 63:
            { return new Symbol(MAROON, yyline, yycolumn, yytext());
            }
            // fall through
          case 145: break;
          case 64:
            { return new Symbol(NUMBER, yyline, yycolumn, yytext());
            }
            // fall through
          case 146: break;
          case 65:
            { return new Symbol(PURPLE, yyline, yycolumn, yytext());
            }
            // fall through
          case 147: break;
          case 66:
            { return new Symbol(SILVER, yyline, yycolumn, yytext());
            }
            // fall through
          case 148: break;
          case 67:
            { return new Symbol(YELLOW, yyline, yycolumn, yytext());
            }
            // fall through
          case 149: break;
          case 68:
            { return new Symbol(BUTTON, yyline, yycolumn, yytext());
            }
            // fall through
          case 150: break;
          case 69:
            { return new Symbol(OPTION, yyline, yycolumn, yytext());
            }
            // fall through
          case 151: break;
          case 70:
            { return new Symbol(SELECT, yyline, yycolumn, yytext());
            }
            // fall through
          case 152: break;
          case 71:
            { return new Symbol(COURIER, yyline, yycolumn, yytext());
            }
            // fall through
          case 153: break;
          case 72:
            { return new Symbol(VERDANA, yyline, yycolumn, yytext());
            }
            // fall through
          case 154: break;
          case 73:
            { return new Symbol(FUCHSIA, yyline, yycolumn, yytext());
            }
            // fall through
          case 155: break;
          case 74:
            { return new Symbol(JUSTIFY, yyline, yycolumn, yytext());
            }
            // fall through
          case 156: break;
          case 75:
            { return new Symbol(FONTSIZE, yyline, yycolumn, yytext());
            }
            // fall through
          case 157: break;
          case 76:
            { return new Symbol(CHECKBOX, yyline, yycolumn, yytext());
            }
            // fall through
          case 158: break;
          case 77:
            { return new Symbol(TEXTAREA, yyline, yycolumn, yytext());
            }
            // fall through
          case 159: break;
          case 78:
            { return new Symbol(BACKGROUND, yyline, yycolumn, yytext());
            }
            // fall through
          case 160: break;
          case 79:
            { return new Symbol(TEXTALIGN, yyline, yycolumn, yytext());
            }
            // fall through
          case 161: break;
          case 80:
            { return new Symbol(SCRIPTING, yyline, yycolumn, yytext());
            }
            // fall through
          case 162: break;
          case 81:
            { return new Symbol(FONTFAMILY, yyline, yycolumn, yytext());
            }
            // fall through
          case 163: break;
          case 82:
            { return new Symbol(SANS_SERIF, yyline, yycolumn, yytext());
            }
            // fall through
          case 164: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
