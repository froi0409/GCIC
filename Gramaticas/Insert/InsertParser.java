
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class InsertParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return InsertParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public InsertParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public InsertParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public InsertParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\230\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\004\000" +
    "\002\003\003\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\004\000\002\003\005\000\002\042" +
    "\006\000\002\043\006\000\002\044\006\000\002\045\006" +
    "\000\002\046\006\000\002\047\006\000\002\050\005\000" +
    "\002\051\006\000\002\052\006\000\002\053\006\000\002" +
    "\040\006\000\002\054\005\000\002\054\003\000\002\055" +
    "\005\000\002\055\003\000\002\041\005\000\002\056\005" +
    "\000\002\057\005\000\002\060\005\000\002\061\005\000" +
    "\002\062\005\000\002\063\005\000\002\065\005\000\002" +
    "\066\005\000\002\067\005\000\002\074\004\000\002\074" +
    "\003\000\002\077\011\000\002\073\004\000\002\073\002" +
    "\000\002\075\004\000\002\075\002\000\002\071\004\000" +
    "\002\071\002\000\002\072\003\000\002\072\003\000\002" +
    "\072\005\000\002\072\005\000\002\072\005\000\002\004" +
    "\004\000\002\004\002\000\002\004\004\000\002\005\007" +
    "\000\002\102\003\000\002\102\003\000\002\102\003\000" +
    "\002\006\004\000\002\006\002\000\002\006\004\000\002" +
    "\007\007\000\002\010\004\000\002\010\002\000\002\010" +
    "\004\000\002\011\003\000\002\012\004\000\002\012\002" +
    "\000\002\012\004\000\002\013\007\000\002\013\003\000" +
    "\002\014\004\000\002\014\002\000\002\014\004\000\002" +
    "\015\007\000\002\015\007\000\002\015\007\000\002\015" +
    "\007\000\002\015\007\000\002\015\007\000\002\016\004" +
    "\000\002\016\002\000\002\016\004\000\002\017\003\000" +
    "\002\020\004\000\002\020\002\000\002\020\004\000\002" +
    "\021\003\000\002\021\007\000\002\021\007\000\002\022" +
    "\004\000\002\022\002\000\002\022\004\000\002\023\007" +
    "\000\002\023\007\000\002\023\007\000\002\023\007\000" +
    "\002\023\007\000\002\024\004\000\002\024\002\000\002" +
    "\024\004\000\002\025\003\000\002\026\004\000\002\026" +
    "\002\000\002\026\004\000\002\027\003\000\002\030\004" +
    "\000\002\030\002\000\002\030\004\000\002\031\003\000" +
    "\002\070\007\000\002\070\007\000\002\070\007\000\002" +
    "\070\007\000\002\070\007\000\002\103\003\000\002\103" +
    "\003\000\002\103\003\000\002\103\003\000\002\103\003" +
    "\000\002\103\003\000\002\103\003\000\002\103\003\000" +
    "\002\103\003\000\002\103\003\000\002\103\003\000\002" +
    "\103\003\000\002\103\003\000\002\103\003\000\002\103" +
    "\003\000\002\103\003\000\002\103\003\000\002\105\003" +
    "\000\002\105\003\000\002\105\003\000\002\105\003\000" +
    "\002\105\003\000\002\106\003\000\002\106\003\000\002" +
    "\106\003\000\002\106\003\000\002\107\003\000\002\107" +
    "\003\000\002\110\003\000\002\110\003\000\002\104\003" +
    "\000\002\104\003\000\002\104\003\000\002\104\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0119\000\004\116\011\001\002\000\006\002\ufff8\116" +
    "\ufff8\001\002\000\004\117\u0119\001\002\000\006\002\u0116" +
    "\116\011\001\002\000\002\001\002\000\004\117\uffd5\001" +
    "\002\000\032\006\227\007\232\011\070\012\230\013\234" +
    "\014\233\016\231\017\235\020\071\021\226\022\072\023" +
    "\073\001\002\000\004\117\uffd5\001\002\000\004\117\uffd5" +
    "\001\002\000\004\117\uffd3\001\002\000\006\116\uffd1\117" +
    "\uffd1\001\002\000\006\003\200\117\201\001\002\000\006" +
    "\002\uffff\116\uffff\001\002\000\006\116\uffd1\117\uffd1\001" +
    "\002\000\006\116\uffd1\117\uffd1\001\002\000\004\116\024" +
    "\001\002\000\006\116\024\117\036\001\002\000\004\015" +
    "\026\001\002\000\006\116\uffd8\117\uffd8\001\002\000\004" +
    "\120\027\001\002\000\004\117\uffd5\001\002\000\004\117" +
    "\032\001\002\000\004\117\uffd6\001\002\000\004\015\033" +
    "\001\002\000\004\120\034\001\002\000\006\116\uffd7\117" +
    "\uffd7\001\002\000\006\116\uffd9\117\uffd9\001\002\000\004" +
    "\014\040\001\002\000\006\002\ufffb\116\ufffb\001\002\000" +
    "\004\120\041\001\002\000\006\002\uffdf\116\uffdf\001\002" +
    "\000\006\116\050\117\047\001\002\000\006\116\uffcf\117" +
    "\uffcf\001\002\000\006\116\uffd2\117\uffd2\001\002\000\006" +
    "\002\ufffe\116\ufffe\001\002\000\006\116\uffd0\117\uffd0\001" +
    "\002\000\004\011\173\001\002\000\012\011\070\020\071" +
    "\022\072\023\073\001\002\000\006\116\uffd1\117\uffd1\001" +
    "\002\000\006\116\uffd1\117\uffd1\001\002\000\006\116\uffd1" +
    "\117\uffd1\001\002\000\006\116\050\117\047\001\002\000" +
    "\006\116\uffcc\117\uffcc\001\002\000\006\116\050\117\057" +
    "\001\002\000\004\023\061\001\002\000\006\116\uffcd\117" +
    "\uffcd\001\002\000\004\120\062\001\002\000\010\002\uffda" +
    "\116\uffda\117\uffda\001\002\000\006\116\050\117\065\001" +
    "\002\000\006\116\uffce\117\uffce\001\002\000\004\022\066" +
    "\001\002\000\004\120\067\001\002\000\010\002\uffdb\116" +
    "\uffdb\117\uffdb\001\002\000\010\003\uffbf\120\uffbf\121\uffbf" +
    "\001\002\000\004\120\165\001\002\000\010\003\uff97\120" +
    "\uff97\121\uff97\001\002\000\010\003\uff93\120\uff93\121\uff93" +
    "\001\002\000\010\003\076\120\075\121\101\001\002\000" +
    "\006\116\uffe9\117\uffe9\001\002\000\010\003\uff92\120\uff92" +
    "\121\uff92\001\002\000\010\003\uff91\120\uff91\121\uff91\001" +
    "\002\000\010\003\uff94\120\uff94\121\uff94\001\002\000\014" +
    "\027\103\030\105\031\106\032\104\034\102\001\002\000" +
    "\004\123\155\001\002\000\004\123\131\001\002\000\004" +
    "\123\122\001\002\000\004\123\117\001\002\000\004\123" +
    "\107\001\002\000\014\071\113\072\114\073\111\074\112" +
    "\075\115\001\002\000\004\122\116\001\002\000\004\122" +
    "\uff78\001\002\000\004\122\uff77\001\002\000\004\122\uff7a" +
    "\001\002\000\004\122\uff79\001\002\000\004\122\uff76\001" +
    "\002\000\010\003\uff8f\120\uff8f\121\uff8f\001\002\000\004" +
    "\067\120\001\002\000\004\122\121\001\002\000\010\003" +
    "\uff90\120\uff90\121\uff90\001\002\000\012\076\123\077\125" +
    "\100\127\101\126\001\002\000\004\122\uff75\001\002\000" +
    "\004\122\130\001\002\000\004\122\uff74\001\002\000\004" +
    "\122\uff72\001\002\000\004\122\uff73\001\002\000\010\003" +
    "\uff8e\120\uff8e\121\uff8e\001\002\000\044\046\136\047\137" +
    "\050\135\051\141\052\140\053\143\054\152\055\134\056" +
    "\142\057\145\060\132\061\151\062\153\063\144\064\146" +
    "\065\133\066\147\001\002\000\004\122\uff81\001\002\000" +
    "\004\122\uff7c\001\002\000\004\122\uff84\001\002\000\004" +
    "\122\uff89\001\002\000\004\122\uff8b\001\002\000\004\122" +
    "\uff8a\001\002\000\004\122\uff87\001\002\000\004\122\uff88" +
    "\001\002\000\004\122\uff83\001\002\000\004\122\uff86\001" +
    "\002\000\004\122\uff7e\001\002\000\004\122\uff82\001\002" +
    "\000\004\122\uff7d\001\002\000\004\122\uff7b\001\002\000" +
    "\004\122\154\001\002\000\004\122\uff80\001\002\000\004" +
    "\122\uff85\001\002\000\004\122\uff7f\001\002\000\010\003" +
    "\uff8c\120\uff8c\121\uff8c\001\002\000\004\110\156\001\002" +
    "\000\004\122\157\001\002\000\010\003\uff8d\120\uff8d\121" +
    "\uff8d\001\002\000\010\003\162\120\161\121\101\001\002" +
    "\000\006\116\uffea\117\uffea\001\002\000\010\003\uff96\120" +
    "\uff96\121\uff96\001\002\000\010\003\uff95\120\uff95\121\uff95" +
    "\001\002\000\010\003\uff98\120\uff98\121\uff98\001\002\000" +
    "\010\002\uffec\116\uffec\117\uffec\001\002\000\010\003\171" +
    "\120\167\121\101\001\002\000\006\116\ufff2\117\ufff2\001" +
    "\002\000\010\003\uffc0\120\uffc0\121\uffc0\001\002\000\010" +
    "\003\uffbe\120\uffbe\121\uffbe\001\002\000\010\003\uffbd\120" +
    "\uffbd\121\uffbd\001\002\000\004\120\174\001\002\000\010" +
    "\002\uffe2\116\uffe2\117\uffe2\001\002\000\006\116\050\117" +
    "\057\001\002\000\006\002\ufff5\116\ufff5\001\002\000\006" +
    "\002\ufff4\116\ufff4\001\002\000\006\002\uffe6\116\uffe6\001" +
    "\002\000\004\007\202\001\002\000\004\120\203\001\002" +
    "\000\006\002\uffe7\116\uffe7\001\002\000\006\116\050\117" +
    "\065\001\002\000\006\002\ufff6\116\ufff6\001\002\000\004" +
    "\117\211\001\002\000\004\117\uffd4\001\002\000\006\002" +
    "\ufffa\116\ufffa\001\002\000\004\016\212\001\002\000\004" +
    "\120\213\001\002\000\006\002\uffde\116\uffde\001\002\000" +
    "\004\117\216\001\002\000\006\002\ufff7\116\ufff7\001\002" +
    "\000\004\021\217\001\002\000\004\120\220\001\002\000" +
    "\006\002\uffdc\116\uffdc\001\002\000\004\117\223\001\002" +
    "\000\006\002\ufffc\116\ufffc\001\002\000\004\013\224\001" +
    "\002\000\004\120\225\001\002\000\006\002\uffe0\116\uffe0" +
    "\001\002\000\010\003\uff9b\120\uff9b\121\uff9b\001\002\000" +
    "\004\120\u0105\001\002\000\010\003\uffbb\120\uffbb\121\uffbb" +
    "\001\002\000\010\003\uffa9\120\uffa9\121\uffa9\001\002\000" +
    "\010\003\uffca\120\uffca\121\uffca\001\002\000\010\003\uffad" +
    "\120\uffad\121\uffad\001\002\000\010\003\uffb6\120\uffb6\121" +
    "\uffb6\001\002\000\010\003\uffa3\120\uffa3\121\uffa3\001\002" +
    "\000\010\003\240\120\237\121\242\001\002\000\004\117" +
    "\uffed\001\002\000\010\003\uffa2\120\uffa2\121\uffa2\001\002" +
    "\000\010\003\uffa4\120\uffa4\121\uffa4\001\002\000\014\034" +
    "\243\041\246\042\245\043\247\044\244\001\002\000\004" +
    "\123\271\001\002\000\004\123\263\001\002\000\004\123" +
    "\260\001\002\000\004\123\255\001\002\000\004\123\250" +
    "\001\002\000\006\067\253\070\252\001\002\000\004\122" +
    "\254\001\002\000\004\122\uff6e\001\002\000\004\122\uff6f" +
    "\001\002\000\010\003\uff9f\120\uff9f\121\uff9f\001\002\000" +
    "\004\114\256\001\002\000\004\122\257\001\002\000\010" +
    "\003\uffa1\120\uffa1\121\uffa1\001\002\000\006\067\253\070" +
    "\252\001\002\000\004\122\262\001\002\000\010\003\uffa0" +
    "\120\uffa0\121\uffa0\001\002\000\010\110\266\113\264\114" +
    "\267\001\002\000\004\122\uffc7\001\002\000\004\122\270" +
    "\001\002\000\004\122\uffc5\001\002\000\004\122\uffc6\001" +
    "\002\000\010\003\uff9e\120\uff9e\121\uff9e\001\002\000\004" +
    "\110\272\001\002\000\004\122\273\001\002\000\010\003" +
    "\uff9d\120\uff9d\121\uff9d\001\002\000\010\003\276\120\275" +
    "\121\300\001\002\000\004\117\ufff0\001\002\000\010\003" +
    "\uffb5\120\uffb5\121\uffb5\001\002\000\010\003\uffb7\120\uffb7" +
    "\121\uffb7\001\002\000\016\030\305\031\306\032\304\034" +
    "\301\036\303\037\302\001\002\000\004\123\326\001\002" +
    "\000\004\123\323\001\002\000\004\123\320\001\002\000" +
    "\004\123\315\001\002\000\004\123\312\001\002\000\004" +
    "\123\307\001\002\000\014\071\113\072\114\073\111\074" +
    "\112\075\115\001\002\000\004\122\311\001\002\000\010" +
    "\003\uffb3\120\uffb3\121\uffb3\001\002\000\004\067\313\001" +
    "\002\000\004\122\314\001\002\000\010\003\uffb4\120\uffb4" +
    "\121\uffb4\001\002\000\012\076\123\077\125\100\127\101" +
    "\126\001\002\000\004\122\317\001\002\000\010\003\uffb2" +
    "\120\uffb2\121\uffb2\001\002\000\004\115\321\001\002\000" +
    "\004\122\322\001\002\000\010\003\uffb0\120\uffb0\121\uffb0" +
    "\001\002\000\004\115\324\001\002\000\004\122\325\001" +
    "\002\000\010\003\uffaf\120\uffaf\121\uffaf\001\002\000\004" +
    "\110\327\001\002\000\004\122\330\001\002\000\010\003" +
    "\uffb1\120\uffb1\121\uffb1\001\002\000\010\003\333\120\332" +
    "\121\101\001\002\000\004\116\uffef\001\002\000\010\003" +
    "\uffac\120\uffac\121\uffac\001\002\000\010\003\uffab\120\uffab" +
    "\121\uffab\001\002\000\010\003\uffae\120\uffae\121\uffae\001" +
    "\002\000\010\003\341\120\337\121\342\001\002\000\006" +
    "\003\uffe8\117\uffe8\001\002\000\010\003\uffcb\120\uffcb\121" +
    "\uffcb\001\002\000\010\003\uffc9\120\uffc9\121\uffc9\001\002" +
    "\000\004\025\343\001\002\000\004\123\344\001\002\000" +
    "\004\114\345\001\002\000\004\122\346\001\002\000\010" +
    "\003\uffc8\120\uffc8\121\uffc8\001\002\000\010\003\351\120" +
    "\350\121\354\001\002\000\004\117\uffee\001\002\000\010" +
    "\003\uffa8\120\uffa8\121\uffa8\001\002\000\010\003\uffa7\120" +
    "\uffa7\121\uffa7\001\002\000\010\003\uffaa\120\uffaa\121\uffaa" +
    "\001\002\000\020\026\356\027\103\030\105\031\106\032" +
    "\104\034\102\040\355\001\002\000\004\123\362\001\002" +
    "\000\004\123\357\001\002\000\044\046\136\047\137\050" +
    "\135\051\141\052\140\053\143\054\152\055\134\056\142" +
    "\057\145\060\132\061\151\062\153\063\144\064\146\065" +
    "\133\066\147\001\002\000\004\122\361\001\002\000\010" +
    "\003\uffa5\120\uffa5\121\uffa5\001\002\000\006\106\364\107" +
    "\363\001\002\000\004\122\uff70\001\002\000\004\122\uff71" +
    "\001\002\000\004\122\366\001\002\000\010\003\uffa6\120" +
    "\uffa6\121\uffa6\001\002\000\010\003\372\120\371\121\374" +
    "\001\002\000\010\003\uffbc\120\uffbc\121\uffbc\001\002\000" +
    "\004\117\ufff1\001\002\000\010\003\uffba\120\uffba\121\uffba" +
    "\001\002\000\010\003\uffb8\120\uffb8\121\uffb8\001\002\000" +
    "\016\027\103\030\105\031\106\032\104\033\375\034\102" +
    "\001\002\000\004\123\376\001\002\000\012\102\u0101\103" +
    "\u0102\104\u0100\105\u0103\001\002\000\004\122\u0104\001\002" +
    "\000\004\122\uff6b\001\002\000\004\122\uff6d\001\002\000" +
    "\004\122\uff6c\001\002\000\004\122\uff6a\001\002\000\010" +
    "\003\uffb9\120\uffb9\121\uffb9\001\002\000\002\001\002\000" +
    "\010\003\u0108\120\u0107\121\101\001\002\000\004\117\uffeb" +
    "\001\002\000\010\003\uff9a\120\uff9a\121\uff9a\001\002\000" +
    "\010\003\uff99\120\uff99\121\uff99\001\002\000\010\003\uff9c" +
    "\120\uff9c\121\uff9c\001\002\000\004\117\u010d\001\002\000" +
    "\006\002\ufffd\116\ufffd\001\002\000\004\012\u010e\001\002" +
    "\000\004\120\u010f\001\002\000\006\002\uffe1\116\uffe1\001" +
    "\002\000\006\003\u0111\117\u0113\001\002\000\006\002\uffe4" +
    "\116\uffe4\001\002\000\006\002\ufff3\116\ufff3\001\002\000" +
    "\004\006\u0114\001\002\000\004\120\u0115\001\002\000\006" +
    "\002\uffe5\116\uffe5\001\002\000\004\002\001\001\002\000" +
    "\006\002\000\116\000\001\002\000\006\002\ufff9\116\ufff9" +
    "\001\002\000\004\017\u011a\001\002\000\004\120\u011b\001" +
    "\002\000\006\002\uffdd\116\uffdd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0119\000\036\002\005\003\016\040\015\041\006\042" +
    "\020\043\007\044\011\045\021\046\013\047\004\050\003" +
    "\051\012\052\014\053\017\001\001\000\002\001\001\000" +
    "\004\063\u0117\001\001\000\034\003\u0116\040\015\041\006" +
    "\042\020\043\007\044\011\045\021\046\013\047\004\050" +
    "\003\051\012\052\014\053\017\001\001\000\004\076\u010f" +
    "\001\001\000\004\073\u010a\001\001\000\002\001\001\000" +
    "\004\073\220\001\001\000\004\073\213\001\001\000\004" +
    "\075\205\001\001\000\004\071\203\001\001\000\004\054" +
    "\176\001\001\000\002\001\001\000\004\071\174\001\001" +
    "\000\004\071\041\001\001\000\006\074\022\077\024\001" +
    "\001\000\006\061\036\077\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\073\027\001" +
    "\001\000\004\101\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\042\052\050\042\052\050\053" +
    "\051\056\044\072\043\101\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\071\062\001\001" +
    "\000\004\071\055\001\001\000\004\071\053\001\001\000" +
    "\020\042\052\050\042\052\050\053\051\056\054\072\043" +
    "\101\045\001\001\000\002\001\001\000\020\042\052\050" +
    "\042\052\050\053\051\067\057\072\043\101\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\042\052\050\042\052\050\053\051" +
    "\066\063\072\043\101\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\165\001\001\000\002\001\001\000\004\026\157\001" +
    "\001\000\004\030\073\001\001\000\006\031\077\070\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\105\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\106" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\103\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\163\070\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\167\070\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\042\052\050\042\052\050\053\051\067\175\072\043" +
    "\101\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\042\052\050\042\052\050\053\051\066" +
    "\204\072\043\101\045\001\001\000\002\001\001\000\006" +
    "\062\207\100\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\065\214\101\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\060\221\101\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\u0105" +
    "\001\001\000\002\001\001\000\004\012\366\001\001\000" +
    "\004\020\346\001\001\000\004\004\335\001\001\000\004" +
    "\016\330\001\001\000\004\014\273\001\001\000\004\022" +
    "\235\001\001\000\004\023\240\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\110\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\110\260\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\102\264\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\276\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\105\307\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\106\315\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\334\070\333\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\337\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\352\070\351\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\103\357\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\107\364\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\367\070\372\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\104\376\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\025\u0109\070\u0108\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\057\u010b" +
    "\101\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\u0111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$InsertParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$InsertParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$InsertParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ArrayList<Advertencia> listaErrores;
    private ArrayList<String> parametros;
    private ArrayList<Identificador> identificadores;
    private int lineaInsert;
    private int columnaInsert;

    public InsertParser(InsertLexer lexer, ArrayList<Advertencia> listaErrores, ArrayList<String> parametros, ArrayList<Identificador> identificadores, int linea, int columna) {
        super(lexer);
        this.listaErrores = listaErrores;
        this.lineaInsert = linea;
        this.columnaInsert = columna;
        this.parametros = parametros;
        this.identificadores = identificadores;
    }

    public void report_error(String message, Object info) {
        System.out.println("reporterror");;
    }
    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal " + info);
    }
    @Override
    public void syntax_error(Symbol s) {
        Advertencia errorNuevo = new Advertencia("Sintactico");
        //System.out.println("linea: " + s.left + "   columna: " + s.right + "   token: " + symbl_name_from_id(s.sym) + "     texto: " + s.value);
        errorNuevo.setLinea(s.left);
        errorNuevo.setColumna(s.right);
        errorNuevo.setToken(symbl_name_from_id(s.sym)); //Se cambiará por uno de la tabla
        errorNuevo.setTexto(s.value.toString());
        //Agregamos los simbolos que se esperan
        String solucion = "";
        for(int i = 0; i < expected_token_ids().size(); i++) {
            if(i != 0) {
                solucion += ",";
            }
            solucion += " " + symbl_name_from_id(expected_token_ids().get(i));
        }
        errorNuevo.setSolucion(solucion);
        listaErrores.add(errorNuevo);
    }
    protected int error_sync_size() {
        return 1;
    }

    public void agregarErrorSemantico(String mensaje) {
        Advertencia errorNuevo = new Advertencia("Semantico");
        errorNuevo.setMensaje(mensaje);
        listaErrores.add(errorNuevo);
    }

    public boolean etiquetasDuplicadas(int linea, int columna) {
        boolean comprobante = false;
        Set<String> datosSinDuplicar = new HashSet<String>(parametros); //Creamos un Set de los parametros
        for(String param : datosSinDuplicar) {
            int repeticion = Collections.frequency(parametros, param);
            if(repeticion > 1) {
                agregarErrorSemantico("El parametro " + param + " se ha repetido " + repeticion + " veces.\nConflicto en Linea: " + linea + " - Columna: " + columna);
                comprobante = true;
            }
        }
        return comprobante;
    }

    public void agregarIdentificador(String id, int linea, int columna) {
        boolean comprobante = true;
        linea += lineaInsert;
        columna += columnaInsert;
        for(Identificador ident : identificadores) {
            if(ident.getId().equals(id)) {
                agregarErrorSemantico("El identificador " + id + " ya fue declarado en la Linea: " + ident.getLinea() + " - Columna: " + ident.getColumna() + ".\nConflicto en Linea: " + linea + " - Columna: " + columna);
                comprobante = false;
                break;
            }
        }
        if(comprobante) {
            identificadores.add(new Identificador(id, linea, columna));
        }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$InsertParser$actions {
  private final InsertParser parser;

  /** Constructor */
  CUP$InsertParser$actions(InsertParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$InsertParser$do_action_part00000000(
    int                        CUP$InsertParser$act_num,
    java_cup.runtime.lr_parser CUP$InsertParser$parser,
    java.util.Stack            CUP$InsertParser$stack,
    int                        CUP$InsertParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$InsertParser$result;

      /* select the action based on the action number */
      switch (CUP$InsertParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)).value;
		RESULT = start_val;
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$InsertParser$parser.done_parsing();
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= inicio etiquetas_posibles 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= etiquetas_posibles 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // etiquetas_posibles ::= apertura_spam parametros_etiquetas_texuales cerradura_spam 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("etiquetas_posibles",1, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-2)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // etiquetas_posibles ::= apertura_input cuerpo_texto cerradura_input 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("etiquetas_posibles",1, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-2)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // etiquetas_posibles ::= apertura_textarea cuerpo_texto cerradura_textarea 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("etiquetas_posibles",1, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-2)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // etiquetas_posibles ::= apertura_select cuerpo_select cerradura_select 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("etiquetas_posibles",1, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-2)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // etiquetas_posibles ::= apertura_div cuerpo_div cerradura_div 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("etiquetas_posibles",1, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-2)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // etiquetas_posibles ::= apertura_img cerradura_img 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("etiquetas_posibles",1, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // etiquetas_posibles ::= apertura_br 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("etiquetas_posibles",1, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // etiquetas_posibles ::= apertura_button cuerpo_texto cerradura_button 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("etiquetas_posibles",1, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-2)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // etiquetas_posibles ::= apertura_h1 parametros_etiquetas_texuales cerradura_h1 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("etiquetas_posibles",1, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-2)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // etiquetas_posibles ::= apertura_p parametros_etiquetas_texuales cerradura_p 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("etiquetas_posibles",1, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-2)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // etiquetas_posibles ::= apertura_link cierre_link 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("etiquetas_posibles",1, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // etiquetas_posibles ::= apertura_title cuerpo_title cierre_title 
            {
              Object RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)).right;
		Object ct = (Object)((java_cup.runtime.Symbol) CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)).value;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("etiquetas_posibles",1, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-2)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // apertura_spam ::= MENOR_QUE SPAM cuerpo_parametros_spam MAYOR_QUE 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)).value;
		
                                                                                if(!etiquetasDuplicadas(inileft, iniright)) {

                                                                                }
                                                                            
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("apertura_spam",32, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // apertura_input ::= MENOR_QUE INPUT cuerpo_parametros_input MAYOR_QUE 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)).value;
		
                                                                                if(!etiquetasDuplicadas(inileft, iniright)) {

                                                                                }
                                                                            
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("apertura_input",33, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // apertura_textarea ::= MENOR_QUE TEXTAREA cuerpo_parametros_textarea MAYOR_QUE 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)).value;
		
                                                                                            if(!etiquetasDuplicadas(inileft, iniright)) {

                                                                                            }
                                                                                        
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("apertura_textarea",34, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // apertura_select ::= MENOR_QUE SELECT cuerpo_parametros_select MAYOR_QUE 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)).value;
		
                                                                                    if(!etiquetasDuplicadas(inileft, iniright)) {

                                                                                    }
                                                                                
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("apertura_select",35, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // apertura_div ::= MENOR_QUE DIV cuerpo_parametros_div MAYOR_QUE 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)).value;
		
                                                                                if(!etiquetasDuplicadas(inileft, iniright)) {

                                                                                }
                                                                            
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("apertura_div",36, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // apertura_img ::= MENOR_QUE IMG cuerpo_parametros_img MAYOR_QUE 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)).value;
		
                                                                                if(!etiquetasDuplicadas(inileft, iniright)) {

                                                                                }
                                                                            
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("apertura_img",37, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // apertura_br ::= MENOR_QUE BR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("apertura_br",38, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-2)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // apertura_button ::= MENOR_QUE BUTTON cuerpo_parametros_button MAYOR_QUE 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)).value;
		
                                                                                    if(!etiquetasDuplicadas(inileft, iniright)) {

                                                                                    }
                                                                                
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("apertura_button",39, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // apertura_h1 ::= MENOR_QUE H1 cuerpo_parametros_h1 MAYOR_QUE 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)).value;
		
                                                                        if(!etiquetasDuplicadas(inileft, iniright)) {

                                                                        }
                                                                    
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("apertura_h1",40, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // apertura_p ::= MENOR_QUE P cuerpo_parametros_p MAYOR_QUE 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)).value;
		
                                                                        if(!etiquetasDuplicadas(inileft, iniright)) {

                                                                        }
                                                                    
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("apertura_p",41, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // apertura_link ::= MENOR_QUE LINK cuerpo_parametros_link MAYOR_QUE 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)).value;
		
                                                                                if(!etiquetasDuplicadas(inileft, iniright)) {

                                                                                }
                                                                            
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("apertura_link",30, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-3)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cierre_link ::= MENOR_CIERRE LINK MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cierre_link",42, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-2)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cierre_link ::= error 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cierre_link",42, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cierre_title ::= MENOR_CIERRE TITLE MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cierre_title",43, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-2)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cierre_title ::= error 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cierre_title",43, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // apertura_title ::= MENOR_QUE TITLE MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("apertura_title",31, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-2)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cerradura_spam ::= MENOR_CIERRE SPAM MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cerradura_spam",44, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-2)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cerradura_input ::= MENOR_CIERRE INPUT MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cerradura_input",45, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-2)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cerradura_textarea ::= MENOR_CIERRE TEXTAREA MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cerradura_textarea",46, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-2)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cerradura_select ::= MENOR_CIERRE SELECT MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cerradura_select",47, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-2)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cerradura_div ::= MENOR_CIERRE DIV MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cerradura_div",48, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-2)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cerradura_img ::= MENOR_CIERRE IMG MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cerradura_img",49, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-2)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cerradura_button ::= MENOR_CIERRE BUTTON MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cerradura_button",51, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-2)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cerradura_h1 ::= MENOR_CIERRE H1 MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cerradura_h1",52, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-2)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cerradura_p ::= MENOR_CIERRE P MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cerradura_p",53, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-2)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cuerpo_select ::= cuerpo_select etiqueta_option 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_select",58, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cuerpo_select ::= etiqueta_option 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_select",58, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // etiqueta_option ::= MENOR_QUE OPTION MAYOR_QUE cuerpo_texto MENOR_CIERRE OPTION MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("etiqueta_option",61, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-6)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cuerpo_texto ::= cuerpo_texto texto 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_texto",57, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cuerpo_texto ::= 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_texto",57, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cuerpo_div ::= cuerpo_div etiquetas_cuerpo 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_div",59, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cuerpo_div ::= 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_div",59, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametros_etiquetas_texuales ::= parametros_etiquetas_texuales parametros_etiquetas_texuales_p 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas_texuales",55, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametros_etiquetas_texuales ::= 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas_texuales",55, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametros_etiquetas_texuales_p ::= texto 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas_texuales_p",56, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametros_etiquetas_texuales_p ::= apertura_br 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas_texuales_p",56, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametros_etiquetas_texuales_p ::= apertura_h1 parametros_etiquetas_texuales cerradura_h1 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas_texuales_p",56, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-2)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametros_etiquetas_texuales_p ::= apertura_p parametros_etiquetas_texuales cerradura_p 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas_texuales_p",56, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-2)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parametros_etiquetas_texuales_p ::= apertura_spam parametros_etiquetas_texuales cerradura_spam 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_etiquetas_texuales_p",56, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-2)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cuerpo_parametros_link ::= cuerpo_parametros_link parametros_link 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_link",2, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cuerpo_parametros_link ::= 
            {
              Object RESULT =null;
		parametros.clear();
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_link",2, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cuerpo_parametros_link ::= cuerpo_parametros_link error 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_link",2, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parametros_link ::= CORA HREF IGUAL ALLCHARNOSPACE CORC 
            {
              Object RESULT =null;
		parametros.add("href");
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_link",3, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-4)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // texto_comillas_complete ::= ALLCHAR 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("texto_comillas_complete",64, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // texto_comillas_complete ::= ALLCHARNOSPACE 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("texto_comillas_complete",64, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // texto_comillas_complete ::= ID_ETIQUETA 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("texto_comillas_complete",64, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cuerpo_parametros_body ::= cuerpo_parametros_body parametros_body 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_body",4, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cuerpo_parametros_body ::= 
            {
              Object RESULT =null;
		parametros.clear();
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_body",4, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cuerpo_parametros_body ::= cuerpo_parametros_body error 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_body",4, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parametros_body ::= CORA BACKGROUND IGUAL colores CORC 
            {
              Object RESULT =null;
		parametros.add("background");
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_body",5, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-4)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // cuerpo_parametros_spam ::= cuerpo_parametros_spam parametros_spam 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_spam",6, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // cuerpo_parametros_spam ::= 
            {
              Object RESULT =null;
		parametros.clear();
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_spam",6, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cuerpo_parametros_spam ::= cuerpo_parametros_spam error 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_spam",6, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parametros_spam ::= parametros_textuales 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_spam",7, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cuerpo_parametros_input ::= cuerpo_parametros_input parametros_input 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_input",8, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cuerpo_parametros_input ::= 
            {
              Object RESULT =null;
		parametros.clear();
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_input",8, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cuerpo_parametros_input ::= cuerpo_parametros_input error 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_input",8, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parametros_input ::= CORA TYPE IGUAL tipos_input CORC 
            {
              Object RESULT =null;
		parametros.add("type");
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_input",9, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-4)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parametros_input ::= parametros_textuales 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_input",9, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // cuerpo_parametros_textarea ::= cuerpo_parametros_textarea parametros_textarea 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_textarea",10, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cuerpo_parametros_textarea ::= 
            {
              Object RESULT =null;
		parametros.clear();
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_textarea",10, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cuerpo_parametros_textarea ::= cuerpo_parametros_textarea error 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_textarea",10, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parametros_textarea ::= CORA FONTSIZE IGUAL PIXELES CORC 
            {
              Object RESULT =null;
		parametros.add("font-size");
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_textarea",11, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-4)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // parametros_textarea ::= CORA FONTFAMILY IGUAL font_family CORC 
            {
              Object RESULT =null;
		parametros.add("font-family");
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_textarea",11, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-4)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // parametros_textarea ::= CORA TEXTALIGN IGUAL alineaciones CORC 
            {
              Object RESULT =null;
		parametros.add("text-align");
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_textarea",11, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-4)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // parametros_textarea ::= CORA ID IGUAL ID_ETIQUETA CORC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)).right;
		terminal ide = (terminal)((java_cup.runtime.Symbol) CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)).value;
		parametros.add("id"); agregarIdentificador(ide.toString(), ideleft, ideright);
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_textarea",11, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-4)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // parametros_textarea ::= CORA COLS IGUAL DIGITO_COM CORC 
            {
              Object RESULT =null;
		parametros.add("cols");
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_textarea",11, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-4)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parametros_textarea ::= CORA ROWS IGUAL DIGITO_COM CORC 
            {
              Object RESULT =null;
		parametros.add("rows");
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_textarea",11, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-4)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // cuerpo_parametros_select ::= cuerpo_parametros_select parametros_select 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_select",12, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // cuerpo_parametros_select ::= 
            {
              Object RESULT =null;
		parametros.clear();
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_select",12, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // cuerpo_parametros_select ::= cuerpo_parametros_select error 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_select",12, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parametros_select ::= parametros_textuales 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_select",13, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cuerpo_parametros_div ::= cuerpo_parametros_div parametros_div 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_div",14, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // cuerpo_parametros_div ::= 
            {
              Object RESULT =null;
		parametros.clear();
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_div",14, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // cuerpo_parametros_div ::= cuerpo_parametros_div error 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_div",14, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parametros_div ::= parametros_textuales 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_div",15, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parametros_div ::= CORA CLASS IGUAL clases CORC 
            {
              Object RESULT =null;
		parametros.add("class");
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_div",15, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-4)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parametros_div ::= CORA BACKGROUND IGUAL colores CORC 
            {
              Object RESULT =null;
		parametros.add("background");
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_div",15, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-4)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // cuerpo_parametros_img ::= cuerpo_parametros_img parametros_img 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_img",16, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // cuerpo_parametros_img ::= 
            {
              Object RESULT =null;
		parametros.clear();
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_img",16, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // cuerpo_parametros_img ::= cuerpo_parametros_img error 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_img",16, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // parametros_img ::= CORA SRC IGUAL ALLCHARNOSPACE CORC 
            {
              Object RESULT =null;
		parametros.add("src");
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_img",17, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-4)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parametros_img ::= CORA WIDTH IGUAL tamaños CORC 
            {
              Object RESULT =null;
		parametros.add("width");
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_img",17, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-4)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parametros_img ::= CORA HEIGHT IGUAL tamaños CORC 
            {
              Object RESULT =null;
		parametros.add("height");
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_img",17, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-4)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parametros_img ::= CORA ALT IGUAL texto_comillas_complete CORC 
            {
              Object RESULT =null;
		parametros.add("alt");
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_img",17, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-4)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parametros_img ::= CORA ID IGUAL ID_ETIQUETA CORC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)).right;
		terminal ide = (terminal)((java_cup.runtime.Symbol) CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)).value;
		parametros.add("id"); agregarIdentificador(ide.toString(), ideleft, ideright);
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_img",17, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-4)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cuerpo_parametros_button ::= cuerpo_parametros_button parametros_button 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_button",18, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // cuerpo_parametros_button ::= 
            {
              Object RESULT =null;
		parametros.clear();
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_button",18, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // cuerpo_parametros_button ::= cuerpo_parametros_button error 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_button",18, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parametros_button ::= parametros_textuales 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_button",19, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // cuerpo_parametros_h1 ::= cuerpo_parametros_h1 parametros_h1 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_h1",20, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // cuerpo_parametros_h1 ::= 
            {
              Object RESULT =null;
		parametros.clear();
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_h1",20, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // cuerpo_parametros_h1 ::= cuerpo_parametros_h1 error 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_h1",20, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // parametros_h1 ::= parametros_textuales 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_h1",21, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // cuerpo_parametros_p ::= cuerpo_parametros_p parametros_p 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_p",22, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // cuerpo_parametros_p ::= 
            {
              Object RESULT =null;
		parametros.clear();
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_p",22, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // cuerpo_parametros_p ::= cuerpo_parametros_p error 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("cuerpo_parametros_p",22, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // parametros_p ::= parametros_textuales 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_p",23, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // parametros_textuales ::= CORA FONTSIZE IGUAL PIXELES CORC 
            {
              Object RESULT =null;
		parametros.add("font-size");
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_textuales",54, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-4)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // parametros_textuales ::= CORA FONTFAMILY IGUAL font_family CORC 
            {
              Object RESULT =null;
		parametros.add("font-family");
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_textuales",54, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-4)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // parametros_textuales ::= CORA TEXTALIGN IGUAL alineaciones CORC 
            {
              Object RESULT =null;
		parametros.add("text-align");
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_textuales",54, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-4)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // parametros_textuales ::= CORA ID IGUAL ID_ETIQUETA CORC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)).right;
		terminal ide = (terminal)((java_cup.runtime.Symbol) CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-1)).value;
		parametros.add("id"); agregarIdentificador(ide.toString(), ideleft, ideright);
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_textuales",54, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-4)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // parametros_textuales ::= CORA COLOR IGUAL colores CORC 
            {
              Object RESULT =null;
		parametros.add("color");
              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("parametros_textuales",54, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.elementAt(CUP$InsertParser$top-4)), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // colores ::= BLACK 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("colores",65, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // colores ::= OLIVE 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("colores",65, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // colores ::= TEAL 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("colores",65, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // colores ::= RED 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("colores",65, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // colores ::= BLUE 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("colores",65, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // colores ::= MAROON 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("colores",65, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // colores ::= NAVY 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("colores",65, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // colores ::= GRAY 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("colores",65, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // colores ::= LIME 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("colores",65, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // colores ::= FUCHSIA 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("colores",65, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // colores ::= GREEN 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("colores",65, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // colores ::= WHITE 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("colores",65, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // colores ::= PURPLE 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("colores",65, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // colores ::= SILVER 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("colores",65, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // colores ::= YELLOW 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("colores",65, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // colores ::= AQUA 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("colores",65, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // colores ::= HEXADECIMAL 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("colores",65, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // font_family ::= COURIER 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("font_family",67, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // font_family ::= VERDANA 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("font_family",67, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // font_family ::= ARIAL 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("font_family",67, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // font_family ::= GENEVA 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("font_family",67, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // font_family ::= SANS_SERIF 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("font_family",67, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // alineaciones ::= LEFT 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("alineaciones",68, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // alineaciones ::= RIGHT 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("alineaciones",68, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // alineaciones ::= CENTER 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("alineaciones",68, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // alineaciones ::= JUSTIFY 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("alineaciones",68, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // clases ::= ROW 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("clases",69, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // clases ::= COLUMN 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("clases",69, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // tamaños ::= PIXELES 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("tamaños",70, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // tamaños ::= PORCENTAJE 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("tamaños",70, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // tipos_input ::= TEXT 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("tipos_input",66, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // tipos_input ::= NUMBER 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("tipos_input",66, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // tipos_input ::= RADIO 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("tipos_input",66, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // tipos_input ::= CHECKBOX 
            {
              Object RESULT =null;

              CUP$InsertParser$result = parser.getSymbolFactory().newSymbol("tipos_input",66, ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$InsertParser$stack.peek()), RESULT);
            }
          return CUP$InsertParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$InsertParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$InsertParser$do_action(
    int                        CUP$InsertParser$act_num,
    java_cup.runtime.lr_parser CUP$InsertParser$parser,
    java.util.Stack            CUP$InsertParser$stack,
    int                        CUP$InsertParser$top)
    throws java.lang.Exception
    {
              return CUP$InsertParser$do_action_part00000000(
                               CUP$InsertParser$act_num,
                               CUP$InsertParser$parser,
                               CUP$InsertParser$stack,
                               CUP$InsertParser$top);
    }
}

}
