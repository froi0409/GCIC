// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: EtiquetadoLexer.jflex

//Secci√≥n de Importaciones
package com.froi.pruebas.gramaticas;
import java_cup.runtime.*;
import static com.froi.pruebas.gramaticas.EtiquetadoParserSym.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class EtiquetadoLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\u10df\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\10\26\1\27\1\30\1\31\1\32\1\33\1\0"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\46\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\46\1\65\1\0\1\66\1\0\1\67"+
    "\1\0\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116"+
    "\1\117\1\120\1\121\1\122\1\123\1\124\103\0\1\46"+
    "\7\0\1\46\3\0\1\46\5\0\1\46\6\0\1\46"+
    "\6\0\1\46\7\0\1\46\3\0\1\46\5\0\1\46"+
    "\6\0\1\46\1\0\1\46\u011b\0\2\13\346\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\2\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\1\16\23\1\24"+
    "\1\25\16\23\1\26\1\27\1\30\1\2\1\31\33\0"+
    "\1\32\1\0\2\15\1\33\1\0\1\34\1\35\1\36"+
    "\1\0\3\23\1\4\5\23\1\37\24\23\1\40\12\23"+
    "\1\41\2\0\1\42\57\0\1\43\36\0\1\44\2\0"+
    "\1\23\1\45\1\23\7\4\1\46\2\4\2\23\1\47"+
    "\6\23\1\4\5\23\1\50\17\23\1\51\5\23\1\52"+
    "\1\53\41\0\1\54\1\55\42\0\2\23\1\4\1\56"+
    "\3\4\1\57\12\4\1\60\1\61\1\62\1\23\1\63"+
    "\3\23\2\4\3\23\1\64\3\23\1\65\2\23\1\66"+
    "\5\23\1\67\1\23\1\70\1\23\1\71\2\23\1\72"+
    "\1\73\1\23\40\0\1\74\26\0\1\75\1\0\1\76"+
    "\11\0\2\23\2\4\1\77\2\4\1\100\10\4\4\23"+
    "\2\4\4\23\1\101\2\23\1\102\1\103\1\23\1\104"+
    "\1\4\5\23\1\4\1\105\41\0\1\106\1\0\1\107"+
    "\4\0\1\110\2\0\1\111\1\112\1\0\1\113\7\0"+
    "\1\114\1\115\4\0\1\4\1\23\1\116\1\4\1\117"+
    "\1\120\1\4\1\121\3\4\1\122\2\4\1\123\1\124"+
    "\2\23\2\4\1\23\1\125\5\23\2\4\1\23\1\126"+
    "\2\23\1\127\1\4\25\0\1\130\3\0\1\131\4\0"+
    "\1\132\3\0\1\133\1\0\1\134\1\135\2\0\1\136"+
    "\2\0\1\137\1\4\1\23\1\4\1\140\4\4\1\141"+
    "\1\23\2\4\1\142\1\23\1\143\2\23\1\144\1\145"+
    "\2\4\1\23\1\146\1\147\1\4\17\0\1\150\1\0"+
    "\1\151\1\0\1\152\2\0\1\153\1\154\1\155\1\0"+
    "\1\156\1\157\1\4\1\23\1\160\1\161\1\4\1\162"+
    "\1\4\1\23\3\4\2\23\2\4\1\23\1\4\6\0"+
    "\1\163\1\164\1\0\1\165\1\166\1\0\7\4\1\167"+
    "\1\170\1\23\1\4\1\171\1\23\1\4\2\0\1\172"+
    "\1\0\1\173\2\4\1\174\1\4\1\175\1\4\1\176"+
    "\1\4\1\23\1\177\2\0\1\4\1\200\2\4\1\201"+
    "\1\23\1\0\1\202\1\4\1\203\1\4\1\23\1\4"+
    "\1\204\1\23\1\4\1\205\3\4\1\206";

  private static int [] zzUnpackAction() {
    int [] result = new int[777];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\125\0\125\0\252\0\377\0\u0154\0\u01a9\0\u01fe"+
    "\0\125\0\125\0\125\0\125\0\125\0\u0253\0\125\0\u02a8"+
    "\0\u02fd\0\125\0\125\0\u0352\0\u03a7\0\u03fc\0\u0451\0\u04a6"+
    "\0\u04fb\0\u0550\0\u05a5\0\u05fa\0\u064f\0\u06a4\0\u06f9\0\u074e"+
    "\0\u07a3\0\u07f8\0\u084d\0\u08a2\0\u08f7\0\125\0\125\0\u094c"+
    "\0\u09a1\0\u09f6\0\u0a4b\0\u0aa0\0\u0af5\0\u0b4a\0\u0b9f\0\u0bf4"+
    "\0\u0c49\0\u0c9e\0\u0cf3\0\u0d48\0\u0d9d\0\125\0\u0df2\0\125"+
    "\0\u0e47\0\125\0\u0e9c\0\u0ef1\0\u0f46\0\u0f9b\0\u0ff0\0\u1045"+
    "\0\u109a\0\u10ef\0\u1144\0\u1199\0\u11ee\0\u1243\0\u1298\0\u12ed"+
    "\0\u1342\0\u1397\0\u13ec\0\u1441\0\u1496\0\u14eb\0\u1540\0\u1595"+
    "\0\u15ea\0\u163f\0\u1694\0\u16e9\0\u173e\0\125\0\u1793\0\u17e8"+
    "\0\u183d\0\u1892\0\u18e7\0\125\0\125\0\125\0\u193c\0\u1991"+
    "\0\u19e6\0\u1a3b\0\u1a90\0\u1ae5\0\u1b3a\0\u1b8f\0\u1be4\0\u1c39"+
    "\0\u04fb\0\u1c8e\0\u1ce3\0\u1d38\0\u1d8d\0\u1de2\0\u1e37\0\u1e8c"+
    "\0\u1ee1\0\u1f36\0\u1f8b\0\u1fe0\0\u2035\0\u208a\0\u20df\0\u2134"+
    "\0\u2189\0\u21de\0\u2233\0\u2288\0\u22dd\0\u04fb\0\u2332\0\u2387"+
    "\0\u23dc\0\u2431\0\u2486\0\u24db\0\u2530\0\u2585\0\u25da\0\u262f"+
    "\0\125\0\u2684\0\u26d9\0\125\0\u272e\0\u2783\0\u27d8\0\u282d"+
    "\0\u2882\0\u28d7\0\u292c\0\u2981\0\u29d6\0\u2a2b\0\u2a80\0\u2ad5"+
    "\0\u2b2a\0\u2b7f\0\u2bd4\0\u2c29\0\u2c7e\0\u2cd3\0\u2d28\0\u2d7d"+
    "\0\u2dd2\0\u2e27\0\u2e7c\0\u2ed1\0\u2f26\0\u2f7b\0\u2fd0\0\u3025"+
    "\0\u307a\0\u30cf\0\u3124\0\u3179\0\u31ce\0\u3223\0\u3278\0\u32cd"+
    "\0\u3322\0\u3377\0\u33cc\0\u3421\0\u3476\0\u34cb\0\u3520\0\u3575"+
    "\0\u35ca\0\u361f\0\u3674\0\125\0\u36c9\0\u371e\0\u3773\0\u37c8"+
    "\0\u381d\0\u3872\0\u38c7\0\u391c\0\u3971\0\u39c6\0\u3a1b\0\u3a70"+
    "\0\u3ac5\0\u3b1a\0\u3b6f\0\u3bc4\0\u3c19\0\u3c6e\0\u3cc3\0\u3d18"+
    "\0\u3d6d\0\u3dc2\0\u3e17\0\u3e6c\0\u3ec1\0\u3f16\0\u3f6b\0\u3fc0"+
    "\0\u4015\0\u406a\0\125\0\u40bf\0\u4114\0\u4169\0\u04fb\0\u41be"+
    "\0\u4213\0\u4268\0\u42bd\0\u4312\0\u4367\0\u43bc\0\u4411\0\u0154"+
    "\0\u4466\0\u44bb\0\u4510\0\u4565\0\u04fb\0\u45ba\0\u460f\0\u4664"+
    "\0\u46b9\0\u470e\0\u4763\0\u47b8\0\u480d\0\u4862\0\u48b7\0\u490c"+
    "\0\u4961\0\u04fb\0\u49b6\0\u4a0b\0\u4a60\0\u4ab5\0\u4b0a\0\u4b5f"+
    "\0\u4bb4\0\u4c09\0\u4c5e\0\u4cb3\0\u4d08\0\u4d5d\0\u4db2\0\u4e07"+
    "\0\u4e5c\0\u04fb\0\u4eb1\0\u4f06\0\u4f5b\0\u4fb0\0\u5005\0\125"+
    "\0\125\0\u505a\0\u50af\0\u5104\0\u5159\0\u51ae\0\u5203\0\u5258"+
    "\0\u52ad\0\u5302\0\u5357\0\u53ac\0\u5401\0\u5456\0\u54ab\0\u5500"+
    "\0\u5555\0\u55aa\0\u55ff\0\u5654\0\u56a9\0\u56fe\0\u5753\0\u57a8"+
    "\0\u57fd\0\u5852\0\u58a7\0\u58fc\0\u5951\0\u59a6\0\u59fb\0\u5a50"+
    "\0\u5aa5\0\u5afa\0\125\0\125\0\u5b4f\0\u5ba4\0\u5bf9\0\u5c4e"+
    "\0\u5ca3\0\u5cf8\0\u5d4d\0\u5da2\0\u5df7\0\u5e4c\0\u5ea1\0\u5ef6"+
    "\0\u5f4b\0\u5fa0\0\u5ff5\0\u604a\0\u609f\0\u60f4\0\u6149\0\u619e"+
    "\0\u61f3\0\u6248\0\u629d\0\u62f2\0\u6347\0\u639c\0\u63f1\0\u6446"+
    "\0\u649b\0\u64f0\0\u6545\0\u659a\0\u65ef\0\u6644\0\u6699\0\u66ee"+
    "\0\u6743\0\u0154\0\u6798\0\u67ed\0\u6842\0\u0154\0\u6897\0\u68ec"+
    "\0\u6941\0\u6996\0\u69eb\0\u6a40\0\u6a95\0\u6aea\0\u6b3f\0\u6b94"+
    "\0\u04fb\0\u04fb\0\u04fb\0\u6be9\0\u04fb\0\u6c3e\0\u6c93\0\u6ce8"+
    "\0\u6d3d\0\u6d92\0\u6de7\0\u6e3c\0\u6e91\0\u6ee6\0\u6f3b\0\u6f90"+
    "\0\u6fe5\0\u04fb\0\u703a\0\u708f\0\u04fb\0\u70e4\0\u7139\0\u718e"+
    "\0\u71e3\0\u7238\0\u04fb\0\u728d\0\u04fb\0\u72e2\0\u04fb\0\u7337"+
    "\0\u738c\0\u04fb\0\u04fb\0\u73e1\0\u7436\0\u748b\0\u74e0\0\u7535"+
    "\0\u758a\0\u75df\0\u7634\0\u7689\0\u76de\0\u7733\0\u7788\0\u77dd"+
    "\0\u7832\0\u7887\0\u78dc\0\u7931\0\u7986\0\u79db\0\u7a30\0\u7a85"+
    "\0\u7ada\0\u7b2f\0\u7b84\0\u7bd9\0\u7c2e\0\u7c83\0\u7cd8\0\u7d2d"+
    "\0\u7d82\0\u7dd7\0\u7e2c\0\u7e81\0\125\0\u7ed6\0\u7f2b\0\u7f80"+
    "\0\u7fd5\0\u802a\0\u807f\0\u80d4\0\u8129\0\u817e\0\u81d3\0\u8228"+
    "\0\u827d\0\u82d2\0\u8327\0\u837c\0\u83d1\0\u8426\0\u847b\0\u84d0"+
    "\0\u8525\0\u857a\0\u85cf\0\125\0\u8624\0\125\0\u8679\0\u86ce"+
    "\0\u8723\0\u8778\0\u87cd\0\u8822\0\u8877\0\u88cc\0\u8921\0\u8976"+
    "\0\u89cb\0\u8a20\0\u8a75\0\u0154\0\u8aca\0\u8b1f\0\u0154\0\u8b74"+
    "\0\u8bc9\0\u8c1e\0\u8c73\0\u8cc8\0\u8d1d\0\u8d72\0\u8dc7\0\u8e1c"+
    "\0\u8e71\0\u8ec6\0\u8f1b\0\u8f70\0\u8fc5\0\u901a\0\u906f\0\u90c4"+
    "\0\u9119\0\u04fb\0\u916e\0\u91c3\0\u04fb\0\u04fb\0\u9218\0\u04fb"+
    "\0\u926d\0\u92c2\0\u9317\0\u936c\0\u93c1\0\u9416\0\u946b\0\u04fb"+
    "\0\u94c0\0\u9515\0\u956a\0\u95bf\0\u9614\0\u9669\0\u96be\0\u9713"+
    "\0\u9768\0\u97bd\0\u9812\0\u9867\0\u98bc\0\u9911\0\u9966\0\u99bb"+
    "\0\u9a10\0\u9a65\0\u9aba\0\u9b0f\0\u9b64\0\u9bb9\0\u9c0e\0\u9c63"+
    "\0\u9cb8\0\u9d0d\0\u9d62\0\u9db7\0\u9e0c\0\u9e61\0\u9eb6\0\u9f0b"+
    "\0\u9f60\0\125\0\u9fb5\0\125\0\ua00a\0\ua05f\0\ua0b4\0\ua109"+
    "\0\125\0\ua15e\0\ua1b3\0\125\0\125\0\ua208\0\125\0\ua25d"+
    "\0\ua2b2\0\ua307\0\ua35c\0\ua3b1\0\ua406\0\ua45b\0\125\0\125"+
    "\0\ua4b0\0\ua505\0\ua55a\0\ua5af\0\ua604\0\ua659\0\u0154\0\ua6ae"+
    "\0\u0154\0\u0154\0\ua703\0\u0154\0\ua758\0\ua7ad\0\ua802\0\u0154"+
    "\0\ua857\0\ua8ac\0\u04fb\0\u04fb\0\ua901\0\ua956\0\ua9ab\0\uaa00"+
    "\0\uaa55\0\u04fb\0\uaaaa\0\uaaff\0\uab54\0\uaba9\0\uabfe\0\uac53"+
    "\0\uaca8\0\uacfd\0\u04fb\0\uad52\0\uada7\0\u04fb\0\uadfc\0\uae51"+
    "\0\uaea6\0\uaefb\0\uaf50\0\uafa5\0\uaffa\0\ub04f\0\ub0a4\0\ub0f9"+
    "\0\ub14e\0\ub1a3\0\ub1f8\0\ub24d\0\ub2a2\0\ub2f7\0\ub34c\0\ub3a1"+
    "\0\ub3f6\0\ub44b\0\ub4a0\0\ub4f5\0\125\0\ub54a\0\ub59f\0\ub5f4"+
    "\0\125\0\ub649\0\ub69e\0\ub6f3\0\ub748\0\125\0\ub79d\0\ub7f2"+
    "\0\ub847\0\125\0\ub89c\0\125\0\125\0\ub8f1\0\ub946\0\125"+
    "\0\ub99b\0\ub9f0\0\125\0\uba45\0\uba9a\0\ubaef\0\u0154\0\ubb44"+
    "\0\ubb99\0\ubbee\0\ubc43\0\u0154\0\ubc98\0\ubced\0\ubd42\0\u0154"+
    "\0\ubd97\0\u04fb\0\ubdec\0\ube41\0\u04fb\0\u04fb\0\ube96\0\ubeeb"+
    "\0\ubf40\0\u04fb\0\u04fb\0\ubf95\0\ubfea\0\uc03f\0\uc094\0\uc0e9"+
    "\0\uc13e\0\uc193\0\uc1e8\0\uc23d\0\uc292\0\uc2e7\0\uc33c\0\uc391"+
    "\0\uc3e6\0\uc43b\0\uc490\0\125\0\uc4e5\0\125\0\uc53a\0\125"+
    "\0\uc58f\0\uc5e4\0\125\0\125\0\125\0\uc639\0\125\0\125"+
    "\0\uc68e\0\uc6e3\0\u0154\0\u0154\0\uc738\0\u0154\0\uc78d\0\uc7e2"+
    "\0\uc837\0\uc88c\0\uc8e1\0\uc936\0\uc98b\0\uc9e0\0\uca35\0\uca8a"+
    "\0\ucadf\0\ucb34\0\ucb89\0\ucbde\0\ucc33\0\ucc88\0\uccdd\0\125"+
    "\0\125\0\ucd32\0\125\0\125\0\ucd87\0\ucddc\0\uce31\0\uce86"+
    "\0\ucedb\0\ucf30\0\ucf85\0\ucfda\0\uc8e1\0\u04fb\0\ud02f\0\ud084"+
    "\0\u0154\0\ud0d9\0\ud12e\0\ud183\0\ud1d8\0\125\0\ud22d\0\u0154"+
    "\0\ud282\0\ud2d7\0\u0154\0\ud32c\0\u0154\0\ud381\0\u04fb\0\ud3d6"+
    "\0\ud42b\0\u0154\0\ud480\0\ud4d5\0\ud52a\0\u0154\0\ud57f\0\ud5d4"+
    "\0\u0154\0\ud629\0\ud67e\0\125\0\ud6d3\0\u0154\0\ud728\0\ud77d"+
    "\0\ud7d2\0\u0154\0\ud827\0\ud87c\0\u04fb\0\ud8d1\0\ud926\0\ud97b"+
    "\0\u0154";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[777];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\4\3\1\4\1\5\1\2\1\6\1\2\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\2"+
    "\1\17\1\20\2\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\2\31\1\35"+
    "\1\36\2\31\1\37\1\31\1\40\1\41\1\42\1\43"+
    "\1\31\1\44\2\31\1\45\2\31\1\46\1\47\1\6"+
    "\1\50\1\51\1\52\1\53\1\31\1\54\1\55\1\56"+
    "\1\57\4\31\1\60\1\61\2\31\1\62\1\63\1\64"+
    "\2\31\1\65\3\31\1\66\1\67\1\70\132\0\1\71"+
    "\24\0\1\72\72\0\1\73\1\74\1\75\1\73\1\76"+
    "\1\73\1\0\1\77\14\73\1\100\2\101\6\73\1\102"+
    "\1\73\1\103\3\73\1\104\15\73\1\105\6\73\1\106"+
    "\1\107\1\110\2\73\1\111\1\112\2\73\1\113\1\73"+
    "\1\114\1\115\1\116\1\117\1\120\1\73\1\121\1\122"+
    "\1\123\2\73\1\124\1\73\1\125\4\73\10\0\1\6"+
    "\10\0\1\6\2\0\3\6\6\0\30\6\2\0\33\6"+
    "\15\0\1\126\112\0\4\127\1\0\6\127\1\0\111\127"+
    "\10\0\1\6\10\0\1\6\2\0\1\130\2\131\6\0"+
    "\30\6\2\0\33\6\13\0\1\6\10\0\1\6\1\132"+
    "\1\0\3\31\6\0\30\31\2\0\1\6\32\31\13\0"+
    "\1\6\10\0\1\6\1\132\1\0\3\21\6\0\30\31"+
    "\2\0\1\6\32\31\10\0\1\133\24\0\1\134\124\0"+
    "\1\135\124\0\1\136\170\0\1\137\36\0\1\6\10\0"+
    "\1\6\2\0\3\31\6\0\13\31\1\140\5\31\1\141"+
    "\6\31\2\0\1\6\32\31\13\0\1\6\10\0\1\6"+
    "\2\0\3\31\6\0\30\31\2\0\1\6\32\31\13\0"+
    "\1\6\10\0\1\6\2\0\3\31\6\0\1\142\27\31"+
    "\2\0\1\143\32\31\13\0\1\6\10\0\1\6\2\0"+
    "\3\31\6\0\4\31\1\144\23\31\2\0\1\6\32\31"+
    "\13\0\1\6\10\0\1\6\2\0\3\31\6\0\13\31"+
    "\1\145\1\31\1\146\10\31\1\147\1\31\2\0\1\6"+
    "\32\31\13\0\1\6\10\0\1\6\2\0\3\31\6\0"+
    "\23\31\1\150\4\31\2\0\1\6\32\31\13\0\1\6"+
    "\10\0\1\6\2\0\3\31\6\0\5\31\1\151\7\31"+
    "\1\152\12\31\2\0\1\6\32\31\13\0\1\6\10\0"+
    "\1\6\2\0\3\31\6\0\4\31\1\153\23\31\2\0"+
    "\1\6\32\31\13\0\1\6\10\0\1\6\2\0\3\31"+
    "\6\0\23\31\1\154\4\31\2\0\1\6\32\31\13\0"+
    "\1\6\10\0\1\6\2\0\3\31\6\0\15\31\1\155"+
    "\12\31\2\0\1\6\32\31\13\0\1\6\10\0\1\6"+
    "\2\0\3\31\6\0\20\31\1\156\7\31\2\0\1\6"+
    "\32\31\13\0\1\6\10\0\1\6\2\0\3\31\6\0"+
    "\4\31\1\157\23\31\2\0\1\6\32\31\13\0\1\6"+
    "\10\0\1\6\2\0\3\31\6\0\7\31\1\160\20\31"+
    "\2\0\1\6\32\31\13\0\1\6\10\0\1\6\2\0"+
    "\3\31\6\0\7\31\1\161\20\31\2\0\1\6\32\31"+
    "\13\0\1\6\10\0\1\6\2\0\3\31\6\0\30\31"+
    "\2\0\1\6\13\31\1\162\16\31\13\0\1\6\10\0"+
    "\1\6\2\0\3\31\6\0\30\31\2\0\1\6\1\163"+
    "\15\31\1\164\13\31\13\0\1\6\10\0\1\6\2\0"+
    "\3\31\6\0\30\31\2\0\1\143\7\31\1\165\3\31"+
    "\1\166\2\31\1\167\13\31\13\0\1\6\10\0\1\6"+
    "\2\0\3\31\6\0\30\31\2\0\1\6\4\31\1\170"+
    "\25\31\13\0\1\6\10\0\1\6\2\0\3\31\6\0"+
    "\30\31\2\0\1\6\1\171\15\31\1\172\13\31\13\0"+
    "\1\6\10\0\1\6\2\0\3\31\6\0\30\31\2\0"+
    "\1\6\4\31\1\173\25\31\13\0\1\6\10\0\1\6"+
    "\2\0\3\31\6\0\30\31\2\0\1\6\4\31\1\174"+
    "\14\31\1\175\10\31\13\0\1\6\10\0\1\6\2\0"+
    "\3\31\6\0\30\31\2\0\1\6\3\31\1\176\11\31"+
    "\1\177\14\31\13\0\1\6\10\0\1\6\2\0\3\31"+
    "\6\0\30\31\2\0\1\6\1\200\31\31\13\0\1\6"+
    "\10\0\1\6\2\0\3\31\6\0\30\31\2\0\1\6"+
    "\15\31\1\201\14\31\13\0\1\6\10\0\1\6\2\0"+
    "\3\31\6\0\30\31\2\0\1\6\16\31\1\202\13\31"+
    "\13\0\1\6\10\0\1\6\2\0\3\31\6\0\30\31"+
    "\2\0\1\6\21\31\1\203\1\31\1\204\6\31\13\0"+
    "\1\6\10\0\1\6\2\0\3\31\6\0\30\31\2\0"+
    "\1\6\4\31\1\205\14\31\1\206\6\31\1\207\1\31"+
    "\13\0\1\6\10\0\1\6\2\0\3\31\6\0\30\31"+
    "\2\0\1\6\10\31\1\210\21\31\126\0\1\211\1\0"+
    "\2\71\2\0\121\71\2\212\1\213\1\212\1\213\1\212"+
    "\1\214\117\212\1\215\1\213\1\212\1\216\1\212\1\214"+
    "\1\217\14\212\1\100\2\101\6\212\1\220\1\212\1\221"+
    "\3\212\1\222\15\212\1\223\6\212\1\224\1\225\1\226"+
    "\2\212\1\227\1\230\2\212\1\231\1\212\1\232\1\233"+
    "\1\234\1\235\1\236\1\212\1\237\1\240\1\241\2\212"+
    "\1\242\1\212\1\243\4\212\6\213\1\214\117\213\1\216"+
    "\2\213\1\216\1\213\1\214\1\244\14\213\1\245\2\246"+
    "\6\213\1\247\1\213\1\250\3\213\1\251\15\213\1\252"+
    "\6\213\1\253\1\254\1\255\2\213\1\256\1\257\2\213"+
    "\1\260\1\213\1\261\1\262\1\263\1\264\1\265\1\213"+
    "\1\266\1\267\1\270\2\213\1\271\1\213\1\272\4\213"+
    "\2\212\1\213\1\212\1\213\1\212\1\214\15\212\3\273"+
    "\6\212\6\273\25\212\6\273\30\212\1\100\1\213\1\212"+
    "\1\245\1\212\1\274\2\212\1\275\42\212\1\276\32\212"+
    "\1\276\16\212\1\100\1\213\1\212\1\245\1\212\1\274"+
    "\2\212\1\275\12\212\3\101\25\212\1\276\32\212\1\276"+
    "\17\212\1\213\1\212\1\213\1\212\1\214\102\212\1\277"+
    "\15\212\1\213\1\212\1\213\1\212\1\214\77\212\1\300"+
    "\20\212\1\213\1\212\1\213\1\212\1\214\65\212\1\301"+
    "\32\212\1\213\1\212\1\213\1\212\1\214\65\212\1\302"+
    "\32\212\1\213\1\212\1\213\1\212\1\214\101\212\1\303"+
    "\16\212\1\213\1\212\1\213\1\212\1\214\74\212\1\304"+
    "\23\212\1\213\1\212\1\213\1\212\1\214\65\212\1\305"+
    "\2\212\1\306\6\212\1\307\20\212\1\213\1\212\1\213"+
    "\1\212\1\214\105\212\1\310\12\212\1\213\1\212\1\213"+
    "\1\212\1\214\102\212\1\311\15\212\1\213\1\212\1\213"+
    "\1\212\1\214\105\212\1\312\12\212\1\213\1\212\1\213"+
    "\1\212\1\214\65\212\1\313\3\212\1\314\26\212\1\213"+
    "\1\212\1\213\1\212\1\214\61\212\1\315\36\212\1\213"+
    "\1\212\1\213\1\212\1\214\61\212\1\316\23\212\1\317"+
    "\12\212\1\213\1\212\1\213\1\212\1\214\74\212\1\320"+
    "\23\212\1\213\1\212\1\213\1\212\1\214\105\212\1\321"+
    "\12\212\1\213\1\212\1\213\1\212\1\214\61\212\1\322"+
    "\3\212\1\323\3\212\1\324\5\212\1\325\20\212\1\213"+
    "\1\212\1\213\1\212\1\214\61\212\1\326\7\212\1\327"+
    "\26\212\1\213\1\212\1\213\1\212\1\214\65\212\1\330"+
    "\32\212\1\213\1\212\1\213\1\212\1\214\70\212\1\331"+
    "\27\212\1\213\1\212\1\213\1\212\1\214\65\212\1\332"+
    "\30\212\13\0\1\333\121\0\1\6\10\0\1\6\1\132"+
    "\1\0\3\6\6\0\30\6\2\0\33\6\13\0\1\6"+
    "\10\0\1\6\1\132\1\0\3\131\6\0\30\6\2\0"+
    "\33\6\27\0\3\132\117\0\1\334\206\0\1\335\31\0"+
    "\1\6\10\0\1\6\2\0\3\31\6\0\4\31\1\336"+
    "\23\31\2\0\1\6\32\31\13\0\1\6\10\0\1\6"+
    "\2\0\3\31\6\0\2\31\1\337\25\31\2\0\1\6"+
    "\32\31\13\0\1\6\10\0\1\6\2\0\3\31\6\0"+
    "\20\31\1\340\7\31\2\0\1\6\32\31\13\0\1\6"+
    "\10\0\1\6\2\0\3\6\6\0\1\6\1\341\1\6"+
    "\1\342\2\6\1\343\1\344\1\345\2\6\1\346\2\6"+
    "\1\347\1\350\1\6\1\351\1\352\5\6\2\0\2\6"+
    "\1\341\1\6\1\342\2\6\1\343\1\344\1\345\2\6"+
    "\1\346\2\6\1\347\1\350\2\6\1\351\1\352\6\6"+
    "\13\0\1\6\10\0\1\6\2\0\3\31\6\0\21\31"+
    "\1\353\6\31\2\0\1\6\32\31\13\0\1\6\10\0"+
    "\1\6\2\0\3\31\6\0\21\31\1\354\6\31\2\0"+
    "\1\6\32\31\13\0\1\6\10\0\1\6\2\0\3\31"+
    "\6\0\3\31\1\355\24\31\2\0\1\6\32\31\13\0"+
    "\1\6\10\0\1\6\2\0\3\31\6\0\10\31\1\356"+
    "\17\31\2\0\1\6\32\31\13\0\1\6\10\0\1\6"+
    "\2\0\3\31\6\0\15\31\1\357\12\31\2\0\1\6"+
    "\32\31\13\0\1\6\10\0\1\6\2\0\3\31\6\0"+
    "\10\31\1\360\10\31\1\361\6\31\2\0\1\6\32\31"+
    "\13\0\1\6\10\0\1\6\2\0\3\31\6\0\22\31"+
    "\1\362\5\31\2\0\1\6\32\31\13\0\1\6\10\0"+
    "\1\6\2\0\3\31\6\0\14\31\1\363\13\31\2\0"+
    "\1\6\32\31\13\0\1\6\10\0\1\6\2\0\3\31"+
    "\6\0\30\31\2\0\1\364\32\31\13\0\1\6\10\0"+
    "\1\6\2\0\3\31\6\0\16\31\1\365\11\31\2\0"+
    "\1\6\32\31\13\0\1\6\10\0\1\6\2\0\3\31"+
    "\6\0\17\31\1\366\4\31\1\367\3\31\2\0\1\6"+
    "\32\31\13\0\1\6\10\0\1\6\2\0\3\31\6\0"+
    "\4\31\1\370\23\31\2\0\1\6\32\31\13\0\1\6"+
    "\10\0\1\6\2\0\3\31\6\0\10\31\1\371\17\31"+
    "\2\0\1\6\32\31\13\0\1\6\10\0\1\6\2\0"+
    "\3\31\6\0\30\31\2\0\1\6\23\31\1\372\6\31"+
    "\13\0\1\6\10\0\1\6\2\0\3\31\6\0\30\31"+
    "\2\0\1\6\2\31\1\373\27\31\13\0\1\6\10\0"+
    "\1\6\2\0\3\31\6\0\30\31\2\0\1\6\16\31"+
    "\1\374\13\31\13\0\1\6\10\0\1\6\2\0\3\31"+
    "\6\0\30\31\2\0\1\6\1\375\31\31\13\0\1\6"+
    "\10\0\1\6\2\0\3\31\6\0\30\31\2\0\1\6"+
    "\1\376\31\31\13\0\1\6\10\0\1\6\2\0\3\31"+
    "\6\0\30\31\2\0\1\6\13\31\1\377\16\31\13\0"+
    "\1\6\10\0\1\6\2\0\3\31\6\0\30\31\2\0"+
    "\1\6\2\31\1\u0100\27\31\13\0\1\6\10\0\1\6"+
    "\2\0\3\31\6\0\30\31\2\0\1\6\13\31\1\u0101"+
    "\16\31\13\0\1\6\10\0\1\6\2\0\3\31\6\0"+
    "\30\31\2\0\1\6\15\31\1\u0102\14\31\13\0\1\6"+
    "\10\0\1\6\2\0\3\31\6\0\30\31\2\0\1\6"+
    "\23\31\1\u0103\6\31\13\0\1\6\10\0\1\6\2\0"+
    "\3\31\6\0\30\31\2\0\1\6\10\31\1\u0104\21\31"+
    "\13\0\1\6\10\0\1\6\2\0\3\31\6\0\30\31"+
    "\2\0\1\6\4\31\1\u0105\25\31\13\0\1\6\10\0"+
    "\1\6\2\0\3\31\6\0\30\31\2\0\1\6\23\31"+
    "\1\u0106\6\31\13\0\1\6\10\0\1\6\2\0\3\31"+
    "\6\0\30\31\2\0\1\6\14\31\1\u0107\15\31\13\0"+
    "\1\6\10\0\1\6\2\0\3\31\6\0\30\31\2\0"+
    "\1\6\2\31\1\u0108\27\31\13\0\1\6\10\0\1\6"+
    "\2\0\3\31\6\0\30\31\2\0\1\6\26\31\1\u0109"+
    "\3\31\13\0\1\6\10\0\1\6\2\0\3\31\6\0"+
    "\30\31\2\0\1\6\2\31\1\u010a\27\31\13\0\1\6"+
    "\10\0\1\6\2\0\3\31\6\0\30\31\2\0\1\6"+
    "\21\31\1\u010b\10\31\13\0\1\6\10\0\1\6\2\0"+
    "\3\31\6\0\30\31\2\0\1\6\27\31\1\u010c\2\31"+
    "\13\0\1\6\10\0\1\6\2\0\3\31\6\0\30\31"+
    "\2\0\1\6\24\31\1\u010d\5\31\13\0\1\6\10\0"+
    "\1\6\2\0\3\31\6\0\30\31\2\0\1\6\17\31"+
    "\1\u010e\12\31\13\0\1\6\10\0\1\6\2\0\3\31"+
    "\6\0\30\31\2\0\1\6\3\31\1\u010f\26\31\3\0"+
    "\2\212\1\213\1\212\1\213\1\212\1\u0110\116\212\6\213"+
    "\1\u0111\116\213\1\212\1\215\1\213\1\212\1\216\1\212"+
    "\1\u0110\1\217\14\212\1\100\2\101\6\212\1\220\1\212"+
    "\1\221\3\212\1\222\15\212\1\223\6\212\1\224\1\225"+
    "\1\226\2\212\1\227\1\230\2\212\1\231\1\212\1\232"+
    "\1\233\1\234\1\235\1\236\1\212\1\237\1\240\1\241"+
    "\2\212\1\242\1\212\1\243\4\212\1\213\1\216\2\213"+
    "\1\216\1\213\1\u0111\1\244\14\213\1\245\2\246\6\213"+
    "\1\247\1\213\1\250\3\213\1\251\15\213\1\252\6\213"+
    "\1\253\1\254\1\255\2\213\1\256\1\257\2\213\1\260"+
    "\1\213\1\261\1\262\1\263\1\264\1\265\1\213\1\266"+
    "\1\267\1\270\2\213\1\271\1\213\1\272\4\213\2\212"+
    "\1\213\1\212\1\213\1\212\1\u0110\15\212\3\273\6\212"+
    "\6\273\25\212\6\273\31\212\1\213\1\212\1\213\1\212"+
    "\1\u0110\102\212\1\277\15\212\1\213\1\212\1\213\1\212"+
    "\1\u0110\77\212\1\300\20\212\1\213\1\212\1\213\1\212"+
    "\1\u0110\65\212\1\301\32\212\1\213\1\212\1\213\1\212"+
    "\1\u0110\65\212\1\302\32\212\1\213\1\212\1\213\1\212"+
    "\1\u0110\101\212\1\303\16\212\1\213\1\212\1\213\1\212"+
    "\1\u0110\74\212\1\304\23\212\1\213\1\212\1\213\1\212"+
    "\1\u0110\65\212\1\305\2\212\1\306\6\212\1\307\20\212"+
    "\1\213\1\212\1\213\1\212\1\u0110\105\212\1\310\12\212"+
    "\1\213\1\212\1\213\1\212\1\u0110\102\212\1\311\15\212"+
    "\1\213\1\212\1\213\1\212\1\u0110\105\212\1\312\12\212"+
    "\1\213\1\212\1\213\1\212\1\u0110\65\212\1\313\3\212"+
    "\1\314\26\212\1\213\1\212\1\213\1\212\1\u0110\61\212"+
    "\1\315\36\212\1\213\1\212\1\213\1\212\1\u0110\61\212"+
    "\1\316\23\212\1\317\12\212\1\213\1\212\1\213\1\212"+
    "\1\u0110\74\212\1\320\23\212\1\213\1\212\1\213\1\212"+
    "\1\u0110\105\212\1\321\12\212\1\213\1\212\1\213\1\212"+
    "\1\u0110\61\212\1\322\3\212\1\323\3\212\1\324\5\212"+
    "\1\325\20\212\1\213\1\212\1\213\1\212\1\u0110\61\212"+
    "\1\326\7\212\1\327\26\212\1\213\1\212\1\213\1\212"+
    "\1\u0110\65\212\1\330\32\212\1\213\1\212\1\213\1\212"+
    "\1\u0110\70\212\1\331\27\212\1\213\1\212\1\213\1\212"+
    "\1\u0110\65\212\1\332\30\212\6\213\1\u0111\15\213\3\u0112"+
    "\6\213\6\u0112\25\213\6\u0112\30\213\1\245\2\213\1\245"+
    "\1\213\1\274\2\213\1\u0113\42\213\1\u0114\32\213\1\u0114"+
    "\16\213\1\245\2\213\1\245\1\213\1\274\2\213\1\u0113"+
    "\12\213\3\246\25\213\1\u0114\32\213\1\u0114\23\213\1\u0111"+
    "\102\213\1\u0115\21\213\1\u0111\77\213\1\u0116\24\213\1\u0111"+
    "\65\213\1\u0117\36\213\1\u0111\65\213\1\u0118\36\213\1\u0111"+
    "\101\213\1\u0119\22\213\1\u0111\74\213\1\u011a\27\213\1\u0111"+
    "\65\213\1\u011b\2\213\1\u011c\6\213\1\u011d\24\213\1\u0111"+
    "\105\213\1\u011e\16\213\1\u0111\102\213\1\u011f\21\213\1\u0111"+
    "\105\213\1\u0120\16\213\1\u0111\65\213\1\u0121\3\213\1\u0122"+
    "\32\213\1\u0111\61\213\1\u0123\42\213\1\u0111\61\213\1\u0124"+
    "\23\213\1\u0125\16\213\1\u0111\74\213\1\u0126\27\213\1\u0111"+
    "\105\213\1\u0127\16\213\1\u0111\61\213\1\u0128\3\213\1\u0129"+
    "\3\213\1\u012a\5\213\1\u012b\24\213\1\u0111\61\213\1\u012c"+
    "\7\213\1\u012d\32\213\1\u0111\65\213\1\u012e\36\213\1\u0111"+
    "\70\213\1\u012f\33\213\1\u0111\65\213\1\u0130\30\213\1\212"+
    "\1\u0131\1\213\1\212\1\u0132\1\212\1\u0133\15\212\3\273"+
    "\6\212\6\273\25\212\6\273\30\212\1\275\1\213\1\212"+
    "\1\u0113\1\212\1\u0134\120\212\1\213\1\212\1\213\1\212"+
    "\1\u0110\54\212\1\u0135\33\212\1\u0135\7\212\1\213\1\212"+
    "\1\213\1\212\1\u0110\71\212\1\u0136\26\212\1\213\1\212"+
    "\1\213\1\212\1\u0110\105\212\1\u0137\12\212\1\213\1\212"+
    "\1\213\1\212\1\u0110\76\212\1\u0138\21\212\1\213\1\212"+
    "\1\213\1\212\1\u0110\102\212\1\u0139\15\212\1\213\1\212"+
    "\1\213\1\212\1\u0110\105\212\1\u013a\12\212\1\213\1\212"+
    "\1\213\1\212\1\u0110\61\212\1\u013b\23\212\1\u013c\12\212"+
    "\1\213\1\212\1\213\1\212\1\u0110\76\212\1\u013d\21\212"+
    "\1\213\1\212\1\213\1\212\1\u0110\65\212\1\u013e\32\212"+
    "\1\213\1\212\1\213\1\212\1\u0110\74\212\1\u013f\23\212"+
    "\1\213\1\212\1\213\1\212\1\u0110\63\212\1\u0140\34\212"+
    "\1\213\1\212\1\213\1\212\1\u0110\61\212\1\u0141\3\212"+
    "\1\u0142\32\212\1\213\1\212\1\213\1\212\1\u0110\103\212"+
    "\1\u0143\14\212\1\213\1\212\1\213\1\212\1\u0110\66\212"+
    "\1\u0144\31\212\1\213\1\212\1\213\1\212\1\u0110\75\212"+
    "\1\u0145\22\212\1\213\1\212\1\213\1\212\1\u0110\102\212"+
    "\1\u0146\15\212\1\213\1\212\1\213\1\212\1\u0110\106\212"+
    "\1\u0147\11\212\1\213\1\212\1\213\1\212\1\u0110\75\212"+
    "\1\u0148\22\212\1\213\1\212\1\213\1\212\1\u0110\71\212"+
    "\1\u0149\26\212\1\213\1\212\1\213\1\212\1\u0110\102\212"+
    "\1\u014a\15\212\1\213\1\212\1\213\1\212\1\u0110\64\212"+
    "\1\u014b\33\212\1\213\1\212\1\213\1\212\1\u0110\64\212"+
    "\1\u014c\33\212\1\213\1\212\1\213\1\212\1\u0110\67\212"+
    "\1\u014d\30\212\1\213\1\212\1\213\1\212\1\u0110\107\212"+
    "\1\u014e\10\212\1\213\1\212\1\213\1\212\1\u0110\76\212"+
    "\1\u014f\21\212\1\213\1\212\1\213\1\212\1\u0110\74\212"+
    "\1\u0150\23\212\1\213\1\212\1\213\1\212\1\u0110\61\212"+
    "\1\u0151\26\212\1\u0152\7\212\1\213\1\212\1\213\1\212"+
    "\1\u0110\71\212\1\u0153\26\212\1\213\1\212\1\213\1\212"+
    "\1\u0110\74\212\1\u0154\21\212\21\0\1\u0155\211\0\1\u0156"+
    "\26\0\1\6\10\0\1\6\2\0\3\31\6\0\20\31"+
    "\1\u0157\7\31\2\0\1\6\32\31\13\0\1\6\10\0"+
    "\1\6\2\0\3\31\6\0\1\u0158\27\31\2\0\1\6"+
    "\32\31\13\0\1\6\10\0\1\6\2\0\3\6\6\0"+
    "\16\6\1\u0159\1\6\1\u015a\2\6\1\u015b\4\6\2\0"+
    "\17\6\1\u0159\2\6\1\u015a\2\6\1\u015b\5\6\13\0"+
    "\1\6\10\0\1\6\2\0\3\6\6\0\10\6\1\u015c"+
    "\17\6\2\0\11\6\1\u015c\21\6\13\0\1\6\10\0"+
    "\1\6\2\0\3\6\6\0\2\6\1\u015d\25\6\2\0"+
    "\3\6\1\u015d\27\6\13\0\1\6\10\0\1\6\2\0"+
    "\1\6\1\u015e\1\6\6\0\4\6\1\u015f\23\6\2\0"+
    "\5\6\1\u015f\25\6\13\0\1\6\10\0\1\6\2\0"+
    "\3\6\6\0\14\6\1\u0160\1\u0161\12\6\2\0\15\6"+
    "\1\u0160\1\u0161\14\6\13\0\1\6\10\0\1\6\2\0"+
    "\3\6\6\0\10\6\1\u0162\17\6\2\0\11\6\1\u0162"+
    "\21\6\13\0\1\6\10\0\1\6\2\0\3\6\6\0"+
    "\17\6\1\u0163\10\6\2\0\20\6\1\u0163\12\6\13\0"+
    "\1\6\10\0\1\6\2\0\3\6\6\0\2\6\1\u0164"+
    "\1\6\1\u0165\12\6\1\u0166\10\6\2\0\3\6\1\u0164"+
    "\1\6\1\u0165\12\6\1\u0166\12\6\13\0\1\6\10\0"+
    "\1\6\2\0\3\6\6\0\4\6\1\u0167\3\6\1\u0168"+
    "\17\6\2\0\5\6\1\u0167\3\6\1\u0168\21\6\13\0"+
    "\1\6\10\0\1\6\2\0\3\31\6\0\2\31\1\u0169"+
    "\25\31\2\0\1\6\32\31\13\0\1\6\10\0\1\6"+
    "\2\0\3\31\6\0\4\31\1\u016a\23\31\2\0\1\6"+
    "\32\31\13\0\1\6\10\0\1\6\2\0\3\31\6\0"+
    "\22\31\1\u016b\5\31\2\0\1\6\32\31\13\0\1\6"+
    "\10\0\1\6\2\0\3\31\6\0\22\31\1\u016c\5\31"+
    "\2\0\1\6\32\31\13\0\1\6\10\0\1\6\2\0"+
    "\3\31\6\0\22\31\1\u016d\5\31\2\0\1\6\32\31"+
    "\13\0\1\6\10\0\1\6\2\0\3\31\6\0\4\31"+
    "\1\u016e\23\31\2\0\1\6\32\31\13\0\1\6\10\0"+
    "\1\6\2\0\3\31\6\0\10\31\1\u016f\6\31\1\u0170"+
    "\10\31\2\0\1\6\32\31\13\0\1\6\10\0\1\6"+
    "\2\0\3\31\6\0\30\31\2\0\1\u0171\32\31\13\0"+
    "\1\6\10\0\1\6\2\0\3\6\6\0\13\6\1\u0172"+
    "\14\6\2\0\33\6\13\0\1\6\10\0\1\6\2\0"+
    "\3\31\6\0\2\31\1\u0173\25\31\2\0\1\6\32\31"+
    "\13\0\1\6\10\0\1\6\2\0\3\31\6\0\4\31"+
    "\1\u0174\23\31\2\0\1\6\32\31\13\0\1\6\10\0"+
    "\1\6\2\0\3\31\6\0\4\31\1\u0175\23\31\2\0"+
    "\1\6\32\31\13\0\1\6\10\0\1\6\2\0\3\31"+
    "\6\0\15\31\1\u0176\12\31\2\0\1\6\32\31\13\0"+
    "\1\6\10\0\1\6\2\0\3\31\6\0\13\31\1\u0177"+
    "\14\31\2\0\1\6\32\31\13\0\1\6\10\0\1\6"+
    "\2\0\3\31\6\0\30\31\2\0\1\6\12\31\1\u0178"+
    "\17\31\13\0\1\6\10\0\1\6\2\0\3\31\6\0"+
    "\30\31\2\0\1\6\13\31\1\u0179\16\31\13\0\1\6"+
    "\10\0\1\6\2\0\3\31\6\0\30\31\2\0\1\6"+
    "\21\31\1\u017a\10\31\13\0\1\6\10\0\1\6\2\0"+
    "\3\31\6\0\30\31\2\0\1\6\22\31\1\u017b\7\31"+
    "\13\0\1\6\10\0\1\6\2\0\3\31\6\0\30\31"+
    "\2\0\1\6\16\31\1\u017c\3\31\1\u017d\7\31\13\0"+
    "\1\6\10\0\1\6\2\0\3\31\6\0\30\31\2\0"+
    "\1\6\10\31\1\u017e\21\31\13\0\1\6\10\0\1\6"+
    "\2\0\3\31\6\0\30\31\2\0\1\6\22\31\1\u017f"+
    "\7\31\13\0\1\6\10\0\1\6\2\0\3\31\6\0"+
    "\30\31\2\0\1\6\23\31\1\u0180\6\31\13\0\1\6"+
    "\10\0\1\6\2\0\3\31\6\0\4\31\1\u0181\23\31"+
    "\2\0\1\6\32\31\13\0\1\6\10\0\1\6\2\0"+
    "\3\31\6\0\30\31\2\0\1\6\6\31\1\u0182\23\31"+
    "\13\0\1\6\10\0\1\6\2\0\3\31\6\0\30\31"+
    "\2\0\1\6\5\31\1\u0183\24\31\13\0\1\6\10\0"+
    "\1\6\2\0\3\31\6\0\30\31\2\0\1\6\4\31"+
    "\1\u0184\25\31\13\0\1\6\10\0\1\6\2\0\3\31"+
    "\6\0\30\31\2\0\1\6\4\31\1\u0185\25\31\13\0"+
    "\1\6\10\0\1\6\2\0\3\31\6\0\30\31\2\0"+
    "\1\6\13\31\1\u0186\16\31\13\0\1\6\10\0\1\6"+
    "\2\0\3\31\6\0\30\31\2\0\1\6\22\31\1\u0187"+
    "\7\31\13\0\1\6\10\0\1\6\2\0\3\31\6\0"+
    "\30\31\2\0\1\6\10\31\1\u0188\21\31\13\0\1\6"+
    "\10\0\1\6\2\0\3\31\6\0\30\31\2\0\1\6"+
    "\23\31\1\u0189\6\31\13\0\1\6\10\0\1\6\2\0"+
    "\3\31\6\0\30\31\2\0\1\6\4\31\1\u018a\25\31"+
    "\13\0\1\6\10\0\1\6\2\0\3\31\6\0\30\31"+
    "\2\0\1\6\4\31\1\u018b\25\31\13\0\1\6\10\0"+
    "\1\6\2\0\3\31\6\0\30\31\2\0\1\6\23\31"+
    "\1\u018c\6\31\3\0\1\213\1\u0132\2\213\1\u0132\1\213"+
    "\1\u0133\15\213\3\u0112\6\213\6\u0112\25\213\6\u0112\30\213"+
    "\1\u0113\2\213\1\u0113\1\213\1\u0134\124\213\1\u0111\54\213"+
    "\1\u018d\33\213\1\u018d\13\213\1\u0111\71\213\1\u018e\32\213"+
    "\1\u0111\105\213\1\u018f\16\213\1\u0111\76\213\1\u0190\25\213"+
    "\1\u0111\102\213\1\u0191\21\213\1\u0111\105\213\1\u0192\16\213"+
    "\1\u0111\61\213\1\u0193\23\213\1\u0194\16\213\1\u0111\76\213"+
    "\1\u0195\25\213\1\u0111\65\213\1\u0196\36\213\1\u0111\74\213"+
    "\1\u0197\27\213\1\u0111\63\213\1\u0198\40\213\1\u0111\61\213"+
    "\1\u0199\3\213\1\u019a\36\213\1\u0111\103\213\1\u019b\20\213"+
    "\1\u0111\66\213\1\u019c\35\213\1\u0111\75\213\1\u019d\26\213"+
    "\1\u0111\102\213\1\u019e\21\213\1\u0111\106\213\1\u019f\15\213"+
    "\1\u0111\75\213\1\u01a0\26\213\1\u0111\71\213\1\u01a1\32\213"+
    "\1\u0111\102\213\1\u01a2\21\213\1\u0111\64\213\1\u01a3\37\213"+
    "\1\u0111\64\213\1\u01a4\37\213\1\u0111\67\213\1\u01a5\34\213"+
    "\1\u0111\107\213\1\u01a6\14\213\1\u0111\76\213\1\u01a7\25\213"+
    "\1\u0111\74\213\1\u01a8\27\213\1\u0111\61\213\1\u01a9\26\213"+
    "\1\u01aa\13\213\1\u0111\71\213\1\u01ab\32\213\1\u0111\74\213"+
    "\1\u01ac\21\213\1\212\1\u0131\1\213\1\212\1\u0132\1\212"+
    "\1\u0133\116\212\1\213\1\u0132\2\213\1\u0132\1\213\1\u0133"+
    "\116\213\1\212\1\u0135\1\213\1\212\1\u018d\1\212\1\u01ad"+
    "\120\212\1\213\1\212\1\213\1\212\1\u0110\61\212\1\u01ae"+
    "\36\212\1\213\1\212\1\213\1\212\1\u0110\102\212\1\u01af"+
    "\15\212\1\213\1\212\1\213\1\212\1\u0110\65\212\1\u01b0"+
    "\32\212\1\213\1\212\1\213\1\212\1\u0110\64\212\1\u01b1"+
    "\33\212\1\213\1\212\1\213\1\212\1\u0110\61\212\1\u01b2"+
    "\36\212\1\213\1\212\1\213\1\212\1\u0110\63\212\1\u01b3"+
    "\34\212\1\213\1\212\1\213\1\212\1\u0110\65\212\1\u01b4"+
    "\32\212\1\213\1\212\1\213\1\212\1\u0110\104\212\1\u01b5"+
    "\13\212\1\213\1\212\1\213\1\212\1\u0110\63\212\1\u01b6"+
    "\34\212\1\213\1\212\1\213\1\212\1\u0110\105\212\1\u01b7"+
    "\12\212\1\213\1\212\1\213\1\212\1\u0110\70\212\1\u01b8"+
    "\27\212\1\213\1\212\1\213\1\212\1\u0110\111\212\1\u01b9"+
    "\6\212\1\213\1\212\1\213\1\212\1\u0110\65\212\1\u01ba"+
    "\32\212\1\213\1\212\1\213\1\212\1\u0110\104\212\1\u01bb"+
    "\13\212\1\213\1\212\1\213\1\212\1\u0110\104\212\1\u01bc"+
    "\13\212\1\213\1\212\1\213\1\212\1\u0110\65\212\1\u01bd"+
    "\32\212\1\213\1\212\1\213\1\212\1\u0110\77\212\1\u01be"+
    "\20\212\1\213\1\212\1\213\1\212\1\u0110\111\212\1\u01bf"+
    "\6\212\1\213\1\212\1\213\1\212\1\u0110\62\212\1\u01c0"+
    "\35\212\1\213\1\212\1\213\1\212\1\u0110\106\212\1\u01c1"+
    "\11\212\1\213\1\212\1\213\1\212\1\u0110\100\212\1\u01c2"+
    "\17\212\1\213\1\212\1\213\1\212\1\u0110\71\212\1\u01c3"+
    "\25\212\1\u014c\1\213\1\212\1\u01a4\1\212\1\u01c4\120\212"+
    "\1\213\1\212\1\213\1\212\1\u0110\70\212\1\u01c5\26\212"+
    "\1\u014e\1\213\1\212\1\u01a6\1\212\1\u01c6\120\212\1\213"+
    "\1\212\1\213\1\212\1\u0110\103\212\1\u01c7\14\212\1\213"+
    "\1\212\1\213\1\212\1\u0110\106\212\1\u01c8\11\212\1\213"+
    "\1\212\1\213\1\212\1\u0110\74\212\1\u01c9\23\212\1\213"+
    "\1\212\1\213\1\212\1\u0110\104\212\1\u01ca\13\212\1\213"+
    "\1\212\1\213\1\212\1\u0110\104\212\1\u01cb\13\212\1\213"+
    "\1\212\1\213\1\212\1\u0110\74\212\1\u01cc\21\212\21\u01cd"+
    "\1\u01ce\103\u01cd\71\0\1\u01cf\43\0\1\6\10\0\1\6"+
    "\2\0\3\31\6\0\22\31\1\u01d0\5\31\2\0\1\6"+
    "\32\31\13\0\1\6\10\0\1\6\2\0\3\31\6\0"+
    "\2\31\1\u01d1\25\31\2\0\1\6\32\31\13\0\1\6"+
    "\10\0\1\6\2\0\3\6\6\0\3\6\1\u01d2\24\6"+
    "\2\0\4\6\1\u01d2\26\6\13\0\1\6\10\0\1\6"+
    "\2\0\3\6\6\0\22\6\1\u01d3\5\6\2\0\24\6"+
    "\1\u01d3\6\6\13\0\1\6\10\0\1\6\2\0\3\6"+
    "\6\0\24\6\1\u01d4\3\6\2\0\26\6\1\u01d4\4\6"+
    "\13\0\1\6\10\0\1\6\2\0\3\6\6\0\10\6"+
    "\1\u01d5\17\6\2\0\11\6\1\u01d5\21\6\13\0\1\6"+
    "\10\0\1\6\2\0\3\6\6\0\1\u01d6\27\6\2\0"+
    "\1\6\1\u01d6\31\6\13\0\1\6\10\0\1\6\2\0"+
    "\3\6\6\0\6\6\1\u01d7\21\6\2\0\7\6\1\u01d7"+
    "\23\6\13\0\1\6\10\0\1\6\2\0\3\6\6\0"+
    "\17\6\1\u01d8\10\6\2\0\20\6\1\u01d8\12\6\13\0"+
    "\1\6\10\0\1\6\2\0\3\6\6\0\15\6\1\u01d9"+
    "\12\6\2\0\16\6\1\u01d9\14\6\13\0\1\6\10\0"+
    "\1\6\2\0\3\6\6\0\22\6\1\u01da\5\6\2\0"+
    "\24\6\1\u01da\6\6\13\0\1\6\10\0\1\6\2\0"+
    "\3\6\6\0\20\6\1\u01db\7\6\2\0\22\6\1\u01db"+
    "\10\6\13\0\1\6\10\0\1\6\2\0\3\6\6\0"+
    "\13\6\1\u01dc\14\6\2\0\14\6\1\u01dc\16\6\13\0"+
    "\1\6\10\0\1\6\2\0\3\6\6\0\1\u01dd\27\6"+
    "\2\0\1\6\1\u01dd\31\6\13\0\1\6\10\0\1\6"+
    "\2\0\3\6\6\0\26\6\1\u01de\1\6\2\0\30\6"+
    "\1\u01de\2\6\13\0\1\6\10\0\1\6\2\0\3\6"+
    "\6\0\22\6\1\u01df\5\6\2\0\24\6\1\u01df\6\6"+
    "\13\0\1\6\10\0\1\6\2\0\3\31\6\0\10\31"+
    "\1\u01e0\17\31\2\0\1\6\32\31\13\0\1\6\10\0"+
    "\1\6\2\0\3\31\6\0\20\31\1\u01e1\7\31\2\0"+
    "\1\6\32\31\13\0\1\6\10\0\1\6\2\0\3\31"+
    "\6\0\14\31\1\u01e2\13\31\2\0\1\6\32\31\13\0"+
    "\1\6\10\0\1\6\2\0\3\31\6\0\1\u01e3\27\31"+
    "\2\0\1\6\32\31\13\0\1\6\10\0\1\6\2\0"+
    "\3\6\6\0\1\u01e4\27\6\2\0\33\6\13\0\1\6"+
    "\10\0\1\6\2\0\3\6\6\0\16\6\1\u01e5\11\6"+
    "\2\0\33\6\13\0\1\6\10\0\1\6\2\0\3\31"+
    "\6\0\4\31\1\u01e6\23\31\2\0\1\6\32\31\13\0"+
    "\1\6\10\0\1\6\2\0\3\31\6\0\1\u01e7\27\31"+
    "\2\0\1\6\32\31\13\0\1\6\10\0\1\6\2\0"+
    "\3\31\6\0\20\31\1\u01e8\7\31\2\0\1\6\32\31"+
    "\13\0\1\6\10\0\1\6\2\0\3\31\6\0\25\31"+
    "\1\u01e9\2\31\2\0\1\6\32\31\13\0\1\6\10\0"+
    "\1\6\2\0\3\31\6\0\4\31\1\u01ea\23\31\2\0"+
    "\1\6\32\31\13\0\1\6\10\0\1\6\2\0\3\31"+
    "\6\0\30\31\2\0\1\6\6\31\1\u01eb\23\31\13\0"+
    "\1\6\10\0\1\6\2\0\3\31\6\0\30\31\2\0"+
    "\1\6\4\31\1\u01ec\25\31\13\0\1\6\10\0\1\6"+
    "\2\0\3\31\6\0\30\31\2\0\1\6\22\31\1\u01ed"+
    "\7\31\13\0\1\6\10\0\1\6\2\0\3\31\6\0"+
    "\30\31\2\0\1\6\21\31\1\u01ee\10\31\13\0\1\6"+
    "\10\0\1\6\2\0\3\31\6\0\30\31\2\0\1\6"+
    "\14\31\1\u01ef\15\31\13\0\1\6\10\0\1\6\2\0"+
    "\3\31\6\0\30\31\2\0\1\6\4\31\1\u01f0\25\31"+
    "\13\0\1\6\10\0\1\u01f1\2\0\3\31\6\0\30\31"+
    "\2\0\1\6\32\31\13\0\1\6\10\0\1\6\2\0"+
    "\3\31\6\0\30\31\2\0\1\6\13\31\1\u01f2\16\31"+
    "\13\0\1\6\10\0\1\6\2\0\3\31\6\0\30\31"+
    "\2\0\1\6\23\31\1\u01f3\6\31\13\0\1\6\10\0"+
    "\1\6\2\0\3\31\6\0\30\31\2\0\1\6\6\31"+
    "\1\u01f4\23\31\13\0\1\6\10\0\1\6\2\0\3\31"+
    "\6\0\30\31\2\0\1\6\10\31\1\u01f5\21\31\13\0"+
    "\1\6\10\0\1\6\2\0\3\31\6\0\30\31\2\0"+
    "\1\6\15\31\1\u01f6\14\31\13\0\1\6\10\0\1\u01f7"+
    "\2\0\3\31\6\0\30\31\2\0\1\6\32\31\13\0"+
    "\1\6\10\0\1\6\2\0\3\31\6\0\30\31\2\0"+
    "\1\6\7\31\1\u01f8\22\31\3\0\1\213\1\u018d\2\213"+
    "\1\u018d\1\213\1\u01ad\124\213\1\u0111\61\213\1\u01f9\42\213"+
    "\1\u0111\102\213\1\u01fa\21\213\1\u0111\65\213\1\u01fb\36\213"+
    "\1\u0111\64\213\1\u01fc\37\213\1\u0111\61\213\1\u01fd\42\213"+
    "\1\u0111\63\213\1\u01fe\40\213\1\u0111\65\213\1\u01ff\36\213"+
    "\1\u0111\104\213\1\u0200\17\213\1\u0111\63\213\1\u0201\40\213"+
    "\1\u0111\105\213\1\u0202\16\213\1\u0111\70\213\1\u0203\33\213"+
    "\1\u0111\111\213\1\u0204\12\213\1\u0111\65\213\1\u0205\36\213"+
    "\1\u0111\104\213\1\u0206\17\213\1\u0111\104\213\1\u0207\17\213"+
    "\1\u0111\65\213\1\u0208\36\213\1\u0111\77\213\1\u0209\24\213"+
    "\1\u0111\111\213\1\u020a\12\213\1\u0111\62\213\1\u020b\41\213"+
    "\1\u0111\106\213\1\u020c\15\213\1\u0111\100\213\1\u020d\23\213"+
    "\1\u0111\71\213\1\u020e\25\213\1\u01a4\2\213\1\u01a4\1\213"+
    "\1\u01c4\124\213\1\u0111\70\213\1\u020f\26\213\1\u01a6\2\213"+
    "\1\u01a6\1\213\1\u01c6\124\213\1\u0111\103\213\1\u0210\20\213"+
    "\1\u0111\106\213\1\u0211\15\213\1\u0111\74\213\1\u0212\27\213"+
    "\1\u0111\104\213\1\u0213\17\213\1\u0111\104\213\1\u0214\17\213"+
    "\1\u0111\74\213\1\u0215\21\213\2\212\1\213\1\212\1\213"+
    "\1\212\1\u0110\74\212\1\u0216\23\212\1\213\1\212\1\213"+
    "\1\212\1\u0110\71\212\1\u0217\26\212\1\213\1\212\1\213"+
    "\1\212\1\u0110\106\212\1\u0218\11\212\1\213\1\212\1\213"+
    "\1\212\1\u0110\61\212\1\u0219\35\212\1\u01b2\1\213\1\212"+
    "\1\u01fd\1\212\1\u021a\120\212\1\213\1\212\1\213\1\212"+
    "\1\u0110\73\212\1\u021b\23\212\1\u01b4\1\213\1\212\1\u01ff"+
    "\1\212\1\u021c\120\212\1\213\1\212\1\213\1\212\1\u0110"+
    "\65\212\1\u021d\32\212\1\213\1\212\1\213\1\212\1\u0110"+
    "\73\212\1\u021e\24\212\1\213\1\212\1\213\1\212\1\u0110"+
    "\75\212\1\u021f\22\212\1\213\1\212\1\213\1\212\1\u0110"+
    "\103\212\1\u0220\13\212\1\u01b9\1\213\1\212\1\u0204\1\212"+
    "\1\u0221\120\212\1\213\1\212\1\213\1\212\1\u0110\76\212"+
    "\1\u0222\21\212\1\213\1\212\1\213\1\212\1\u0110\71\212"+
    "\1\u0223\25\212\1\u01bc\1\213\1\212\1\u0207\1\212\1\u0224"+
    "\117\212\1\u01bd\1\213\1\212\1\u0208\1\212\1\u0225\120\212"+
    "\1\213\1\212\1\213\1\212\1\u0110\77\212\1\u0226\17\212"+
    "\1\u01bf\1\213\1\212\1\u020a\1\212\1\u0227\120\212\1\213"+
    "\1\212\1\213\1\212\1\u0110\65\212\1\u0228\32\212\1\213"+
    "\1\212\1\213\1\212\1\u0110\65\212\1\u0229\32\212\1\213"+
    "\1\212\1\213\1\212\1\u0110\74\212\1\u022a\23\212\1\213"+
    "\1\212\1\213\1\212\1\u0110\77\212\1\u022b\20\212\1\213"+
    "\1\212\1\213\1\212\1\u0110\104\212\1\u022c\13\212\1\213"+
    "\1\212\1\213\1\212\1\u0110\12\212\1\u022d\105\212\1\213"+
    "\1\212\1\213\1\212\1\u0110\65\212\1\u022e\31\212\1\u01c9"+
    "\1\213\1\212\1\u0212\1\212\1\u022f\117\212\1\u01ca\1\213"+
    "\1\212\1\u0213\1\212\1\u0230\120\212\1\213\1\212\1\213"+
    "\1\212\1\u0110\65\212\1\u0231\32\212\1\213\1\212\1\213"+
    "\1\212\1\u0110\77\212\1\u0232\16\212\21\u01cd\1\u0233\103\u01cd"+
    "\21\0\1\u01ce\11\0\1\3\161\0\1\u0234\44\0\1\6"+
    "\10\0\1\6\2\0\3\31\6\0\30\31\2\0\1\u0235"+
    "\32\31\13\0\1\6\10\0\1\6\2\0\3\31\6\0"+
    "\22\31\1\u0236\5\31\2\0\1\6\32\31\13\0\1\6"+
    "\10\0\1\6\2\0\3\6\6\0\27\6\1\u0237\2\0"+
    "\31\6\1\u0237\1\6\13\0\1\6\10\0\1\6\2\0"+
    "\3\6\6\0\22\6\1\u0238\5\6\2\0\24\6\1\u0238"+
    "\6\6\13\0\1\6\10\0\1\6\2\0\3\6\6\0"+
    "\2\6\1\u0239\25\6\2\0\3\6\1\u0239\27\6\13\0"+
    "\1\6\10\0\1\6\2\0\3\6\6\0\3\6\1\u023a"+
    "\24\6\2\0\4\6\1\u023a\26\6\13\0\1\6\10\0"+
    "\1\6\2\0\3\6\6\0\23\6\1\u023b\4\6\2\0"+
    "\25\6\1\u023b\5\6\13\0\1\6\10\0\1\6\2\0"+
    "\3\6\6\0\12\6\1\u023c\15\6\2\0\13\6\1\u023c"+
    "\17\6\13\0\1\6\10\0\1\6\2\0\3\6\6\0"+
    "\10\6\1\u023d\17\6\2\0\11\6\1\u023d\21\6\13\0"+
    "\1\6\10\0\1\6\2\0\3\6\6\0\10\6\1\u023e"+
    "\17\6\2\0\11\6\1\u023e\21\6\13\0\1\6\10\0"+
    "\1\6\2\0\3\6\6\0\4\6\1\u023f\23\6\2\0"+
    "\5\6\1\u023f\25\6\13\0\1\6\10\0\1\6\2\0"+
    "\3\6\6\0\14\6\1\u0240\13\6\2\0\15\6\1\u0240"+
    "\15\6\13\0\1\6\10\0\1\6\2\0\3\6\6\0"+
    "\22\6\1\u0241\5\6\2\0\24\6\1\u0241\6\6\13\0"+
    "\1\6\10\0\1\6\2\0\3\6\6\0\13\6\1\u0242"+
    "\14\6\2\0\14\6\1\u0242\16\6\13\0\1\6\10\0"+
    "\1\6\2\0\3\31\6\0\13\31\1\u0243\14\31\2\0"+
    "\1\6\32\31\13\0\1\6\10\0\1\6\2\0\3\31"+
    "\6\0\22\31\1\u0244\5\31\2\0\1\6\32\31\13\0"+
    "\1\6\10\0\1\6\2\0\3\31\6\0\17\31\1\u0245"+
    "\10\31\2\0\1\6\32\31\13\0\1\6\10\0\1\6"+
    "\2\0\3\31\6\0\20\31\1\u0246\7\31\2\0\1\6"+
    "\32\31\13\0\1\6\10\0\1\6\2\0\3\6\6\0"+
    "\13\6\1\u0247\14\6\2\0\33\6\13\0\1\6\10\0"+
    "\1\6\2\0\3\6\6\0\1\u0248\27\6\2\0\33\6"+
    "\13\0\1\6\10\0\1\6\2\0\3\31\6\0\21\31"+
    "\1\u0249\6\31\2\0\1\6\32\31\13\0\1\6\10\0"+
    "\1\6\2\0\3\31\6\0\22\31\1\u024a\5\31\2\0"+
    "\1\6\32\31\13\0\1\6\10\0\1\6\2\0\3\31"+
    "\6\0\21\31\1\u024b\6\31\2\0\1\6\32\31\13\0"+
    "\1\6\10\0\1\6\2\0\3\31\6\0\7\31\1\u024c"+
    "\20\31\2\0\1\6\32\31\13\0\1\6\10\0\1\6"+
    "\2\0\3\31\6\0\30\31\2\0\1\6\21\31\1\u024d"+
    "\10\31\13\0\1\6\10\0\1\6\2\0\3\31\6\0"+
    "\30\31\2\0\1\6\1\u024e\31\31\13\0\1\6\10\0"+
    "\1\6\2\0\3\31\6\0\30\31\2\0\1\6\1\u024f"+
    "\31\31\13\0\1\6\10\0\1\6\2\0\3\6\6\0"+
    "\30\6\2\0\6\6\1\u0250\14\6\1\u0251\7\6\13\0"+
    "\1\6\10\0\1\6\2\0\3\31\6\0\30\31\2\0"+
    "\1\6\4\31\1\u0252\25\31\13\0\1\6\10\0\1\6"+
    "\2\0\3\31\6\0\30\31\2\0\1\6\7\31\1\u0253"+
    "\22\31\13\0\1\6\10\0\1\6\2\0\3\31\6\0"+
    "\30\31\2\0\1\6\4\31\1\u0254\25\31\13\0\1\6"+
    "\10\0\1\6\2\0\3\31\6\0\30\31\2\0\1\6"+
    "\2\31\1\u0255\27\31\13\0\1\6\10\0\1\6\2\0"+
    "\3\31\6\0\30\31\2\0\1\6\6\31\1\u0256\23\31"+
    "\13\0\1\6\10\0\1\6\2\0\3\6\6\0\30\6"+
    "\2\0\1\6\1\u0257\31\6\3\0\6\213\1\u0111\74\213"+
    "\1\u0258\27\213\1\u0111\71\213\1\u0259\32\213\1\u0111\106\213"+
    "\1\u025a\15\213\1\u0111\61\213\1\u025b\35\213\1\u01fd\2\213"+
    "\1\u01fd\1\213\1\u021a\124\213\1\u0111\73\213\1\u025c\23\213"+
    "\1\u01ff\2\213\1\u01ff\1\213\1\u021c\124\213\1\u0111\65\213"+
    "\1\u025d\36\213\1\u0111\73\213\1\u025e\30\213\1\u0111\75\213"+
    "\1\u025f\26\213\1\u0111\103\213\1\u0260\13\213\1\u0204\2\213"+
    "\1\u0204\1\213\1\u0221\124\213\1\u0111\76\213\1\u0261\25\213"+
    "\1\u0111\71\213\1\u0262\25\213\1\u0207\2\213\1\u0207\1\213"+
    "\1\u0224\117\213\1\u0208\2\213\1\u0208\1\213\1\u0225\124\213"+
    "\1\u0111\77\213\1\u0263\17\213\1\u020a\2\213\1\u020a\1\213"+
    "\1\u0227\124\213\1\u0111\65\213\1\u0264\36\213\1\u0111\65\213"+
    "\1\u0265\36\213\1\u0111\74\213\1\u0266\27\213\1\u0111\77\213"+
    "\1\u0267\24\213\1\u0111\104\213\1\u0268\17\213\1\u0111\12\213"+
    "\1\u0269\111\213\1\u0111\65\213\1\u026a\31\213\1\u0212\2\213"+
    "\1\u0212\1\213\1\u022f\117\213\1\u0213\2\213\1\u0213\1\213"+
    "\1\u0230\124\213\1\u0111\65\213\1\u026b\36\213\1\u0111\77\213"+
    "\1\u026c\16\213\1\212\1\u0216\1\213\1\212\1\u0258\1\212"+
    "\1\u026d\120\212\1\213\1\212\1\213\1\212\1\u0110\65\212"+
    "\1\u026e\32\212\1\213\1\212\1\213\1\212\1\u0110\61\212"+
    "\1\u026f\36\212\1\213\1\212\1\213\1\212\1\u0110\76\212"+
    "\1\u0270\20\212\1\u021b\1\213\1\212\1\u025c\1\212\1\u0271"+
    "\120\212\1\213\1\212\1\213\1\212\1\u0110\102\212\1\u0272"+
    "\15\212\1\213\1\212\1\213\1\212\1\u0110\62\212\1\u0273"+
    "\35\212\1\213\1\212\1\213\1\212\1\u0110\76\212\1\u0274"+
    "\21\212\1\213\1\212\1\213\1\212\1\u0110\71\212\1\u0275"+
    "\25\212\1\u0222\1\213\1\212\1\u0261\1\212\1\u0276\120\212"+
    "\1\213\1\212\1\213\1\212\1\u0110\66\212\1\u0277\31\212"+
    "\1\213\1\212\1\213\1\212\1\u0110\76\212\1\u0278\21\212"+
    "\1\213\1\212\1\213\1\212\1\u0110\102\212\1\u0279\14\212"+
    "\1\u0229\1\213\1\212\1\u0265\1\212\1\u027a\120\212\1\213"+
    "\1\212\1\213\1\212\1\u0110\65\212\1\u027b\31\212\1\u022b"+
    "\1\213\1\212\1\u0267\1\212\1\u027c\117\212\1\u022c\1\213"+
    "\1\212\1\u0268\1\212\1\u027d\120\212\1\213\1\212\1\213"+
    "\1\212\1\u0110\103\212\1\u027e\14\212\1\213\1\212\1\213"+
    "\1\212\1\u0110\102\212\1\u027f\14\212\1\u0231\1\213\1\212"+
    "\1\u026b\1\212\1\u0280\120\212\1\213\1\212\1\213\1\212"+
    "\1\u0110\107\212\1\u0281\6\212\21\u01cd\1\u0282\103\u01cd\103\0"+
    "\1\u0283\31\0\1\6\10\0\1\6\2\0\3\6\6\0"+
    "\10\6\1\u0284\17\6\2\0\33\6\13\0\1\6\10\0"+
    "\1\6\2\0\3\31\6\0\4\31\1\u0285\23\31\2\0"+
    "\1\6\32\31\13\0\1\6\10\0\1\6\2\0\3\6"+
    "\6\0\16\6\1\u0286\11\6\2\0\17\6\1\u0286\13\6"+
    "\13\0\1\6\10\0\1\6\2\0\3\6\6\0\22\6"+
    "\1\u0287\5\6\2\0\24\6\1\u0287\6\6\13\0\1\6"+
    "\10\0\1\6\2\0\3\6\6\0\16\6\1\u0288\11\6"+
    "\2\0\17\6\1\u0288\13\6\13\0\1\6\10\0\1\6"+
    "\2\0\3\6\6\0\17\6\1\u0289\10\6\2\0\20\6"+
    "\1\u0289\12\6\13\0\1\6\10\0\1\6\2\0\3\6"+
    "\6\0\2\6\1\u028a\25\6\2\0\3\6\1\u028a\27\6"+
    "\13\0\1\6\10\0\1\6\2\0\3\6\6\0\1\u028b"+
    "\27\6\2\0\1\6\1\u028b\31\6\13\0\1\6\10\0"+
    "\1\6\2\0\3\6\6\0\4\6\1\u028c\23\6\2\0"+
    "\5\6\1\u028c\25\6\13\0\1\6\10\0\1\6\2\0"+
    "\3\31\6\0\1\u028d\27\31\2\0\1\6\32\31\13\0"+
    "\1\6\10\0\1\6\2\0\3\31\6\0\30\31\2\0"+
    "\1\u028e\32\31\13\0\1\6\10\0\1\6\2\0\3\6"+
    "\6\0\4\6\1\u028f\23\6\2\0\33\6\13\0\1\6"+
    "\10\0\1\6\2\0\3\6\6\0\3\6\1\u0290\24\6"+
    "\2\0\33\6\13\0\1\6\10\0\1\6\2\0\3\31"+
    "\6\0\21\31\1\u0291\6\31\2\0\1\6\32\31\13\0"+
    "\1\6\10\0\1\6\2\0\3\31\6\0\4\31\1\u0292"+
    "\23\31\2\0\1\6\32\31\13\0\1\6\10\0\1\6"+
    "\2\0\3\31\6\0\10\31\1\u0293\17\31\2\0\1\6"+
    "\32\31\13\0\1\6\10\0\1\6\2\0\3\31\6\0"+
    "\30\31\2\0\1\6\16\31\1\u0294\13\31\13\0\1\6"+
    "\10\0\1\6\2\0\3\31\6\0\30\31\2\0\1\6"+
    "\15\31\1\u0295\14\31\13\0\1\6\10\0\1\6\2\0"+
    "\3\31\6\0\30\31\2\0\1\6\13\31\1\u0296\16\31"+
    "\13\0\1\6\10\0\1\6\2\0\3\6\6\0\30\6"+
    "\2\0\1\6\1\u0297\31\6\13\0\1\6\10\0\1\6"+
    "\2\0\3\6\6\0\30\6\2\0\11\6\1\u0298\21\6"+
    "\13\0\1\6\10\0\1\6\2\0\3\31\6\0\30\31"+
    "\2\0\1\6\14\31\1\u0299\15\31\13\0\1\6\10\0"+
    "\1\6\2\0\3\31\6\0\30\31\2\0\1\6\21\31"+
    "\1\u029a\10\31\13\0\1\6\10\0\1\6\2\0\3\31"+
    "\6\0\30\31\2\0\1\6\12\31\1\u029b\17\31\13\0"+
    "\1\6\10\0\1\6\2\0\3\6\6\0\30\6\2\0"+
    "\14\6\1\u029c\16\6\3\0\1\213\1\u0258\2\213\1\u0258"+
    "\1\213\1\u026d\124\213\1\u0111\65\213\1\u029d\36\213\1\u0111"+
    "\61\213\1\u029e\42\213\1\u0111\76\213\1\u029f\20\213\1\u025c"+
    "\2\213\1\u025c\1\213\1\u0271\124\213\1\u0111\102\213\1\u02a0"+
    "\21\213\1\u0111\62\213\1\u02a1\41\213\1\u0111\76\213\1\u02a2"+
    "\25\213\1\u0111\71\213\1\u02a3\25\213\1\u0261\2\213\1\u0261"+
    "\1\213\1\u0276\124\213\1\u0111\66\213\1\u02a4\35\213\1\u0111"+
    "\76\213\1\u02a5\25\213\1\u0111\102\213\1\u02a6\14\213\1\u0265"+
    "\2\213\1\u0265\1\213\1\u027a\124\213\1\u0111\65\213\1\u02a7"+
    "\31\213\1\u0267\2\213\1\u0267\1\213\1\u027c\117\213\1\u0268"+
    "\2\213\1\u0268\1\213\1\u027d\124\213\1\u0111\103\213\1\u02a8"+
    "\20\213\1\u0111\102\213\1\u02a9\14\213\1\u026b\2\213\1\u026b"+
    "\1\213\1\u0280\124\213\1\u0111\107\213\1\u02aa\6\213\2\212"+
    "\1\213\1\212\1\213\1\212\1\u0110\102\212\1\u02ab\14\212"+
    "\1\u026f\1\213\1\212\1\u029e\1\212\1\u02ac\120\212\1\213"+
    "\1\212\1\213\1\212\1\u0110\61\212\1\u02ad\35\212\1\u0272"+
    "\1\213\1\212\1\u02a0\1\212\1\u02ae\120\212\1\213\1\212"+
    "\1\213\1\212\1\u0110\77\212\1\u02af\17\212\1\u0274\1\213"+
    "\1\212\1\u02a2\1\212\1\u02b0\120\212\1\213\1\212\1\213"+
    "\1\212\1\u0110\61\212\1\u02b1\36\212\1\213\1\212\1\213"+
    "\1\212\1\u0110\111\212\1\u02b2\5\212\1\u0278\1\213\1\212"+
    "\1\u02a5\1\212\1\u02b3\117\212\1\u0279\1\213\1\212\1\u02a6"+
    "\1\212\1\u02b4\117\212\1\u027b\1\213\1\212\1\u02a7\1\212"+
    "\1\u02b5\120\212\1\213\1\212\1\213\1\212\1\u0110\65\212"+
    "\1\u02b6\31\212\1\u027f\1\213\1\212\1\u02a9\1\212\1\u02b7"+
    "\117\212\1\u0281\1\213\1\212\1\u02aa\1\212\1\u02b8\116\212"+
    "\21\u01cd\1\u0282\11\u01cd\1\3\71\u01cd\10\0\1\6\10\0"+
    "\1\6\2\0\3\6\6\0\15\6\1\u02b9\12\6\2\0"+
    "\33\6\13\0\1\6\10\0\1\6\2\0\3\31\6\0"+
    "\20\31\1\u02ba\7\31\2\0\1\6\32\31\13\0\1\6"+
    "\10\0\1\6\2\0\3\6\6\0\15\6\1\u02bb\12\6"+
    "\2\0\16\6\1\u02bb\14\6\13\0\1\6\10\0\1\6"+
    "\2\0\3\6\6\0\15\6\1\u02bc\12\6\2\0\16\6"+
    "\1\u02bc\14\6\13\0\1\6\10\0\1\6\2\0\3\6"+
    "\6\0\22\6\1\u02bd\5\6\2\0\24\6\1\u02bd\6\6"+
    "\13\0\1\6\10\0\1\6\2\0\3\6\6\0\22\6"+
    "\1\u02be\5\6\2\0\24\6\1\u02be\6\6\13\0\1\6"+
    "\10\0\1\6\2\0\3\6\6\0\20\6\1\u02bf\7\6"+
    "\2\0\22\6\1\u02bf\10\6\13\0\1\6\10\0\1\6"+
    "\2\0\3\31\6\0\20\31\1\u02c0\7\31\2\0\1\6"+
    "\32\31\13\0\1\6\10\0\1\6\2\0\3\6\6\0"+
    "\15\6\1\u02c1\12\6\2\0\33\6\13\0\1\6\10\0"+
    "\1\6\2\0\3\6\6\0\1\u02c2\27\6\2\0\33\6"+
    "\13\0\1\6\10\0\1\6\2\0\3\31\6\0\30\31"+
    "\2\0\1\u02c3\32\31\13\0\1\6\10\0\1\6\2\0"+
    "\3\31\6\0\13\31\1\u02c4\14\31\2\0\1\6\32\31"+
    "\13\0\1\6\10\0\1\6\2\0\3\31\6\0\30\31"+
    "\2\0\1\6\24\31\1\u02c5\5\31\13\0\1\6\10\0"+
    "\1\6\2\0\3\6\6\0\30\6\2\0\15\6\1\u02c6"+
    "\15\6\13\0\1\6\10\0\1\6\2\0\3\6\6\0"+
    "\30\6\2\0\32\6\1\u02c7\13\0\1\6\10\0\1\6"+
    "\2\0\3\31\6\0\30\31\2\0\1\6\4\31\1\u02c8"+
    "\25\31\13\0\1\6\10\0\1\6\2\0\3\6\6\0"+
    "\30\6\2\0\11\6\1\u02c9\21\6\3\0\6\213\1\u0111"+
    "\102\213\1\u02ca\14\213\1\u029e\2\213\1\u029e\1\213\1\u02ac"+
    "\124\213\1\u0111\61\213\1\u02cb\35\213\1\u02a0\2\213\1\u02a0"+
    "\1\213\1\u02ae\124\213\1\u0111\77\213\1\u02cc\17\213\1\u02a2"+
    "\2\213\1\u02a2\1\213\1\u02b0\124\213\1\u0111\61\213\1\u02cd"+
    "\42\213\1\u0111\111\213\1\u02ce\5\213\1\u02a5\2\213\1\u02a5"+
    "\1\213\1\u02b3\117\213\1\u02a6\2\213\1\u02a6\1\213\1\u02b4"+
    "\117\213\1\u02a7\2\213\1\u02a7\1\213\1\u02b5\124\213\1\u0111"+
    "\65\213\1\u02cf\31\213\1\u02a9\2\213\1\u02a9\1\213\1\u02b7"+
    "\117\213\1\u02aa\2\213\1\u02aa\1\213\1\u02b8\116\213\1\212"+
    "\1\u02ab\1\213\1\212\1\u02ca\1\212\1\u02d0\117\212\1\u02ad"+
    "\1\213\1\212\1\u02cb\1\212\1\u02d1\120\212\1\213\1\212"+
    "\1\213\1\212\1\u0110\110\212\1\u02d2\6\212\1\u02b1\1\213"+
    "\1\212\1\u02cd\1\212\1\u02d3\117\212\1\u02b2\1\213\1\212"+
    "\1\u02ce\1\212\1\u02d4\120\212\1\213\1\212\1\213\1\212"+
    "\1\u0110\102\212\1\u02d5\13\212\10\0\1\6\10\0\1\6"+
    "\2\0\3\6\6\0\5\6\1\u02d6\22\6\2\0\33\6"+
    "\13\0\1\6\10\0\1\6\2\0\3\31\6\0\30\31"+
    "\2\0\1\u02d7\32\31\13\0\1\6\10\0\1\6\2\0"+
    "\3\6\6\0\10\6\1\u02d8\17\6\2\0\11\6\1\u02d8"+
    "\21\6\13\0\1\6\10\0\1\6\2\0\3\6\6\0"+
    "\4\6\1\u02d9\23\6\2\0\5\6\1\u02d9\25\6\13\0"+
    "\1\6\10\0\1\6\2\0\3\31\6\0\30\31\2\0"+
    "\1\u02da\32\31\13\0\1\6\10\0\1\6\2\0\3\6"+
    "\6\0\23\6\1\u02db\4\6\2\0\33\6\13\0\1\6"+
    "\10\0\1\6\2\0\3\6\6\0\22\6\1\u02dc\5\6"+
    "\2\0\33\6\13\0\1\6\10\0\1\6\2\0\3\u02dd"+
    "\6\0\30\u02dd\2\0\1\6\32\u02dd\13\0\1\6\10\0"+
    "\1\6\2\0\3\31\6\0\4\31\1\u02de\23\31\2\0"+
    "\1\6\32\31\13\0\1\6\10\0\1\6\2\0\3\31"+
    "\6\0\30\31\2\0\1\6\15\31\1\u02df\14\31\13\0"+
    "\1\6\10\0\1\6\2\0\3\6\6\0\30\6\2\0"+
    "\11\6\1\u02e0\21\6\13\0\1\6\10\0\1\6\2\0"+
    "\3\6\6\0\30\6\2\0\5\6\1\u02e1\25\6\13\0"+
    "\1\6\10\0\1\6\2\0\3\31\6\0\30\31\2\0"+
    "\1\6\15\31\1\u02e2\14\31\13\0\1\6\10\0\1\6"+
    "\2\0\3\6\6\0\30\6\2\0\7\6\1\u02e3\23\6"+
    "\3\0\1\213\1\u02ca\2\213\1\u02ca\1\213\1\u02d0\117\213"+
    "\1\u02cb\2\213\1\u02cb\1\213\1\u02d1\124\213\1\u0111\110\213"+
    "\1\u02e4\6\213\1\u02cd\2\213\1\u02cd\1\213\1\u02d3\117\213"+
    "\1\u02ce\2\213\1\u02ce\1\213\1\u02d4\124\213\1\u0111\102\213"+
    "\1\u02e5\13\213\1\212\1\u02d2\1\213\1\212\1\u02e4\1\212"+
    "\1\u02e6\120\212\1\213\1\212\1\213\1\212\1\u0110\71\212"+
    "\1\u02e7\24\212\10\0\1\6\10\0\1\6\2\0\3\6"+
    "\6\0\16\6\1\u02e8\11\6\2\0\33\6\13\0\1\6"+
    "\10\0\1\6\2\0\3\6\6\0\1\u02e9\27\6\2\0"+
    "\33\6\13\0\1\6\10\0\1\6\2\0\3\6\6\0"+
    "\15\6\1\u02ea\12\6\2\0\16\6\1\u02ea\14\6\13\0"+
    "\1\6\10\0\1\6\2\0\3\6\6\0\1\u02eb\27\6"+
    "\2\0\1\6\1\u02eb\31\6\13\0\1\6\10\0\1\6"+
    "\2\0\3\6\6\0\15\6\1\u02ec\12\6\2\0\33\6"+
    "\13\0\1\6\10\0\1\6\2\0\3\6\6\0\14\6"+
    "\1\u02ed\13\6\2\0\33\6\13\0\1\6\10\0\1\6"+
    "\2\0\3\6\6\0\16\6\1\u02ee\11\6\2\0\33\6"+
    "\13\0\1\6\10\0\1\6\2\0\3\31\6\0\30\31"+
    "\2\0\1\6\3\31\1\u02ef\26\31\13\0\1\6\10\0"+
    "\1\6\2\0\3\6\6\0\30\6\2\0\14\6\1\u02f0"+
    "\16\6\13\0\1\6\10\0\1\6\2\0\3\31\6\0"+
    "\30\31\2\0\1\6\23\31\1\u02f1\6\31\13\0\1\6"+
    "\10\0\1\6\2\0\3\6\6\0\30\6\2\0\16\6"+
    "\1\u02f2\14\6\3\0\1\213\1\u02e4\2\213\1\u02e4\1\213"+
    "\1\u02e6\124\213\1\u0111\71\213\1\u02f3\24\213\2\212\1\213"+
    "\1\212\1\213\1\212\1\u0110\66\212\1\u02f4\27\212\10\0"+
    "\1\6\10\0\1\6\2\0\3\6\6\0\13\6\1\u02f5"+
    "\14\6\2\0\33\6\13\0\1\6\10\0\1\6\2\0"+
    "\3\6\6\0\6\6\1\u02f6\21\6\2\0\7\6\1\u02f6"+
    "\23\6\13\0\1\6\10\0\1\6\2\0\3\6\6\0"+
    "\23\6\1\u02f7\4\6\2\0\33\6\13\0\1\6\10\0"+
    "\1\6\2\0\3\6\6\0\20\6\1\u02f8\7\6\2\0"+
    "\33\6\13\0\1\6\10\0\1\6\2\0\3\6\6\0"+
    "\30\6\2\0\31\6\1\u02f9\1\6\13\0\1\6\10\0"+
    "\1\6\2\0\3\31\6\0\1\31\1\u02fa\26\31\2\0"+
    "\1\6\32\31\3\0\6\213\1\u0111\66\213\1\u02fb\27\213"+
    "\1\212\1\u02f4\1\213\1\212\1\u02fb\1\212\1\u02fc\116\212"+
    "\10\0\1\6\10\0\1\6\2\0\3\6\6\0\4\6"+
    "\1\u02fd\23\6\2\0\33\6\13\0\1\6\10\0\1\6"+
    "\2\0\3\6\6\0\14\6\1\u02fe\13\6\2\0\33\6"+
    "\13\0\1\6\10\0\1\6\2\0\3\6\6\0\10\6"+
    "\1\u02ff\17\6\2\0\33\6\13\0\1\6\10\0\1\6"+
    "\2\0\3\31\6\0\30\31\2\0\1\6\30\31\1\u0300"+
    "\1\31\3\0\1\213\1\u02fb\2\213\1\u02fb\1\213\1\u02fc"+
    "\116\213\10\0\1\6\10\0\1\6\2\0\3\6\6\0"+
    "\1\u0301\27\6\2\0\33\6\13\0\1\6\10\0\1\6"+
    "\2\0\3\6\6\0\16\6\1\u0302\11\6\2\0\33\6"+
    "\13\0\1\6\10\0\1\6\2\0\3\31\6\0\10\31"+
    "\1\u0303\17\31\2\0\1\6\32\31\13\0\1\6\10\0"+
    "\1\6\2\0\3\6\6\0\22\6\1\u0304\5\6\2\0"+
    "\33\6\13\0\1\6\10\0\1\6\2\0\3\31\6\0"+
    "\30\31\2\0\1\6\3\31\1\u0305\26\31\13\0\1\6"+
    "\10\0\1\6\2\0\3\6\6\0\16\6\1\u0306\11\6"+
    "\2\0\33\6\13\0\1\6\10\0\1\6\2\0\3\6"+
    "\6\0\20\6\1\u0307\7\6\2\0\33\6\13\0\1\6"+
    "\10\0\1\6\2\0\3\6\6\0\10\6\1\u0308\17\6"+
    "\2\0\33\6\13\0\1\6\10\0\1\6\2\0\3\6"+
    "\6\0\16\6\1\u0309\11\6\2\0\33\6\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[55760];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\5\1\5\11\1\1\1\11\2\1\2\11"+
    "\22\1\2\11\16\1\1\11\1\1\1\11\1\1\1\11"+
    "\33\0\1\11\1\0\3\1\1\0\3\11\1\0\51\1"+
    "\1\11\2\0\1\11\57\0\1\11\36\0\1\11\2\0"+
    "\62\1\2\11\41\0\2\11\42\0\66\1\40\0\1\11"+
    "\26\0\1\11\1\0\1\11\11\0\51\1\41\0\1\11"+
    "\1\0\1\11\4\0\1\11\2\0\2\11\1\0\1\11"+
    "\7\0\2\11\4\0\43\1\25\0\1\11\3\0\1\11"+
    "\4\0\1\11\3\0\1\11\1\0\2\11\2\0\1\11"+
    "\2\0\1\11\31\1\17\0\1\11\1\0\1\11\1\0"+
    "\1\11\2\0\3\11\1\0\2\11\21\1\6\0\2\11"+
    "\1\0\2\11\1\0\16\1\2\0\1\11\1\0\13\1"+
    "\2\0\6\1\1\0\1\11\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[777];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    /* CODIGO A√ëADIDO */    


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public EtiquetadoLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    /* CODIGO EJECUTADO AL FINAL DEL ANALISIS */
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(EtiquetadoParserSym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 135: break;
          case 2:
            { /* IGNORAR */
            }
            // fall through
          case 136: break;
          case 3:
            { return new Symbol(NOT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 137: break;
          case 4:
            { return new Symbol(IDENTIFICADOR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 138: break;
          case 5:
            { return new Symbol(COM_SIMP, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 139: break;
          case 6:
            { return new Symbol(PARA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 140: break;
          case 7:
            { return new Symbol(PARC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 141: break;
          case 8:
            { return new Symbol(MULTIPLICACION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 142: break;
          case 9:
            { return new Symbol(SUMA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 143: break;
          case 10:
            { return new Symbol(COMA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 144: break;
          case 11:
            { return new Symbol(RESTA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 145: break;
          case 12:
            { return new Symbol(DIVISION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 146: break;
          case 13:
            { return new Symbol(D_INTEGER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 147: break;
          case 14:
            { return new Symbol(PUNTOS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 148: break;
          case 15:
            { return new Symbol(PUNTO_COMA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 149: break;
          case 16:
            { return new Symbol(MENOR_QUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 150: break;
          case 17:
            { return new Symbol(IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 151: break;
          case 18:
            { return new Symbol(MAYOR_QUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 152: break;
          case 19:
            { return new Symbol(ALFANUMERICO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 153: break;
          case 20:
            { return new Symbol(CORA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 154: break;
          case 21:
            { return new Symbol(CORC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 155: break;
          case 22:
            { return new Symbol(LLAA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 156: break;
          case 23:
            { return new Symbol(BARRA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 157: break;
          case 24:
            { return new Symbol(LLAC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 158: break;
          case 25:
            { return new Symbol(DIFERENTE_IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 159: break;
          case 26:
            { return new Symbol(AND, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 160: break;
          case 27:
            { return new Symbol(D_DECIMAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 161: break;
          case 28:
            { return new Symbol(MENOR_IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 162: break;
          case 29:
            { return new Symbol(IGUAL_IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 163: break;
          case 30:
            { return new Symbol(MAYOR_IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 164: break;
          case 31:
            { return new Symbol(IF, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 165: break;
          case 32:
            { return new Symbol(ID, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 166: break;
          case 33:
            { return new Symbol(OR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 167: break;
          case 34:
            { return new Symbol(D_STRING, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 168: break;
          case 35:
            { return new Symbol(DIGITO_COM, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 169: break;
          case 36:
            { return new Symbol(D_CHAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 170: break;
          case 37:
            { return new Symbol(ASC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 171: break;
          case 38:
            { return new Symbol(P, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 172: break;
          case 39:
            { return new Symbol(END, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 173: break;
          case 40:
            { return new Symbol(ALT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 174: break;
          case 41:
            { return new Symbol(SRC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 175: break;
          case 42:
            { return new Symbol(ALLCHARNOSPACE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 176: break;
          case 43:
            { return new Symbol(ALLCHAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 177: break;
          case 44:
            { return new Symbol(HEXADECIMAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 178: break;
          case 45:
            { return new Symbol(PORCENTAJE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 179: break;
          case 46:
            { return new Symbol(BR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 180: break;
          case 47:
            { return new Symbol(H1, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 181: break;
          case 48:
            { return new Symbol(DESC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 182: break;
          case 49:
            { return new Symbol(ELSE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 183: break;
          case 50:
            { return new Symbol(EXIT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 184: break;
          case 51:
            { return new Symbol(INIT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 185: break;
          case 52:
            { return new Symbol(THEN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 186: break;
          case 53:
            { return new Symbol(CHAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 187: break;
          case 54:
            { return new Symbol(COLS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 188: break;
          case 55:
            { return new Symbol(HREF, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 189: break;
          case 56:
            { return new Symbol(NAME, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 190: break;
          case 57:
            { return new Symbol(ROWS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 191: break;
          case 58:
            { return new Symbol(TRUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 192: break;
          case 59:
            { return new Symbol(TYPE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 193: break;
          case 60:
            { return new Symbol(PIXELES, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 194: break;
          case 61:
            { return new Symbol(RED, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 195: break;
          case 62:
            { return new Symbol(ROW, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 196: break;
          case 63:
            { return new Symbol(DIV, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 197: break;
          case 64:
            { return new Symbol(IMG, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 198: break;
          case 65:
            { return new Symbol(WHILE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 199: break;
          case 66:
            { return new Symbol(CLASS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 200: break;
          case 67:
            { return new Symbol(COLOR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 201: break;
          case 68:
            { return new Symbol(FALSE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 202: break;
          case 69:
            { return new Symbol(WIDTH, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 203: break;
          case 70:
            { return new Symbol(AQUA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 204: break;
          case 71:
            { return new Symbol(BLUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 205: break;
          case 72:
            { return new Symbol(GRAY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 206: break;
          case 73:
            { return new Symbol(LEFT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 207: break;
          case 74:
            { return new Symbol(LIME, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 208: break;
          case 75:
            { return new Symbol(NAVY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 209: break;
          case 76:
            { return new Symbol(TEAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 210: break;
          case 77:
            { return new Symbol(TEXT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 211: break;
          case 78:
            { return new Symbol(BODY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 212: break;
          case 79:
            { return new Symbol(GCIC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 213: break;
          case 80:
            { return new Symbol(HEAD, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 214: break;
          case 81:
            { return new Symbol(LINK, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 215: break;
          case 82:
            { return new Symbol(SPAM, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 216: break;
          case 83:
            { return new Symbol(HUNTIL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 217: break;
          case 84:
            { return new Symbol(INSERT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 218: break;
          case 85:
            { return new Symbol(REPEAT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 219: break;
          case 86:
            { return new Symbol(HEIGHT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 220: break;
          case 87:
            { return new Symbol(STRING, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 221: break;
          case 88:
            { return new Symbol(ARIAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 222: break;
          case 89:
            { return new Symbol(BLACK, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 223: break;
          case 90:
            { return new Symbol(GREEN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 224: break;
          case 91:
            { return new Symbol(OLIVE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 225: break;
          case 92:
            { return new Symbol(RADIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 226: break;
          case 93:
            { return new Symbol(RIGHT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 227: break;
          case 94:
            { return new Symbol(WHITE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 228: break;
          case 95:
            { return new Symbol(GLOBAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 229: break;
          case 96:
            { return new Symbol(INPUT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 230: break;
          case 97:
            { return new Symbol(TITLE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 231: break;
          case 98:
            { return new Symbol(ON_LOAD, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 232: break;
          case 99:
            { return new Symbol(REVERSE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 233: break;
          case 100:
            { return new Symbol(BOOLEAN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 234: break;
          case 101:
            { return new Symbol(DECIMAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 235: break;
          case 102:
            { return new Symbol(INTEGER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 236: break;
          case 103:
            { return new Symbol(ONCLICK, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 237: break;
          case 104:
            { return new Symbol(GENEVA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 238: break;
          case 105:
            { return new Symbol(CENTER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 239: break;
          case 106:
            { return new Symbol(COLUMN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 240: break;
          case 107:
            { return new Symbol(MAROON, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 241: break;
          case 108:
            { return new Symbol(NUMBER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 242: break;
          case 109:
            { return new Symbol(PURPLE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 243: break;
          case 110:
            { return new Symbol(SILVER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 244: break;
          case 111:
            { return new Symbol(YELLOW, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 245: break;
          case 112:
            { return new Symbol(BUTTON, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 246: break;
          case 113:
            { return new Symbol(OPTION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 247: break;
          case 114:
            { return new Symbol(SELECT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 248: break;
          case 115:
            { return new Symbol(COURIER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 249: break;
          case 116:
            { return new Symbol(VERDANA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 250: break;
          case 117:
            { return new Symbol(FUCHSIA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 251: break;
          case 118:
            { return new Symbol(JUSTIFY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 252: break;
          case 119:
            { return new Symbol(PROCESS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 253: break;
          case 120:
            { return new Symbol(THENWHILE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 254: break;
          case 121:
            { return new Symbol(FONTSIZE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 255: break;
          case 122:
            { return new Symbol(CHECKBOX, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 256: break;
          case 123:
            { return new Symbol(ALERT_INFO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 257: break;
          case 124:
            { return new Symbol(TEXTAREA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 258: break;
          case 125:
            { return new Symbol(LETPAR_NUM, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 259: break;
          case 126:
            { return new Symbol(BACKGROUND, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 260: break;
          case 127:
            { return new Symbol(TEXTALIGN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 261: break;
          case 128:
            { return new Symbol(SCRIPTING, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 262: break;
          case 129:
            { return new Symbol(FONTFAMILY, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 263: break;
          case 130:
            { return new Symbol(SANS_SERIF, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 264: break;
          case 131:
            { return new Symbol(LETIMPAR_NUM, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 265: break;
          case 132:
            { return new Symbol(NUM_ALEATORIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 266: break;
          case 133:
            { return new Symbol(GETBYID, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 267: break;
          case 134:
            { return new Symbol(CARACTER_ALEATORIO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 268: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}